
STM32_st7567a_DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f98  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  08008058  08008058  00009058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009938  08009938  0000b208  2**0
                  CONTENTS
  4 .ARM          00000000  08009938  08009938  0000b208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009938  08009938  0000b208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009938  08009938  0000a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800993c  0800993c  0000a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08009940  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000208  08009b48  0000b208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08009b48  0000b828  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a94e  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e67  00000000  00000000  00015b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000179e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000954  00000000  00000000  00018618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113b9  00000000  00000000  00018f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e855  00000000  00000000  0002a325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000655a4  00000000  00000000  00038b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e11e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  0009e164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a1e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008040 	.word	0x08008040

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	08008040 	.word	0x08008040

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f935 	bl	80016ac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f875 	bl	800153c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f927 	bl	80016ac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f91d 	bl	80016ac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f89f 	bl	80015c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f895 	bl	80015c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	0045      	lsls	r5, r0, #1
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	4699      	mov	r9, r3
 80004ba:	1c0f      	adds	r7, r1, #0
 80004bc:	0e2d      	lsrs	r5, r5, #24
 80004be:	0fc6      	lsrs	r6, r0, #31
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_fmul+0x1e>
 80004c4:	e088      	b.n	80005d8 <__aeabi_fmul+0x130>
 80004c6:	2dff      	cmp	r5, #255	@ 0xff
 80004c8:	d100      	bne.n	80004cc <__aeabi_fmul+0x24>
 80004ca:	e08d      	b.n	80005e8 <__aeabi_fmul+0x140>
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	04d2      	lsls	r2, r2, #19
 80004d2:	431a      	orrs	r2, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	4691      	mov	r9, r2
 80004d8:	4698      	mov	r8, r3
 80004da:	469a      	mov	sl, r3
 80004dc:	3d7f      	subs	r5, #127	@ 0x7f
 80004de:	027c      	lsls	r4, r7, #9
 80004e0:	007b      	lsls	r3, r7, #1
 80004e2:	0a64      	lsrs	r4, r4, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	0fff      	lsrs	r7, r7, #31
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d068      	beq.n	80005be <__aeabi_fmul+0x116>
 80004ec:	2bff      	cmp	r3, #255	@ 0xff
 80004ee:	d021      	beq.n	8000534 <__aeabi_fmul+0x8c>
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	00e4      	lsls	r4, r4, #3
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4314      	orrs	r4, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	3b7f      	subs	r3, #127	@ 0x7f
 80004fc:	195b      	adds	r3, r3, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	1c5d      	adds	r5, r3, #1
 8000502:	2a0a      	cmp	r2, #10
 8000504:	dc2e      	bgt.n	8000564 <__aeabi_fmul+0xbc>
 8000506:	407e      	eors	r6, r7
 8000508:	4642      	mov	r2, r8
 800050a:	2a02      	cmp	r2, #2
 800050c:	dc23      	bgt.n	8000556 <__aeabi_fmul+0xae>
 800050e:	3a01      	subs	r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d900      	bls.n	8000516 <__aeabi_fmul+0x6e>
 8000514:	e0bd      	b.n	8000692 <__aeabi_fmul+0x1ea>
 8000516:	2902      	cmp	r1, #2
 8000518:	d06e      	beq.n	80005f8 <__aeabi_fmul+0x150>
 800051a:	2901      	cmp	r1, #1
 800051c:	d12c      	bne.n	8000578 <__aeabi_fmul+0xd0>
 800051e:	2000      	movs	r0, #0
 8000520:	2200      	movs	r2, #0
 8000522:	05c0      	lsls	r0, r0, #23
 8000524:	07f6      	lsls	r6, r6, #31
 8000526:	4310      	orrs	r0, r2
 8000528:	4330      	orrs	r0, r6
 800052a:	bce0      	pop	{r5, r6, r7}
 800052c:	46ba      	mov	sl, r7
 800052e:	46b1      	mov	r9, r6
 8000530:	46a8      	mov	r8, r5
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	002b      	movs	r3, r5
 8000536:	33ff      	adds	r3, #255	@ 0xff
 8000538:	2c00      	cmp	r4, #0
 800053a:	d065      	beq.n	8000608 <__aeabi_fmul+0x160>
 800053c:	2203      	movs	r2, #3
 800053e:	4641      	mov	r1, r8
 8000540:	4311      	orrs	r1, r2
 8000542:	0032      	movs	r2, r6
 8000544:	3501      	adds	r5, #1
 8000546:	4688      	mov	r8, r1
 8000548:	407a      	eors	r2, r7
 800054a:	35ff      	adds	r5, #255	@ 0xff
 800054c:	290a      	cmp	r1, #10
 800054e:	dd00      	ble.n	8000552 <__aeabi_fmul+0xaa>
 8000550:	e0d8      	b.n	8000704 <__aeabi_fmul+0x25c>
 8000552:	0016      	movs	r6, r2
 8000554:	2103      	movs	r1, #3
 8000556:	4640      	mov	r0, r8
 8000558:	2201      	movs	r2, #1
 800055a:	4082      	lsls	r2, r0
 800055c:	20a6      	movs	r0, #166	@ 0xa6
 800055e:	00c0      	lsls	r0, r0, #3
 8000560:	4202      	tst	r2, r0
 8000562:	d020      	beq.n	80005a6 <__aeabi_fmul+0xfe>
 8000564:	4653      	mov	r3, sl
 8000566:	2b02      	cmp	r3, #2
 8000568:	d046      	beq.n	80005f8 <__aeabi_fmul+0x150>
 800056a:	2b03      	cmp	r3, #3
 800056c:	d100      	bne.n	8000570 <__aeabi_fmul+0xc8>
 800056e:	e0bb      	b.n	80006e8 <__aeabi_fmul+0x240>
 8000570:	4651      	mov	r1, sl
 8000572:	464c      	mov	r4, r9
 8000574:	2901      	cmp	r1, #1
 8000576:	d0d2      	beq.n	800051e <__aeabi_fmul+0x76>
 8000578:	002b      	movs	r3, r5
 800057a:	337f      	adds	r3, #127	@ 0x7f
 800057c:	2b00      	cmp	r3, #0
 800057e:	dd70      	ble.n	8000662 <__aeabi_fmul+0x1ba>
 8000580:	0762      	lsls	r2, r4, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fmul+0xe6>
 8000584:	220f      	movs	r2, #15
 8000586:	4022      	ands	r2, r4
 8000588:	2a04      	cmp	r2, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fmul+0xe6>
 800058c:	3404      	adds	r4, #4
 800058e:	0122      	lsls	r2, r4, #4
 8000590:	d503      	bpl.n	800059a <__aeabi_fmul+0xf2>
 8000592:	4b63      	ldr	r3, [pc, #396]	@ (8000720 <__aeabi_fmul+0x278>)
 8000594:	401c      	ands	r4, r3
 8000596:	002b      	movs	r3, r5
 8000598:	3380      	adds	r3, #128	@ 0x80
 800059a:	2bfe      	cmp	r3, #254	@ 0xfe
 800059c:	dc2c      	bgt.n	80005f8 <__aeabi_fmul+0x150>
 800059e:	01a2      	lsls	r2, r4, #6
 80005a0:	0a52      	lsrs	r2, r2, #9
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	e7bd      	b.n	8000522 <__aeabi_fmul+0x7a>
 80005a6:	2090      	movs	r0, #144	@ 0x90
 80005a8:	0080      	lsls	r0, r0, #2
 80005aa:	4202      	tst	r2, r0
 80005ac:	d127      	bne.n	80005fe <__aeabi_fmul+0x156>
 80005ae:	38b9      	subs	r0, #185	@ 0xb9
 80005b0:	38ff      	subs	r0, #255	@ 0xff
 80005b2:	4210      	tst	r0, r2
 80005b4:	d06d      	beq.n	8000692 <__aeabi_fmul+0x1ea>
 80005b6:	003e      	movs	r6, r7
 80005b8:	46a1      	mov	r9, r4
 80005ba:	468a      	mov	sl, r1
 80005bc:	e7d2      	b.n	8000564 <__aeabi_fmul+0xbc>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d141      	bne.n	8000646 <__aeabi_fmul+0x19e>
 80005c2:	2301      	movs	r3, #1
 80005c4:	4642      	mov	r2, r8
 80005c6:	431a      	orrs	r2, r3
 80005c8:	4690      	mov	r8, r2
 80005ca:	002b      	movs	r3, r5
 80005cc:	4642      	mov	r2, r8
 80005ce:	2101      	movs	r1, #1
 80005d0:	1c5d      	adds	r5, r3, #1
 80005d2:	2a0a      	cmp	r2, #10
 80005d4:	dd97      	ble.n	8000506 <__aeabi_fmul+0x5e>
 80005d6:	e7c5      	b.n	8000564 <__aeabi_fmul+0xbc>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d126      	bne.n	800062a <__aeabi_fmul+0x182>
 80005dc:	2304      	movs	r3, #4
 80005de:	4698      	mov	r8, r3
 80005e0:	3b03      	subs	r3, #3
 80005e2:	2500      	movs	r5, #0
 80005e4:	469a      	mov	sl, r3
 80005e6:	e77a      	b.n	80004de <__aeabi_fmul+0x36>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d118      	bne.n	800061e <__aeabi_fmul+0x176>
 80005ec:	2308      	movs	r3, #8
 80005ee:	4698      	mov	r8, r3
 80005f0:	3b06      	subs	r3, #6
 80005f2:	25ff      	movs	r5, #255	@ 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e772      	b.n	80004de <__aeabi_fmul+0x36>
 80005f8:	20ff      	movs	r0, #255	@ 0xff
 80005fa:	2200      	movs	r2, #0
 80005fc:	e791      	b.n	8000522 <__aeabi_fmul+0x7a>
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	2600      	movs	r6, #0
 8000602:	20ff      	movs	r0, #255	@ 0xff
 8000604:	03d2      	lsls	r2, r2, #15
 8000606:	e78c      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000608:	4641      	mov	r1, r8
 800060a:	2202      	movs	r2, #2
 800060c:	3501      	adds	r5, #1
 800060e:	4311      	orrs	r1, r2
 8000610:	4688      	mov	r8, r1
 8000612:	35ff      	adds	r5, #255	@ 0xff
 8000614:	290a      	cmp	r1, #10
 8000616:	dca5      	bgt.n	8000564 <__aeabi_fmul+0xbc>
 8000618:	2102      	movs	r1, #2
 800061a:	407e      	eors	r6, r7
 800061c:	e774      	b.n	8000508 <__aeabi_fmul+0x60>
 800061e:	230c      	movs	r3, #12
 8000620:	4698      	mov	r8, r3
 8000622:	3b09      	subs	r3, #9
 8000624:	25ff      	movs	r5, #255	@ 0xff
 8000626:	469a      	mov	sl, r3
 8000628:	e759      	b.n	80004de <__aeabi_fmul+0x36>
 800062a:	0018      	movs	r0, r3
 800062c:	f002 f80c 	bl	8002648 <__clzsi2>
 8000630:	464a      	mov	r2, r9
 8000632:	1f43      	subs	r3, r0, #5
 8000634:	2576      	movs	r5, #118	@ 0x76
 8000636:	409a      	lsls	r2, r3
 8000638:	2300      	movs	r3, #0
 800063a:	426d      	negs	r5, r5
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	469a      	mov	sl, r3
 8000642:	1a2d      	subs	r5, r5, r0
 8000644:	e74b      	b.n	80004de <__aeabi_fmul+0x36>
 8000646:	0020      	movs	r0, r4
 8000648:	f001 fffe 	bl	8002648 <__clzsi2>
 800064c:	4642      	mov	r2, r8
 800064e:	1f43      	subs	r3, r0, #5
 8000650:	409c      	lsls	r4, r3
 8000652:	1a2b      	subs	r3, r5, r0
 8000654:	3b76      	subs	r3, #118	@ 0x76
 8000656:	2100      	movs	r1, #0
 8000658:	1c5d      	adds	r5, r3, #1
 800065a:	2a0a      	cmp	r2, #10
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fmul+0x1b8>
 800065e:	e752      	b.n	8000506 <__aeabi_fmul+0x5e>
 8000660:	e780      	b.n	8000564 <__aeabi_fmul+0xbc>
 8000662:	2201      	movs	r2, #1
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dd00      	ble.n	800066c <__aeabi_fmul+0x1c4>
 800066a:	e758      	b.n	800051e <__aeabi_fmul+0x76>
 800066c:	359e      	adds	r5, #158	@ 0x9e
 800066e:	0022      	movs	r2, r4
 8000670:	40ac      	lsls	r4, r5
 8000672:	40da      	lsrs	r2, r3
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4322      	orrs	r2, r4
 800067a:	0753      	lsls	r3, r2, #29
 800067c:	d004      	beq.n	8000688 <__aeabi_fmul+0x1e0>
 800067e:	230f      	movs	r3, #15
 8000680:	4013      	ands	r3, r2
 8000682:	2b04      	cmp	r3, #4
 8000684:	d000      	beq.n	8000688 <__aeabi_fmul+0x1e0>
 8000686:	3204      	adds	r2, #4
 8000688:	0153      	lsls	r3, r2, #5
 800068a:	d537      	bpl.n	80006fc <__aeabi_fmul+0x254>
 800068c:	2001      	movs	r0, #1
 800068e:	2200      	movs	r2, #0
 8000690:	e747      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000692:	0c21      	lsrs	r1, r4, #16
 8000694:	464a      	mov	r2, r9
 8000696:	0424      	lsls	r4, r4, #16
 8000698:	0c24      	lsrs	r4, r4, #16
 800069a:	0027      	movs	r7, r4
 800069c:	0c10      	lsrs	r0, r2, #16
 800069e:	0412      	lsls	r2, r2, #16
 80006a0:	0c12      	lsrs	r2, r2, #16
 80006a2:	4344      	muls	r4, r0
 80006a4:	4357      	muls	r7, r2
 80006a6:	4348      	muls	r0, r1
 80006a8:	4351      	muls	r1, r2
 80006aa:	0c3a      	lsrs	r2, r7, #16
 80006ac:	1909      	adds	r1, r1, r4
 80006ae:	1852      	adds	r2, r2, r1
 80006b0:	4294      	cmp	r4, r2
 80006b2:	d903      	bls.n	80006bc <__aeabi_fmul+0x214>
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0249      	lsls	r1, r1, #9
 80006b8:	468c      	mov	ip, r1
 80006ba:	4460      	add	r0, ip
 80006bc:	043f      	lsls	r7, r7, #16
 80006be:	0411      	lsls	r1, r2, #16
 80006c0:	0c3f      	lsrs	r7, r7, #16
 80006c2:	19c9      	adds	r1, r1, r7
 80006c4:	018c      	lsls	r4, r1, #6
 80006c6:	1e67      	subs	r7, r4, #1
 80006c8:	41bc      	sbcs	r4, r7
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	0e89      	lsrs	r1, r1, #26
 80006ce:	1812      	adds	r2, r2, r0
 80006d0:	430c      	orrs	r4, r1
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	4314      	orrs	r4, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	d50e      	bpl.n	80006f8 <__aeabi_fmul+0x250>
 80006da:	2301      	movs	r3, #1
 80006dc:	0862      	lsrs	r2, r4, #1
 80006de:	401c      	ands	r4, r3
 80006e0:	4314      	orrs	r4, r2
 80006e2:	e749      	b.n	8000578 <__aeabi_fmul+0xd0>
 80006e4:	003e      	movs	r6, r7
 80006e6:	46a1      	mov	r9, r4
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	464b      	mov	r3, r9
 80006ec:	03d2      	lsls	r2, r2, #15
 80006ee:	431a      	orrs	r2, r3
 80006f0:	0252      	lsls	r2, r2, #9
 80006f2:	20ff      	movs	r0, #255	@ 0xff
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	e714      	b.n	8000522 <__aeabi_fmul+0x7a>
 80006f8:	001d      	movs	r5, r3
 80006fa:	e73d      	b.n	8000578 <__aeabi_fmul+0xd0>
 80006fc:	0192      	lsls	r2, r2, #6
 80006fe:	2000      	movs	r0, #0
 8000700:	0a52      	lsrs	r2, r2, #9
 8000702:	e70e      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000704:	290f      	cmp	r1, #15
 8000706:	d1ed      	bne.n	80006e4 <__aeabi_fmul+0x23c>
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	464b      	mov	r3, r9
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d0ea      	beq.n	80006e8 <__aeabi_fmul+0x240>
 8000712:	4214      	tst	r4, r2
 8000714:	d1e8      	bne.n	80006e8 <__aeabi_fmul+0x240>
 8000716:	003e      	movs	r6, r7
 8000718:	20ff      	movs	r0, #255	@ 0xff
 800071a:	4322      	orrs	r2, r4
 800071c:	e701      	b.n	8000522 <__aeabi_fmul+0x7a>
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	f7ffffff 	.word	0xf7ffffff

08000724 <__aeabi_i2f>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	2800      	cmp	r0, #0
 8000728:	d013      	beq.n	8000752 <__aeabi_i2f+0x2e>
 800072a:	17c3      	asrs	r3, r0, #31
 800072c:	18c5      	adds	r5, r0, r3
 800072e:	405d      	eors	r5, r3
 8000730:	0fc4      	lsrs	r4, r0, #31
 8000732:	0028      	movs	r0, r5
 8000734:	f001 ff88 	bl	8002648 <__clzsi2>
 8000738:	239e      	movs	r3, #158	@ 0x9e
 800073a:	0001      	movs	r1, r0
 800073c:	1a1b      	subs	r3, r3, r0
 800073e:	2b96      	cmp	r3, #150	@ 0x96
 8000740:	dc0f      	bgt.n	8000762 <__aeabi_i2f+0x3e>
 8000742:	2808      	cmp	r0, #8
 8000744:	d034      	beq.n	80007b0 <__aeabi_i2f+0x8c>
 8000746:	3908      	subs	r1, #8
 8000748:	408d      	lsls	r5, r1
 800074a:	026d      	lsls	r5, r5, #9
 800074c:	0a6d      	lsrs	r5, r5, #9
 800074e:	b2d8      	uxtb	r0, r3
 8000750:	e002      	b.n	8000758 <__aeabi_i2f+0x34>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2500      	movs	r5, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	4328      	orrs	r0, r5
 800075c:	07e4      	lsls	r4, r4, #31
 800075e:	4320      	orrs	r0, r4
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	2b99      	cmp	r3, #153	@ 0x99
 8000764:	dc16      	bgt.n	8000794 <__aeabi_i2f+0x70>
 8000766:	1f42      	subs	r2, r0, #5
 8000768:	2805      	cmp	r0, #5
 800076a:	d000      	beq.n	800076e <__aeabi_i2f+0x4a>
 800076c:	4095      	lsls	r5, r2
 800076e:	002a      	movs	r2, r5
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <__aeabi_i2f+0x94>)
 8000772:	4002      	ands	r2, r0
 8000774:	076e      	lsls	r6, r5, #29
 8000776:	d009      	beq.n	800078c <__aeabi_i2f+0x68>
 8000778:	260f      	movs	r6, #15
 800077a:	4035      	ands	r5, r6
 800077c:	2d04      	cmp	r5, #4
 800077e:	d005      	beq.n	800078c <__aeabi_i2f+0x68>
 8000780:	3204      	adds	r2, #4
 8000782:	0155      	lsls	r5, r2, #5
 8000784:	d502      	bpl.n	800078c <__aeabi_i2f+0x68>
 8000786:	239f      	movs	r3, #159	@ 0x9f
 8000788:	4002      	ands	r2, r0
 800078a:	1a5b      	subs	r3, r3, r1
 800078c:	0192      	lsls	r2, r2, #6
 800078e:	0a55      	lsrs	r5, r2, #9
 8000790:	b2d8      	uxtb	r0, r3
 8000792:	e7e1      	b.n	8000758 <__aeabi_i2f+0x34>
 8000794:	2205      	movs	r2, #5
 8000796:	1a12      	subs	r2, r2, r0
 8000798:	0028      	movs	r0, r5
 800079a:	40d0      	lsrs	r0, r2
 800079c:	0002      	movs	r2, r0
 800079e:	0008      	movs	r0, r1
 80007a0:	301b      	adds	r0, #27
 80007a2:	4085      	lsls	r5, r0
 80007a4:	0028      	movs	r0, r5
 80007a6:	1e45      	subs	r5, r0, #1
 80007a8:	41a8      	sbcs	r0, r5
 80007aa:	4302      	orrs	r2, r0
 80007ac:	0015      	movs	r5, r2
 80007ae:	e7de      	b.n	800076e <__aeabi_i2f+0x4a>
 80007b0:	026d      	lsls	r5, r5, #9
 80007b2:	2096      	movs	r0, #150	@ 0x96
 80007b4:	0a6d      	lsrs	r5, r5, #9
 80007b6:	e7cf      	b.n	8000758 <__aeabi_i2f+0x34>
 80007b8:	fbffffff 	.word	0xfbffffff

080007bc <__aeabi_ui2f>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	1e04      	subs	r4, r0, #0
 80007c0:	d00e      	beq.n	80007e0 <__aeabi_ui2f+0x24>
 80007c2:	f001 ff41 	bl	8002648 <__clzsi2>
 80007c6:	239e      	movs	r3, #158	@ 0x9e
 80007c8:	0001      	movs	r1, r0
 80007ca:	1a1b      	subs	r3, r3, r0
 80007cc:	2b96      	cmp	r3, #150	@ 0x96
 80007ce:	dc0c      	bgt.n	80007ea <__aeabi_ui2f+0x2e>
 80007d0:	2808      	cmp	r0, #8
 80007d2:	d02f      	beq.n	8000834 <__aeabi_ui2f+0x78>
 80007d4:	3908      	subs	r1, #8
 80007d6:	408c      	lsls	r4, r1
 80007d8:	0264      	lsls	r4, r4, #9
 80007da:	0a64      	lsrs	r4, r4, #9
 80007dc:	b2d8      	uxtb	r0, r3
 80007de:	e001      	b.n	80007e4 <__aeabi_ui2f+0x28>
 80007e0:	2000      	movs	r0, #0
 80007e2:	2400      	movs	r4, #0
 80007e4:	05c0      	lsls	r0, r0, #23
 80007e6:	4320      	orrs	r0, r4
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	2b99      	cmp	r3, #153	@ 0x99
 80007ec:	dc16      	bgt.n	800081c <__aeabi_ui2f+0x60>
 80007ee:	1f42      	subs	r2, r0, #5
 80007f0:	2805      	cmp	r0, #5
 80007f2:	d000      	beq.n	80007f6 <__aeabi_ui2f+0x3a>
 80007f4:	4094      	lsls	r4, r2
 80007f6:	0022      	movs	r2, r4
 80007f8:	4810      	ldr	r0, [pc, #64]	@ (800083c <__aeabi_ui2f+0x80>)
 80007fa:	4002      	ands	r2, r0
 80007fc:	0765      	lsls	r5, r4, #29
 80007fe:	d009      	beq.n	8000814 <__aeabi_ui2f+0x58>
 8000800:	250f      	movs	r5, #15
 8000802:	402c      	ands	r4, r5
 8000804:	2c04      	cmp	r4, #4
 8000806:	d005      	beq.n	8000814 <__aeabi_ui2f+0x58>
 8000808:	3204      	adds	r2, #4
 800080a:	0154      	lsls	r4, r2, #5
 800080c:	d502      	bpl.n	8000814 <__aeabi_ui2f+0x58>
 800080e:	239f      	movs	r3, #159	@ 0x9f
 8000810:	4002      	ands	r2, r0
 8000812:	1a5b      	subs	r3, r3, r1
 8000814:	0192      	lsls	r2, r2, #6
 8000816:	0a54      	lsrs	r4, r2, #9
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	e7e3      	b.n	80007e4 <__aeabi_ui2f+0x28>
 800081c:	0002      	movs	r2, r0
 800081e:	0020      	movs	r0, r4
 8000820:	321b      	adds	r2, #27
 8000822:	4090      	lsls	r0, r2
 8000824:	0002      	movs	r2, r0
 8000826:	1e50      	subs	r0, r2, #1
 8000828:	4182      	sbcs	r2, r0
 800082a:	2005      	movs	r0, #5
 800082c:	1a40      	subs	r0, r0, r1
 800082e:	40c4      	lsrs	r4, r0
 8000830:	4314      	orrs	r4, r2
 8000832:	e7e0      	b.n	80007f6 <__aeabi_ui2f+0x3a>
 8000834:	0264      	lsls	r4, r4, #9
 8000836:	2096      	movs	r0, #150	@ 0x96
 8000838:	0a64      	lsrs	r4, r4, #9
 800083a:	e7d3      	b.n	80007e4 <__aeabi_ui2f+0x28>
 800083c:	fbffffff 	.word	0xfbffffff

08000840 <__aeabi_dadd>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	4657      	mov	r7, sl
 8000844:	464e      	mov	r6, r9
 8000846:	4645      	mov	r5, r8
 8000848:	46de      	mov	lr, fp
 800084a:	b5e0      	push	{r5, r6, r7, lr}
 800084c:	b083      	sub	sp, #12
 800084e:	9000      	str	r0, [sp, #0]
 8000850:	9101      	str	r1, [sp, #4]
 8000852:	030c      	lsls	r4, r1, #12
 8000854:	004f      	lsls	r7, r1, #1
 8000856:	0fce      	lsrs	r6, r1, #31
 8000858:	0a61      	lsrs	r1, r4, #9
 800085a:	9c00      	ldr	r4, [sp, #0]
 800085c:	031d      	lsls	r5, r3, #12
 800085e:	0f64      	lsrs	r4, r4, #29
 8000860:	430c      	orrs	r4, r1
 8000862:	9900      	ldr	r1, [sp, #0]
 8000864:	9200      	str	r2, [sp, #0]
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	00c8      	lsls	r0, r1, #3
 800086a:	0059      	lsls	r1, r3, #1
 800086c:	0d4b      	lsrs	r3, r1, #21
 800086e:	4699      	mov	r9, r3
 8000870:	9a00      	ldr	r2, [sp, #0]
 8000872:	9b01      	ldr	r3, [sp, #4]
 8000874:	0a6d      	lsrs	r5, r5, #9
 8000876:	0fd9      	lsrs	r1, r3, #31
 8000878:	0f53      	lsrs	r3, r2, #29
 800087a:	432b      	orrs	r3, r5
 800087c:	469a      	mov	sl, r3
 800087e:	9b00      	ldr	r3, [sp, #0]
 8000880:	0d7f      	lsrs	r7, r7, #21
 8000882:	00da      	lsls	r2, r3, #3
 8000884:	4694      	mov	ip, r2
 8000886:	464a      	mov	r2, r9
 8000888:	46b0      	mov	r8, r6
 800088a:	1aba      	subs	r2, r7, r2
 800088c:	428e      	cmp	r6, r1
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x52>
 8000890:	e0b0      	b.n	80009f4 <__aeabi_dadd+0x1b4>
 8000892:	2a00      	cmp	r2, #0
 8000894:	dc00      	bgt.n	8000898 <__aeabi_dadd+0x58>
 8000896:	e078      	b.n	800098a <__aeabi_dadd+0x14a>
 8000898:	4649      	mov	r1, r9
 800089a:	2900      	cmp	r1, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x60>
 800089e:	e0e9      	b.n	8000a74 <__aeabi_dadd+0x234>
 80008a0:	49c9      	ldr	r1, [pc, #804]	@ (8000bc8 <__aeabi_dadd+0x388>)
 80008a2:	428f      	cmp	r7, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x68>
 80008a6:	e195      	b.n	8000bd4 <__aeabi_dadd+0x394>
 80008a8:	2501      	movs	r5, #1
 80008aa:	2a38      	cmp	r2, #56	@ 0x38
 80008ac:	dc16      	bgt.n	80008dc <__aeabi_dadd+0x9c>
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	4653      	mov	r3, sl
 80008b2:	0409      	lsls	r1, r1, #16
 80008b4:	430b      	orrs	r3, r1
 80008b6:	469a      	mov	sl, r3
 80008b8:	2a1f      	cmp	r2, #31
 80008ba:	dd00      	ble.n	80008be <__aeabi_dadd+0x7e>
 80008bc:	e1e7      	b.n	8000c8e <__aeabi_dadd+0x44e>
 80008be:	2120      	movs	r1, #32
 80008c0:	4655      	mov	r5, sl
 80008c2:	1a8b      	subs	r3, r1, r2
 80008c4:	4661      	mov	r1, ip
 80008c6:	409d      	lsls	r5, r3
 80008c8:	40d1      	lsrs	r1, r2
 80008ca:	430d      	orrs	r5, r1
 80008cc:	4661      	mov	r1, ip
 80008ce:	4099      	lsls	r1, r3
 80008d0:	1e4b      	subs	r3, r1, #1
 80008d2:	4199      	sbcs	r1, r3
 80008d4:	4653      	mov	r3, sl
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	430d      	orrs	r5, r1
 80008da:	1ae4      	subs	r4, r4, r3
 80008dc:	1b45      	subs	r5, r0, r5
 80008de:	42a8      	cmp	r0, r5
 80008e0:	4180      	sbcs	r0, r0
 80008e2:	4240      	negs	r0, r0
 80008e4:	1a24      	subs	r4, r4, r0
 80008e6:	0223      	lsls	r3, r4, #8
 80008e8:	d400      	bmi.n	80008ec <__aeabi_dadd+0xac>
 80008ea:	e10f      	b.n	8000b0c <__aeabi_dadd+0x2cc>
 80008ec:	0264      	lsls	r4, r4, #9
 80008ee:	0a64      	lsrs	r4, r4, #9
 80008f0:	2c00      	cmp	r4, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0xb6>
 80008f4:	e139      	b.n	8000b6a <__aeabi_dadd+0x32a>
 80008f6:	0020      	movs	r0, r4
 80008f8:	f001 fea6 	bl	8002648 <__clzsi2>
 80008fc:	0003      	movs	r3, r0
 80008fe:	3b08      	subs	r3, #8
 8000900:	2120      	movs	r1, #32
 8000902:	0028      	movs	r0, r5
 8000904:	1aca      	subs	r2, r1, r3
 8000906:	40d0      	lsrs	r0, r2
 8000908:	409c      	lsls	r4, r3
 800090a:	0002      	movs	r2, r0
 800090c:	409d      	lsls	r5, r3
 800090e:	4322      	orrs	r2, r4
 8000910:	429f      	cmp	r7, r3
 8000912:	dd00      	ble.n	8000916 <__aeabi_dadd+0xd6>
 8000914:	e173      	b.n	8000bfe <__aeabi_dadd+0x3be>
 8000916:	1bd8      	subs	r0, r3, r7
 8000918:	3001      	adds	r0, #1
 800091a:	1a09      	subs	r1, r1, r0
 800091c:	002c      	movs	r4, r5
 800091e:	408d      	lsls	r5, r1
 8000920:	40c4      	lsrs	r4, r0
 8000922:	1e6b      	subs	r3, r5, #1
 8000924:	419d      	sbcs	r5, r3
 8000926:	0013      	movs	r3, r2
 8000928:	40c2      	lsrs	r2, r0
 800092a:	408b      	lsls	r3, r1
 800092c:	4325      	orrs	r5, r4
 800092e:	2700      	movs	r7, #0
 8000930:	0014      	movs	r4, r2
 8000932:	431d      	orrs	r5, r3
 8000934:	076b      	lsls	r3, r5, #29
 8000936:	d009      	beq.n	800094c <__aeabi_dadd+0x10c>
 8000938:	230f      	movs	r3, #15
 800093a:	402b      	ands	r3, r5
 800093c:	2b04      	cmp	r3, #4
 800093e:	d005      	beq.n	800094c <__aeabi_dadd+0x10c>
 8000940:	1d2b      	adds	r3, r5, #4
 8000942:	42ab      	cmp	r3, r5
 8000944:	41ad      	sbcs	r5, r5
 8000946:	426d      	negs	r5, r5
 8000948:	1964      	adds	r4, r4, r5
 800094a:	001d      	movs	r5, r3
 800094c:	0223      	lsls	r3, r4, #8
 800094e:	d400      	bmi.n	8000952 <__aeabi_dadd+0x112>
 8000950:	e12d      	b.n	8000bae <__aeabi_dadd+0x36e>
 8000952:	4a9d      	ldr	r2, [pc, #628]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000954:	3701      	adds	r7, #1
 8000956:	4297      	cmp	r7, r2
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x11c>
 800095a:	e0d3      	b.n	8000b04 <__aeabi_dadd+0x2c4>
 800095c:	4646      	mov	r6, r8
 800095e:	499b      	ldr	r1, [pc, #620]	@ (8000bcc <__aeabi_dadd+0x38c>)
 8000960:	08ed      	lsrs	r5, r5, #3
 8000962:	4021      	ands	r1, r4
 8000964:	074a      	lsls	r2, r1, #29
 8000966:	432a      	orrs	r2, r5
 8000968:	057c      	lsls	r4, r7, #21
 800096a:	024d      	lsls	r5, r1, #9
 800096c:	0b2d      	lsrs	r5, r5, #12
 800096e:	0d64      	lsrs	r4, r4, #21
 8000970:	0524      	lsls	r4, r4, #20
 8000972:	432c      	orrs	r4, r5
 8000974:	07f6      	lsls	r6, r6, #31
 8000976:	4334      	orrs	r4, r6
 8000978:	0010      	movs	r0, r2
 800097a:	0021      	movs	r1, r4
 800097c:	b003      	add	sp, #12
 800097e:	bcf0      	pop	{r4, r5, r6, r7}
 8000980:	46bb      	mov	fp, r7
 8000982:	46b2      	mov	sl, r6
 8000984:	46a9      	mov	r9, r5
 8000986:	46a0      	mov	r8, r4
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098a:	2a00      	cmp	r2, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x150>
 800098e:	e084      	b.n	8000a9a <__aeabi_dadd+0x25a>
 8000990:	464a      	mov	r2, r9
 8000992:	1bd2      	subs	r2, r2, r7
 8000994:	2f00      	cmp	r7, #0
 8000996:	d000      	beq.n	800099a <__aeabi_dadd+0x15a>
 8000998:	e16d      	b.n	8000c76 <__aeabi_dadd+0x436>
 800099a:	0025      	movs	r5, r4
 800099c:	4305      	orrs	r5, r0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x162>
 80009a0:	e127      	b.n	8000bf2 <__aeabi_dadd+0x3b2>
 80009a2:	1e56      	subs	r6, r2, #1
 80009a4:	2a01      	cmp	r2, #1
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x16a>
 80009a8:	e23b      	b.n	8000e22 <__aeabi_dadd+0x5e2>
 80009aa:	4d87      	ldr	r5, [pc, #540]	@ (8000bc8 <__aeabi_dadd+0x388>)
 80009ac:	42aa      	cmp	r2, r5
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x172>
 80009b0:	e26a      	b.n	8000e88 <__aeabi_dadd+0x648>
 80009b2:	2501      	movs	r5, #1
 80009b4:	2e38      	cmp	r6, #56	@ 0x38
 80009b6:	dc12      	bgt.n	80009de <__aeabi_dadd+0x19e>
 80009b8:	0032      	movs	r2, r6
 80009ba:	2a1f      	cmp	r2, #31
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x180>
 80009be:	e1f8      	b.n	8000db2 <__aeabi_dadd+0x572>
 80009c0:	2620      	movs	r6, #32
 80009c2:	0025      	movs	r5, r4
 80009c4:	1ab6      	subs	r6, r6, r2
 80009c6:	0007      	movs	r7, r0
 80009c8:	4653      	mov	r3, sl
 80009ca:	40b0      	lsls	r0, r6
 80009cc:	40d4      	lsrs	r4, r2
 80009ce:	40b5      	lsls	r5, r6
 80009d0:	40d7      	lsrs	r7, r2
 80009d2:	1e46      	subs	r6, r0, #1
 80009d4:	41b0      	sbcs	r0, r6
 80009d6:	1b1b      	subs	r3, r3, r4
 80009d8:	469a      	mov	sl, r3
 80009da:	433d      	orrs	r5, r7
 80009dc:	4305      	orrs	r5, r0
 80009de:	4662      	mov	r2, ip
 80009e0:	1b55      	subs	r5, r2, r5
 80009e2:	45ac      	cmp	ip, r5
 80009e4:	4192      	sbcs	r2, r2
 80009e6:	4653      	mov	r3, sl
 80009e8:	4252      	negs	r2, r2
 80009ea:	000e      	movs	r6, r1
 80009ec:	464f      	mov	r7, r9
 80009ee:	4688      	mov	r8, r1
 80009f0:	1a9c      	subs	r4, r3, r2
 80009f2:	e778      	b.n	80008e6 <__aeabi_dadd+0xa6>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x1ba>
 80009f8:	e08e      	b.n	8000b18 <__aeabi_dadd+0x2d8>
 80009fa:	4649      	mov	r1, r9
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d175      	bne.n	8000aec <__aeabi_dadd+0x2ac>
 8000a00:	4661      	mov	r1, ip
 8000a02:	4653      	mov	r3, sl
 8000a04:	4319      	orrs	r1, r3
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x1ca>
 8000a08:	e0f6      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000a0a:	1e51      	subs	r1, r2, #1
 8000a0c:	2a01      	cmp	r2, #1
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x1d2>
 8000a10:	e191      	b.n	8000d36 <__aeabi_dadd+0x4f6>
 8000a12:	4d6d      	ldr	r5, [pc, #436]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000a14:	42aa      	cmp	r2, r5
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x1da>
 8000a18:	e0dc      	b.n	8000bd4 <__aeabi_dadd+0x394>
 8000a1a:	2501      	movs	r5, #1
 8000a1c:	2938      	cmp	r1, #56	@ 0x38
 8000a1e:	dc14      	bgt.n	8000a4a <__aeabi_dadd+0x20a>
 8000a20:	000a      	movs	r2, r1
 8000a22:	2a1f      	cmp	r2, #31
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_dadd+0x1e8>
 8000a26:	e1a2      	b.n	8000d6e <__aeabi_dadd+0x52e>
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4653      	mov	r3, sl
 8000a2c:	1a89      	subs	r1, r1, r2
 8000a2e:	408b      	lsls	r3, r1
 8000a30:	001d      	movs	r5, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	40d3      	lsrs	r3, r2
 8000a36:	431d      	orrs	r5, r3
 8000a38:	4663      	mov	r3, ip
 8000a3a:	408b      	lsls	r3, r1
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	1e4b      	subs	r3, r1, #1
 8000a40:	4199      	sbcs	r1, r3
 8000a42:	4653      	mov	r3, sl
 8000a44:	40d3      	lsrs	r3, r2
 8000a46:	430d      	orrs	r5, r1
 8000a48:	18e4      	adds	r4, r4, r3
 8000a4a:	182d      	adds	r5, r5, r0
 8000a4c:	4285      	cmp	r5, r0
 8000a4e:	4180      	sbcs	r0, r0
 8000a50:	4240      	negs	r0, r0
 8000a52:	1824      	adds	r4, r4, r0
 8000a54:	0223      	lsls	r3, r4, #8
 8000a56:	d559      	bpl.n	8000b0c <__aeabi_dadd+0x2cc>
 8000a58:	4b5b      	ldr	r3, [pc, #364]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000a5a:	3701      	adds	r7, #1
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	d051      	beq.n	8000b04 <__aeabi_dadd+0x2c4>
 8000a60:	2101      	movs	r1, #1
 8000a62:	4b5a      	ldr	r3, [pc, #360]	@ (8000bcc <__aeabi_dadd+0x38c>)
 8000a64:	086a      	lsrs	r2, r5, #1
 8000a66:	401c      	ands	r4, r3
 8000a68:	4029      	ands	r1, r5
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	07e5      	lsls	r5, r4, #31
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	0864      	lsrs	r4, r4, #1
 8000a72:	e75f      	b.n	8000934 <__aeabi_dadd+0xf4>
 8000a74:	4661      	mov	r1, ip
 8000a76:	4653      	mov	r3, sl
 8000a78:	4319      	orrs	r1, r3
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x23e>
 8000a7c:	e0bc      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000a7e:	1e51      	subs	r1, r2, #1
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x246>
 8000a84:	e164      	b.n	8000d50 <__aeabi_dadd+0x510>
 8000a86:	4d50      	ldr	r5, [pc, #320]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000a88:	42aa      	cmp	r2, r5
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x24e>
 8000a8c:	e16a      	b.n	8000d64 <__aeabi_dadd+0x524>
 8000a8e:	2501      	movs	r5, #1
 8000a90:	2938      	cmp	r1, #56	@ 0x38
 8000a92:	dd00      	ble.n	8000a96 <__aeabi_dadd+0x256>
 8000a94:	e722      	b.n	80008dc <__aeabi_dadd+0x9c>
 8000a96:	000a      	movs	r2, r1
 8000a98:	e70e      	b.n	80008b8 <__aeabi_dadd+0x78>
 8000a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd0 <__aeabi_dadd+0x390>)
 8000a9c:	1c7d      	adds	r5, r7, #1
 8000a9e:	4215      	tst	r5, r2
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x264>
 8000aa2:	e0d0      	b.n	8000c46 <__aeabi_dadd+0x406>
 8000aa4:	0025      	movs	r5, r4
 8000aa6:	4662      	mov	r2, ip
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	4305      	orrs	r5, r0
 8000aac:	431a      	orrs	r2, r3
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x274>
 8000ab2:	e137      	b.n	8000d24 <__aeabi_dadd+0x4e4>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x27a>
 8000ab8:	e1a8      	b.n	8000e0c <__aeabi_dadd+0x5cc>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x280>
 8000abe:	e16a      	b.n	8000d96 <__aeabi_dadd+0x556>
 8000ac0:	4663      	mov	r3, ip
 8000ac2:	1ac5      	subs	r5, r0, r3
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	1ae2      	subs	r2, r4, r3
 8000ac8:	42a8      	cmp	r0, r5
 8000aca:	419b      	sbcs	r3, r3
 8000acc:	425b      	negs	r3, r3
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	021a      	lsls	r2, r3, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x296>
 8000ad4:	e203      	b.n	8000ede <__aeabi_dadd+0x69e>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	1a1d      	subs	r5, r3, r0
 8000ada:	45ac      	cmp	ip, r5
 8000adc:	4192      	sbcs	r2, r2
 8000ade:	4653      	mov	r3, sl
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	1b1c      	subs	r4, r3, r4
 8000ae4:	000e      	movs	r6, r1
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	1aa4      	subs	r4, r4, r2
 8000aea:	e723      	b.n	8000934 <__aeabi_dadd+0xf4>
 8000aec:	4936      	ldr	r1, [pc, #216]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000aee:	428f      	cmp	r7, r1
 8000af0:	d070      	beq.n	8000bd4 <__aeabi_dadd+0x394>
 8000af2:	2501      	movs	r5, #1
 8000af4:	2a38      	cmp	r2, #56	@ 0x38
 8000af6:	dca8      	bgt.n	8000a4a <__aeabi_dadd+0x20a>
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	4653      	mov	r3, sl
 8000afc:	0409      	lsls	r1, r1, #16
 8000afe:	430b      	orrs	r3, r1
 8000b00:	469a      	mov	sl, r3
 8000b02:	e78e      	b.n	8000a22 <__aeabi_dadd+0x1e2>
 8000b04:	003c      	movs	r4, r7
 8000b06:	2500      	movs	r5, #0
 8000b08:	2200      	movs	r2, #0
 8000b0a:	e731      	b.n	8000970 <__aeabi_dadd+0x130>
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	402b      	ands	r3, r5
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x2d6>
 8000b14:	e710      	b.n	8000938 <__aeabi_dadd+0xf8>
 8000b16:	e093      	b.n	8000c40 <__aeabi_dadd+0x400>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	d074      	beq.n	8000c06 <__aeabi_dadd+0x3c6>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	1bd2      	subs	r2, r2, r7
 8000b20:	2f00      	cmp	r7, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x2e6>
 8000b24:	e0c7      	b.n	8000cb6 <__aeabi_dadd+0x476>
 8000b26:	4928      	ldr	r1, [pc, #160]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000b28:	4589      	cmp	r9, r1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x2ee>
 8000b2c:	e185      	b.n	8000e3a <__aeabi_dadd+0x5fa>
 8000b2e:	2501      	movs	r5, #1
 8000b30:	2a38      	cmp	r2, #56	@ 0x38
 8000b32:	dc12      	bgt.n	8000b5a <__aeabi_dadd+0x31a>
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	0409      	lsls	r1, r1, #16
 8000b38:	430c      	orrs	r4, r1
 8000b3a:	2a1f      	cmp	r2, #31
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x300>
 8000b3e:	e1ab      	b.n	8000e98 <__aeabi_dadd+0x658>
 8000b40:	2120      	movs	r1, #32
 8000b42:	0025      	movs	r5, r4
 8000b44:	1a89      	subs	r1, r1, r2
 8000b46:	0007      	movs	r7, r0
 8000b48:	4088      	lsls	r0, r1
 8000b4a:	408d      	lsls	r5, r1
 8000b4c:	40d7      	lsrs	r7, r2
 8000b4e:	1e41      	subs	r1, r0, #1
 8000b50:	4188      	sbcs	r0, r1
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	433d      	orrs	r5, r7
 8000b56:	4305      	orrs	r5, r0
 8000b58:	44a2      	add	sl, r4
 8000b5a:	4465      	add	r5, ip
 8000b5c:	4565      	cmp	r5, ip
 8000b5e:	4192      	sbcs	r2, r2
 8000b60:	4252      	negs	r2, r2
 8000b62:	4452      	add	r2, sl
 8000b64:	0014      	movs	r4, r2
 8000b66:	464f      	mov	r7, r9
 8000b68:	e774      	b.n	8000a54 <__aeabi_dadd+0x214>
 8000b6a:	0028      	movs	r0, r5
 8000b6c:	f001 fd6c 	bl	8002648 <__clzsi2>
 8000b70:	0003      	movs	r3, r0
 8000b72:	3318      	adds	r3, #24
 8000b74:	2b1f      	cmp	r3, #31
 8000b76:	dc00      	bgt.n	8000b7a <__aeabi_dadd+0x33a>
 8000b78:	e6c2      	b.n	8000900 <__aeabi_dadd+0xc0>
 8000b7a:	002a      	movs	r2, r5
 8000b7c:	3808      	subs	r0, #8
 8000b7e:	4082      	lsls	r2, r0
 8000b80:	429f      	cmp	r7, r3
 8000b82:	dd00      	ble.n	8000b86 <__aeabi_dadd+0x346>
 8000b84:	e0a9      	b.n	8000cda <__aeabi_dadd+0x49a>
 8000b86:	1bdb      	subs	r3, r3, r7
 8000b88:	1c58      	adds	r0, r3, #1
 8000b8a:	281f      	cmp	r0, #31
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_dadd+0x350>
 8000b8e:	e1ac      	b.n	8000eea <__aeabi_dadd+0x6aa>
 8000b90:	0015      	movs	r5, r2
 8000b92:	3b1f      	subs	r3, #31
 8000b94:	40dd      	lsrs	r5, r3
 8000b96:	2820      	cmp	r0, #32
 8000b98:	d005      	beq.n	8000ba6 <__aeabi_dadd+0x366>
 8000b9a:	2340      	movs	r3, #64	@ 0x40
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	1e53      	subs	r3, r2, #1
 8000ba2:	419a      	sbcs	r2, r3
 8000ba4:	4315      	orrs	r5, r2
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	2700      	movs	r7, #0
 8000baa:	402b      	ands	r3, r5
 8000bac:	e7b0      	b.n	8000b10 <__aeabi_dadd+0x2d0>
 8000bae:	08ed      	lsrs	r5, r5, #3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000bb2:	0762      	lsls	r2, r4, #29
 8000bb4:	432a      	orrs	r2, r5
 8000bb6:	08e4      	lsrs	r4, r4, #3
 8000bb8:	429f      	cmp	r7, r3
 8000bba:	d00f      	beq.n	8000bdc <__aeabi_dadd+0x39c>
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	0b25      	lsrs	r5, r4, #12
 8000bc0:	057c      	lsls	r4, r7, #21
 8000bc2:	0d64      	lsrs	r4, r4, #21
 8000bc4:	e6d4      	b.n	8000970 <__aeabi_dadd+0x130>
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	000007ff 	.word	0x000007ff
 8000bcc:	ff7fffff 	.word	0xff7fffff
 8000bd0:	000007fe 	.word	0x000007fe
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0762      	lsls	r2, r4, #29
 8000bd8:	4302      	orrs	r2, r0
 8000bda:	08e4      	lsrs	r4, r4, #3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	4323      	orrs	r3, r4
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x3a4>
 8000be2:	e186      	b.n	8000ef2 <__aeabi_dadd+0x6b2>
 8000be4:	2580      	movs	r5, #128	@ 0x80
 8000be6:	032d      	lsls	r5, r5, #12
 8000be8:	4325      	orrs	r5, r4
 8000bea:	032d      	lsls	r5, r5, #12
 8000bec:	4cc3      	ldr	r4, [pc, #780]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000bee:	0b2d      	lsrs	r5, r5, #12
 8000bf0:	e6be      	b.n	8000970 <__aeabi_dadd+0x130>
 8000bf2:	4660      	mov	r0, ip
 8000bf4:	4654      	mov	r4, sl
 8000bf6:	000e      	movs	r6, r1
 8000bf8:	0017      	movs	r7, r2
 8000bfa:	08c5      	lsrs	r5, r0, #3
 8000bfc:	e7d8      	b.n	8000bb0 <__aeabi_dadd+0x370>
 8000bfe:	4cc0      	ldr	r4, [pc, #768]	@ (8000f00 <__aeabi_dadd+0x6c0>)
 8000c00:	1aff      	subs	r7, r7, r3
 8000c02:	4014      	ands	r4, r2
 8000c04:	e696      	b.n	8000934 <__aeabi_dadd+0xf4>
 8000c06:	4abf      	ldr	r2, [pc, #764]	@ (8000f04 <__aeabi_dadd+0x6c4>)
 8000c08:	1c79      	adds	r1, r7, #1
 8000c0a:	4211      	tst	r1, r2
 8000c0c:	d16b      	bne.n	8000ce6 <__aeabi_dadd+0x4a6>
 8000c0e:	0022      	movs	r2, r4
 8000c10:	4302      	orrs	r2, r0
 8000c12:	2f00      	cmp	r7, #0
 8000c14:	d000      	beq.n	8000c18 <__aeabi_dadd+0x3d8>
 8000c16:	e0db      	b.n	8000dd0 <__aeabi_dadd+0x590>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x3de>
 8000c1c:	e12d      	b.n	8000e7a <__aeabi_dadd+0x63a>
 8000c1e:	4662      	mov	r2, ip
 8000c20:	4653      	mov	r3, sl
 8000c22:	431a      	orrs	r2, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x3e8>
 8000c26:	e0b6      	b.n	8000d96 <__aeabi_dadd+0x556>
 8000c28:	4663      	mov	r3, ip
 8000c2a:	18c5      	adds	r5, r0, r3
 8000c2c:	4285      	cmp	r5, r0
 8000c2e:	4180      	sbcs	r0, r0
 8000c30:	4454      	add	r4, sl
 8000c32:	4240      	negs	r0, r0
 8000c34:	1824      	adds	r4, r4, r0
 8000c36:	0223      	lsls	r3, r4, #8
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_dadd+0x400>
 8000c3a:	000f      	movs	r7, r1
 8000c3c:	4bb0      	ldr	r3, [pc, #704]	@ (8000f00 <__aeabi_dadd+0x6c0>)
 8000c3e:	401c      	ands	r4, r3
 8000c40:	003a      	movs	r2, r7
 8000c42:	0028      	movs	r0, r5
 8000c44:	e7d8      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000c46:	4662      	mov	r2, ip
 8000c48:	1a85      	subs	r5, r0, r2
 8000c4a:	42a8      	cmp	r0, r5
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	4653      	mov	r3, sl
 8000c50:	4252      	negs	r2, r2
 8000c52:	4691      	mov	r9, r2
 8000c54:	1ae3      	subs	r3, r4, r3
 8000c56:	001a      	movs	r2, r3
 8000c58:	464b      	mov	r3, r9
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	4691      	mov	r9, r2
 8000c60:	021a      	lsls	r2, r3, #8
 8000c62:	d454      	bmi.n	8000d0e <__aeabi_dadd+0x4ce>
 8000c64:	464a      	mov	r2, r9
 8000c66:	464c      	mov	r4, r9
 8000c68:	432a      	orrs	r2, r5
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_dadd+0x42e>
 8000c6c:	e640      	b.n	80008f0 <__aeabi_dadd+0xb0>
 8000c6e:	2600      	movs	r6, #0
 8000c70:	2400      	movs	r4, #0
 8000c72:	2500      	movs	r5, #0
 8000c74:	e67c      	b.n	8000970 <__aeabi_dadd+0x130>
 8000c76:	4da1      	ldr	r5, [pc, #644]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000c78:	45a9      	cmp	r9, r5
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x43e>
 8000c7c:	e090      	b.n	8000da0 <__aeabi_dadd+0x560>
 8000c7e:	2501      	movs	r5, #1
 8000c80:	2a38      	cmp	r2, #56	@ 0x38
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dadd+0x446>
 8000c84:	e6ab      	b.n	80009de <__aeabi_dadd+0x19e>
 8000c86:	2580      	movs	r5, #128	@ 0x80
 8000c88:	042d      	lsls	r5, r5, #16
 8000c8a:	432c      	orrs	r4, r5
 8000c8c:	e695      	b.n	80009ba <__aeabi_dadd+0x17a>
 8000c8e:	0011      	movs	r1, r2
 8000c90:	4655      	mov	r5, sl
 8000c92:	3920      	subs	r1, #32
 8000c94:	40cd      	lsrs	r5, r1
 8000c96:	46a9      	mov	r9, r5
 8000c98:	2a20      	cmp	r2, #32
 8000c9a:	d006      	beq.n	8000caa <__aeabi_dadd+0x46a>
 8000c9c:	2140      	movs	r1, #64	@ 0x40
 8000c9e:	4653      	mov	r3, sl
 8000ca0:	1a8a      	subs	r2, r1, r2
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	4694      	mov	ip, r2
 8000caa:	4665      	mov	r5, ip
 8000cac:	1e6b      	subs	r3, r5, #1
 8000cae:	419d      	sbcs	r5, r3
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	431d      	orrs	r5, r3
 8000cb4:	e612      	b.n	80008dc <__aeabi_dadd+0x9c>
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	4301      	orrs	r1, r0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x47e>
 8000cbc:	e0c4      	b.n	8000e48 <__aeabi_dadd+0x608>
 8000cbe:	1e51      	subs	r1, r2, #1
 8000cc0:	2a01      	cmp	r2, #1
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x486>
 8000cc4:	e0fb      	b.n	8000ebe <__aeabi_dadd+0x67e>
 8000cc6:	4d8d      	ldr	r5, [pc, #564]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000cc8:	42aa      	cmp	r2, r5
 8000cca:	d100      	bne.n	8000cce <__aeabi_dadd+0x48e>
 8000ccc:	e0b5      	b.n	8000e3a <__aeabi_dadd+0x5fa>
 8000cce:	2501      	movs	r5, #1
 8000cd0:	2938      	cmp	r1, #56	@ 0x38
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0x496>
 8000cd4:	e741      	b.n	8000b5a <__aeabi_dadd+0x31a>
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	e72f      	b.n	8000b3a <__aeabi_dadd+0x2fa>
 8000cda:	4c89      	ldr	r4, [pc, #548]	@ (8000f00 <__aeabi_dadd+0x6c0>)
 8000cdc:	1aff      	subs	r7, r7, r3
 8000cde:	4014      	ands	r4, r2
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	08e4      	lsrs	r4, r4, #3
 8000ce4:	e76a      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000ce6:	4a85      	ldr	r2, [pc, #532]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d100      	bne.n	8000cee <__aeabi_dadd+0x4ae>
 8000cec:	e0e3      	b.n	8000eb6 <__aeabi_dadd+0x676>
 8000cee:	4663      	mov	r3, ip
 8000cf0:	18c2      	adds	r2, r0, r3
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	4180      	sbcs	r0, r0
 8000cf6:	0023      	movs	r3, r4
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	4453      	add	r3, sl
 8000cfc:	181b      	adds	r3, r3, r0
 8000cfe:	07dd      	lsls	r5, r3, #31
 8000d00:	085c      	lsrs	r4, r3, #1
 8000d02:	2307      	movs	r3, #7
 8000d04:	0852      	lsrs	r2, r2, #1
 8000d06:	4315      	orrs	r5, r2
 8000d08:	000f      	movs	r7, r1
 8000d0a:	402b      	ands	r3, r5
 8000d0c:	e700      	b.n	8000b10 <__aeabi_dadd+0x2d0>
 8000d0e:	4663      	mov	r3, ip
 8000d10:	1a1d      	subs	r5, r3, r0
 8000d12:	45ac      	cmp	ip, r5
 8000d14:	4192      	sbcs	r2, r2
 8000d16:	4653      	mov	r3, sl
 8000d18:	4252      	negs	r2, r2
 8000d1a:	1b1c      	subs	r4, r3, r4
 8000d1c:	000e      	movs	r6, r1
 8000d1e:	4688      	mov	r8, r1
 8000d20:	1aa4      	subs	r4, r4, r2
 8000d22:	e5e5      	b.n	80008f0 <__aeabi_dadd+0xb0>
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x4ea>
 8000d28:	e091      	b.n	8000e4e <__aeabi_dadd+0x60e>
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d138      	bne.n	8000da0 <__aeabi_dadd+0x560>
 8000d2e:	2480      	movs	r4, #128	@ 0x80
 8000d30:	2600      	movs	r6, #0
 8000d32:	0324      	lsls	r4, r4, #12
 8000d34:	e756      	b.n	8000be4 <__aeabi_dadd+0x3a4>
 8000d36:	4663      	mov	r3, ip
 8000d38:	18c5      	adds	r5, r0, r3
 8000d3a:	4285      	cmp	r5, r0
 8000d3c:	4180      	sbcs	r0, r0
 8000d3e:	4454      	add	r4, sl
 8000d40:	4240      	negs	r0, r0
 8000d42:	1824      	adds	r4, r4, r0
 8000d44:	2701      	movs	r7, #1
 8000d46:	0223      	lsls	r3, r4, #8
 8000d48:	d400      	bmi.n	8000d4c <__aeabi_dadd+0x50c>
 8000d4a:	e6df      	b.n	8000b0c <__aeabi_dadd+0x2cc>
 8000d4c:	2702      	movs	r7, #2
 8000d4e:	e687      	b.n	8000a60 <__aeabi_dadd+0x220>
 8000d50:	4663      	mov	r3, ip
 8000d52:	1ac5      	subs	r5, r0, r3
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	4180      	sbcs	r0, r0
 8000d58:	4653      	mov	r3, sl
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	1ae4      	subs	r4, r4, r3
 8000d5e:	2701      	movs	r7, #1
 8000d60:	1a24      	subs	r4, r4, r0
 8000d62:	e5c0      	b.n	80008e6 <__aeabi_dadd+0xa6>
 8000d64:	0762      	lsls	r2, r4, #29
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4302      	orrs	r2, r0
 8000d6a:	08e4      	lsrs	r4, r4, #3
 8000d6c:	e736      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000d6e:	0011      	movs	r1, r2
 8000d70:	4653      	mov	r3, sl
 8000d72:	3920      	subs	r1, #32
 8000d74:	40cb      	lsrs	r3, r1
 8000d76:	4699      	mov	r9, r3
 8000d78:	2a20      	cmp	r2, #32
 8000d7a:	d006      	beq.n	8000d8a <__aeabi_dadd+0x54a>
 8000d7c:	2140      	movs	r1, #64	@ 0x40
 8000d7e:	4653      	mov	r3, sl
 8000d80:	1a8a      	subs	r2, r1, r2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	4662      	mov	r2, ip
 8000d86:	431a      	orrs	r2, r3
 8000d88:	4694      	mov	ip, r2
 8000d8a:	4665      	mov	r5, ip
 8000d8c:	1e6b      	subs	r3, r5, #1
 8000d8e:	419d      	sbcs	r5, r3
 8000d90:	464b      	mov	r3, r9
 8000d92:	431d      	orrs	r5, r3
 8000d94:	e659      	b.n	8000a4a <__aeabi_dadd+0x20a>
 8000d96:	0762      	lsls	r2, r4, #29
 8000d98:	08c0      	lsrs	r0, r0, #3
 8000d9a:	4302      	orrs	r2, r0
 8000d9c:	08e4      	lsrs	r4, r4, #3
 8000d9e:	e70d      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000da0:	4653      	mov	r3, sl
 8000da2:	075a      	lsls	r2, r3, #29
 8000da4:	4663      	mov	r3, ip
 8000da6:	08d8      	lsrs	r0, r3, #3
 8000da8:	4653      	mov	r3, sl
 8000daa:	000e      	movs	r6, r1
 8000dac:	4302      	orrs	r2, r0
 8000dae:	08dc      	lsrs	r4, r3, #3
 8000db0:	e714      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000db2:	0015      	movs	r5, r2
 8000db4:	0026      	movs	r6, r4
 8000db6:	3d20      	subs	r5, #32
 8000db8:	40ee      	lsrs	r6, r5
 8000dba:	2a20      	cmp	r2, #32
 8000dbc:	d003      	beq.n	8000dc6 <__aeabi_dadd+0x586>
 8000dbe:	2540      	movs	r5, #64	@ 0x40
 8000dc0:	1aaa      	subs	r2, r5, r2
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	4320      	orrs	r0, r4
 8000dc6:	1e42      	subs	r2, r0, #1
 8000dc8:	4190      	sbcs	r0, r2
 8000dca:	0005      	movs	r5, r0
 8000dcc:	4335      	orrs	r5, r6
 8000dce:	e606      	b.n	80009de <__aeabi_dadd+0x19e>
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d07c      	beq.n	8000ece <__aeabi_dadd+0x68e>
 8000dd4:	4662      	mov	r2, ip
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x5a0>
 8000dde:	e6fa      	b.n	8000bd6 <__aeabi_dadd+0x396>
 8000de0:	0762      	lsls	r2, r4, #29
 8000de2:	4310      	orrs	r0, r2
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	08e4      	lsrs	r4, r4, #3
 8000de8:	0312      	lsls	r2, r2, #12
 8000dea:	4214      	tst	r4, r2
 8000dec:	d008      	beq.n	8000e00 <__aeabi_dadd+0x5c0>
 8000dee:	08d9      	lsrs	r1, r3, #3
 8000df0:	4211      	tst	r1, r2
 8000df2:	d105      	bne.n	8000e00 <__aeabi_dadd+0x5c0>
 8000df4:	4663      	mov	r3, ip
 8000df6:	08d8      	lsrs	r0, r3, #3
 8000df8:	4653      	mov	r3, sl
 8000dfa:	000c      	movs	r4, r1
 8000dfc:	075b      	lsls	r3, r3, #29
 8000dfe:	4318      	orrs	r0, r3
 8000e00:	0f42      	lsrs	r2, r0, #29
 8000e02:	00c0      	lsls	r0, r0, #3
 8000e04:	08c0      	lsrs	r0, r0, #3
 8000e06:	0752      	lsls	r2, r2, #29
 8000e08:	4302      	orrs	r2, r0
 8000e0a:	e6e7      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x5d2>
 8000e10:	e72d      	b.n	8000c6e <__aeabi_dadd+0x42e>
 8000e12:	4663      	mov	r3, ip
 8000e14:	08d8      	lsrs	r0, r3, #3
 8000e16:	4653      	mov	r3, sl
 8000e18:	075a      	lsls	r2, r3, #29
 8000e1a:	000e      	movs	r6, r1
 8000e1c:	4302      	orrs	r2, r0
 8000e1e:	08dc      	lsrs	r4, r3, #3
 8000e20:	e6cc      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000e22:	4663      	mov	r3, ip
 8000e24:	1a1d      	subs	r5, r3, r0
 8000e26:	45ac      	cmp	ip, r5
 8000e28:	4192      	sbcs	r2, r2
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	1b1c      	subs	r4, r3, r4
 8000e30:	000e      	movs	r6, r1
 8000e32:	4688      	mov	r8, r1
 8000e34:	1aa4      	subs	r4, r4, r2
 8000e36:	3701      	adds	r7, #1
 8000e38:	e555      	b.n	80008e6 <__aeabi_dadd+0xa6>
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	08d9      	lsrs	r1, r3, #3
 8000e3e:	4653      	mov	r3, sl
 8000e40:	075a      	lsls	r2, r3, #29
 8000e42:	430a      	orrs	r2, r1
 8000e44:	08dc      	lsrs	r4, r3, #3
 8000e46:	e6c9      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000e48:	4660      	mov	r0, ip
 8000e4a:	4654      	mov	r4, sl
 8000e4c:	e6d4      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000e4e:	08c0      	lsrs	r0, r0, #3
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x616>
 8000e54:	e6bf      	b.n	8000bd6 <__aeabi_dadd+0x396>
 8000e56:	0762      	lsls	r2, r4, #29
 8000e58:	4310      	orrs	r0, r2
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	08e4      	lsrs	r4, r4, #3
 8000e5e:	0312      	lsls	r2, r2, #12
 8000e60:	4214      	tst	r4, r2
 8000e62:	d0cd      	beq.n	8000e00 <__aeabi_dadd+0x5c0>
 8000e64:	08dd      	lsrs	r5, r3, #3
 8000e66:	4215      	tst	r5, r2
 8000e68:	d1ca      	bne.n	8000e00 <__aeabi_dadd+0x5c0>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	08d8      	lsrs	r0, r3, #3
 8000e6e:	4653      	mov	r3, sl
 8000e70:	075b      	lsls	r3, r3, #29
 8000e72:	000e      	movs	r6, r1
 8000e74:	002c      	movs	r4, r5
 8000e76:	4318      	orrs	r0, r3
 8000e78:	e7c2      	b.n	8000e00 <__aeabi_dadd+0x5c0>
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	08d9      	lsrs	r1, r3, #3
 8000e7e:	4653      	mov	r3, sl
 8000e80:	075a      	lsls	r2, r3, #29
 8000e82:	430a      	orrs	r2, r1
 8000e84:	08dc      	lsrs	r4, r3, #3
 8000e86:	e699      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000e88:	4663      	mov	r3, ip
 8000e8a:	08d8      	lsrs	r0, r3, #3
 8000e8c:	4653      	mov	r3, sl
 8000e8e:	075a      	lsls	r2, r3, #29
 8000e90:	000e      	movs	r6, r1
 8000e92:	4302      	orrs	r2, r0
 8000e94:	08dc      	lsrs	r4, r3, #3
 8000e96:	e6a1      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0027      	movs	r7, r4
 8000e9c:	3920      	subs	r1, #32
 8000e9e:	40cf      	lsrs	r7, r1
 8000ea0:	2a20      	cmp	r2, #32
 8000ea2:	d003      	beq.n	8000eac <__aeabi_dadd+0x66c>
 8000ea4:	2140      	movs	r1, #64	@ 0x40
 8000ea6:	1a8a      	subs	r2, r1, r2
 8000ea8:	4094      	lsls	r4, r2
 8000eaa:	4320      	orrs	r0, r4
 8000eac:	1e42      	subs	r2, r0, #1
 8000eae:	4190      	sbcs	r0, r2
 8000eb0:	0005      	movs	r5, r0
 8000eb2:	433d      	orrs	r5, r7
 8000eb4:	e651      	b.n	8000b5a <__aeabi_dadd+0x31a>
 8000eb6:	000c      	movs	r4, r1
 8000eb8:	2500      	movs	r5, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	e558      	b.n	8000970 <__aeabi_dadd+0x130>
 8000ebe:	4460      	add	r0, ip
 8000ec0:	4560      	cmp	r0, ip
 8000ec2:	4192      	sbcs	r2, r2
 8000ec4:	4454      	add	r4, sl
 8000ec6:	4252      	negs	r2, r2
 8000ec8:	0005      	movs	r5, r0
 8000eca:	18a4      	adds	r4, r4, r2
 8000ecc:	e73a      	b.n	8000d44 <__aeabi_dadd+0x504>
 8000ece:	4653      	mov	r3, sl
 8000ed0:	075a      	lsls	r2, r3, #29
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	08d9      	lsrs	r1, r3, #3
 8000ed6:	4653      	mov	r3, sl
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	08dc      	lsrs	r4, r3, #3
 8000edc:	e67e      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000ede:	001a      	movs	r2, r3
 8000ee0:	001c      	movs	r4, r3
 8000ee2:	432a      	orrs	r2, r5
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_dadd+0x6a8>
 8000ee6:	e6ab      	b.n	8000c40 <__aeabi_dadd+0x400>
 8000ee8:	e6c1      	b.n	8000c6e <__aeabi_dadd+0x42e>
 8000eea:	2120      	movs	r1, #32
 8000eec:	2500      	movs	r5, #0
 8000eee:	1a09      	subs	r1, r1, r0
 8000ef0:	e519      	b.n	8000926 <__aeabi_dadd+0xe6>
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	4c01      	ldr	r4, [pc, #4]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000ef8:	e53a      	b.n	8000970 <__aeabi_dadd+0x130>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	ff7fffff 	.word	0xff7fffff
 8000f04:	000007fe 	.word	0x000007fe

08000f08 <__aeabi_ddiv>:
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	46de      	mov	lr, fp
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	4657      	mov	r7, sl
 8000f10:	464e      	mov	r6, r9
 8000f12:	b5e0      	push	{r5, r6, r7, lr}
 8000f14:	b087      	sub	sp, #28
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	030b      	lsls	r3, r1, #12
 8000f1c:	0b1b      	lsrs	r3, r3, #12
 8000f1e:	469b      	mov	fp, r3
 8000f20:	0fca      	lsrs	r2, r1, #31
 8000f22:	004b      	lsls	r3, r1, #1
 8000f24:	0004      	movs	r4, r0
 8000f26:	4680      	mov	r8, r0
 8000f28:	0d5b      	lsrs	r3, r3, #21
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x28>
 8000f2e:	e16a      	b.n	8001206 <__aeabi_ddiv+0x2fe>
 8000f30:	4ad4      	ldr	r2, [pc, #848]	@ (8001284 <__aeabi_ddiv+0x37c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x30>
 8000f36:	e18c      	b.n	8001252 <__aeabi_ddiv+0x34a>
 8000f38:	4659      	mov	r1, fp
 8000f3a:	0f42      	lsrs	r2, r0, #29
 8000f3c:	00c9      	lsls	r1, r1, #3
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	0409      	lsls	r1, r1, #16
 8000f44:	4311      	orrs	r1, r2
 8000f46:	00c2      	lsls	r2, r0, #3
 8000f48:	4690      	mov	r8, r2
 8000f4a:	4acf      	ldr	r2, [pc, #828]	@ (8001288 <__aeabi_ddiv+0x380>)
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	4692      	mov	sl, r2
 8000f50:	449a      	add	sl, r3
 8000f52:	2300      	movs	r3, #0
 8000f54:	2400      	movs	r4, #0
 8000f56:	9303      	str	r3, [sp, #12]
 8000f58:	9e00      	ldr	r6, [sp, #0]
 8000f5a:	9f01      	ldr	r7, [sp, #4]
 8000f5c:	033b      	lsls	r3, r7, #12
 8000f5e:	0b1b      	lsrs	r3, r3, #12
 8000f60:	469b      	mov	fp, r3
 8000f62:	007b      	lsls	r3, r7, #1
 8000f64:	0030      	movs	r0, r6
 8000f66:	0d5b      	lsrs	r3, r3, #21
 8000f68:	0ffd      	lsrs	r5, r7, #31
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x68>
 8000f6e:	e128      	b.n	80011c2 <__aeabi_ddiv+0x2ba>
 8000f70:	4ac4      	ldr	r2, [pc, #784]	@ (8001284 <__aeabi_ddiv+0x37c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x70>
 8000f76:	e177      	b.n	8001268 <__aeabi_ddiv+0x360>
 8000f78:	4659      	mov	r1, fp
 8000f7a:	0f72      	lsrs	r2, r6, #29
 8000f7c:	00c9      	lsls	r1, r1, #3
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0409      	lsls	r1, r1, #16
 8000f84:	4311      	orrs	r1, r2
 8000f86:	468b      	mov	fp, r1
 8000f88:	49bf      	ldr	r1, [pc, #764]	@ (8001288 <__aeabi_ddiv+0x380>)
 8000f8a:	00f2      	lsls	r2, r6, #3
 8000f8c:	468c      	mov	ip, r1
 8000f8e:	4651      	mov	r1, sl
 8000f90:	4463      	add	r3, ip
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	469a      	mov	sl, r3
 8000f96:	2300      	movs	r3, #0
 8000f98:	9e02      	ldr	r6, [sp, #8]
 8000f9a:	406e      	eors	r6, r5
 8000f9c:	2c0f      	cmp	r4, #15
 8000f9e:	d827      	bhi.n	8000ff0 <__aeabi_ddiv+0xe8>
 8000fa0:	49ba      	ldr	r1, [pc, #744]	@ (800128c <__aeabi_ddiv+0x384>)
 8000fa2:	00a4      	lsls	r4, r4, #2
 8000fa4:	5909      	ldr	r1, [r1, r4]
 8000fa6:	468f      	mov	pc, r1
 8000fa8:	46cb      	mov	fp, r9
 8000faa:	4642      	mov	r2, r8
 8000fac:	9e02      	ldr	r6, [sp, #8]
 8000fae:	9b03      	ldr	r3, [sp, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d016      	beq.n	8000fe2 <__aeabi_ddiv+0xda>
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d100      	bne.n	8000fba <__aeabi_ddiv+0xb2>
 8000fb8:	e2a6      	b.n	8001508 <__aeabi_ddiv+0x600>
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0xb8>
 8000fbe:	e0df      	b.n	8001180 <__aeabi_ddiv+0x278>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	051b      	lsls	r3, r3, #20
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	07f6      	lsls	r6, r6, #31
 8000fce:	4333      	orrs	r3, r6
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	b007      	add	sp, #28
 8000fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd8:	46bb      	mov	fp, r7
 8000fda:	46b2      	mov	sl, r6
 8000fdc:	46a9      	mov	r9, r5
 8000fde:	46a0      	mov	r8, r4
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	4ba6      	ldr	r3, [pc, #664]	@ (8001284 <__aeabi_ddiv+0x37c>)
 8000fea:	e7ed      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8000fec:	002e      	movs	r6, r5
 8000fee:	e7df      	b.n	8000fb0 <__aeabi_ddiv+0xa8>
 8000ff0:	45cb      	cmp	fp, r9
 8000ff2:	d200      	bcs.n	8000ff6 <__aeabi_ddiv+0xee>
 8000ff4:	e1d4      	b.n	80013a0 <__aeabi_ddiv+0x498>
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0xf2>
 8000ff8:	e1cf      	b.n	800139a <__aeabi_ddiv+0x492>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	469c      	mov	ip, r3
 8001000:	4644      	mov	r4, r8
 8001002:	4648      	mov	r0, r9
 8001004:	2700      	movs	r7, #0
 8001006:	44e2      	add	sl, ip
 8001008:	465b      	mov	r3, fp
 800100a:	0e15      	lsrs	r5, r2, #24
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	431d      	orrs	r5, r3
 8001010:	0c19      	lsrs	r1, r3, #16
 8001012:	042b      	lsls	r3, r5, #16
 8001014:	0212      	lsls	r2, r2, #8
 8001016:	9500      	str	r5, [sp, #0]
 8001018:	0c1d      	lsrs	r5, r3, #16
 800101a:	4691      	mov	r9, r2
 800101c:	9102      	str	r1, [sp, #8]
 800101e:	9503      	str	r5, [sp, #12]
 8001020:	f7ff f914 	bl	800024c <__aeabi_uidivmod>
 8001024:	0002      	movs	r2, r0
 8001026:	436a      	muls	r2, r5
 8001028:	040b      	lsls	r3, r1, #16
 800102a:	0c21      	lsrs	r1, r4, #16
 800102c:	4680      	mov	r8, r0
 800102e:	4319      	orrs	r1, r3
 8001030:	428a      	cmp	r2, r1
 8001032:	d909      	bls.n	8001048 <__aeabi_ddiv+0x140>
 8001034:	9d00      	ldr	r5, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	46ac      	mov	ip, r5
 800103a:	425b      	negs	r3, r3
 800103c:	4461      	add	r1, ip
 800103e:	469c      	mov	ip, r3
 8001040:	44e0      	add	r8, ip
 8001042:	428d      	cmp	r5, r1
 8001044:	d800      	bhi.n	8001048 <__aeabi_ddiv+0x140>
 8001046:	e1fb      	b.n	8001440 <__aeabi_ddiv+0x538>
 8001048:	1a88      	subs	r0, r1, r2
 800104a:	9902      	ldr	r1, [sp, #8]
 800104c:	f7ff f8fe 	bl	800024c <__aeabi_uidivmod>
 8001050:	9a03      	ldr	r2, [sp, #12]
 8001052:	0424      	lsls	r4, r4, #16
 8001054:	4342      	muls	r2, r0
 8001056:	0409      	lsls	r1, r1, #16
 8001058:	0c24      	lsrs	r4, r4, #16
 800105a:	0003      	movs	r3, r0
 800105c:	430c      	orrs	r4, r1
 800105e:	42a2      	cmp	r2, r4
 8001060:	d906      	bls.n	8001070 <__aeabi_ddiv+0x168>
 8001062:	9900      	ldr	r1, [sp, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	468c      	mov	ip, r1
 8001068:	4464      	add	r4, ip
 800106a:	42a1      	cmp	r1, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x168>
 800106e:	e1e1      	b.n	8001434 <__aeabi_ddiv+0x52c>
 8001070:	1aa0      	subs	r0, r4, r2
 8001072:	4642      	mov	r2, r8
 8001074:	0412      	lsls	r2, r2, #16
 8001076:	431a      	orrs	r2, r3
 8001078:	4693      	mov	fp, r2
 800107a:	464b      	mov	r3, r9
 800107c:	4659      	mov	r1, fp
 800107e:	0c1b      	lsrs	r3, r3, #16
 8001080:	001d      	movs	r5, r3
 8001082:	9304      	str	r3, [sp, #16]
 8001084:	040b      	lsls	r3, r1, #16
 8001086:	4649      	mov	r1, r9
 8001088:	0409      	lsls	r1, r1, #16
 800108a:	0c09      	lsrs	r1, r1, #16
 800108c:	000c      	movs	r4, r1
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	435c      	muls	r4, r3
 8001092:	0c12      	lsrs	r2, r2, #16
 8001094:	436b      	muls	r3, r5
 8001096:	4688      	mov	r8, r1
 8001098:	4351      	muls	r1, r2
 800109a:	436a      	muls	r2, r5
 800109c:	0c25      	lsrs	r5, r4, #16
 800109e:	46ac      	mov	ip, r5
 80010a0:	185b      	adds	r3, r3, r1
 80010a2:	4463      	add	r3, ip
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d903      	bls.n	80010b0 <__aeabi_ddiv+0x1a8>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4462      	add	r2, ip
 80010b0:	0c19      	lsrs	r1, r3, #16
 80010b2:	0424      	lsls	r4, r4, #16
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	0c24      	lsrs	r4, r4, #16
 80010b8:	188a      	adds	r2, r1, r2
 80010ba:	191c      	adds	r4, r3, r4
 80010bc:	4290      	cmp	r0, r2
 80010be:	d302      	bcc.n	80010c6 <__aeabi_ddiv+0x1be>
 80010c0:	d116      	bne.n	80010f0 <__aeabi_ddiv+0x1e8>
 80010c2:	42a7      	cmp	r7, r4
 80010c4:	d214      	bcs.n	80010f0 <__aeabi_ddiv+0x1e8>
 80010c6:	465b      	mov	r3, fp
 80010c8:	9d00      	ldr	r5, [sp, #0]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	444f      	add	r7, r9
 80010ce:	9305      	str	r3, [sp, #20]
 80010d0:	454f      	cmp	r7, r9
 80010d2:	419b      	sbcs	r3, r3
 80010d4:	46ac      	mov	ip, r5
 80010d6:	425b      	negs	r3, r3
 80010d8:	4463      	add	r3, ip
 80010da:	18c0      	adds	r0, r0, r3
 80010dc:	4285      	cmp	r5, r0
 80010de:	d300      	bcc.n	80010e2 <__aeabi_ddiv+0x1da>
 80010e0:	e1a1      	b.n	8001426 <__aeabi_ddiv+0x51e>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	d900      	bls.n	80010e8 <__aeabi_ddiv+0x1e0>
 80010e6:	e1f6      	b.n	80014d6 <__aeabi_ddiv+0x5ce>
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x1e4>
 80010ea:	e1f1      	b.n	80014d0 <__aeabi_ddiv+0x5c8>
 80010ec:	9b05      	ldr	r3, [sp, #20]
 80010ee:	469b      	mov	fp, r3
 80010f0:	1b3c      	subs	r4, r7, r4
 80010f2:	42a7      	cmp	r7, r4
 80010f4:	41bf      	sbcs	r7, r7
 80010f6:	9d00      	ldr	r5, [sp, #0]
 80010f8:	1a80      	subs	r0, r0, r2
 80010fa:	427f      	negs	r7, r7
 80010fc:	1bc0      	subs	r0, r0, r7
 80010fe:	4285      	cmp	r5, r0
 8001100:	d100      	bne.n	8001104 <__aeabi_ddiv+0x1fc>
 8001102:	e1d0      	b.n	80014a6 <__aeabi_ddiv+0x59e>
 8001104:	9902      	ldr	r1, [sp, #8]
 8001106:	f7ff f8a1 	bl	800024c <__aeabi_uidivmod>
 800110a:	9a03      	ldr	r2, [sp, #12]
 800110c:	040b      	lsls	r3, r1, #16
 800110e:	4342      	muls	r2, r0
 8001110:	0c21      	lsrs	r1, r4, #16
 8001112:	0007      	movs	r7, r0
 8001114:	4319      	orrs	r1, r3
 8001116:	428a      	cmp	r2, r1
 8001118:	d900      	bls.n	800111c <__aeabi_ddiv+0x214>
 800111a:	e178      	b.n	800140e <__aeabi_ddiv+0x506>
 800111c:	1a88      	subs	r0, r1, r2
 800111e:	9902      	ldr	r1, [sp, #8]
 8001120:	f7ff f894 	bl	800024c <__aeabi_uidivmod>
 8001124:	9a03      	ldr	r2, [sp, #12]
 8001126:	0424      	lsls	r4, r4, #16
 8001128:	4342      	muls	r2, r0
 800112a:	0409      	lsls	r1, r1, #16
 800112c:	0c24      	lsrs	r4, r4, #16
 800112e:	0003      	movs	r3, r0
 8001130:	430c      	orrs	r4, r1
 8001132:	42a2      	cmp	r2, r4
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x230>
 8001136:	e15d      	b.n	80013f4 <__aeabi_ddiv+0x4ec>
 8001138:	4641      	mov	r1, r8
 800113a:	1aa4      	subs	r4, r4, r2
 800113c:	043a      	lsls	r2, r7, #16
 800113e:	431a      	orrs	r2, r3
 8001140:	9d04      	ldr	r5, [sp, #16]
 8001142:	0413      	lsls	r3, r2, #16
 8001144:	0c1b      	lsrs	r3, r3, #16
 8001146:	4359      	muls	r1, r3
 8001148:	4647      	mov	r7, r8
 800114a:	436b      	muls	r3, r5
 800114c:	469c      	mov	ip, r3
 800114e:	0c10      	lsrs	r0, r2, #16
 8001150:	4347      	muls	r7, r0
 8001152:	0c0b      	lsrs	r3, r1, #16
 8001154:	44bc      	add	ip, r7
 8001156:	4463      	add	r3, ip
 8001158:	4368      	muls	r0, r5
 800115a:	429f      	cmp	r7, r3
 800115c:	d903      	bls.n	8001166 <__aeabi_ddiv+0x25e>
 800115e:	2580      	movs	r5, #128	@ 0x80
 8001160:	026d      	lsls	r5, r5, #9
 8001162:	46ac      	mov	ip, r5
 8001164:	4460      	add	r0, ip
 8001166:	0c1f      	lsrs	r7, r3, #16
 8001168:	0409      	lsls	r1, r1, #16
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	0c09      	lsrs	r1, r1, #16
 800116e:	183f      	adds	r7, r7, r0
 8001170:	185b      	adds	r3, r3, r1
 8001172:	42bc      	cmp	r4, r7
 8001174:	d200      	bcs.n	8001178 <__aeabi_ddiv+0x270>
 8001176:	e102      	b.n	800137e <__aeabi_ddiv+0x476>
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x274>
 800117a:	e0fd      	b.n	8001378 <__aeabi_ddiv+0x470>
 800117c:	2301      	movs	r3, #1
 800117e:	431a      	orrs	r2, r3
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <__aeabi_ddiv+0x388>)
 8001182:	4453      	add	r3, sl
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc00      	bgt.n	800118a <__aeabi_ddiv+0x282>
 8001188:	e0ae      	b.n	80012e8 <__aeabi_ddiv+0x3e0>
 800118a:	0751      	lsls	r1, r2, #29
 800118c:	d000      	beq.n	8001190 <__aeabi_ddiv+0x288>
 800118e:	e198      	b.n	80014c2 <__aeabi_ddiv+0x5ba>
 8001190:	4659      	mov	r1, fp
 8001192:	01c9      	lsls	r1, r1, #7
 8001194:	d506      	bpl.n	80011a4 <__aeabi_ddiv+0x29c>
 8001196:	4659      	mov	r1, fp
 8001198:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <__aeabi_ddiv+0x38c>)
 800119a:	4019      	ands	r1, r3
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	468b      	mov	fp, r1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4453      	add	r3, sl
 80011a4:	493c      	ldr	r1, [pc, #240]	@ (8001298 <__aeabi_ddiv+0x390>)
 80011a6:	428b      	cmp	r3, r1
 80011a8:	dd00      	ble.n	80011ac <__aeabi_ddiv+0x2a4>
 80011aa:	e71a      	b.n	8000fe2 <__aeabi_ddiv+0xda>
 80011ac:	4659      	mov	r1, fp
 80011ae:	08d2      	lsrs	r2, r2, #3
 80011b0:	0749      	lsls	r1, r1, #29
 80011b2:	4311      	orrs	r1, r2
 80011b4:	465a      	mov	r2, fp
 80011b6:	055b      	lsls	r3, r3, #21
 80011b8:	0254      	lsls	r4, r2, #9
 80011ba:	4688      	mov	r8, r1
 80011bc:	0b24      	lsrs	r4, r4, #12
 80011be:	0d5b      	lsrs	r3, r3, #21
 80011c0:	e702      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 80011c2:	465a      	mov	r2, fp
 80011c4:	9b00      	ldr	r3, [sp, #0]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x2c4>
 80011ca:	e07e      	b.n	80012ca <__aeabi_ddiv+0x3c2>
 80011cc:	465b      	mov	r3, fp
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_ddiv+0x2cc>
 80011d2:	e100      	b.n	80013d6 <__aeabi_ddiv+0x4ce>
 80011d4:	4658      	mov	r0, fp
 80011d6:	f001 fa37 	bl	8002648 <__clzsi2>
 80011da:	0002      	movs	r2, r0
 80011dc:	0003      	movs	r3, r0
 80011de:	3a0b      	subs	r2, #11
 80011e0:	271d      	movs	r7, #29
 80011e2:	9e00      	ldr	r6, [sp, #0]
 80011e4:	1aba      	subs	r2, r7, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	4658      	mov	r0, fp
 80011ea:	40d6      	lsrs	r6, r2
 80011ec:	3908      	subs	r1, #8
 80011ee:	4088      	lsls	r0, r1
 80011f0:	0032      	movs	r2, r6
 80011f2:	4302      	orrs	r2, r0
 80011f4:	4693      	mov	fp, r2
 80011f6:	9a00      	ldr	r2, [sp, #0]
 80011f8:	408a      	lsls	r2, r1
 80011fa:	4928      	ldr	r1, [pc, #160]	@ (800129c <__aeabi_ddiv+0x394>)
 80011fc:	4453      	add	r3, sl
 80011fe:	468a      	mov	sl, r1
 8001200:	449a      	add	sl, r3
 8001202:	2300      	movs	r3, #0
 8001204:	e6c8      	b.n	8000f98 <__aeabi_ddiv+0x90>
 8001206:	465b      	mov	r3, fp
 8001208:	4303      	orrs	r3, r0
 800120a:	4699      	mov	r9, r3
 800120c:	d056      	beq.n	80012bc <__aeabi_ddiv+0x3b4>
 800120e:	465b      	mov	r3, fp
 8001210:	2b00      	cmp	r3, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x30e>
 8001214:	e0cd      	b.n	80013b2 <__aeabi_ddiv+0x4aa>
 8001216:	4658      	mov	r0, fp
 8001218:	f001 fa16 	bl	8002648 <__clzsi2>
 800121c:	230b      	movs	r3, #11
 800121e:	425b      	negs	r3, r3
 8001220:	469c      	mov	ip, r3
 8001222:	0002      	movs	r2, r0
 8001224:	4484      	add	ip, r0
 8001226:	4666      	mov	r6, ip
 8001228:	231d      	movs	r3, #29
 800122a:	1b9b      	subs	r3, r3, r6
 800122c:	0026      	movs	r6, r4
 800122e:	0011      	movs	r1, r2
 8001230:	4658      	mov	r0, fp
 8001232:	40de      	lsrs	r6, r3
 8001234:	3908      	subs	r1, #8
 8001236:	4088      	lsls	r0, r1
 8001238:	0033      	movs	r3, r6
 800123a:	4303      	orrs	r3, r0
 800123c:	4699      	mov	r9, r3
 800123e:	0023      	movs	r3, r4
 8001240:	408b      	lsls	r3, r1
 8001242:	4698      	mov	r8, r3
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <__aeabi_ddiv+0x398>)
 8001246:	2400      	movs	r4, #0
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	469a      	mov	sl, r3
 800124c:	2300      	movs	r3, #0
 800124e:	9303      	str	r3, [sp, #12]
 8001250:	e682      	b.n	8000f58 <__aeabi_ddiv+0x50>
 8001252:	465a      	mov	r2, fp
 8001254:	4302      	orrs	r2, r0
 8001256:	4691      	mov	r9, r2
 8001258:	d12a      	bne.n	80012b0 <__aeabi_ddiv+0x3a8>
 800125a:	2200      	movs	r2, #0
 800125c:	469a      	mov	sl, r3
 800125e:	2302      	movs	r3, #2
 8001260:	4690      	mov	r8, r2
 8001262:	2408      	movs	r4, #8
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	e677      	b.n	8000f58 <__aeabi_ddiv+0x50>
 8001268:	465a      	mov	r2, fp
 800126a:	9b00      	ldr	r3, [sp, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <__aeabi_ddiv+0x39c>)
 8001270:	469c      	mov	ip, r3
 8001272:	44e2      	add	sl, ip
 8001274:	2a00      	cmp	r2, #0
 8001276:	d117      	bne.n	80012a8 <__aeabi_ddiv+0x3a0>
 8001278:	2302      	movs	r3, #2
 800127a:	431c      	orrs	r4, r3
 800127c:	2300      	movs	r3, #0
 800127e:	469b      	mov	fp, r3
 8001280:	3302      	adds	r3, #2
 8001282:	e689      	b.n	8000f98 <__aeabi_ddiv+0x90>
 8001284:	000007ff 	.word	0x000007ff
 8001288:	fffffc01 	.word	0xfffffc01
 800128c:	0800808c 	.word	0x0800808c
 8001290:	000003ff 	.word	0x000003ff
 8001294:	feffffff 	.word	0xfeffffff
 8001298:	000007fe 	.word	0x000007fe
 800129c:	000003f3 	.word	0x000003f3
 80012a0:	fffffc0d 	.word	0xfffffc0d
 80012a4:	fffff801 	.word	0xfffff801
 80012a8:	2303      	movs	r3, #3
 80012aa:	0032      	movs	r2, r6
 80012ac:	431c      	orrs	r4, r3
 80012ae:	e673      	b.n	8000f98 <__aeabi_ddiv+0x90>
 80012b0:	469a      	mov	sl, r3
 80012b2:	2303      	movs	r3, #3
 80012b4:	46d9      	mov	r9, fp
 80012b6:	240c      	movs	r4, #12
 80012b8:	9303      	str	r3, [sp, #12]
 80012ba:	e64d      	b.n	8000f58 <__aeabi_ddiv+0x50>
 80012bc:	2300      	movs	r3, #0
 80012be:	4698      	mov	r8, r3
 80012c0:	469a      	mov	sl, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	2404      	movs	r4, #4
 80012c6:	9303      	str	r3, [sp, #12]
 80012c8:	e646      	b.n	8000f58 <__aeabi_ddiv+0x50>
 80012ca:	2301      	movs	r3, #1
 80012cc:	431c      	orrs	r4, r3
 80012ce:	2300      	movs	r3, #0
 80012d0:	469b      	mov	fp, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	e660      	b.n	8000f98 <__aeabi_ddiv+0x90>
 80012d6:	2300      	movs	r3, #0
 80012d8:	2480      	movs	r4, #128	@ 0x80
 80012da:	4698      	mov	r8, r3
 80012dc:	2600      	movs	r6, #0
 80012de:	4b92      	ldr	r3, [pc, #584]	@ (8001528 <__aeabi_ddiv+0x620>)
 80012e0:	0324      	lsls	r4, r4, #12
 80012e2:	e671      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 80012e4:	2201      	movs	r2, #1
 80012e6:	4252      	negs	r2, r2
 80012e8:	2101      	movs	r1, #1
 80012ea:	1ac9      	subs	r1, r1, r3
 80012ec:	2938      	cmp	r1, #56	@ 0x38
 80012ee:	dd00      	ble.n	80012f2 <__aeabi_ddiv+0x3ea>
 80012f0:	e666      	b.n	8000fc0 <__aeabi_ddiv+0xb8>
 80012f2:	291f      	cmp	r1, #31
 80012f4:	dc00      	bgt.n	80012f8 <__aeabi_ddiv+0x3f0>
 80012f6:	e0ab      	b.n	8001450 <__aeabi_ddiv+0x548>
 80012f8:	201f      	movs	r0, #31
 80012fa:	4240      	negs	r0, r0
 80012fc:	1ac3      	subs	r3, r0, r3
 80012fe:	4658      	mov	r0, fp
 8001300:	40d8      	lsrs	r0, r3
 8001302:	0003      	movs	r3, r0
 8001304:	2920      	cmp	r1, #32
 8001306:	d004      	beq.n	8001312 <__aeabi_ddiv+0x40a>
 8001308:	4658      	mov	r0, fp
 800130a:	4988      	ldr	r1, [pc, #544]	@ (800152c <__aeabi_ddiv+0x624>)
 800130c:	4451      	add	r1, sl
 800130e:	4088      	lsls	r0, r1
 8001310:	4302      	orrs	r2, r0
 8001312:	1e51      	subs	r1, r2, #1
 8001314:	418a      	sbcs	r2, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	2307      	movs	r3, #7
 800131a:	0019      	movs	r1, r3
 800131c:	2400      	movs	r4, #0
 800131e:	4011      	ands	r1, r2
 8001320:	4213      	tst	r3, r2
 8001322:	d00c      	beq.n	800133e <__aeabi_ddiv+0x436>
 8001324:	230f      	movs	r3, #15
 8001326:	4013      	ands	r3, r2
 8001328:	2b04      	cmp	r3, #4
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0x426>
 800132c:	e0f9      	b.n	8001522 <__aeabi_ddiv+0x61a>
 800132e:	1d11      	adds	r1, r2, #4
 8001330:	4291      	cmp	r1, r2
 8001332:	419b      	sbcs	r3, r3
 8001334:	000a      	movs	r2, r1
 8001336:	425b      	negs	r3, r3
 8001338:	0759      	lsls	r1, r3, #29
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	0b1c      	lsrs	r4, r3, #12
 800133e:	08d2      	lsrs	r2, r2, #3
 8001340:	430a      	orrs	r2, r1
 8001342:	4690      	mov	r8, r2
 8001344:	2300      	movs	r3, #0
 8001346:	e63f      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001348:	2480      	movs	r4, #128	@ 0x80
 800134a:	464b      	mov	r3, r9
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	4223      	tst	r3, r4
 8001350:	d009      	beq.n	8001366 <__aeabi_ddiv+0x45e>
 8001352:	465b      	mov	r3, fp
 8001354:	4223      	tst	r3, r4
 8001356:	d106      	bne.n	8001366 <__aeabi_ddiv+0x45e>
 8001358:	431c      	orrs	r4, r3
 800135a:	0324      	lsls	r4, r4, #12
 800135c:	002e      	movs	r6, r5
 800135e:	4690      	mov	r8, r2
 8001360:	4b71      	ldr	r3, [pc, #452]	@ (8001528 <__aeabi_ddiv+0x620>)
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	e630      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001366:	2480      	movs	r4, #128	@ 0x80
 8001368:	464b      	mov	r3, r9
 800136a:	0324      	lsls	r4, r4, #12
 800136c:	431c      	orrs	r4, r3
 800136e:	0324      	lsls	r4, r4, #12
 8001370:	9e02      	ldr	r6, [sp, #8]
 8001372:	4b6d      	ldr	r3, [pc, #436]	@ (8001528 <__aeabi_ddiv+0x620>)
 8001374:	0b24      	lsrs	r4, r4, #12
 8001376:	e627      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <__aeabi_ddiv+0x476>
 800137c:	e700      	b.n	8001180 <__aeabi_ddiv+0x278>
 800137e:	9800      	ldr	r0, [sp, #0]
 8001380:	1e51      	subs	r1, r2, #1
 8001382:	4684      	mov	ip, r0
 8001384:	4464      	add	r4, ip
 8001386:	4284      	cmp	r4, r0
 8001388:	d200      	bcs.n	800138c <__aeabi_ddiv+0x484>
 800138a:	e084      	b.n	8001496 <__aeabi_ddiv+0x58e>
 800138c:	42bc      	cmp	r4, r7
 800138e:	d200      	bcs.n	8001392 <__aeabi_ddiv+0x48a>
 8001390:	e0ae      	b.n	80014f0 <__aeabi_ddiv+0x5e8>
 8001392:	d100      	bne.n	8001396 <__aeabi_ddiv+0x48e>
 8001394:	e0c1      	b.n	800151a <__aeabi_ddiv+0x612>
 8001396:	000a      	movs	r2, r1
 8001398:	e6f0      	b.n	800117c <__aeabi_ddiv+0x274>
 800139a:	4542      	cmp	r2, r8
 800139c:	d900      	bls.n	80013a0 <__aeabi_ddiv+0x498>
 800139e:	e62c      	b.n	8000ffa <__aeabi_ddiv+0xf2>
 80013a0:	464b      	mov	r3, r9
 80013a2:	07dc      	lsls	r4, r3, #31
 80013a4:	0858      	lsrs	r0, r3, #1
 80013a6:	4643      	mov	r3, r8
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	431c      	orrs	r4, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	07df      	lsls	r7, r3, #31
 80013b0:	e62a      	b.n	8001008 <__aeabi_ddiv+0x100>
 80013b2:	f001 f949 	bl	8002648 <__clzsi2>
 80013b6:	2315      	movs	r3, #21
 80013b8:	469c      	mov	ip, r3
 80013ba:	4484      	add	ip, r0
 80013bc:	0002      	movs	r2, r0
 80013be:	4663      	mov	r3, ip
 80013c0:	3220      	adds	r2, #32
 80013c2:	2b1c      	cmp	r3, #28
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_ddiv+0x4c0>
 80013c6:	e72e      	b.n	8001226 <__aeabi_ddiv+0x31e>
 80013c8:	0023      	movs	r3, r4
 80013ca:	3808      	subs	r0, #8
 80013cc:	4083      	lsls	r3, r0
 80013ce:	4699      	mov	r9, r3
 80013d0:	2300      	movs	r3, #0
 80013d2:	4698      	mov	r8, r3
 80013d4:	e736      	b.n	8001244 <__aeabi_ddiv+0x33c>
 80013d6:	f001 f937 	bl	8002648 <__clzsi2>
 80013da:	0002      	movs	r2, r0
 80013dc:	0003      	movs	r3, r0
 80013de:	3215      	adds	r2, #21
 80013e0:	3320      	adds	r3, #32
 80013e2:	2a1c      	cmp	r2, #28
 80013e4:	dc00      	bgt.n	80013e8 <__aeabi_ddiv+0x4e0>
 80013e6:	e6fb      	b.n	80011e0 <__aeabi_ddiv+0x2d8>
 80013e8:	9900      	ldr	r1, [sp, #0]
 80013ea:	3808      	subs	r0, #8
 80013ec:	4081      	lsls	r1, r0
 80013ee:	2200      	movs	r2, #0
 80013f0:	468b      	mov	fp, r1
 80013f2:	e702      	b.n	80011fa <__aeabi_ddiv+0x2f2>
 80013f4:	9900      	ldr	r1, [sp, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	468c      	mov	ip, r1
 80013fa:	4464      	add	r4, ip
 80013fc:	42a1      	cmp	r1, r4
 80013fe:	d900      	bls.n	8001402 <__aeabi_ddiv+0x4fa>
 8001400:	e69a      	b.n	8001138 <__aeabi_ddiv+0x230>
 8001402:	42a2      	cmp	r2, r4
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x500>
 8001406:	e697      	b.n	8001138 <__aeabi_ddiv+0x230>
 8001408:	1e83      	subs	r3, r0, #2
 800140a:	4464      	add	r4, ip
 800140c:	e694      	b.n	8001138 <__aeabi_ddiv+0x230>
 800140e:	46ac      	mov	ip, r5
 8001410:	4461      	add	r1, ip
 8001412:	3f01      	subs	r7, #1
 8001414:	428d      	cmp	r5, r1
 8001416:	d900      	bls.n	800141a <__aeabi_ddiv+0x512>
 8001418:	e680      	b.n	800111c <__aeabi_ddiv+0x214>
 800141a:	428a      	cmp	r2, r1
 800141c:	d800      	bhi.n	8001420 <__aeabi_ddiv+0x518>
 800141e:	e67d      	b.n	800111c <__aeabi_ddiv+0x214>
 8001420:	1e87      	subs	r7, r0, #2
 8001422:	4461      	add	r1, ip
 8001424:	e67a      	b.n	800111c <__aeabi_ddiv+0x214>
 8001426:	4285      	cmp	r5, r0
 8001428:	d000      	beq.n	800142c <__aeabi_ddiv+0x524>
 800142a:	e65f      	b.n	80010ec <__aeabi_ddiv+0x1e4>
 800142c:	45b9      	cmp	r9, r7
 800142e:	d900      	bls.n	8001432 <__aeabi_ddiv+0x52a>
 8001430:	e65c      	b.n	80010ec <__aeabi_ddiv+0x1e4>
 8001432:	e656      	b.n	80010e2 <__aeabi_ddiv+0x1da>
 8001434:	42a2      	cmp	r2, r4
 8001436:	d800      	bhi.n	800143a <__aeabi_ddiv+0x532>
 8001438:	e61a      	b.n	8001070 <__aeabi_ddiv+0x168>
 800143a:	1e83      	subs	r3, r0, #2
 800143c:	4464      	add	r4, ip
 800143e:	e617      	b.n	8001070 <__aeabi_ddiv+0x168>
 8001440:	428a      	cmp	r2, r1
 8001442:	d800      	bhi.n	8001446 <__aeabi_ddiv+0x53e>
 8001444:	e600      	b.n	8001048 <__aeabi_ddiv+0x140>
 8001446:	46ac      	mov	ip, r5
 8001448:	1e83      	subs	r3, r0, #2
 800144a:	4698      	mov	r8, r3
 800144c:	4461      	add	r1, ip
 800144e:	e5fb      	b.n	8001048 <__aeabi_ddiv+0x140>
 8001450:	4837      	ldr	r0, [pc, #220]	@ (8001530 <__aeabi_ddiv+0x628>)
 8001452:	0014      	movs	r4, r2
 8001454:	4450      	add	r0, sl
 8001456:	4082      	lsls	r2, r0
 8001458:	465b      	mov	r3, fp
 800145a:	0017      	movs	r7, r2
 800145c:	4083      	lsls	r3, r0
 800145e:	40cc      	lsrs	r4, r1
 8001460:	1e7a      	subs	r2, r7, #1
 8001462:	4197      	sbcs	r7, r2
 8001464:	4323      	orrs	r3, r4
 8001466:	433b      	orrs	r3, r7
 8001468:	001a      	movs	r2, r3
 800146a:	465b      	mov	r3, fp
 800146c:	40cb      	lsrs	r3, r1
 800146e:	0751      	lsls	r1, r2, #29
 8001470:	d009      	beq.n	8001486 <__aeabi_ddiv+0x57e>
 8001472:	210f      	movs	r1, #15
 8001474:	4011      	ands	r1, r2
 8001476:	2904      	cmp	r1, #4
 8001478:	d005      	beq.n	8001486 <__aeabi_ddiv+0x57e>
 800147a:	1d11      	adds	r1, r2, #4
 800147c:	4291      	cmp	r1, r2
 800147e:	4192      	sbcs	r2, r2
 8001480:	4252      	negs	r2, r2
 8001482:	189b      	adds	r3, r3, r2
 8001484:	000a      	movs	r2, r1
 8001486:	0219      	lsls	r1, r3, #8
 8001488:	d400      	bmi.n	800148c <__aeabi_ddiv+0x584>
 800148a:	e755      	b.n	8001338 <__aeabi_ddiv+0x430>
 800148c:	2200      	movs	r2, #0
 800148e:	2301      	movs	r3, #1
 8001490:	2400      	movs	r4, #0
 8001492:	4690      	mov	r8, r2
 8001494:	e598      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001496:	000a      	movs	r2, r1
 8001498:	42bc      	cmp	r4, r7
 800149a:	d000      	beq.n	800149e <__aeabi_ddiv+0x596>
 800149c:	e66e      	b.n	800117c <__aeabi_ddiv+0x274>
 800149e:	454b      	cmp	r3, r9
 80014a0:	d000      	beq.n	80014a4 <__aeabi_ddiv+0x59c>
 80014a2:	e66b      	b.n	800117c <__aeabi_ddiv+0x274>
 80014a4:	e66c      	b.n	8001180 <__aeabi_ddiv+0x278>
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <__aeabi_ddiv+0x62c>)
 80014a8:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <__aeabi_ddiv+0x630>)
 80014aa:	4453      	add	r3, sl
 80014ac:	4592      	cmp	sl, r2
 80014ae:	da00      	bge.n	80014b2 <__aeabi_ddiv+0x5aa>
 80014b0:	e718      	b.n	80012e4 <__aeabi_ddiv+0x3dc>
 80014b2:	2101      	movs	r1, #1
 80014b4:	4249      	negs	r1, r1
 80014b6:	1d0a      	adds	r2, r1, #4
 80014b8:	428a      	cmp	r2, r1
 80014ba:	4189      	sbcs	r1, r1
 80014bc:	4249      	negs	r1, r1
 80014be:	448b      	add	fp, r1
 80014c0:	e666      	b.n	8001190 <__aeabi_ddiv+0x288>
 80014c2:	210f      	movs	r1, #15
 80014c4:	4011      	ands	r1, r2
 80014c6:	2904      	cmp	r1, #4
 80014c8:	d100      	bne.n	80014cc <__aeabi_ddiv+0x5c4>
 80014ca:	e661      	b.n	8001190 <__aeabi_ddiv+0x288>
 80014cc:	0011      	movs	r1, r2
 80014ce:	e7f2      	b.n	80014b6 <__aeabi_ddiv+0x5ae>
 80014d0:	42bc      	cmp	r4, r7
 80014d2:	d800      	bhi.n	80014d6 <__aeabi_ddiv+0x5ce>
 80014d4:	e60a      	b.n	80010ec <__aeabi_ddiv+0x1e4>
 80014d6:	2302      	movs	r3, #2
 80014d8:	425b      	negs	r3, r3
 80014da:	469c      	mov	ip, r3
 80014dc:	9900      	ldr	r1, [sp, #0]
 80014de:	444f      	add	r7, r9
 80014e0:	454f      	cmp	r7, r9
 80014e2:	419b      	sbcs	r3, r3
 80014e4:	44e3      	add	fp, ip
 80014e6:	468c      	mov	ip, r1
 80014e8:	425b      	negs	r3, r3
 80014ea:	4463      	add	r3, ip
 80014ec:	18c0      	adds	r0, r0, r3
 80014ee:	e5ff      	b.n	80010f0 <__aeabi_ddiv+0x1e8>
 80014f0:	4649      	mov	r1, r9
 80014f2:	9d00      	ldr	r5, [sp, #0]
 80014f4:	0048      	lsls	r0, r1, #1
 80014f6:	4548      	cmp	r0, r9
 80014f8:	4189      	sbcs	r1, r1
 80014fa:	46ac      	mov	ip, r5
 80014fc:	4249      	negs	r1, r1
 80014fe:	4461      	add	r1, ip
 8001500:	4681      	mov	r9, r0
 8001502:	3a02      	subs	r2, #2
 8001504:	1864      	adds	r4, r4, r1
 8001506:	e7c7      	b.n	8001498 <__aeabi_ddiv+0x590>
 8001508:	2480      	movs	r4, #128	@ 0x80
 800150a:	465b      	mov	r3, fp
 800150c:	0324      	lsls	r4, r4, #12
 800150e:	431c      	orrs	r4, r3
 8001510:	0324      	lsls	r4, r4, #12
 8001512:	4690      	mov	r8, r2
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <__aeabi_ddiv+0x620>)
 8001516:	0b24      	lsrs	r4, r4, #12
 8001518:	e556      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 800151a:	4599      	cmp	r9, r3
 800151c:	d3e8      	bcc.n	80014f0 <__aeabi_ddiv+0x5e8>
 800151e:	000a      	movs	r2, r1
 8001520:	e7bd      	b.n	800149e <__aeabi_ddiv+0x596>
 8001522:	2300      	movs	r3, #0
 8001524:	e708      	b.n	8001338 <__aeabi_ddiv+0x430>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff
 800152c:	0000043e 	.word	0x0000043e
 8001530:	0000041e 	.word	0x0000041e
 8001534:	000003ff 	.word	0x000003ff
 8001538:	fffffc02 	.word	0xfffffc02

0800153c <__eqdf2>:
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4657      	mov	r7, sl
 8001540:	46de      	mov	lr, fp
 8001542:	464e      	mov	r6, r9
 8001544:	4645      	mov	r5, r8
 8001546:	b5e0      	push	{r5, r6, r7, lr}
 8001548:	000d      	movs	r5, r1
 800154a:	0004      	movs	r4, r0
 800154c:	0fe8      	lsrs	r0, r5, #31
 800154e:	4683      	mov	fp, r0
 8001550:	0309      	lsls	r1, r1, #12
 8001552:	0fd8      	lsrs	r0, r3, #31
 8001554:	0b09      	lsrs	r1, r1, #12
 8001556:	4682      	mov	sl, r0
 8001558:	4819      	ldr	r0, [pc, #100]	@ (80015c0 <__eqdf2+0x84>)
 800155a:	468c      	mov	ip, r1
 800155c:	031f      	lsls	r7, r3, #12
 800155e:	0069      	lsls	r1, r5, #1
 8001560:	005e      	lsls	r6, r3, #1
 8001562:	0d49      	lsrs	r1, r1, #21
 8001564:	0b3f      	lsrs	r7, r7, #12
 8001566:	0d76      	lsrs	r6, r6, #21
 8001568:	4281      	cmp	r1, r0
 800156a:	d018      	beq.n	800159e <__eqdf2+0x62>
 800156c:	4286      	cmp	r6, r0
 800156e:	d00f      	beq.n	8001590 <__eqdf2+0x54>
 8001570:	2001      	movs	r0, #1
 8001572:	42b1      	cmp	r1, r6
 8001574:	d10d      	bne.n	8001592 <__eqdf2+0x56>
 8001576:	45bc      	cmp	ip, r7
 8001578:	d10b      	bne.n	8001592 <__eqdf2+0x56>
 800157a:	4294      	cmp	r4, r2
 800157c:	d109      	bne.n	8001592 <__eqdf2+0x56>
 800157e:	45d3      	cmp	fp, sl
 8001580:	d01c      	beq.n	80015bc <__eqdf2+0x80>
 8001582:	2900      	cmp	r1, #0
 8001584:	d105      	bne.n	8001592 <__eqdf2+0x56>
 8001586:	4660      	mov	r0, ip
 8001588:	4320      	orrs	r0, r4
 800158a:	1e43      	subs	r3, r0, #1
 800158c:	4198      	sbcs	r0, r3
 800158e:	e000      	b.n	8001592 <__eqdf2+0x56>
 8001590:	2001      	movs	r0, #1
 8001592:	bcf0      	pop	{r4, r5, r6, r7}
 8001594:	46bb      	mov	fp, r7
 8001596:	46b2      	mov	sl, r6
 8001598:	46a9      	mov	r9, r5
 800159a:	46a0      	mov	r8, r4
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	2001      	movs	r0, #1
 80015a0:	428e      	cmp	r6, r1
 80015a2:	d1f6      	bne.n	8001592 <__eqdf2+0x56>
 80015a4:	4661      	mov	r1, ip
 80015a6:	4339      	orrs	r1, r7
 80015a8:	000f      	movs	r7, r1
 80015aa:	4317      	orrs	r7, r2
 80015ac:	4327      	orrs	r7, r4
 80015ae:	d1f0      	bne.n	8001592 <__eqdf2+0x56>
 80015b0:	465b      	mov	r3, fp
 80015b2:	4652      	mov	r2, sl
 80015b4:	1a98      	subs	r0, r3, r2
 80015b6:	1e43      	subs	r3, r0, #1
 80015b8:	4198      	sbcs	r0, r3
 80015ba:	e7ea      	b.n	8001592 <__eqdf2+0x56>
 80015bc:	2000      	movs	r0, #0
 80015be:	e7e8      	b.n	8001592 <__eqdf2+0x56>
 80015c0:	000007ff 	.word	0x000007ff

080015c4 <__gedf2>:
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	4657      	mov	r7, sl
 80015c8:	464e      	mov	r6, r9
 80015ca:	4645      	mov	r5, r8
 80015cc:	46de      	mov	lr, fp
 80015ce:	b5e0      	push	{r5, r6, r7, lr}
 80015d0:	000d      	movs	r5, r1
 80015d2:	030f      	lsls	r7, r1, #12
 80015d4:	0b39      	lsrs	r1, r7, #12
 80015d6:	b083      	sub	sp, #12
 80015d8:	0004      	movs	r4, r0
 80015da:	4680      	mov	r8, r0
 80015dc:	9101      	str	r1, [sp, #4]
 80015de:	0058      	lsls	r0, r3, #1
 80015e0:	0fe9      	lsrs	r1, r5, #31
 80015e2:	4f31      	ldr	r7, [pc, #196]	@ (80016a8 <__gedf2+0xe4>)
 80015e4:	0d40      	lsrs	r0, r0, #21
 80015e6:	468c      	mov	ip, r1
 80015e8:	006e      	lsls	r6, r5, #1
 80015ea:	0319      	lsls	r1, r3, #12
 80015ec:	4682      	mov	sl, r0
 80015ee:	4691      	mov	r9, r2
 80015f0:	0d76      	lsrs	r6, r6, #21
 80015f2:	0b09      	lsrs	r1, r1, #12
 80015f4:	0fd8      	lsrs	r0, r3, #31
 80015f6:	42be      	cmp	r6, r7
 80015f8:	d01f      	beq.n	800163a <__gedf2+0x76>
 80015fa:	45ba      	cmp	sl, r7
 80015fc:	d00f      	beq.n	800161e <__gedf2+0x5a>
 80015fe:	2e00      	cmp	r6, #0
 8001600:	d12f      	bne.n	8001662 <__gedf2+0x9e>
 8001602:	4655      	mov	r5, sl
 8001604:	9e01      	ldr	r6, [sp, #4]
 8001606:	4334      	orrs	r4, r6
 8001608:	2d00      	cmp	r5, #0
 800160a:	d127      	bne.n	800165c <__gedf2+0x98>
 800160c:	430a      	orrs	r2, r1
 800160e:	d03a      	beq.n	8001686 <__gedf2+0xc2>
 8001610:	2c00      	cmp	r4, #0
 8001612:	d145      	bne.n	80016a0 <__gedf2+0xdc>
 8001614:	2800      	cmp	r0, #0
 8001616:	d11a      	bne.n	800164e <__gedf2+0x8a>
 8001618:	2001      	movs	r0, #1
 800161a:	4240      	negs	r0, r0
 800161c:	e017      	b.n	800164e <__gedf2+0x8a>
 800161e:	4311      	orrs	r1, r2
 8001620:	d13b      	bne.n	800169a <__gedf2+0xd6>
 8001622:	2e00      	cmp	r6, #0
 8001624:	d102      	bne.n	800162c <__gedf2+0x68>
 8001626:	9f01      	ldr	r7, [sp, #4]
 8001628:	4327      	orrs	r7, r4
 800162a:	d0f3      	beq.n	8001614 <__gedf2+0x50>
 800162c:	4584      	cmp	ip, r0
 800162e:	d109      	bne.n	8001644 <__gedf2+0x80>
 8001630:	4663      	mov	r3, ip
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <__gedf2+0x54>
 8001636:	4660      	mov	r0, ip
 8001638:	e009      	b.n	800164e <__gedf2+0x8a>
 800163a:	9f01      	ldr	r7, [sp, #4]
 800163c:	4327      	orrs	r7, r4
 800163e:	d12c      	bne.n	800169a <__gedf2+0xd6>
 8001640:	45b2      	cmp	sl, r6
 8001642:	d024      	beq.n	800168e <__gedf2+0xca>
 8001644:	4663      	mov	r3, ip
 8001646:	2002      	movs	r0, #2
 8001648:	3b01      	subs	r3, #1
 800164a:	4018      	ands	r0, r3
 800164c:	3801      	subs	r0, #1
 800164e:	b003      	add	sp, #12
 8001650:	bcf0      	pop	{r4, r5, r6, r7}
 8001652:	46bb      	mov	fp, r7
 8001654:	46b2      	mov	sl, r6
 8001656:	46a9      	mov	r9, r5
 8001658:	46a0      	mov	r8, r4
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	2c00      	cmp	r4, #0
 800165e:	d0d9      	beq.n	8001614 <__gedf2+0x50>
 8001660:	e7e4      	b.n	800162c <__gedf2+0x68>
 8001662:	4654      	mov	r4, sl
 8001664:	2c00      	cmp	r4, #0
 8001666:	d0ed      	beq.n	8001644 <__gedf2+0x80>
 8001668:	4584      	cmp	ip, r0
 800166a:	d1eb      	bne.n	8001644 <__gedf2+0x80>
 800166c:	4556      	cmp	r6, sl
 800166e:	dce9      	bgt.n	8001644 <__gedf2+0x80>
 8001670:	dbde      	blt.n	8001630 <__gedf2+0x6c>
 8001672:	9b01      	ldr	r3, [sp, #4]
 8001674:	428b      	cmp	r3, r1
 8001676:	d8e5      	bhi.n	8001644 <__gedf2+0x80>
 8001678:	d1da      	bne.n	8001630 <__gedf2+0x6c>
 800167a:	45c8      	cmp	r8, r9
 800167c:	d8e2      	bhi.n	8001644 <__gedf2+0x80>
 800167e:	2000      	movs	r0, #0
 8001680:	45c8      	cmp	r8, r9
 8001682:	d2e4      	bcs.n	800164e <__gedf2+0x8a>
 8001684:	e7d4      	b.n	8001630 <__gedf2+0x6c>
 8001686:	2000      	movs	r0, #0
 8001688:	2c00      	cmp	r4, #0
 800168a:	d0e0      	beq.n	800164e <__gedf2+0x8a>
 800168c:	e7da      	b.n	8001644 <__gedf2+0x80>
 800168e:	4311      	orrs	r1, r2
 8001690:	d103      	bne.n	800169a <__gedf2+0xd6>
 8001692:	4584      	cmp	ip, r0
 8001694:	d1d6      	bne.n	8001644 <__gedf2+0x80>
 8001696:	2000      	movs	r0, #0
 8001698:	e7d9      	b.n	800164e <__gedf2+0x8a>
 800169a:	2002      	movs	r0, #2
 800169c:	4240      	negs	r0, r0
 800169e:	e7d6      	b.n	800164e <__gedf2+0x8a>
 80016a0:	4584      	cmp	ip, r0
 80016a2:	d0e6      	beq.n	8001672 <__gedf2+0xae>
 80016a4:	e7ce      	b.n	8001644 <__gedf2+0x80>
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__ledf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	4657      	mov	r7, sl
 80016b0:	464e      	mov	r6, r9
 80016b2:	4645      	mov	r5, r8
 80016b4:	46de      	mov	lr, fp
 80016b6:	b5e0      	push	{r5, r6, r7, lr}
 80016b8:	000d      	movs	r5, r1
 80016ba:	030f      	lsls	r7, r1, #12
 80016bc:	0004      	movs	r4, r0
 80016be:	4680      	mov	r8, r0
 80016c0:	0fe8      	lsrs	r0, r5, #31
 80016c2:	0b39      	lsrs	r1, r7, #12
 80016c4:	4684      	mov	ip, r0
 80016c6:	b083      	sub	sp, #12
 80016c8:	0058      	lsls	r0, r3, #1
 80016ca:	4f30      	ldr	r7, [pc, #192]	@ (800178c <__ledf2+0xe0>)
 80016cc:	0d40      	lsrs	r0, r0, #21
 80016ce:	9101      	str	r1, [sp, #4]
 80016d0:	031e      	lsls	r6, r3, #12
 80016d2:	0069      	lsls	r1, r5, #1
 80016d4:	4682      	mov	sl, r0
 80016d6:	4691      	mov	r9, r2
 80016d8:	0d49      	lsrs	r1, r1, #21
 80016da:	0b36      	lsrs	r6, r6, #12
 80016dc:	0fd8      	lsrs	r0, r3, #31
 80016de:	42b9      	cmp	r1, r7
 80016e0:	d020      	beq.n	8001724 <__ledf2+0x78>
 80016e2:	45ba      	cmp	sl, r7
 80016e4:	d00f      	beq.n	8001706 <__ledf2+0x5a>
 80016e6:	2900      	cmp	r1, #0
 80016e8:	d12b      	bne.n	8001742 <__ledf2+0x96>
 80016ea:	9901      	ldr	r1, [sp, #4]
 80016ec:	430c      	orrs	r4, r1
 80016ee:	4651      	mov	r1, sl
 80016f0:	2900      	cmp	r1, #0
 80016f2:	d137      	bne.n	8001764 <__ledf2+0xb8>
 80016f4:	4332      	orrs	r2, r6
 80016f6:	d038      	beq.n	800176a <__ledf2+0xbe>
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d144      	bne.n	8001786 <__ledf2+0xda>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d119      	bne.n	8001734 <__ledf2+0x88>
 8001700:	2001      	movs	r0, #1
 8001702:	4240      	negs	r0, r0
 8001704:	e016      	b.n	8001734 <__ledf2+0x88>
 8001706:	4316      	orrs	r6, r2
 8001708:	d113      	bne.n	8001732 <__ledf2+0x86>
 800170a:	2900      	cmp	r1, #0
 800170c:	d102      	bne.n	8001714 <__ledf2+0x68>
 800170e:	9f01      	ldr	r7, [sp, #4]
 8001710:	4327      	orrs	r7, r4
 8001712:	d0f3      	beq.n	80016fc <__ledf2+0x50>
 8001714:	4584      	cmp	ip, r0
 8001716:	d020      	beq.n	800175a <__ledf2+0xae>
 8001718:	4663      	mov	r3, ip
 800171a:	2002      	movs	r0, #2
 800171c:	3b01      	subs	r3, #1
 800171e:	4018      	ands	r0, r3
 8001720:	3801      	subs	r0, #1
 8001722:	e007      	b.n	8001734 <__ledf2+0x88>
 8001724:	9f01      	ldr	r7, [sp, #4]
 8001726:	4327      	orrs	r7, r4
 8001728:	d103      	bne.n	8001732 <__ledf2+0x86>
 800172a:	458a      	cmp	sl, r1
 800172c:	d1f4      	bne.n	8001718 <__ledf2+0x6c>
 800172e:	4316      	orrs	r6, r2
 8001730:	d01f      	beq.n	8001772 <__ledf2+0xc6>
 8001732:	2002      	movs	r0, #2
 8001734:	b003      	add	sp, #12
 8001736:	bcf0      	pop	{r4, r5, r6, r7}
 8001738:	46bb      	mov	fp, r7
 800173a:	46b2      	mov	sl, r6
 800173c:	46a9      	mov	r9, r5
 800173e:	46a0      	mov	r8, r4
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001742:	4654      	mov	r4, sl
 8001744:	2c00      	cmp	r4, #0
 8001746:	d0e7      	beq.n	8001718 <__ledf2+0x6c>
 8001748:	4584      	cmp	ip, r0
 800174a:	d1e5      	bne.n	8001718 <__ledf2+0x6c>
 800174c:	4551      	cmp	r1, sl
 800174e:	dce3      	bgt.n	8001718 <__ledf2+0x6c>
 8001750:	db03      	blt.n	800175a <__ledf2+0xae>
 8001752:	9b01      	ldr	r3, [sp, #4]
 8001754:	42b3      	cmp	r3, r6
 8001756:	d8df      	bhi.n	8001718 <__ledf2+0x6c>
 8001758:	d00f      	beq.n	800177a <__ledf2+0xce>
 800175a:	4663      	mov	r3, ip
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0cf      	beq.n	8001700 <__ledf2+0x54>
 8001760:	4660      	mov	r0, ip
 8001762:	e7e7      	b.n	8001734 <__ledf2+0x88>
 8001764:	2c00      	cmp	r4, #0
 8001766:	d0c9      	beq.n	80016fc <__ledf2+0x50>
 8001768:	e7d4      	b.n	8001714 <__ledf2+0x68>
 800176a:	2000      	movs	r0, #0
 800176c:	2c00      	cmp	r4, #0
 800176e:	d0e1      	beq.n	8001734 <__ledf2+0x88>
 8001770:	e7d2      	b.n	8001718 <__ledf2+0x6c>
 8001772:	4584      	cmp	ip, r0
 8001774:	d1d0      	bne.n	8001718 <__ledf2+0x6c>
 8001776:	2000      	movs	r0, #0
 8001778:	e7dc      	b.n	8001734 <__ledf2+0x88>
 800177a:	45c8      	cmp	r8, r9
 800177c:	d8cc      	bhi.n	8001718 <__ledf2+0x6c>
 800177e:	2000      	movs	r0, #0
 8001780:	45c8      	cmp	r8, r9
 8001782:	d2d7      	bcs.n	8001734 <__ledf2+0x88>
 8001784:	e7e9      	b.n	800175a <__ledf2+0xae>
 8001786:	4584      	cmp	ip, r0
 8001788:	d0e3      	beq.n	8001752 <__ledf2+0xa6>
 800178a:	e7c5      	b.n	8001718 <__ledf2+0x6c>
 800178c:	000007ff 	.word	0x000007ff

08001790 <__aeabi_dmul>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	001f      	movs	r7, r3
 800179e:	030b      	lsls	r3, r1, #12
 80017a0:	0b1b      	lsrs	r3, r3, #12
 80017a2:	0016      	movs	r6, r2
 80017a4:	469a      	mov	sl, r3
 80017a6:	0fca      	lsrs	r2, r1, #31
 80017a8:	004b      	lsls	r3, r1, #1
 80017aa:	0004      	movs	r4, r0
 80017ac:	4693      	mov	fp, r2
 80017ae:	b087      	sub	sp, #28
 80017b0:	0d5b      	lsrs	r3, r3, #21
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x26>
 80017b4:	e0d5      	b.n	8001962 <__aeabi_dmul+0x1d2>
 80017b6:	4abb      	ldr	r2, [pc, #748]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d100      	bne.n	80017be <__aeabi_dmul+0x2e>
 80017bc:	e0f8      	b.n	80019b0 <__aeabi_dmul+0x220>
 80017be:	4651      	mov	r1, sl
 80017c0:	0f42      	lsrs	r2, r0, #29
 80017c2:	00c9      	lsls	r1, r1, #3
 80017c4:	430a      	orrs	r2, r1
 80017c6:	2180      	movs	r1, #128	@ 0x80
 80017c8:	0409      	lsls	r1, r1, #16
 80017ca:	4311      	orrs	r1, r2
 80017cc:	00c2      	lsls	r2, r0, #3
 80017ce:	4691      	mov	r9, r2
 80017d0:	4ab5      	ldr	r2, [pc, #724]	@ (8001aa8 <__aeabi_dmul+0x318>)
 80017d2:	468a      	mov	sl, r1
 80017d4:	189d      	adds	r5, r3, r2
 80017d6:	2300      	movs	r3, #0
 80017d8:	4698      	mov	r8, r3
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	033c      	lsls	r4, r7, #12
 80017de:	007b      	lsls	r3, r7, #1
 80017e0:	0ffa      	lsrs	r2, r7, #31
 80017e2:	0030      	movs	r0, r6
 80017e4:	0b24      	lsrs	r4, r4, #12
 80017e6:	0d5b      	lsrs	r3, r3, #21
 80017e8:	9200      	str	r2, [sp, #0]
 80017ea:	d100      	bne.n	80017ee <__aeabi_dmul+0x5e>
 80017ec:	e096      	b.n	800191c <__aeabi_dmul+0x18c>
 80017ee:	4aad      	ldr	r2, [pc, #692]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d031      	beq.n	8001858 <__aeabi_dmul+0xc8>
 80017f4:	0f72      	lsrs	r2, r6, #29
 80017f6:	00e4      	lsls	r4, r4, #3
 80017f8:	4322      	orrs	r2, r4
 80017fa:	2480      	movs	r4, #128	@ 0x80
 80017fc:	0424      	lsls	r4, r4, #16
 80017fe:	4314      	orrs	r4, r2
 8001800:	4aa9      	ldr	r2, [pc, #676]	@ (8001aa8 <__aeabi_dmul+0x318>)
 8001802:	00f0      	lsls	r0, r6, #3
 8001804:	4694      	mov	ip, r2
 8001806:	4463      	add	r3, ip
 8001808:	195b      	adds	r3, r3, r5
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc42      	bgt.n	800189c <__aeabi_dmul+0x10c>
 8001816:	465a      	mov	r2, fp
 8001818:	9900      	ldr	r1, [sp, #0]
 800181a:	404a      	eors	r2, r1
 800181c:	4693      	mov	fp, r2
 800181e:	4642      	mov	r2, r8
 8001820:	2a02      	cmp	r2, #2
 8001822:	dc32      	bgt.n	800188a <__aeabi_dmul+0xfa>
 8001824:	3a01      	subs	r2, #1
 8001826:	2a01      	cmp	r2, #1
 8001828:	d900      	bls.n	800182c <__aeabi_dmul+0x9c>
 800182a:	e149      	b.n	8001ac0 <__aeabi_dmul+0x330>
 800182c:	2e02      	cmp	r6, #2
 800182e:	d100      	bne.n	8001832 <__aeabi_dmul+0xa2>
 8001830:	e0ca      	b.n	80019c8 <__aeabi_dmul+0x238>
 8001832:	2e01      	cmp	r6, #1
 8001834:	d13d      	bne.n	80018b2 <__aeabi_dmul+0x122>
 8001836:	2300      	movs	r3, #0
 8001838:	2400      	movs	r4, #0
 800183a:	2200      	movs	r2, #0
 800183c:	0010      	movs	r0, r2
 800183e:	465a      	mov	r2, fp
 8001840:	051b      	lsls	r3, r3, #20
 8001842:	4323      	orrs	r3, r4
 8001844:	07d2      	lsls	r2, r2, #31
 8001846:	4313      	orrs	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	b007      	add	sp, #28
 800184c:	bcf0      	pop	{r4, r5, r6, r7}
 800184e:	46bb      	mov	fp, r7
 8001850:	46b2      	mov	sl, r6
 8001852:	46a9      	mov	r9, r5
 8001854:	46a0      	mov	r8, r4
 8001856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001858:	4b92      	ldr	r3, [pc, #584]	@ (8001aa4 <__aeabi_dmul+0x314>)
 800185a:	4326      	orrs	r6, r4
 800185c:	18eb      	adds	r3, r5, r3
 800185e:	2e00      	cmp	r6, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_dmul+0xd4>
 8001862:	e0bb      	b.n	80019dc <__aeabi_dmul+0x24c>
 8001864:	2203      	movs	r2, #3
 8001866:	4641      	mov	r1, r8
 8001868:	4311      	orrs	r1, r2
 800186a:	465a      	mov	r2, fp
 800186c:	4688      	mov	r8, r1
 800186e:	9900      	ldr	r1, [sp, #0]
 8001870:	404a      	eors	r2, r1
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0109      	lsls	r1, r1, #4
 8001876:	468c      	mov	ip, r1
 8001878:	0029      	movs	r1, r5
 800187a:	4461      	add	r1, ip
 800187c:	9101      	str	r1, [sp, #4]
 800187e:	4641      	mov	r1, r8
 8001880:	290a      	cmp	r1, #10
 8001882:	dd00      	ble.n	8001886 <__aeabi_dmul+0xf6>
 8001884:	e233      	b.n	8001cee <__aeabi_dmul+0x55e>
 8001886:	4693      	mov	fp, r2
 8001888:	2603      	movs	r6, #3
 800188a:	4642      	mov	r2, r8
 800188c:	2701      	movs	r7, #1
 800188e:	4097      	lsls	r7, r2
 8001890:	21a6      	movs	r1, #166	@ 0xa6
 8001892:	003a      	movs	r2, r7
 8001894:	00c9      	lsls	r1, r1, #3
 8001896:	400a      	ands	r2, r1
 8001898:	420f      	tst	r7, r1
 800189a:	d031      	beq.n	8001900 <__aeabi_dmul+0x170>
 800189c:	9e02      	ldr	r6, [sp, #8]
 800189e:	2e02      	cmp	r6, #2
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dmul+0x114>
 80018a2:	e235      	b.n	8001d10 <__aeabi_dmul+0x580>
 80018a4:	2e03      	cmp	r6, #3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dmul+0x11a>
 80018a8:	e1d2      	b.n	8001c50 <__aeabi_dmul+0x4c0>
 80018aa:	4654      	mov	r4, sl
 80018ac:	4648      	mov	r0, r9
 80018ae:	2e01      	cmp	r6, #1
 80018b0:	d0c1      	beq.n	8001836 <__aeabi_dmul+0xa6>
 80018b2:	9a01      	ldr	r2, [sp, #4]
 80018b4:	4b7d      	ldr	r3, [pc, #500]	@ (8001aac <__aeabi_dmul+0x31c>)
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x130>
 80018be:	e0c0      	b.n	8001a42 <__aeabi_dmul+0x2b2>
 80018c0:	0742      	lsls	r2, r0, #29
 80018c2:	d009      	beq.n	80018d8 <__aeabi_dmul+0x148>
 80018c4:	220f      	movs	r2, #15
 80018c6:	4002      	ands	r2, r0
 80018c8:	2a04      	cmp	r2, #4
 80018ca:	d005      	beq.n	80018d8 <__aeabi_dmul+0x148>
 80018cc:	1d02      	adds	r2, r0, #4
 80018ce:	4282      	cmp	r2, r0
 80018d0:	4180      	sbcs	r0, r0
 80018d2:	4240      	negs	r0, r0
 80018d4:	1824      	adds	r4, r4, r0
 80018d6:	0010      	movs	r0, r2
 80018d8:	01e2      	lsls	r2, r4, #7
 80018da:	d506      	bpl.n	80018ea <__aeabi_dmul+0x15a>
 80018dc:	4b74      	ldr	r3, [pc, #464]	@ (8001ab0 <__aeabi_dmul+0x320>)
 80018de:	9a01      	ldr	r2, [sp, #4]
 80018e0:	401c      	ands	r4, r3
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	4694      	mov	ip, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4463      	add	r3, ip
 80018ea:	4a72      	ldr	r2, [pc, #456]	@ (8001ab4 <__aeabi_dmul+0x324>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	dc6b      	bgt.n	80019c8 <__aeabi_dmul+0x238>
 80018f0:	0762      	lsls	r2, r4, #29
 80018f2:	08c0      	lsrs	r0, r0, #3
 80018f4:	0264      	lsls	r4, r4, #9
 80018f6:	055b      	lsls	r3, r3, #21
 80018f8:	4302      	orrs	r2, r0
 80018fa:	0b24      	lsrs	r4, r4, #12
 80018fc:	0d5b      	lsrs	r3, r3, #21
 80018fe:	e79d      	b.n	800183c <__aeabi_dmul+0xac>
 8001900:	2190      	movs	r1, #144	@ 0x90
 8001902:	0089      	lsls	r1, r1, #2
 8001904:	420f      	tst	r7, r1
 8001906:	d163      	bne.n	80019d0 <__aeabi_dmul+0x240>
 8001908:	2288      	movs	r2, #136	@ 0x88
 800190a:	423a      	tst	r2, r7
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0x180>
 800190e:	e0d7      	b.n	8001ac0 <__aeabi_dmul+0x330>
 8001910:	9b00      	ldr	r3, [sp, #0]
 8001912:	46a2      	mov	sl, r4
 8001914:	469b      	mov	fp, r3
 8001916:	4681      	mov	r9, r0
 8001918:	9602      	str	r6, [sp, #8]
 800191a:	e7bf      	b.n	800189c <__aeabi_dmul+0x10c>
 800191c:	0023      	movs	r3, r4
 800191e:	4333      	orrs	r3, r6
 8001920:	d100      	bne.n	8001924 <__aeabi_dmul+0x194>
 8001922:	e07f      	b.n	8001a24 <__aeabi_dmul+0x294>
 8001924:	2c00      	cmp	r4, #0
 8001926:	d100      	bne.n	800192a <__aeabi_dmul+0x19a>
 8001928:	e1ad      	b.n	8001c86 <__aeabi_dmul+0x4f6>
 800192a:	0020      	movs	r0, r4
 800192c:	f000 fe8c 	bl	8002648 <__clzsi2>
 8001930:	0002      	movs	r2, r0
 8001932:	0003      	movs	r3, r0
 8001934:	3a0b      	subs	r2, #11
 8001936:	201d      	movs	r0, #29
 8001938:	0019      	movs	r1, r3
 800193a:	1a82      	subs	r2, r0, r2
 800193c:	0030      	movs	r0, r6
 800193e:	3908      	subs	r1, #8
 8001940:	40d0      	lsrs	r0, r2
 8001942:	408c      	lsls	r4, r1
 8001944:	4304      	orrs	r4, r0
 8001946:	0030      	movs	r0, r6
 8001948:	4088      	lsls	r0, r1
 800194a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab8 <__aeabi_dmul+0x328>)
 800194c:	1aeb      	subs	r3, r5, r3
 800194e:	4694      	mov	ip, r2
 8001950:	4463      	add	r3, ip
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	9201      	str	r2, [sp, #4]
 8001956:	4642      	mov	r2, r8
 8001958:	2600      	movs	r6, #0
 800195a:	2a0a      	cmp	r2, #10
 800195c:	dc00      	bgt.n	8001960 <__aeabi_dmul+0x1d0>
 800195e:	e75a      	b.n	8001816 <__aeabi_dmul+0x86>
 8001960:	e79c      	b.n	800189c <__aeabi_dmul+0x10c>
 8001962:	4653      	mov	r3, sl
 8001964:	4303      	orrs	r3, r0
 8001966:	4699      	mov	r9, r3
 8001968:	d054      	beq.n	8001a14 <__aeabi_dmul+0x284>
 800196a:	4653      	mov	r3, sl
 800196c:	2b00      	cmp	r3, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_dmul+0x1e2>
 8001970:	e177      	b.n	8001c62 <__aeabi_dmul+0x4d2>
 8001972:	4650      	mov	r0, sl
 8001974:	f000 fe68 	bl	8002648 <__clzsi2>
 8001978:	230b      	movs	r3, #11
 800197a:	425b      	negs	r3, r3
 800197c:	469c      	mov	ip, r3
 800197e:	0002      	movs	r2, r0
 8001980:	4484      	add	ip, r0
 8001982:	0011      	movs	r1, r2
 8001984:	4650      	mov	r0, sl
 8001986:	3908      	subs	r1, #8
 8001988:	4088      	lsls	r0, r1
 800198a:	231d      	movs	r3, #29
 800198c:	4680      	mov	r8, r0
 800198e:	4660      	mov	r0, ip
 8001990:	1a1b      	subs	r3, r3, r0
 8001992:	0020      	movs	r0, r4
 8001994:	40d8      	lsrs	r0, r3
 8001996:	0003      	movs	r3, r0
 8001998:	4640      	mov	r0, r8
 800199a:	4303      	orrs	r3, r0
 800199c:	469a      	mov	sl, r3
 800199e:	0023      	movs	r3, r4
 80019a0:	408b      	lsls	r3, r1
 80019a2:	4699      	mov	r9, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	4d44      	ldr	r5, [pc, #272]	@ (8001ab8 <__aeabi_dmul+0x328>)
 80019a8:	4698      	mov	r8, r3
 80019aa:	1aad      	subs	r5, r5, r2
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	e715      	b.n	80017dc <__aeabi_dmul+0x4c>
 80019b0:	4652      	mov	r2, sl
 80019b2:	4302      	orrs	r2, r0
 80019b4:	4691      	mov	r9, r2
 80019b6:	d126      	bne.n	8001a06 <__aeabi_dmul+0x276>
 80019b8:	2200      	movs	r2, #0
 80019ba:	001d      	movs	r5, r3
 80019bc:	2302      	movs	r3, #2
 80019be:	4692      	mov	sl, r2
 80019c0:	3208      	adds	r2, #8
 80019c2:	4690      	mov	r8, r2
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	e709      	b.n	80017dc <__aeabi_dmul+0x4c>
 80019c8:	2400      	movs	r4, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80019ce:	e735      	b.n	800183c <__aeabi_dmul+0xac>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2480      	movs	r4, #128	@ 0x80
 80019d4:	469b      	mov	fp, r3
 80019d6:	0324      	lsls	r4, r4, #12
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80019da:	e72f      	b.n	800183c <__aeabi_dmul+0xac>
 80019dc:	2202      	movs	r2, #2
 80019de:	4641      	mov	r1, r8
 80019e0:	4311      	orrs	r1, r2
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	4694      	mov	ip, r2
 80019e8:	002a      	movs	r2, r5
 80019ea:	4462      	add	r2, ip
 80019ec:	4688      	mov	r8, r1
 80019ee:	9201      	str	r2, [sp, #4]
 80019f0:	290a      	cmp	r1, #10
 80019f2:	dd00      	ble.n	80019f6 <__aeabi_dmul+0x266>
 80019f4:	e752      	b.n	800189c <__aeabi_dmul+0x10c>
 80019f6:	465a      	mov	r2, fp
 80019f8:	2000      	movs	r0, #0
 80019fa:	9900      	ldr	r1, [sp, #0]
 80019fc:	0004      	movs	r4, r0
 80019fe:	404a      	eors	r2, r1
 8001a00:	4693      	mov	fp, r2
 8001a02:	2602      	movs	r6, #2
 8001a04:	e70b      	b.n	800181e <__aeabi_dmul+0x8e>
 8001a06:	220c      	movs	r2, #12
 8001a08:	001d      	movs	r5, r3
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	4681      	mov	r9, r0
 8001a0e:	4690      	mov	r8, r2
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	e6e3      	b.n	80017dc <__aeabi_dmul+0x4c>
 8001a14:	2300      	movs	r3, #0
 8001a16:	469a      	mov	sl, r3
 8001a18:	3304      	adds	r3, #4
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	2500      	movs	r5, #0
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	e6db      	b.n	80017dc <__aeabi_dmul+0x4c>
 8001a24:	4642      	mov	r2, r8
 8001a26:	3301      	adds	r3, #1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	002b      	movs	r3, r5
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	9201      	str	r2, [sp, #4]
 8001a32:	4642      	mov	r2, r8
 8001a34:	2400      	movs	r4, #0
 8001a36:	2000      	movs	r0, #0
 8001a38:	2601      	movs	r6, #1
 8001a3a:	2a0a      	cmp	r2, #10
 8001a3c:	dc00      	bgt.n	8001a40 <__aeabi_dmul+0x2b0>
 8001a3e:	e6ea      	b.n	8001816 <__aeabi_dmul+0x86>
 8001a40:	e72c      	b.n	800189c <__aeabi_dmul+0x10c>
 8001a42:	2201      	movs	r2, #1
 8001a44:	1ad2      	subs	r2, r2, r3
 8001a46:	2a38      	cmp	r2, #56	@ 0x38
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_dmul+0x2bc>
 8001a4a:	e6f4      	b.n	8001836 <__aeabi_dmul+0xa6>
 8001a4c:	2a1f      	cmp	r2, #31
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dmul+0x2c2>
 8001a50:	e12a      	b.n	8001ca8 <__aeabi_dmul+0x518>
 8001a52:	211f      	movs	r1, #31
 8001a54:	4249      	negs	r1, r1
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	0021      	movs	r1, r4
 8001a5a:	40d9      	lsrs	r1, r3
 8001a5c:	000b      	movs	r3, r1
 8001a5e:	2a20      	cmp	r2, #32
 8001a60:	d005      	beq.n	8001a6e <__aeabi_dmul+0x2de>
 8001a62:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <__aeabi_dmul+0x32c>)
 8001a64:	9d01      	ldr	r5, [sp, #4]
 8001a66:	4694      	mov	ip, r2
 8001a68:	4465      	add	r5, ip
 8001a6a:	40ac      	lsls	r4, r5
 8001a6c:	4320      	orrs	r0, r4
 8001a6e:	1e42      	subs	r2, r0, #1
 8001a70:	4190      	sbcs	r0, r2
 8001a72:	4318      	orrs	r0, r3
 8001a74:	2307      	movs	r3, #7
 8001a76:	0019      	movs	r1, r3
 8001a78:	2400      	movs	r4, #0
 8001a7a:	4001      	ands	r1, r0
 8001a7c:	4203      	tst	r3, r0
 8001a7e:	d00c      	beq.n	8001a9a <__aeabi_dmul+0x30a>
 8001a80:	230f      	movs	r3, #15
 8001a82:	4003      	ands	r3, r0
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dmul+0x2fa>
 8001a88:	e140      	b.n	8001d0c <__aeabi_dmul+0x57c>
 8001a8a:	1d03      	adds	r3, r0, #4
 8001a8c:	4283      	cmp	r3, r0
 8001a8e:	41a4      	sbcs	r4, r4
 8001a90:	0018      	movs	r0, r3
 8001a92:	4264      	negs	r4, r4
 8001a94:	0761      	lsls	r1, r4, #29
 8001a96:	0264      	lsls	r4, r4, #9
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	08c2      	lsrs	r2, r0, #3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	e6cc      	b.n	800183c <__aeabi_dmul+0xac>
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	fffffc01 	.word	0xfffffc01
 8001aac:	000003ff 	.word	0x000003ff
 8001ab0:	feffffff 	.word	0xfeffffff
 8001ab4:	000007fe 	.word	0x000007fe
 8001ab8:	fffffc0d 	.word	0xfffffc0d
 8001abc:	0000043e 	.word	0x0000043e
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	464a      	mov	r2, r9
 8001ac4:	0409      	lsls	r1, r1, #16
 8001ac6:	0c09      	lsrs	r1, r1, #16
 8001ac8:	000d      	movs	r5, r1
 8001aca:	0c16      	lsrs	r6, r2, #16
 8001acc:	0c02      	lsrs	r2, r0, #16
 8001ace:	0400      	lsls	r0, r0, #16
 8001ad0:	0c00      	lsrs	r0, r0, #16
 8001ad2:	4345      	muls	r5, r0
 8001ad4:	46ac      	mov	ip, r5
 8001ad6:	0005      	movs	r5, r0
 8001ad8:	4375      	muls	r5, r6
 8001ada:	46a8      	mov	r8, r5
 8001adc:	0015      	movs	r5, r2
 8001ade:	000f      	movs	r7, r1
 8001ae0:	4375      	muls	r5, r6
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	9502      	str	r5, [sp, #8]
 8001ae6:	002a      	movs	r2, r5
 8001ae8:	9d00      	ldr	r5, [sp, #0]
 8001aea:	436f      	muls	r7, r5
 8001aec:	4665      	mov	r5, ip
 8001aee:	0c2d      	lsrs	r5, r5, #16
 8001af0:	46a9      	mov	r9, r5
 8001af2:	4447      	add	r7, r8
 8001af4:	444f      	add	r7, r9
 8001af6:	45b8      	cmp	r8, r7
 8001af8:	d905      	bls.n	8001b06 <__aeabi_dmul+0x376>
 8001afa:	0015      	movs	r5, r2
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	0252      	lsls	r2, r2, #9
 8001b00:	4690      	mov	r8, r2
 8001b02:	4445      	add	r5, r8
 8001b04:	9502      	str	r5, [sp, #8]
 8001b06:	0c3d      	lsrs	r5, r7, #16
 8001b08:	9503      	str	r5, [sp, #12]
 8001b0a:	4665      	mov	r5, ip
 8001b0c:	042d      	lsls	r5, r5, #16
 8001b0e:	043f      	lsls	r7, r7, #16
 8001b10:	0c2d      	lsrs	r5, r5, #16
 8001b12:	46ac      	mov	ip, r5
 8001b14:	003d      	movs	r5, r7
 8001b16:	4465      	add	r5, ip
 8001b18:	9504      	str	r5, [sp, #16]
 8001b1a:	0c25      	lsrs	r5, r4, #16
 8001b1c:	0424      	lsls	r4, r4, #16
 8001b1e:	0c24      	lsrs	r4, r4, #16
 8001b20:	46ac      	mov	ip, r5
 8001b22:	0025      	movs	r5, r4
 8001b24:	4375      	muls	r5, r6
 8001b26:	46a8      	mov	r8, r5
 8001b28:	4665      	mov	r5, ip
 8001b2a:	000f      	movs	r7, r1
 8001b2c:	4369      	muls	r1, r5
 8001b2e:	4441      	add	r1, r8
 8001b30:	4689      	mov	r9, r1
 8001b32:	4367      	muls	r7, r4
 8001b34:	0c39      	lsrs	r1, r7, #16
 8001b36:	4449      	add	r1, r9
 8001b38:	436e      	muls	r6, r5
 8001b3a:	4588      	cmp	r8, r1
 8001b3c:	d903      	bls.n	8001b46 <__aeabi_dmul+0x3b6>
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	0252      	lsls	r2, r2, #9
 8001b42:	4690      	mov	r8, r2
 8001b44:	4446      	add	r6, r8
 8001b46:	0c0d      	lsrs	r5, r1, #16
 8001b48:	46a8      	mov	r8, r5
 8001b4a:	0035      	movs	r5, r6
 8001b4c:	4445      	add	r5, r8
 8001b4e:	9505      	str	r5, [sp, #20]
 8001b50:	9d03      	ldr	r5, [sp, #12]
 8001b52:	043f      	lsls	r7, r7, #16
 8001b54:	46a8      	mov	r8, r5
 8001b56:	0c3f      	lsrs	r7, r7, #16
 8001b58:	0409      	lsls	r1, r1, #16
 8001b5a:	19c9      	adds	r1, r1, r7
 8001b5c:	4488      	add	r8, r1
 8001b5e:	4645      	mov	r5, r8
 8001b60:	9503      	str	r5, [sp, #12]
 8001b62:	4655      	mov	r5, sl
 8001b64:	042e      	lsls	r6, r5, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	0c2f      	lsrs	r7, r5, #16
 8001b6a:	0035      	movs	r5, r6
 8001b6c:	4345      	muls	r5, r0
 8001b6e:	4378      	muls	r0, r7
 8001b70:	4681      	mov	r9, r0
 8001b72:	0038      	movs	r0, r7
 8001b74:	46a8      	mov	r8, r5
 8001b76:	0c2d      	lsrs	r5, r5, #16
 8001b78:	46aa      	mov	sl, r5
 8001b7a:	9a00      	ldr	r2, [sp, #0]
 8001b7c:	4350      	muls	r0, r2
 8001b7e:	4372      	muls	r2, r6
 8001b80:	444a      	add	r2, r9
 8001b82:	4452      	add	r2, sl
 8001b84:	4591      	cmp	r9, r2
 8001b86:	d903      	bls.n	8001b90 <__aeabi_dmul+0x400>
 8001b88:	2580      	movs	r5, #128	@ 0x80
 8001b8a:	026d      	lsls	r5, r5, #9
 8001b8c:	46a9      	mov	r9, r5
 8001b8e:	4448      	add	r0, r9
 8001b90:	0c15      	lsrs	r5, r2, #16
 8001b92:	46a9      	mov	r9, r5
 8001b94:	4645      	mov	r5, r8
 8001b96:	042d      	lsls	r5, r5, #16
 8001b98:	0c2d      	lsrs	r5, r5, #16
 8001b9a:	46a8      	mov	r8, r5
 8001b9c:	4665      	mov	r5, ip
 8001b9e:	437d      	muls	r5, r7
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	4448      	add	r0, r9
 8001ba4:	4490      	add	r8, r2
 8001ba6:	46a9      	mov	r9, r5
 8001ba8:	0032      	movs	r2, r6
 8001baa:	4665      	mov	r5, ip
 8001bac:	4362      	muls	r2, r4
 8001bae:	436e      	muls	r6, r5
 8001bb0:	437c      	muls	r4, r7
 8001bb2:	0c17      	lsrs	r7, r2, #16
 8001bb4:	1936      	adds	r6, r6, r4
 8001bb6:	19bf      	adds	r7, r7, r6
 8001bb8:	42bc      	cmp	r4, r7
 8001bba:	d903      	bls.n	8001bc4 <__aeabi_dmul+0x434>
 8001bbc:	2480      	movs	r4, #128	@ 0x80
 8001bbe:	0264      	lsls	r4, r4, #9
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	44e1      	add	r9, ip
 8001bc4:	9c02      	ldr	r4, [sp, #8]
 8001bc6:	9e03      	ldr	r6, [sp, #12]
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	9d05      	ldr	r5, [sp, #20]
 8001bcc:	4466      	add	r6, ip
 8001bce:	428e      	cmp	r6, r1
 8001bd0:	4189      	sbcs	r1, r1
 8001bd2:	46ac      	mov	ip, r5
 8001bd4:	0412      	lsls	r2, r2, #16
 8001bd6:	043c      	lsls	r4, r7, #16
 8001bd8:	0c12      	lsrs	r2, r2, #16
 8001bda:	18a2      	adds	r2, r4, r2
 8001bdc:	4462      	add	r2, ip
 8001bde:	4249      	negs	r1, r1
 8001be0:	1854      	adds	r4, r2, r1
 8001be2:	4446      	add	r6, r8
 8001be4:	46a4      	mov	ip, r4
 8001be6:	4546      	cmp	r6, r8
 8001be8:	41a4      	sbcs	r4, r4
 8001bea:	4682      	mov	sl, r0
 8001bec:	4264      	negs	r4, r4
 8001bee:	46a0      	mov	r8, r4
 8001bf0:	42aa      	cmp	r2, r5
 8001bf2:	4192      	sbcs	r2, r2
 8001bf4:	458c      	cmp	ip, r1
 8001bf6:	4189      	sbcs	r1, r1
 8001bf8:	44e2      	add	sl, ip
 8001bfa:	44d0      	add	r8, sl
 8001bfc:	4249      	negs	r1, r1
 8001bfe:	4252      	negs	r2, r2
 8001c00:	430a      	orrs	r2, r1
 8001c02:	45a0      	cmp	r8, r4
 8001c04:	41a4      	sbcs	r4, r4
 8001c06:	4582      	cmp	sl, r0
 8001c08:	4189      	sbcs	r1, r1
 8001c0a:	4264      	negs	r4, r4
 8001c0c:	4249      	negs	r1, r1
 8001c0e:	430c      	orrs	r4, r1
 8001c10:	4641      	mov	r1, r8
 8001c12:	0c3f      	lsrs	r7, r7, #16
 8001c14:	19d2      	adds	r2, r2, r7
 8001c16:	1912      	adds	r2, r2, r4
 8001c18:	0dcc      	lsrs	r4, r1, #23
 8001c1a:	9904      	ldr	r1, [sp, #16]
 8001c1c:	0270      	lsls	r0, r6, #9
 8001c1e:	4308      	orrs	r0, r1
 8001c20:	1e41      	subs	r1, r0, #1
 8001c22:	4188      	sbcs	r0, r1
 8001c24:	4641      	mov	r1, r8
 8001c26:	444a      	add	r2, r9
 8001c28:	0df6      	lsrs	r6, r6, #23
 8001c2a:	0252      	lsls	r2, r2, #9
 8001c2c:	4330      	orrs	r0, r6
 8001c2e:	0249      	lsls	r1, r1, #9
 8001c30:	4314      	orrs	r4, r2
 8001c32:	4308      	orrs	r0, r1
 8001c34:	01d2      	lsls	r2, r2, #7
 8001c36:	d535      	bpl.n	8001ca4 <__aeabi_dmul+0x514>
 8001c38:	2201      	movs	r2, #1
 8001c3a:	0843      	lsrs	r3, r0, #1
 8001c3c:	4002      	ands	r2, r0
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	07e0      	lsls	r0, r4, #31
 8001c42:	4318      	orrs	r0, r3
 8001c44:	0864      	lsrs	r4, r4, #1
 8001c46:	e634      	b.n	80018b2 <__aeabi_dmul+0x122>
 8001c48:	9b00      	ldr	r3, [sp, #0]
 8001c4a:	46a2      	mov	sl, r4
 8001c4c:	469b      	mov	fp, r3
 8001c4e:	4681      	mov	r9, r0
 8001c50:	2480      	movs	r4, #128	@ 0x80
 8001c52:	4653      	mov	r3, sl
 8001c54:	0324      	lsls	r4, r4, #12
 8001c56:	431c      	orrs	r4, r3
 8001c58:	0324      	lsls	r4, r4, #12
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <__aeabi_dmul+0x588>)
 8001c5e:	0b24      	lsrs	r4, r4, #12
 8001c60:	e5ec      	b.n	800183c <__aeabi_dmul+0xac>
 8001c62:	f000 fcf1 	bl	8002648 <__clzsi2>
 8001c66:	2315      	movs	r3, #21
 8001c68:	469c      	mov	ip, r3
 8001c6a:	4484      	add	ip, r0
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	4663      	mov	r3, ip
 8001c70:	3220      	adds	r2, #32
 8001c72:	2b1c      	cmp	r3, #28
 8001c74:	dc00      	bgt.n	8001c78 <__aeabi_dmul+0x4e8>
 8001c76:	e684      	b.n	8001982 <__aeabi_dmul+0x1f2>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	3808      	subs	r0, #8
 8001c80:	4083      	lsls	r3, r0
 8001c82:	469a      	mov	sl, r3
 8001c84:	e68e      	b.n	80019a4 <__aeabi_dmul+0x214>
 8001c86:	f000 fcdf 	bl	8002648 <__clzsi2>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	3215      	adds	r2, #21
 8001c90:	3320      	adds	r3, #32
 8001c92:	2a1c      	cmp	r2, #28
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dmul+0x508>
 8001c96:	e64e      	b.n	8001936 <__aeabi_dmul+0x1a6>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	0034      	movs	r4, r6
 8001c9c:	3a08      	subs	r2, #8
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	4094      	lsls	r4, r2
 8001ca2:	e652      	b.n	800194a <__aeabi_dmul+0x1ba>
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	e604      	b.n	80018b2 <__aeabi_dmul+0x122>
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <__aeabi_dmul+0x58c>)
 8001caa:	0021      	movs	r1, r4
 8001cac:	469c      	mov	ip, r3
 8001cae:	0003      	movs	r3, r0
 8001cb0:	9d01      	ldr	r5, [sp, #4]
 8001cb2:	40d3      	lsrs	r3, r2
 8001cb4:	4465      	add	r5, ip
 8001cb6:	40a9      	lsls	r1, r5
 8001cb8:	4319      	orrs	r1, r3
 8001cba:	0003      	movs	r3, r0
 8001cbc:	40ab      	lsls	r3, r5
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	4183      	sbcs	r3, r0
 8001cc2:	4319      	orrs	r1, r3
 8001cc4:	0008      	movs	r0, r1
 8001cc6:	40d4      	lsrs	r4, r2
 8001cc8:	074b      	lsls	r3, r1, #29
 8001cca:	d009      	beq.n	8001ce0 <__aeabi_dmul+0x550>
 8001ccc:	230f      	movs	r3, #15
 8001cce:	400b      	ands	r3, r1
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d005      	beq.n	8001ce0 <__aeabi_dmul+0x550>
 8001cd4:	1d0b      	adds	r3, r1, #4
 8001cd6:	428b      	cmp	r3, r1
 8001cd8:	4180      	sbcs	r0, r0
 8001cda:	4240      	negs	r0, r0
 8001cdc:	1824      	adds	r4, r4, r0
 8001cde:	0018      	movs	r0, r3
 8001ce0:	0223      	lsls	r3, r4, #8
 8001ce2:	d400      	bmi.n	8001ce6 <__aeabi_dmul+0x556>
 8001ce4:	e6d6      	b.n	8001a94 <__aeabi_dmul+0x304>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	e5a6      	b.n	800183c <__aeabi_dmul+0xac>
 8001cee:	290f      	cmp	r1, #15
 8001cf0:	d1aa      	bne.n	8001c48 <__aeabi_dmul+0x4b8>
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	4652      	mov	r2, sl
 8001cf6:	031b      	lsls	r3, r3, #12
 8001cf8:	421a      	tst	r2, r3
 8001cfa:	d0a9      	beq.n	8001c50 <__aeabi_dmul+0x4c0>
 8001cfc:	421c      	tst	r4, r3
 8001cfe:	d1a7      	bne.n	8001c50 <__aeabi_dmul+0x4c0>
 8001d00:	431c      	orrs	r4, r3
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	0002      	movs	r2, r0
 8001d06:	469b      	mov	fp, r3
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <__aeabi_dmul+0x588>)
 8001d0a:	e597      	b.n	800183c <__aeabi_dmul+0xac>
 8001d0c:	2400      	movs	r4, #0
 8001d0e:	e6c1      	b.n	8001a94 <__aeabi_dmul+0x304>
 8001d10:	2400      	movs	r4, #0
 8001d12:	4b01      	ldr	r3, [pc, #4]	@ (8001d18 <__aeabi_dmul+0x588>)
 8001d14:	0022      	movs	r2, r4
 8001d16:	e591      	b.n	800183c <__aeabi_dmul+0xac>
 8001d18:	000007ff 	.word	0x000007ff
 8001d1c:	0000041e 	.word	0x0000041e

08001d20 <__aeabi_dsub>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	464e      	mov	r6, r9
 8001d24:	4645      	mov	r5, r8
 8001d26:	46de      	mov	lr, fp
 8001d28:	4657      	mov	r7, sl
 8001d2a:	b5e0      	push	{r5, r6, r7, lr}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	9000      	str	r0, [sp, #0]
 8001d30:	9101      	str	r1, [sp, #4]
 8001d32:	030c      	lsls	r4, r1, #12
 8001d34:	004f      	lsls	r7, r1, #1
 8001d36:	0fce      	lsrs	r6, r1, #31
 8001d38:	0a61      	lsrs	r1, r4, #9
 8001d3a:	9c00      	ldr	r4, [sp, #0]
 8001d3c:	46b0      	mov	r8, r6
 8001d3e:	0f64      	lsrs	r4, r4, #29
 8001d40:	430c      	orrs	r4, r1
 8001d42:	9900      	ldr	r1, [sp, #0]
 8001d44:	0d7f      	lsrs	r7, r7, #21
 8001d46:	00c8      	lsls	r0, r1, #3
 8001d48:	0011      	movs	r1, r2
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	469c      	mov	ip, r3
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	9201      	str	r2, [sp, #4]
 8001d54:	0051      	lsls	r1, r2, #1
 8001d56:	0d4b      	lsrs	r3, r1, #21
 8001d58:	4699      	mov	r9, r3
 8001d5a:	9b01      	ldr	r3, [sp, #4]
 8001d5c:	9d00      	ldr	r5, [sp, #0]
 8001d5e:	0fd9      	lsrs	r1, r3, #31
 8001d60:	4663      	mov	r3, ip
 8001d62:	0f6a      	lsrs	r2, r5, #29
 8001d64:	0a5b      	lsrs	r3, r3, #9
 8001d66:	4313      	orrs	r3, r2
 8001d68:	00ea      	lsls	r2, r5, #3
 8001d6a:	4694      	mov	ip, r2
 8001d6c:	4693      	mov	fp, r2
 8001d6e:	4ac1      	ldr	r2, [pc, #772]	@ (8002074 <__aeabi_dsub+0x354>)
 8001d70:	9003      	str	r0, [sp, #12]
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	4591      	cmp	r9, r2
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x5a>
 8001d78:	e0cd      	b.n	8001f16 <__aeabi_dsub+0x1f6>
 8001d7a:	2501      	movs	r5, #1
 8001d7c:	4069      	eors	r1, r5
 8001d7e:	464d      	mov	r5, r9
 8001d80:	1b7d      	subs	r5, r7, r5
 8001d82:	46aa      	mov	sl, r5
 8001d84:	428e      	cmp	r6, r1
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x6a>
 8001d88:	e080      	b.n	8001e8c <__aeabi_dsub+0x16c>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_dsub+0x70>
 8001d8e:	e335      	b.n	80023fc <__aeabi_dsub+0x6dc>
 8001d90:	4649      	mov	r1, r9
 8001d92:	2900      	cmp	r1, #0
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x78>
 8001d96:	e0df      	b.n	8001f58 <__aeabi_dsub+0x238>
 8001d98:	4297      	cmp	r7, r2
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x7e>
 8001d9c:	e194      	b.n	80020c8 <__aeabi_dsub+0x3a8>
 8001d9e:	4652      	mov	r2, sl
 8001da0:	2501      	movs	r5, #1
 8001da2:	2a38      	cmp	r2, #56	@ 0x38
 8001da4:	dc19      	bgt.n	8001dda <__aeabi_dsub+0xba>
 8001da6:	2280      	movs	r2, #128	@ 0x80
 8001da8:	9b02      	ldr	r3, [sp, #8]
 8001daa:	0412      	lsls	r2, r2, #16
 8001dac:	4313      	orrs	r3, r2
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	4652      	mov	r2, sl
 8001db2:	2a1f      	cmp	r2, #31
 8001db4:	dd00      	ble.n	8001db8 <__aeabi_dsub+0x98>
 8001db6:	e1e3      	b.n	8002180 <__aeabi_dsub+0x460>
 8001db8:	4653      	mov	r3, sl
 8001dba:	2220      	movs	r2, #32
 8001dbc:	4661      	mov	r1, ip
 8001dbe:	9d02      	ldr	r5, [sp, #8]
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	4095      	lsls	r5, r2
 8001dc4:	40d9      	lsrs	r1, r3
 8001dc6:	430d      	orrs	r5, r1
 8001dc8:	4661      	mov	r1, ip
 8001dca:	4091      	lsls	r1, r2
 8001dcc:	000a      	movs	r2, r1
 8001dce:	1e51      	subs	r1, r2, #1
 8001dd0:	418a      	sbcs	r2, r1
 8001dd2:	4315      	orrs	r5, r2
 8001dd4:	9a02      	ldr	r2, [sp, #8]
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	1aa4      	subs	r4, r4, r2
 8001dda:	1b45      	subs	r5, r0, r5
 8001ddc:	42a8      	cmp	r0, r5
 8001dde:	4180      	sbcs	r0, r0
 8001de0:	4240      	negs	r0, r0
 8001de2:	1a24      	subs	r4, r4, r0
 8001de4:	0223      	lsls	r3, r4, #8
 8001de6:	d400      	bmi.n	8001dea <__aeabi_dsub+0xca>
 8001de8:	e13d      	b.n	8002066 <__aeabi_dsub+0x346>
 8001dea:	0264      	lsls	r4, r4, #9
 8001dec:	0a64      	lsrs	r4, r4, #9
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0xd4>
 8001df2:	e147      	b.n	8002084 <__aeabi_dsub+0x364>
 8001df4:	0020      	movs	r0, r4
 8001df6:	f000 fc27 	bl	8002648 <__clzsi2>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	3b08      	subs	r3, #8
 8001dfe:	2120      	movs	r1, #32
 8001e00:	0028      	movs	r0, r5
 8001e02:	1aca      	subs	r2, r1, r3
 8001e04:	40d0      	lsrs	r0, r2
 8001e06:	409c      	lsls	r4, r3
 8001e08:	0002      	movs	r2, r0
 8001e0a:	409d      	lsls	r5, r3
 8001e0c:	4322      	orrs	r2, r4
 8001e0e:	429f      	cmp	r7, r3
 8001e10:	dd00      	ble.n	8001e14 <__aeabi_dsub+0xf4>
 8001e12:	e177      	b.n	8002104 <__aeabi_dsub+0x3e4>
 8001e14:	1bd8      	subs	r0, r3, r7
 8001e16:	3001      	adds	r0, #1
 8001e18:	1a09      	subs	r1, r1, r0
 8001e1a:	002c      	movs	r4, r5
 8001e1c:	408d      	lsls	r5, r1
 8001e1e:	40c4      	lsrs	r4, r0
 8001e20:	1e6b      	subs	r3, r5, #1
 8001e22:	419d      	sbcs	r5, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	40c2      	lsrs	r2, r0
 8001e28:	408b      	lsls	r3, r1
 8001e2a:	4325      	orrs	r5, r4
 8001e2c:	2700      	movs	r7, #0
 8001e2e:	0014      	movs	r4, r2
 8001e30:	431d      	orrs	r5, r3
 8001e32:	076b      	lsls	r3, r5, #29
 8001e34:	d009      	beq.n	8001e4a <__aeabi_dsub+0x12a>
 8001e36:	230f      	movs	r3, #15
 8001e38:	402b      	ands	r3, r5
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d005      	beq.n	8001e4a <__aeabi_dsub+0x12a>
 8001e3e:	1d2b      	adds	r3, r5, #4
 8001e40:	42ab      	cmp	r3, r5
 8001e42:	41ad      	sbcs	r5, r5
 8001e44:	426d      	negs	r5, r5
 8001e46:	1964      	adds	r4, r4, r5
 8001e48:	001d      	movs	r5, r3
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x130>
 8001e4e:	e140      	b.n	80020d2 <__aeabi_dsub+0x3b2>
 8001e50:	4a88      	ldr	r2, [pc, #544]	@ (8002074 <__aeabi_dsub+0x354>)
 8001e52:	3701      	adds	r7, #1
 8001e54:	4297      	cmp	r7, r2
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x13a>
 8001e58:	e101      	b.n	800205e <__aeabi_dsub+0x33e>
 8001e5a:	2601      	movs	r6, #1
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	4986      	ldr	r1, [pc, #536]	@ (8002078 <__aeabi_dsub+0x358>)
 8001e60:	08ed      	lsrs	r5, r5, #3
 8001e62:	4021      	ands	r1, r4
 8001e64:	074a      	lsls	r2, r1, #29
 8001e66:	432a      	orrs	r2, r5
 8001e68:	057c      	lsls	r4, r7, #21
 8001e6a:	024d      	lsls	r5, r1, #9
 8001e6c:	0b2d      	lsrs	r5, r5, #12
 8001e6e:	0d64      	lsrs	r4, r4, #21
 8001e70:	401e      	ands	r6, r3
 8001e72:	0524      	lsls	r4, r4, #20
 8001e74:	432c      	orrs	r4, r5
 8001e76:	07f6      	lsls	r6, r6, #31
 8001e78:	4334      	orrs	r4, r6
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	0021      	movs	r1, r4
 8001e7e:	b005      	add	sp, #20
 8001e80:	bcf0      	pop	{r4, r5, r6, r7}
 8001e82:	46bb      	mov	fp, r7
 8001e84:	46b2      	mov	sl, r6
 8001e86:	46a9      	mov	r9, r5
 8001e88:	46a0      	mov	r8, r4
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_dsub+0x172>
 8001e90:	e2d0      	b.n	8002434 <__aeabi_dsub+0x714>
 8001e92:	4649      	mov	r1, r9
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x17a>
 8001e98:	e0d4      	b.n	8002044 <__aeabi_dsub+0x324>
 8001e9a:	4661      	mov	r1, ip
 8001e9c:	9b02      	ldr	r3, [sp, #8]
 8001e9e:	4319      	orrs	r1, r3
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x184>
 8001ea2:	e12b      	b.n	80020fc <__aeabi_dsub+0x3dc>
 8001ea4:	1e69      	subs	r1, r5, #1
 8001ea6:	2d01      	cmp	r5, #1
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x18c>
 8001eaa:	e1d9      	b.n	8002260 <__aeabi_dsub+0x540>
 8001eac:	4295      	cmp	r5, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x192>
 8001eb0:	e10a      	b.n	80020c8 <__aeabi_dsub+0x3a8>
 8001eb2:	2501      	movs	r5, #1
 8001eb4:	2938      	cmp	r1, #56	@ 0x38
 8001eb6:	dc17      	bgt.n	8001ee8 <__aeabi_dsub+0x1c8>
 8001eb8:	468a      	mov	sl, r1
 8001eba:	4653      	mov	r3, sl
 8001ebc:	2b1f      	cmp	r3, #31
 8001ebe:	dd00      	ble.n	8001ec2 <__aeabi_dsub+0x1a2>
 8001ec0:	e1e7      	b.n	8002292 <__aeabi_dsub+0x572>
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	1ad2      	subs	r2, r2, r3
 8001ec6:	9b02      	ldr	r3, [sp, #8]
 8001ec8:	4661      	mov	r1, ip
 8001eca:	4093      	lsls	r3, r2
 8001ecc:	001d      	movs	r5, r3
 8001ece:	4653      	mov	r3, sl
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	4663      	mov	r3, ip
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	430d      	orrs	r5, r1
 8001eda:	1e51      	subs	r1, r2, #1
 8001edc:	418a      	sbcs	r2, r1
 8001ede:	4653      	mov	r3, sl
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	9a02      	ldr	r2, [sp, #8]
 8001ee4:	40da      	lsrs	r2, r3
 8001ee6:	18a4      	adds	r4, r4, r2
 8001ee8:	182d      	adds	r5, r5, r0
 8001eea:	4285      	cmp	r5, r0
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	4240      	negs	r0, r0
 8001ef0:	1824      	adds	r4, r4, r0
 8001ef2:	0223      	lsls	r3, r4, #8
 8001ef4:	d400      	bmi.n	8001ef8 <__aeabi_dsub+0x1d8>
 8001ef6:	e0b6      	b.n	8002066 <__aeabi_dsub+0x346>
 8001ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8002074 <__aeabi_dsub+0x354>)
 8001efa:	3701      	adds	r7, #1
 8001efc:	429f      	cmp	r7, r3
 8001efe:	d100      	bne.n	8001f02 <__aeabi_dsub+0x1e2>
 8001f00:	e0ad      	b.n	800205e <__aeabi_dsub+0x33e>
 8001f02:	2101      	movs	r1, #1
 8001f04:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <__aeabi_dsub+0x358>)
 8001f06:	086a      	lsrs	r2, r5, #1
 8001f08:	401c      	ands	r4, r3
 8001f0a:	4029      	ands	r1, r5
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	07e5      	lsls	r5, r4, #31
 8001f10:	4315      	orrs	r5, r2
 8001f12:	0864      	lsrs	r4, r4, #1
 8001f14:	e78d      	b.n	8001e32 <__aeabi_dsub+0x112>
 8001f16:	4a59      	ldr	r2, [pc, #356]	@ (800207c <__aeabi_dsub+0x35c>)
 8001f18:	9b02      	ldr	r3, [sp, #8]
 8001f1a:	4692      	mov	sl, r2
 8001f1c:	4662      	mov	r2, ip
 8001f1e:	44ba      	add	sl, r7
 8001f20:	431a      	orrs	r2, r3
 8001f22:	d02c      	beq.n	8001f7e <__aeabi_dsub+0x25e>
 8001f24:	428e      	cmp	r6, r1
 8001f26:	d02e      	beq.n	8001f86 <__aeabi_dsub+0x266>
 8001f28:	4652      	mov	r2, sl
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d060      	beq.n	8001ff0 <__aeabi_dsub+0x2d0>
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x214>
 8001f32:	e0db      	b.n	80020ec <__aeabi_dsub+0x3cc>
 8001f34:	4663      	mov	r3, ip
 8001f36:	000e      	movs	r6, r1
 8001f38:	9c02      	ldr	r4, [sp, #8]
 8001f3a:	08d8      	lsrs	r0, r3, #3
 8001f3c:	0762      	lsls	r2, r4, #29
 8001f3e:	4302      	orrs	r2, r0
 8001f40:	08e4      	lsrs	r4, r4, #3
 8001f42:	0013      	movs	r3, r2
 8001f44:	4323      	orrs	r3, r4
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x22a>
 8001f48:	e254      	b.n	80023f4 <__aeabi_dsub+0x6d4>
 8001f4a:	2580      	movs	r5, #128	@ 0x80
 8001f4c:	032d      	lsls	r5, r5, #12
 8001f4e:	4325      	orrs	r5, r4
 8001f50:	032d      	lsls	r5, r5, #12
 8001f52:	4c48      	ldr	r4, [pc, #288]	@ (8002074 <__aeabi_dsub+0x354>)
 8001f54:	0b2d      	lsrs	r5, r5, #12
 8001f56:	e78c      	b.n	8001e72 <__aeabi_dsub+0x152>
 8001f58:	4661      	mov	r1, ip
 8001f5a:	9b02      	ldr	r3, [sp, #8]
 8001f5c:	4319      	orrs	r1, r3
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x242>
 8001f60:	e0cc      	b.n	80020fc <__aeabi_dsub+0x3dc>
 8001f62:	0029      	movs	r1, r5
 8001f64:	3901      	subs	r1, #1
 8001f66:	2d01      	cmp	r5, #1
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x24c>
 8001f6a:	e188      	b.n	800227e <__aeabi_dsub+0x55e>
 8001f6c:	4295      	cmp	r5, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x252>
 8001f70:	e0aa      	b.n	80020c8 <__aeabi_dsub+0x3a8>
 8001f72:	2501      	movs	r5, #1
 8001f74:	2938      	cmp	r1, #56	@ 0x38
 8001f76:	dd00      	ble.n	8001f7a <__aeabi_dsub+0x25a>
 8001f78:	e72f      	b.n	8001dda <__aeabi_dsub+0xba>
 8001f7a:	468a      	mov	sl, r1
 8001f7c:	e718      	b.n	8001db0 <__aeabi_dsub+0x90>
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4051      	eors	r1, r2
 8001f82:	428e      	cmp	r6, r1
 8001f84:	d1d0      	bne.n	8001f28 <__aeabi_dsub+0x208>
 8001f86:	4653      	mov	r3, sl
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x26e>
 8001f8c:	e0be      	b.n	800210c <__aeabi_dsub+0x3ec>
 8001f8e:	2f00      	cmp	r7, #0
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x274>
 8001f92:	e138      	b.n	8002206 <__aeabi_dsub+0x4e6>
 8001f94:	46ca      	mov	sl, r9
 8001f96:	0022      	movs	r2, r4
 8001f98:	4302      	orrs	r2, r0
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x27e>
 8001f9c:	e1e2      	b.n	8002364 <__aeabi_dsub+0x644>
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	1e59      	subs	r1, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x288>
 8001fa6:	e20d      	b.n	80023c4 <__aeabi_dsub+0x6a4>
 8001fa8:	4a32      	ldr	r2, [pc, #200]	@ (8002074 <__aeabi_dsub+0x354>)
 8001faa:	4592      	cmp	sl, r2
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x290>
 8001fae:	e1d2      	b.n	8002356 <__aeabi_dsub+0x636>
 8001fb0:	2701      	movs	r7, #1
 8001fb2:	2938      	cmp	r1, #56	@ 0x38
 8001fb4:	dc13      	bgt.n	8001fde <__aeabi_dsub+0x2be>
 8001fb6:	291f      	cmp	r1, #31
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dsub+0x29c>
 8001fba:	e1ee      	b.n	800239a <__aeabi_dsub+0x67a>
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	9b02      	ldr	r3, [sp, #8]
 8001fc0:	1a52      	subs	r2, r2, r1
 8001fc2:	0025      	movs	r5, r4
 8001fc4:	0007      	movs	r7, r0
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	40cc      	lsrs	r4, r1
 8001fca:	4090      	lsls	r0, r2
 8001fcc:	4095      	lsls	r5, r2
 8001fce:	40cf      	lsrs	r7, r1
 8001fd0:	44a2      	add	sl, r4
 8001fd2:	1e42      	subs	r2, r0, #1
 8001fd4:	4190      	sbcs	r0, r2
 8001fd6:	4653      	mov	r3, sl
 8001fd8:	432f      	orrs	r7, r5
 8001fda:	4307      	orrs	r7, r0
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	003d      	movs	r5, r7
 8001fe0:	4465      	add	r5, ip
 8001fe2:	4565      	cmp	r5, ip
 8001fe4:	4192      	sbcs	r2, r2
 8001fe6:	9b02      	ldr	r3, [sp, #8]
 8001fe8:	4252      	negs	r2, r2
 8001fea:	464f      	mov	r7, r9
 8001fec:	18d4      	adds	r4, r2, r3
 8001fee:	e780      	b.n	8001ef2 <__aeabi_dsub+0x1d2>
 8001ff0:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <__aeabi_dsub+0x360>)
 8001ff2:	1c7d      	adds	r5, r7, #1
 8001ff4:	4215      	tst	r5, r2
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x2da>
 8001ff8:	e0aa      	b.n	8002150 <__aeabi_dsub+0x430>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0025      	movs	r5, r4
 8001ffe:	9b02      	ldr	r3, [sp, #8]
 8002000:	4305      	orrs	r5, r0
 8002002:	431a      	orrs	r2, r3
 8002004:	2f00      	cmp	r7, #0
 8002006:	d000      	beq.n	800200a <__aeabi_dsub+0x2ea>
 8002008:	e0f5      	b.n	80021f6 <__aeabi_dsub+0x4d6>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x2f0>
 800200e:	e16b      	b.n	80022e8 <__aeabi_dsub+0x5c8>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x2f6>
 8002014:	e152      	b.n	80022bc <__aeabi_dsub+0x59c>
 8002016:	4663      	mov	r3, ip
 8002018:	1ac5      	subs	r5, r0, r3
 800201a:	9b02      	ldr	r3, [sp, #8]
 800201c:	1ae2      	subs	r2, r4, r3
 800201e:	42a8      	cmp	r0, r5
 8002020:	419b      	sbcs	r3, r3
 8002022:	425b      	negs	r3, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	021a      	lsls	r2, r3, #8
 8002028:	d400      	bmi.n	800202c <__aeabi_dsub+0x30c>
 800202a:	e1d5      	b.n	80023d8 <__aeabi_dsub+0x6b8>
 800202c:	4663      	mov	r3, ip
 800202e:	1a1d      	subs	r5, r3, r0
 8002030:	45ac      	cmp	ip, r5
 8002032:	4192      	sbcs	r2, r2
 8002034:	2601      	movs	r6, #1
 8002036:	9b02      	ldr	r3, [sp, #8]
 8002038:	4252      	negs	r2, r2
 800203a:	1b1c      	subs	r4, r3, r4
 800203c:	4688      	mov	r8, r1
 800203e:	1aa4      	subs	r4, r4, r2
 8002040:	400e      	ands	r6, r1
 8002042:	e6f6      	b.n	8001e32 <__aeabi_dsub+0x112>
 8002044:	4297      	cmp	r7, r2
 8002046:	d03f      	beq.n	80020c8 <__aeabi_dsub+0x3a8>
 8002048:	4652      	mov	r2, sl
 800204a:	2501      	movs	r5, #1
 800204c:	2a38      	cmp	r2, #56	@ 0x38
 800204e:	dd00      	ble.n	8002052 <__aeabi_dsub+0x332>
 8002050:	e74a      	b.n	8001ee8 <__aeabi_dsub+0x1c8>
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	9b02      	ldr	r3, [sp, #8]
 8002056:	0412      	lsls	r2, r2, #16
 8002058:	4313      	orrs	r3, r2
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	e72d      	b.n	8001eba <__aeabi_dsub+0x19a>
 800205e:	003c      	movs	r4, r7
 8002060:	2500      	movs	r5, #0
 8002062:	2200      	movs	r2, #0
 8002064:	e705      	b.n	8001e72 <__aeabi_dsub+0x152>
 8002066:	2307      	movs	r3, #7
 8002068:	402b      	ands	r3, r5
 800206a:	2b00      	cmp	r3, #0
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x350>
 800206e:	e6e2      	b.n	8001e36 <__aeabi_dsub+0x116>
 8002070:	e06b      	b.n	800214a <__aeabi_dsub+0x42a>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff
 8002078:	ff7fffff 	.word	0xff7fffff
 800207c:	fffff801 	.word	0xfffff801
 8002080:	000007fe 	.word	0x000007fe
 8002084:	0028      	movs	r0, r5
 8002086:	f000 fadf 	bl	8002648 <__clzsi2>
 800208a:	0003      	movs	r3, r0
 800208c:	3318      	adds	r3, #24
 800208e:	2b1f      	cmp	r3, #31
 8002090:	dc00      	bgt.n	8002094 <__aeabi_dsub+0x374>
 8002092:	e6b4      	b.n	8001dfe <__aeabi_dsub+0xde>
 8002094:	002a      	movs	r2, r5
 8002096:	3808      	subs	r0, #8
 8002098:	4082      	lsls	r2, r0
 800209a:	429f      	cmp	r7, r3
 800209c:	dd00      	ble.n	80020a0 <__aeabi_dsub+0x380>
 800209e:	e0b9      	b.n	8002214 <__aeabi_dsub+0x4f4>
 80020a0:	1bdb      	subs	r3, r3, r7
 80020a2:	1c58      	adds	r0, r3, #1
 80020a4:	281f      	cmp	r0, #31
 80020a6:	dc00      	bgt.n	80020aa <__aeabi_dsub+0x38a>
 80020a8:	e1a0      	b.n	80023ec <__aeabi_dsub+0x6cc>
 80020aa:	0015      	movs	r5, r2
 80020ac:	3b1f      	subs	r3, #31
 80020ae:	40dd      	lsrs	r5, r3
 80020b0:	2820      	cmp	r0, #32
 80020b2:	d005      	beq.n	80020c0 <__aeabi_dsub+0x3a0>
 80020b4:	2340      	movs	r3, #64	@ 0x40
 80020b6:	1a1b      	subs	r3, r3, r0
 80020b8:	409a      	lsls	r2, r3
 80020ba:	1e53      	subs	r3, r2, #1
 80020bc:	419a      	sbcs	r2, r3
 80020be:	4315      	orrs	r5, r2
 80020c0:	2307      	movs	r3, #7
 80020c2:	2700      	movs	r7, #0
 80020c4:	402b      	ands	r3, r5
 80020c6:	e7d0      	b.n	800206a <__aeabi_dsub+0x34a>
 80020c8:	08c0      	lsrs	r0, r0, #3
 80020ca:	0762      	lsls	r2, r4, #29
 80020cc:	4302      	orrs	r2, r0
 80020ce:	08e4      	lsrs	r4, r4, #3
 80020d0:	e737      	b.n	8001f42 <__aeabi_dsub+0x222>
 80020d2:	08ea      	lsrs	r2, r5, #3
 80020d4:	0763      	lsls	r3, r4, #29
 80020d6:	431a      	orrs	r2, r3
 80020d8:	4bd3      	ldr	r3, [pc, #844]	@ (8002428 <__aeabi_dsub+0x708>)
 80020da:	08e4      	lsrs	r4, r4, #3
 80020dc:	429f      	cmp	r7, r3
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x3c2>
 80020e0:	e72f      	b.n	8001f42 <__aeabi_dsub+0x222>
 80020e2:	0324      	lsls	r4, r4, #12
 80020e4:	0b25      	lsrs	r5, r4, #12
 80020e6:	057c      	lsls	r4, r7, #21
 80020e8:	0d64      	lsrs	r4, r4, #21
 80020ea:	e6c2      	b.n	8001e72 <__aeabi_dsub+0x152>
 80020ec:	46ca      	mov	sl, r9
 80020ee:	0022      	movs	r2, r4
 80020f0:	4302      	orrs	r2, r0
 80020f2:	d158      	bne.n	80021a6 <__aeabi_dsub+0x486>
 80020f4:	4663      	mov	r3, ip
 80020f6:	000e      	movs	r6, r1
 80020f8:	9c02      	ldr	r4, [sp, #8]
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	4657      	mov	r7, sl
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	e7e7      	b.n	80020d4 <__aeabi_dsub+0x3b4>
 8002104:	4cc9      	ldr	r4, [pc, #804]	@ (800242c <__aeabi_dsub+0x70c>)
 8002106:	1aff      	subs	r7, r7, r3
 8002108:	4014      	ands	r4, r2
 800210a:	e692      	b.n	8001e32 <__aeabi_dsub+0x112>
 800210c:	4dc8      	ldr	r5, [pc, #800]	@ (8002430 <__aeabi_dsub+0x710>)
 800210e:	1c7a      	adds	r2, r7, #1
 8002110:	422a      	tst	r2, r5
 8002112:	d000      	beq.n	8002116 <__aeabi_dsub+0x3f6>
 8002114:	e084      	b.n	8002220 <__aeabi_dsub+0x500>
 8002116:	0022      	movs	r2, r4
 8002118:	4302      	orrs	r2, r0
 800211a:	2f00      	cmp	r7, #0
 800211c:	d000      	beq.n	8002120 <__aeabi_dsub+0x400>
 800211e:	e0ef      	b.n	8002300 <__aeabi_dsub+0x5e0>
 8002120:	2a00      	cmp	r2, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x406>
 8002124:	e0e5      	b.n	80022f2 <__aeabi_dsub+0x5d2>
 8002126:	4662      	mov	r2, ip
 8002128:	9902      	ldr	r1, [sp, #8]
 800212a:	430a      	orrs	r2, r1
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x410>
 800212e:	e0c5      	b.n	80022bc <__aeabi_dsub+0x59c>
 8002130:	4663      	mov	r3, ip
 8002132:	18c5      	adds	r5, r0, r3
 8002134:	468c      	mov	ip, r1
 8002136:	4285      	cmp	r5, r0
 8002138:	4180      	sbcs	r0, r0
 800213a:	4464      	add	r4, ip
 800213c:	4240      	negs	r0, r0
 800213e:	1824      	adds	r4, r4, r0
 8002140:	0223      	lsls	r3, r4, #8
 8002142:	d502      	bpl.n	800214a <__aeabi_dsub+0x42a>
 8002144:	4bb9      	ldr	r3, [pc, #740]	@ (800242c <__aeabi_dsub+0x70c>)
 8002146:	3701      	adds	r7, #1
 8002148:	401c      	ands	r4, r3
 800214a:	46ba      	mov	sl, r7
 800214c:	9503      	str	r5, [sp, #12]
 800214e:	e7d5      	b.n	80020fc <__aeabi_dsub+0x3dc>
 8002150:	4662      	mov	r2, ip
 8002152:	1a85      	subs	r5, r0, r2
 8002154:	42a8      	cmp	r0, r5
 8002156:	4192      	sbcs	r2, r2
 8002158:	4252      	negs	r2, r2
 800215a:	4691      	mov	r9, r2
 800215c:	9b02      	ldr	r3, [sp, #8]
 800215e:	1ae3      	subs	r3, r4, r3
 8002160:	001a      	movs	r2, r3
 8002162:	464b      	mov	r3, r9
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	4691      	mov	r9, r2
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	d46c      	bmi.n	8002248 <__aeabi_dsub+0x528>
 800216e:	464a      	mov	r2, r9
 8002170:	464c      	mov	r4, r9
 8002172:	432a      	orrs	r2, r5
 8002174:	d000      	beq.n	8002178 <__aeabi_dsub+0x458>
 8002176:	e63a      	b.n	8001dee <__aeabi_dsub+0xce>
 8002178:	2600      	movs	r6, #0
 800217a:	2400      	movs	r4, #0
 800217c:	2500      	movs	r5, #0
 800217e:	e678      	b.n	8001e72 <__aeabi_dsub+0x152>
 8002180:	9902      	ldr	r1, [sp, #8]
 8002182:	4653      	mov	r3, sl
 8002184:	000d      	movs	r5, r1
 8002186:	3a20      	subs	r2, #32
 8002188:	40d5      	lsrs	r5, r2
 800218a:	2b20      	cmp	r3, #32
 800218c:	d006      	beq.n	800219c <__aeabi_dsub+0x47c>
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	1ad2      	subs	r2, r2, r3
 8002192:	000b      	movs	r3, r1
 8002194:	4093      	lsls	r3, r2
 8002196:	4662      	mov	r2, ip
 8002198:	431a      	orrs	r2, r3
 800219a:	4693      	mov	fp, r2
 800219c:	465b      	mov	r3, fp
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	4193      	sbcs	r3, r2
 80021a2:	431d      	orrs	r5, r3
 80021a4:	e619      	b.n	8001dda <__aeabi_dsub+0xba>
 80021a6:	4653      	mov	r3, sl
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x490>
 80021ae:	e0c6      	b.n	800233e <__aeabi_dsub+0x61e>
 80021b0:	4e9d      	ldr	r6, [pc, #628]	@ (8002428 <__aeabi_dsub+0x708>)
 80021b2:	45b2      	cmp	sl, r6
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x498>
 80021b6:	e6bd      	b.n	8001f34 <__aeabi_dsub+0x214>
 80021b8:	4688      	mov	r8, r1
 80021ba:	000e      	movs	r6, r1
 80021bc:	2501      	movs	r5, #1
 80021be:	2a38      	cmp	r2, #56	@ 0x38
 80021c0:	dc10      	bgt.n	80021e4 <__aeabi_dsub+0x4c4>
 80021c2:	2a1f      	cmp	r2, #31
 80021c4:	dc7f      	bgt.n	80022c6 <__aeabi_dsub+0x5a6>
 80021c6:	2120      	movs	r1, #32
 80021c8:	0025      	movs	r5, r4
 80021ca:	1a89      	subs	r1, r1, r2
 80021cc:	0007      	movs	r7, r0
 80021ce:	4088      	lsls	r0, r1
 80021d0:	408d      	lsls	r5, r1
 80021d2:	40d7      	lsrs	r7, r2
 80021d4:	40d4      	lsrs	r4, r2
 80021d6:	1e41      	subs	r1, r0, #1
 80021d8:	4188      	sbcs	r0, r1
 80021da:	9b02      	ldr	r3, [sp, #8]
 80021dc:	433d      	orrs	r5, r7
 80021de:	1b1b      	subs	r3, r3, r4
 80021e0:	4305      	orrs	r5, r0
 80021e2:	9302      	str	r3, [sp, #8]
 80021e4:	4662      	mov	r2, ip
 80021e6:	1b55      	subs	r5, r2, r5
 80021e8:	45ac      	cmp	ip, r5
 80021ea:	4192      	sbcs	r2, r2
 80021ec:	9b02      	ldr	r3, [sp, #8]
 80021ee:	4252      	negs	r2, r2
 80021f0:	464f      	mov	r7, r9
 80021f2:	1a9c      	subs	r4, r3, r2
 80021f4:	e5f6      	b.n	8001de4 <__aeabi_dsub+0xc4>
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x4dc>
 80021fa:	e0b7      	b.n	800236c <__aeabi_dsub+0x64c>
 80021fc:	2a00      	cmp	r2, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0x4e2>
 8002200:	e0f0      	b.n	80023e4 <__aeabi_dsub+0x6c4>
 8002202:	2601      	movs	r6, #1
 8002204:	400e      	ands	r6, r1
 8002206:	4663      	mov	r3, ip
 8002208:	9802      	ldr	r0, [sp, #8]
 800220a:	08d9      	lsrs	r1, r3, #3
 800220c:	0742      	lsls	r2, r0, #29
 800220e:	430a      	orrs	r2, r1
 8002210:	08c4      	lsrs	r4, r0, #3
 8002212:	e696      	b.n	8001f42 <__aeabi_dsub+0x222>
 8002214:	4c85      	ldr	r4, [pc, #532]	@ (800242c <__aeabi_dsub+0x70c>)
 8002216:	1aff      	subs	r7, r7, r3
 8002218:	4014      	ands	r4, r2
 800221a:	0762      	lsls	r2, r4, #29
 800221c:	08e4      	lsrs	r4, r4, #3
 800221e:	e760      	b.n	80020e2 <__aeabi_dsub+0x3c2>
 8002220:	4981      	ldr	r1, [pc, #516]	@ (8002428 <__aeabi_dsub+0x708>)
 8002222:	428a      	cmp	r2, r1
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x508>
 8002226:	e0c9      	b.n	80023bc <__aeabi_dsub+0x69c>
 8002228:	4663      	mov	r3, ip
 800222a:	18c1      	adds	r1, r0, r3
 800222c:	4281      	cmp	r1, r0
 800222e:	4180      	sbcs	r0, r0
 8002230:	9b02      	ldr	r3, [sp, #8]
 8002232:	4240      	negs	r0, r0
 8002234:	18e3      	adds	r3, r4, r3
 8002236:	181b      	adds	r3, r3, r0
 8002238:	07dd      	lsls	r5, r3, #31
 800223a:	085c      	lsrs	r4, r3, #1
 800223c:	2307      	movs	r3, #7
 800223e:	0849      	lsrs	r1, r1, #1
 8002240:	430d      	orrs	r5, r1
 8002242:	0017      	movs	r7, r2
 8002244:	402b      	ands	r3, r5
 8002246:	e710      	b.n	800206a <__aeabi_dsub+0x34a>
 8002248:	4663      	mov	r3, ip
 800224a:	1a1d      	subs	r5, r3, r0
 800224c:	45ac      	cmp	ip, r5
 800224e:	4192      	sbcs	r2, r2
 8002250:	2601      	movs	r6, #1
 8002252:	9b02      	ldr	r3, [sp, #8]
 8002254:	4252      	negs	r2, r2
 8002256:	1b1c      	subs	r4, r3, r4
 8002258:	4688      	mov	r8, r1
 800225a:	1aa4      	subs	r4, r4, r2
 800225c:	400e      	ands	r6, r1
 800225e:	e5c6      	b.n	8001dee <__aeabi_dsub+0xce>
 8002260:	4663      	mov	r3, ip
 8002262:	18c5      	adds	r5, r0, r3
 8002264:	9b02      	ldr	r3, [sp, #8]
 8002266:	4285      	cmp	r5, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	469c      	mov	ip, r3
 800226c:	4240      	negs	r0, r0
 800226e:	4464      	add	r4, ip
 8002270:	1824      	adds	r4, r4, r0
 8002272:	2701      	movs	r7, #1
 8002274:	0223      	lsls	r3, r4, #8
 8002276:	d400      	bmi.n	800227a <__aeabi_dsub+0x55a>
 8002278:	e6f5      	b.n	8002066 <__aeabi_dsub+0x346>
 800227a:	2702      	movs	r7, #2
 800227c:	e641      	b.n	8001f02 <__aeabi_dsub+0x1e2>
 800227e:	4663      	mov	r3, ip
 8002280:	1ac5      	subs	r5, r0, r3
 8002282:	42a8      	cmp	r0, r5
 8002284:	4180      	sbcs	r0, r0
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	4240      	negs	r0, r0
 800228a:	1ae4      	subs	r4, r4, r3
 800228c:	2701      	movs	r7, #1
 800228e:	1a24      	subs	r4, r4, r0
 8002290:	e5a8      	b.n	8001de4 <__aeabi_dsub+0xc4>
 8002292:	9d02      	ldr	r5, [sp, #8]
 8002294:	4652      	mov	r2, sl
 8002296:	002b      	movs	r3, r5
 8002298:	3a20      	subs	r2, #32
 800229a:	40d3      	lsrs	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	4653      	mov	r3, sl
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d006      	beq.n	80022b2 <__aeabi_dsub+0x592>
 80022a4:	2240      	movs	r2, #64	@ 0x40
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	002b      	movs	r3, r5
 80022aa:	4093      	lsls	r3, r2
 80022ac:	4662      	mov	r2, ip
 80022ae:	431a      	orrs	r2, r3
 80022b0:	4693      	mov	fp, r2
 80022b2:	465d      	mov	r5, fp
 80022b4:	1e6b      	subs	r3, r5, #1
 80022b6:	419d      	sbcs	r5, r3
 80022b8:	430d      	orrs	r5, r1
 80022ba:	e615      	b.n	8001ee8 <__aeabi_dsub+0x1c8>
 80022bc:	0762      	lsls	r2, r4, #29
 80022be:	08c0      	lsrs	r0, r0, #3
 80022c0:	4302      	orrs	r2, r0
 80022c2:	08e4      	lsrs	r4, r4, #3
 80022c4:	e70d      	b.n	80020e2 <__aeabi_dsub+0x3c2>
 80022c6:	0011      	movs	r1, r2
 80022c8:	0027      	movs	r7, r4
 80022ca:	3920      	subs	r1, #32
 80022cc:	40cf      	lsrs	r7, r1
 80022ce:	2a20      	cmp	r2, #32
 80022d0:	d005      	beq.n	80022de <__aeabi_dsub+0x5be>
 80022d2:	2140      	movs	r1, #64	@ 0x40
 80022d4:	1a8a      	subs	r2, r1, r2
 80022d6:	4094      	lsls	r4, r2
 80022d8:	0025      	movs	r5, r4
 80022da:	4305      	orrs	r5, r0
 80022dc:	9503      	str	r5, [sp, #12]
 80022de:	9d03      	ldr	r5, [sp, #12]
 80022e0:	1e6a      	subs	r2, r5, #1
 80022e2:	4195      	sbcs	r5, r2
 80022e4:	433d      	orrs	r5, r7
 80022e6:	e77d      	b.n	80021e4 <__aeabi_dsub+0x4c4>
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x5ce>
 80022ec:	e744      	b.n	8002178 <__aeabi_dsub+0x458>
 80022ee:	2601      	movs	r6, #1
 80022f0:	400e      	ands	r6, r1
 80022f2:	4663      	mov	r3, ip
 80022f4:	08d9      	lsrs	r1, r3, #3
 80022f6:	9b02      	ldr	r3, [sp, #8]
 80022f8:	075a      	lsls	r2, r3, #29
 80022fa:	430a      	orrs	r2, r1
 80022fc:	08dc      	lsrs	r4, r3, #3
 80022fe:	e6f0      	b.n	80020e2 <__aeabi_dsub+0x3c2>
 8002300:	2a00      	cmp	r2, #0
 8002302:	d028      	beq.n	8002356 <__aeabi_dsub+0x636>
 8002304:	4662      	mov	r2, ip
 8002306:	9f02      	ldr	r7, [sp, #8]
 8002308:	08c0      	lsrs	r0, r0, #3
 800230a:	433a      	orrs	r2, r7
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x5f0>
 800230e:	e6dc      	b.n	80020ca <__aeabi_dsub+0x3aa>
 8002310:	0762      	lsls	r2, r4, #29
 8002312:	4310      	orrs	r0, r2
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	08e4      	lsrs	r4, r4, #3
 8002318:	0312      	lsls	r2, r2, #12
 800231a:	4214      	tst	r4, r2
 800231c:	d009      	beq.n	8002332 <__aeabi_dsub+0x612>
 800231e:	08fd      	lsrs	r5, r7, #3
 8002320:	4215      	tst	r5, r2
 8002322:	d106      	bne.n	8002332 <__aeabi_dsub+0x612>
 8002324:	4663      	mov	r3, ip
 8002326:	2601      	movs	r6, #1
 8002328:	002c      	movs	r4, r5
 800232a:	08d8      	lsrs	r0, r3, #3
 800232c:	077b      	lsls	r3, r7, #29
 800232e:	4318      	orrs	r0, r3
 8002330:	400e      	ands	r6, r1
 8002332:	0f42      	lsrs	r2, r0, #29
 8002334:	00c0      	lsls	r0, r0, #3
 8002336:	08c0      	lsrs	r0, r0, #3
 8002338:	0752      	lsls	r2, r2, #29
 800233a:	4302      	orrs	r2, r0
 800233c:	e601      	b.n	8001f42 <__aeabi_dsub+0x222>
 800233e:	4663      	mov	r3, ip
 8002340:	1a1d      	subs	r5, r3, r0
 8002342:	45ac      	cmp	ip, r5
 8002344:	4192      	sbcs	r2, r2
 8002346:	9b02      	ldr	r3, [sp, #8]
 8002348:	4252      	negs	r2, r2
 800234a:	1b1c      	subs	r4, r3, r4
 800234c:	000e      	movs	r6, r1
 800234e:	4688      	mov	r8, r1
 8002350:	2701      	movs	r7, #1
 8002352:	1aa4      	subs	r4, r4, r2
 8002354:	e546      	b.n	8001de4 <__aeabi_dsub+0xc4>
 8002356:	4663      	mov	r3, ip
 8002358:	08d9      	lsrs	r1, r3, #3
 800235a:	9b02      	ldr	r3, [sp, #8]
 800235c:	075a      	lsls	r2, r3, #29
 800235e:	430a      	orrs	r2, r1
 8002360:	08dc      	lsrs	r4, r3, #3
 8002362:	e5ee      	b.n	8001f42 <__aeabi_dsub+0x222>
 8002364:	4663      	mov	r3, ip
 8002366:	9c02      	ldr	r4, [sp, #8]
 8002368:	9303      	str	r3, [sp, #12]
 800236a:	e6c7      	b.n	80020fc <__aeabi_dsub+0x3dc>
 800236c:	08c0      	lsrs	r0, r0, #3
 800236e:	2a00      	cmp	r2, #0
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x654>
 8002372:	e6aa      	b.n	80020ca <__aeabi_dsub+0x3aa>
 8002374:	0762      	lsls	r2, r4, #29
 8002376:	4310      	orrs	r0, r2
 8002378:	2280      	movs	r2, #128	@ 0x80
 800237a:	08e4      	lsrs	r4, r4, #3
 800237c:	0312      	lsls	r2, r2, #12
 800237e:	4214      	tst	r4, r2
 8002380:	d0d7      	beq.n	8002332 <__aeabi_dsub+0x612>
 8002382:	9f02      	ldr	r7, [sp, #8]
 8002384:	08fd      	lsrs	r5, r7, #3
 8002386:	4215      	tst	r5, r2
 8002388:	d1d3      	bne.n	8002332 <__aeabi_dsub+0x612>
 800238a:	4663      	mov	r3, ip
 800238c:	2601      	movs	r6, #1
 800238e:	08d8      	lsrs	r0, r3, #3
 8002390:	077b      	lsls	r3, r7, #29
 8002392:	002c      	movs	r4, r5
 8002394:	4318      	orrs	r0, r3
 8002396:	400e      	ands	r6, r1
 8002398:	e7cb      	b.n	8002332 <__aeabi_dsub+0x612>
 800239a:	000a      	movs	r2, r1
 800239c:	0027      	movs	r7, r4
 800239e:	3a20      	subs	r2, #32
 80023a0:	40d7      	lsrs	r7, r2
 80023a2:	2920      	cmp	r1, #32
 80023a4:	d005      	beq.n	80023b2 <__aeabi_dsub+0x692>
 80023a6:	2240      	movs	r2, #64	@ 0x40
 80023a8:	1a52      	subs	r2, r2, r1
 80023aa:	4094      	lsls	r4, r2
 80023ac:	0025      	movs	r5, r4
 80023ae:	4305      	orrs	r5, r0
 80023b0:	9503      	str	r5, [sp, #12]
 80023b2:	9d03      	ldr	r5, [sp, #12]
 80023b4:	1e6a      	subs	r2, r5, #1
 80023b6:	4195      	sbcs	r5, r2
 80023b8:	432f      	orrs	r7, r5
 80023ba:	e610      	b.n	8001fde <__aeabi_dsub+0x2be>
 80023bc:	0014      	movs	r4, r2
 80023be:	2500      	movs	r5, #0
 80023c0:	2200      	movs	r2, #0
 80023c2:	e556      	b.n	8001e72 <__aeabi_dsub+0x152>
 80023c4:	9b02      	ldr	r3, [sp, #8]
 80023c6:	4460      	add	r0, ip
 80023c8:	4699      	mov	r9, r3
 80023ca:	4560      	cmp	r0, ip
 80023cc:	4192      	sbcs	r2, r2
 80023ce:	444c      	add	r4, r9
 80023d0:	4252      	negs	r2, r2
 80023d2:	0005      	movs	r5, r0
 80023d4:	18a4      	adds	r4, r4, r2
 80023d6:	e74c      	b.n	8002272 <__aeabi_dsub+0x552>
 80023d8:	001a      	movs	r2, r3
 80023da:	001c      	movs	r4, r3
 80023dc:	432a      	orrs	r2, r5
 80023de:	d000      	beq.n	80023e2 <__aeabi_dsub+0x6c2>
 80023e0:	e6b3      	b.n	800214a <__aeabi_dsub+0x42a>
 80023e2:	e6c9      	b.n	8002178 <__aeabi_dsub+0x458>
 80023e4:	2480      	movs	r4, #128	@ 0x80
 80023e6:	2600      	movs	r6, #0
 80023e8:	0324      	lsls	r4, r4, #12
 80023ea:	e5ae      	b.n	8001f4a <__aeabi_dsub+0x22a>
 80023ec:	2120      	movs	r1, #32
 80023ee:	2500      	movs	r5, #0
 80023f0:	1a09      	subs	r1, r1, r0
 80023f2:	e517      	b.n	8001e24 <__aeabi_dsub+0x104>
 80023f4:	2200      	movs	r2, #0
 80023f6:	2500      	movs	r5, #0
 80023f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002428 <__aeabi_dsub+0x708>)
 80023fa:	e53a      	b.n	8001e72 <__aeabi_dsub+0x152>
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x6e2>
 8002400:	e5f6      	b.n	8001ff0 <__aeabi_dsub+0x2d0>
 8002402:	464b      	mov	r3, r9
 8002404:	1bda      	subs	r2, r3, r7
 8002406:	4692      	mov	sl, r2
 8002408:	2f00      	cmp	r7, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dsub+0x6ee>
 800240c:	e66f      	b.n	80020ee <__aeabi_dsub+0x3ce>
 800240e:	2a38      	cmp	r2, #56	@ 0x38
 8002410:	dc05      	bgt.n	800241e <__aeabi_dsub+0x6fe>
 8002412:	2680      	movs	r6, #128	@ 0x80
 8002414:	0436      	lsls	r6, r6, #16
 8002416:	4334      	orrs	r4, r6
 8002418:	4688      	mov	r8, r1
 800241a:	000e      	movs	r6, r1
 800241c:	e6d1      	b.n	80021c2 <__aeabi_dsub+0x4a2>
 800241e:	4688      	mov	r8, r1
 8002420:	000e      	movs	r6, r1
 8002422:	2501      	movs	r5, #1
 8002424:	e6de      	b.n	80021e4 <__aeabi_dsub+0x4c4>
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	000007ff 	.word	0x000007ff
 800242c:	ff7fffff 	.word	0xff7fffff
 8002430:	000007fe 	.word	0x000007fe
 8002434:	2d00      	cmp	r5, #0
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x71a>
 8002438:	e668      	b.n	800210c <__aeabi_dsub+0x3ec>
 800243a:	464b      	mov	r3, r9
 800243c:	1bd9      	subs	r1, r3, r7
 800243e:	2f00      	cmp	r7, #0
 8002440:	d101      	bne.n	8002446 <__aeabi_dsub+0x726>
 8002442:	468a      	mov	sl, r1
 8002444:	e5a7      	b.n	8001f96 <__aeabi_dsub+0x276>
 8002446:	2701      	movs	r7, #1
 8002448:	2938      	cmp	r1, #56	@ 0x38
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x72e>
 800244c:	e5c7      	b.n	8001fde <__aeabi_dsub+0x2be>
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	0412      	lsls	r2, r2, #16
 8002452:	4314      	orrs	r4, r2
 8002454:	e5af      	b.n	8001fb6 <__aeabi_dsub+0x296>
 8002456:	46c0      	nop			@ (mov r8, r8)

08002458 <__aeabi_dcmpun>:
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	46c6      	mov	lr, r8
 800245c:	031e      	lsls	r6, r3, #12
 800245e:	0b36      	lsrs	r6, r6, #12
 8002460:	46b0      	mov	r8, r6
 8002462:	4e0d      	ldr	r6, [pc, #52]	@ (8002498 <__aeabi_dcmpun+0x40>)
 8002464:	030c      	lsls	r4, r1, #12
 8002466:	004d      	lsls	r5, r1, #1
 8002468:	005f      	lsls	r7, r3, #1
 800246a:	b500      	push	{lr}
 800246c:	0b24      	lsrs	r4, r4, #12
 800246e:	0d6d      	lsrs	r5, r5, #21
 8002470:	0d7f      	lsrs	r7, r7, #21
 8002472:	42b5      	cmp	r5, r6
 8002474:	d00b      	beq.n	800248e <__aeabi_dcmpun+0x36>
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__aeabi_dcmpun+0x40>)
 8002478:	2000      	movs	r0, #0
 800247a:	428f      	cmp	r7, r1
 800247c:	d104      	bne.n	8002488 <__aeabi_dcmpun+0x30>
 800247e:	4646      	mov	r6, r8
 8002480:	4316      	orrs	r6, r2
 8002482:	0030      	movs	r0, r6
 8002484:	1e43      	subs	r3, r0, #1
 8002486:	4198      	sbcs	r0, r3
 8002488:	bc80      	pop	{r7}
 800248a:	46b8      	mov	r8, r7
 800248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248e:	4304      	orrs	r4, r0
 8002490:	2001      	movs	r0, #1
 8002492:	2c00      	cmp	r4, #0
 8002494:	d1f8      	bne.n	8002488 <__aeabi_dcmpun+0x30>
 8002496:	e7ee      	b.n	8002476 <__aeabi_dcmpun+0x1e>
 8002498:	000007ff 	.word	0x000007ff

0800249c <__aeabi_d2iz>:
 800249c:	000b      	movs	r3, r1
 800249e:	0002      	movs	r2, r0
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	4d16      	ldr	r5, [pc, #88]	@ (80024fc <__aeabi_d2iz+0x60>)
 80024a4:	030c      	lsls	r4, r1, #12
 80024a6:	b082      	sub	sp, #8
 80024a8:	0049      	lsls	r1, r1, #1
 80024aa:	2000      	movs	r0, #0
 80024ac:	9200      	str	r2, [sp, #0]
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	0b24      	lsrs	r4, r4, #12
 80024b2:	0d49      	lsrs	r1, r1, #21
 80024b4:	0fde      	lsrs	r6, r3, #31
 80024b6:	42a9      	cmp	r1, r5
 80024b8:	dd04      	ble.n	80024c4 <__aeabi_d2iz+0x28>
 80024ba:	4811      	ldr	r0, [pc, #68]	@ (8002500 <__aeabi_d2iz+0x64>)
 80024bc:	4281      	cmp	r1, r0
 80024be:	dd03      	ble.n	80024c8 <__aeabi_d2iz+0x2c>
 80024c0:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <__aeabi_d2iz+0x68>)
 80024c2:	18f0      	adds	r0, r6, r3
 80024c4:	b002      	add	sp, #8
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	2080      	movs	r0, #128	@ 0x80
 80024ca:	0340      	lsls	r0, r0, #13
 80024cc:	4320      	orrs	r0, r4
 80024ce:	4c0e      	ldr	r4, [pc, #56]	@ (8002508 <__aeabi_d2iz+0x6c>)
 80024d0:	1a64      	subs	r4, r4, r1
 80024d2:	2c1f      	cmp	r4, #31
 80024d4:	dd08      	ble.n	80024e8 <__aeabi_d2iz+0x4c>
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <__aeabi_d2iz+0x70>)
 80024d8:	1a5b      	subs	r3, r3, r1
 80024da:	40d8      	lsrs	r0, r3
 80024dc:	0003      	movs	r3, r0
 80024de:	4258      	negs	r0, r3
 80024e0:	2e00      	cmp	r6, #0
 80024e2:	d1ef      	bne.n	80024c4 <__aeabi_d2iz+0x28>
 80024e4:	0018      	movs	r0, r3
 80024e6:	e7ed      	b.n	80024c4 <__aeabi_d2iz+0x28>
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <__aeabi_d2iz+0x74>)
 80024ea:	9a00      	ldr	r2, [sp, #0]
 80024ec:	469c      	mov	ip, r3
 80024ee:	0003      	movs	r3, r0
 80024f0:	4461      	add	r1, ip
 80024f2:	408b      	lsls	r3, r1
 80024f4:	40e2      	lsrs	r2, r4
 80024f6:	4313      	orrs	r3, r2
 80024f8:	e7f1      	b.n	80024de <__aeabi_d2iz+0x42>
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	000003fe 	.word	0x000003fe
 8002500:	0000041d 	.word	0x0000041d
 8002504:	7fffffff 	.word	0x7fffffff
 8002508:	00000433 	.word	0x00000433
 800250c:	00000413 	.word	0x00000413
 8002510:	fffffbed 	.word	0xfffffbed

08002514 <__aeabi_i2d>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	2800      	cmp	r0, #0
 8002518:	d016      	beq.n	8002548 <__aeabi_i2d+0x34>
 800251a:	17c3      	asrs	r3, r0, #31
 800251c:	18c5      	adds	r5, r0, r3
 800251e:	405d      	eors	r5, r3
 8002520:	0fc4      	lsrs	r4, r0, #31
 8002522:	0028      	movs	r0, r5
 8002524:	f000 f890 	bl	8002648 <__clzsi2>
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <__aeabi_i2d+0x58>)
 800252a:	1a1b      	subs	r3, r3, r0
 800252c:	055b      	lsls	r3, r3, #21
 800252e:	0d5b      	lsrs	r3, r3, #21
 8002530:	280a      	cmp	r0, #10
 8002532:	dc14      	bgt.n	800255e <__aeabi_i2d+0x4a>
 8002534:	0002      	movs	r2, r0
 8002536:	002e      	movs	r6, r5
 8002538:	3215      	adds	r2, #21
 800253a:	4096      	lsls	r6, r2
 800253c:	220b      	movs	r2, #11
 800253e:	1a12      	subs	r2, r2, r0
 8002540:	40d5      	lsrs	r5, r2
 8002542:	032d      	lsls	r5, r5, #12
 8002544:	0b2d      	lsrs	r5, r5, #12
 8002546:	e003      	b.n	8002550 <__aeabi_i2d+0x3c>
 8002548:	2400      	movs	r4, #0
 800254a:	2300      	movs	r3, #0
 800254c:	2500      	movs	r5, #0
 800254e:	2600      	movs	r6, #0
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	432b      	orrs	r3, r5
 8002554:	07e4      	lsls	r4, r4, #31
 8002556:	4323      	orrs	r3, r4
 8002558:	0030      	movs	r0, r6
 800255a:	0019      	movs	r1, r3
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	380b      	subs	r0, #11
 8002560:	4085      	lsls	r5, r0
 8002562:	032d      	lsls	r5, r5, #12
 8002564:	2600      	movs	r6, #0
 8002566:	0b2d      	lsrs	r5, r5, #12
 8002568:	e7f2      	b.n	8002550 <__aeabi_i2d+0x3c>
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	0000041e 	.word	0x0000041e

08002570 <__aeabi_ui2d>:
 8002570:	b510      	push	{r4, lr}
 8002572:	1e04      	subs	r4, r0, #0
 8002574:	d010      	beq.n	8002598 <__aeabi_ui2d+0x28>
 8002576:	f000 f867 	bl	8002648 <__clzsi2>
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <__aeabi_ui2d+0x44>)
 800257c:	1a1b      	subs	r3, r3, r0
 800257e:	055b      	lsls	r3, r3, #21
 8002580:	0d5b      	lsrs	r3, r3, #21
 8002582:	280a      	cmp	r0, #10
 8002584:	dc0f      	bgt.n	80025a6 <__aeabi_ui2d+0x36>
 8002586:	220b      	movs	r2, #11
 8002588:	0021      	movs	r1, r4
 800258a:	1a12      	subs	r2, r2, r0
 800258c:	40d1      	lsrs	r1, r2
 800258e:	3015      	adds	r0, #21
 8002590:	030a      	lsls	r2, r1, #12
 8002592:	4084      	lsls	r4, r0
 8002594:	0b12      	lsrs	r2, r2, #12
 8002596:	e001      	b.n	800259c <__aeabi_ui2d+0x2c>
 8002598:	2300      	movs	r3, #0
 800259a:	2200      	movs	r2, #0
 800259c:	051b      	lsls	r3, r3, #20
 800259e:	4313      	orrs	r3, r2
 80025a0:	0020      	movs	r0, r4
 80025a2:	0019      	movs	r1, r3
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	0022      	movs	r2, r4
 80025a8:	380b      	subs	r0, #11
 80025aa:	4082      	lsls	r2, r0
 80025ac:	0312      	lsls	r2, r2, #12
 80025ae:	2400      	movs	r4, #0
 80025b0:	0b12      	lsrs	r2, r2, #12
 80025b2:	e7f3      	b.n	800259c <__aeabi_ui2d+0x2c>
 80025b4:	0000041e 	.word	0x0000041e

080025b8 <__aeabi_f2d>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	0242      	lsls	r2, r0, #9
 80025bc:	0043      	lsls	r3, r0, #1
 80025be:	0fc4      	lsrs	r4, r0, #31
 80025c0:	20fe      	movs	r0, #254	@ 0xfe
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	1c59      	adds	r1, r3, #1
 80025c6:	0a55      	lsrs	r5, r2, #9
 80025c8:	4208      	tst	r0, r1
 80025ca:	d00c      	beq.n	80025e6 <__aeabi_f2d+0x2e>
 80025cc:	21e0      	movs	r1, #224	@ 0xe0
 80025ce:	0089      	lsls	r1, r1, #2
 80025d0:	468c      	mov	ip, r1
 80025d2:	076d      	lsls	r5, r5, #29
 80025d4:	0b12      	lsrs	r2, r2, #12
 80025d6:	4463      	add	r3, ip
 80025d8:	051b      	lsls	r3, r3, #20
 80025da:	4313      	orrs	r3, r2
 80025dc:	07e4      	lsls	r4, r4, #31
 80025de:	4323      	orrs	r3, r4
 80025e0:	0028      	movs	r0, r5
 80025e2:	0019      	movs	r1, r3
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d114      	bne.n	8002614 <__aeabi_f2d+0x5c>
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	d01b      	beq.n	8002626 <__aeabi_f2d+0x6e>
 80025ee:	0028      	movs	r0, r5
 80025f0:	f000 f82a 	bl	8002648 <__clzsi2>
 80025f4:	280a      	cmp	r0, #10
 80025f6:	dc1c      	bgt.n	8002632 <__aeabi_f2d+0x7a>
 80025f8:	230b      	movs	r3, #11
 80025fa:	002a      	movs	r2, r5
 80025fc:	1a1b      	subs	r3, r3, r0
 80025fe:	40da      	lsrs	r2, r3
 8002600:	0003      	movs	r3, r0
 8002602:	3315      	adds	r3, #21
 8002604:	409d      	lsls	r5, r3
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <__aeabi_f2d+0x88>)
 8002608:	0312      	lsls	r2, r2, #12
 800260a:	1a1b      	subs	r3, r3, r0
 800260c:	055b      	lsls	r3, r3, #21
 800260e:	0b12      	lsrs	r2, r2, #12
 8002610:	0d5b      	lsrs	r3, r3, #21
 8002612:	e7e1      	b.n	80025d8 <__aeabi_f2d+0x20>
 8002614:	2d00      	cmp	r5, #0
 8002616:	d009      	beq.n	800262c <__aeabi_f2d+0x74>
 8002618:	0b13      	lsrs	r3, r2, #12
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	0312      	lsls	r2, r2, #12
 800261e:	431a      	orrs	r2, r3
 8002620:	076d      	lsls	r5, r5, #29
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <__aeabi_f2d+0x8c>)
 8002624:	e7d8      	b.n	80025d8 <__aeabi_f2d+0x20>
 8002626:	2300      	movs	r3, #0
 8002628:	2200      	movs	r2, #0
 800262a:	e7d5      	b.n	80025d8 <__aeabi_f2d+0x20>
 800262c:	2200      	movs	r2, #0
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <__aeabi_f2d+0x8c>)
 8002630:	e7d2      	b.n	80025d8 <__aeabi_f2d+0x20>
 8002632:	0003      	movs	r3, r0
 8002634:	002a      	movs	r2, r5
 8002636:	3b0b      	subs	r3, #11
 8002638:	409a      	lsls	r2, r3
 800263a:	2500      	movs	r5, #0
 800263c:	e7e3      	b.n	8002606 <__aeabi_f2d+0x4e>
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	00000389 	.word	0x00000389
 8002644:	000007ff 	.word	0x000007ff

08002648 <__clzsi2>:
 8002648:	211c      	movs	r1, #28
 800264a:	2301      	movs	r3, #1
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	4298      	cmp	r0, r3
 8002650:	d301      	bcc.n	8002656 <__clzsi2+0xe>
 8002652:	0c00      	lsrs	r0, r0, #16
 8002654:	3910      	subs	r1, #16
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	4298      	cmp	r0, r3
 800265a:	d301      	bcc.n	8002660 <__clzsi2+0x18>
 800265c:	0a00      	lsrs	r0, r0, #8
 800265e:	3908      	subs	r1, #8
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	4298      	cmp	r0, r3
 8002664:	d301      	bcc.n	800266a <__clzsi2+0x22>
 8002666:	0900      	lsrs	r0, r0, #4
 8002668:	3904      	subs	r1, #4
 800266a:	a202      	add	r2, pc, #8	@ (adr r2, 8002674 <__clzsi2+0x2c>)
 800266c:	5c10      	ldrb	r0, [r2, r0]
 800266e:	1840      	adds	r0, r0, r1
 8002670:	4770      	bx	lr
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	02020304 	.word	0x02020304
 8002678:	01010101 	.word	0x01010101
	...

08002684 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	240c      	movs	r4, #12
 800268e:	193b      	adds	r3, r7, r4
 8002690:	0018      	movs	r0, r3
 8002692:	2314      	movs	r3, #20
 8002694:	001a      	movs	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	f003 fb60 	bl	8005d5c <memset>

  //По умолчанию на линии высокий уровень
  lineUp();
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	889b      	ldrh	r3, [r3, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	0019      	movs	r1, r3
 80026a8:	f001 fb43 	bl	8003d32 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	001a      	movs	r2, r3
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	2211      	movs	r2, #17
 80026ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	79db      	ldrb	r3, [r3, #7]
 80026c0:	001a      	movs	r2, r3
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	609a      	str	r2, [r3, #8]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	2203      	movs	r2, #3
 80026ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	193a      	adds	r2, r7, r4
 80026d2:	0011      	movs	r1, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	f001 f99f 	bl	8003a18 <HAL_GPIO_Init>
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b009      	add	sp, #36	@ 0x24
 80026e0:	bd90      	pop	{r4, r7, pc}

080026e2 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b089      	sub	sp, #36	@ 0x24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	240c      	movs	r4, #12
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	0018      	movs	r0, r3
 80026f0:	2314      	movs	r3, #20
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f003 fb31 	bl	8005d5c <memset>

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	889b      	ldrh	r3, [r3, #4]
 80026fe:	001a      	movs	r2, r3
 8002700:	193b      	adds	r3, r7, r4
 8002702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	79db      	ldrb	r3, [r3, #7]
 800270e:	001a      	movs	r2, r3
 8002710:	193b      	adds	r3, r7, r4
 8002712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	193a      	adds	r2, r7, r4
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f001 f97b 	bl	8003a18 <HAL_GPIO_Init>
}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b009      	add	sp, #36	@ 0x24
 8002728:	bd90      	pop	{r4, r7, pc}
	...

0800272c <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 8002736:	2314      	movs	r3, #20
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	4ac7      	ldr	r2, [pc, #796]	@ (8002a58 <DHT_getData+0x32c>)
 800273c:	ca03      	ldmia	r2!, {r0, r1}
 800273e:	c303      	stmia	r3!, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	799b      	ldrb	r3, [r3, #6]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8002748:	2326      	movs	r3, #38	@ 0x26
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	22fa      	movs	r2, #250	@ 0xfa
 800274e:	00d2      	lsls	r2, r2, #3
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e004      	b.n	800275e <DHT_getData+0x32>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8002754:	2326      	movs	r3, #38	@ 0x26
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	22fa      	movs	r2, #250	@ 0xfa
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	801a      	strh	r2, [r3, #0]
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 800275e:	f001 f879 	bl	8003854 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	2326      	movs	r3, #38	@ 0x26
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d211      	bcs.n	8002798 <DHT_getData+0x6c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <DHT_getData+0x6c>
		data.hum = sensor->lastHum;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	2114      	movs	r1, #20
 8002782:	187b      	adds	r3, r7, r1
 8002784:	601a      	str	r2, [r3, #0]
		data.temp = sensor->lastTemp;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	187b      	adds	r3, r7, r1
 800278c:	605a      	str	r2, [r3, #4]
		return data;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	187a      	adds	r2, r7, r1
 8002792:	ca03      	ldmia	r2!, {r0, r1}
 8002794:	c303      	stmia	r3!, {r0, r1}
 8002796:	e1a8      	b.n	8002aea <DHT_getData+0x3be>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8002798:	f001 f85c 	bl	8003854 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff ff6c 	bl	8002684 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	889b      	ldrh	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	0019      	movs	r1, r3
 80027b8:	f001 fabb 	bl	8003d32 <HAL_GPIO_WritePin>
	Delay(18);
 80027bc:	2012      	movs	r0, #18
 80027be:	f001 f853 	bl	8003868 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	889b      	ldrh	r3, [r3, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	0019      	movs	r1, r3
 80027ce:	f001 fab0 	bl	8003d32 <HAL_GPIO_WritePin>
	goToInput(sensor);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff84 	bl	80026e2 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027da:	b672      	cpsid	i
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 80027de:	2324      	movs	r3, #36	@ 0x24
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 80027e6:	e01a      	b.n	800281e <DHT_getData+0xf2>
		timeout++;
 80027e8:	2124      	movs	r1, #36	@ 0x24
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	3201      	adds	r2, #1
 80027f2:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	4a98      	ldr	r2, [pc, #608]	@ (8002a5c <DHT_getData+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d90f      	bls.n	800281e <DHT_getData+0xf2>
  __ASM volatile ("cpsie i" : : : "memory");
 80027fe:	b662      	cpsie	i
}
 8002800:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	22c3      	movs	r2, #195	@ 0xc3
 8002806:	0612      	lsls	r2, r2, #24
 8002808:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	22c3      	movs	r2, #195	@ 0xc3
 800280e:	0612      	lsls	r2, r2, #24
 8002810:	60da      	str	r2, [r3, #12]

			return data;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2214      	movs	r2, #20
 8002816:	18ba      	adds	r2, r7, r2
 8002818:	ca03      	ldmia	r2!, {r0, r1}
 800281a:	c303      	stmia	r3!, {r0, r1}
 800281c:	e165      	b.n	8002aea <DHT_getData+0x3be>
	while(getLine()) {
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	889b      	ldrh	r3, [r3, #4]
 8002826:	0019      	movs	r1, r3
 8002828:	0010      	movs	r0, r2
 800282a:	f001 fa65 	bl	8003cf8 <HAL_GPIO_ReadPin>
 800282e:	0003      	movs	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d0d9      	beq.n	80027e8 <DHT_getData+0xbc>
		}
	}
	timeout = 0;
 8002834:	2324      	movs	r3, #36	@ 0x24
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]
	//Ожидание подъёма
	while(!getLine()) {
 800283c:	e01a      	b.n	8002874 <DHT_getData+0x148>
		timeout++;
 800283e:	2124      	movs	r1, #36	@ 0x24
 8002840:	187b      	adds	r3, r7, r1
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	187b      	adds	r3, r7, r1
 8002846:	3201      	adds	r2, #1
 8002848:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 800284a:	187b      	adds	r3, r7, r1
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	4a83      	ldr	r2, [pc, #524]	@ (8002a5c <DHT_getData+0x330>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d90f      	bls.n	8002874 <DHT_getData+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 8002854:	b662      	cpsie	i
}
 8002856:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	22c3      	movs	r2, #195	@ 0xc3
 800285c:	0612      	lsls	r2, r2, #24
 800285e:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	22c3      	movs	r2, #195	@ 0xc3
 8002864:	0612      	lsls	r2, r2, #24
 8002866:	60da      	str	r2, [r3, #12]

			return data;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2214      	movs	r2, #20
 800286c:	18ba      	adds	r2, r7, r2
 800286e:	ca03      	ldmia	r2!, {r0, r1}
 8002870:	c303      	stmia	r3!, {r0, r1}
 8002872:	e13a      	b.n	8002aea <DHT_getData+0x3be>
	while(!getLine()) {
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	889b      	ldrh	r3, [r3, #4]
 800287c:	0019      	movs	r1, r3
 800287e:	0010      	movs	r0, r2
 8002880:	f001 fa3a 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8002884:	0003      	movs	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d1d9      	bne.n	800283e <DHT_getData+0x112>
		}
	}
	timeout = 0;
 800288a:	2324      	movs	r3, #36	@ 0x24
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8002892:	e012      	b.n	80028ba <DHT_getData+0x18e>
		timeout++;
 8002894:	2124      	movs	r1, #36	@ 0x24
 8002896:	187b      	adds	r3, r7, r1
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	187b      	adds	r3, r7, r1
 800289c:	3201      	adds	r2, #1
 800289e:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a5c <DHT_getData+0x330>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d907      	bls.n	80028ba <DHT_getData+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
}
 80028ac:	46c0      	nop			@ (mov r8, r8)
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2214      	movs	r2, #20
 80028b2:	18ba      	adds	r2, r7, r2
 80028b4:	ca03      	ldmia	r2!, {r0, r1}
 80028b6:	c303      	stmia	r3!, {r0, r1}
 80028b8:	e117      	b.n	8002aea <DHT_getData+0x3be>
	while(getLine()) {
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	889b      	ldrh	r3, [r3, #4]
 80028c2:	0019      	movs	r1, r3
 80028c4:	0010      	movs	r0, r2
 80028c6:	f001 fa17 	bl	8003cf8 <HAL_GPIO_ReadPin>
 80028ca:	0003      	movs	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d0e1      	beq.n	8002894 <DHT_getData+0x168>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80028d0:	230c      	movs	r3, #12
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	4a62      	ldr	r2, [pc, #392]	@ (8002a60 <DHT_getData+0x334>)
 80028d6:	6811      	ldr	r1, [r2, #0]
 80028d8:	6019      	str	r1, [r3, #0]
 80028da:	7912      	ldrb	r2, [r2, #4]
 80028dc:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 80028de:	2323      	movs	r3, #35	@ 0x23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e06e      	b.n	80029c6 <DHT_getData+0x29a>
		for(uint8_t b = 7; b != 255; b--) {
 80028e8:	2322      	movs	r3, #34	@ 0x22
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2207      	movs	r2, #7
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e05e      	b.n	80029b0 <DHT_getData+0x284>
			uint16_t hT = 0, lT = 0;
 80028f2:	2320      	movs	r3, #32
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	231e      	movs	r3, #30
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2200      	movs	r2, #0
 8002900:	801a      	strh	r2, [r3, #0]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8002902:	e005      	b.n	8002910 <DHT_getData+0x1e4>
 8002904:	211e      	movs	r1, #30
 8002906:	187b      	adds	r3, r7, r1
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	187b      	adds	r3, r7, r1
 800290c:	3201      	adds	r2, #1
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	889b      	ldrh	r3, [r3, #4]
 8002918:	0019      	movs	r1, r3
 800291a:	0010      	movs	r0, r2
 800291c:	f001 f9ec 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8002920:	0003      	movs	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <DHT_getData+0x206>
 8002926:	231e      	movs	r3, #30
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a64 <DHT_getData+0x338>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d1e8      	bne.n	8002904 <DHT_getData+0x1d8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8002932:	2324      	movs	r3, #36	@ 0x24
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2200      	movs	r2, #0
 8002938:	801a      	strh	r2, [r3, #0]
			while(getLine()&& hT != 65535) hT++;
 800293a:	e005      	b.n	8002948 <DHT_getData+0x21c>
 800293c:	2120      	movs	r1, #32
 800293e:	187b      	adds	r3, r7, r1
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	187b      	adds	r3, r7, r1
 8002944:	3201      	adds	r2, #1
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	889b      	ldrh	r3, [r3, #4]
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f001 f9d0 	bl	8003cf8 <HAL_GPIO_ReadPin>
 8002958:	0003      	movs	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <DHT_getData+0x23e>
 800295e:	2320      	movs	r3, #32
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <DHT_getData+0x338>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d1e8      	bne.n	800293c <DHT_getData+0x210>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 800296a:	2320      	movs	r3, #32
 800296c:	18fa      	adds	r2, r7, r3
 800296e:	231e      	movs	r3, #30
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	8812      	ldrh	r2, [r2, #0]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d914      	bls.n	80029a4 <DHT_getData+0x278>
 800297a:	2023      	movs	r0, #35	@ 0x23
 800297c:	183b      	adds	r3, r7, r0
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	240c      	movs	r4, #12
 8002982:	193a      	adds	r2, r7, r4
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	b25a      	sxtb	r2, r3
 8002988:	2322      	movs	r3, #34	@ 0x22
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	4099      	lsls	r1, r3
 8002992:	000b      	movs	r3, r1
 8002994:	b25b      	sxtb	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b25a      	sxtb	r2, r3
 800299a:	183b      	adds	r3, r7, r0
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b2d1      	uxtb	r1, r2
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t b = 7; b != 255; b--) {
 80029a4:	2122      	movs	r1, #34	@ 0x22
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	2322      	movs	r3, #34	@ 0x22
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2bff      	cmp	r3, #255	@ 0xff
 80029b8:	d19b      	bne.n	80028f2 <DHT_getData+0x1c6>
	for(uint8_t a = 0; a < 5; a++) {
 80029ba:	2123      	movs	r1, #35	@ 0x23
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	3201      	adds	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	2323      	movs	r3, #35	@ 0x23
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d98b      	bls.n	80028e8 <DHT_getData+0x1bc>
  __ASM volatile ("cpsie i" : : : "memory");
 80029d0:	b662      	cpsie	i
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80029d4:	240c      	movs	r4, #12
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	18d3      	adds	r3, r2, r3
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	789b      	ldrb	r3, [r3, #2]
 80029e6:	18d3      	adds	r3, r2, r3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	791b      	ldrb	r3, [r3, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d16a      	bne.n	8002ad0 <DHT_getData+0x3a4>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	799b      	ldrb	r3, [r3, #6]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d150      	bne.n	8002aa4 <DHT_getData+0x378>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	193a      	adds	r2, r7, r4
 8002a0a:	7852      	ldrb	r2, [r2, #1]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fd fe88 	bl	8000724 <__aeabi_i2f>
 8002a14:	1c03      	adds	r3, r0, #0
 8002a16:	4914      	ldr	r1, [pc, #80]	@ (8002a68 <DHT_getData+0x33c>)
 8002a18:	1c18      	adds	r0, r3, #0
 8002a1a:	f7fd fd45 	bl	80004a8 <__aeabi_fmul>
 8002a1e:	1c03      	adds	r3, r0, #0
 8002a20:	1c1a      	adds	r2, r3, #0
 8002a22:	2514      	movs	r5, #20
 8002a24:	197b      	adds	r3, r7, r5
 8002a26:	601a      	str	r2, [r3, #0]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	789b      	ldrb	r3, [r3, #2]
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db1c      	blt.n	8002a6c <DHT_getData+0x340>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	789b      	ldrb	r3, [r3, #2]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	193a      	adds	r2, r7, r4
 8002a3a:	78d2      	ldrb	r2, [r2, #3]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd fe70 	bl	8000724 <__aeabi_i2f>
 8002a44:	1c03      	adds	r3, r0, #0
 8002a46:	4908      	ldr	r1, [pc, #32]	@ (8002a68 <DHT_getData+0x33c>)
 8002a48:	1c18      	adds	r0, r3, #0
 8002a4a:	f7fd fd2d 	bl	80004a8 <__aeabi_fmul>
 8002a4e:	1c03      	adds	r3, r0, #0
 8002a50:	1c1a      	adds	r2, r3, #0
 8002a52:	197b      	adds	r3, r7, r5
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e025      	b.n	8002aa4 <DHT_getData+0x378>
 8002a58:	08008058 	.word	0x08008058
 8002a5c:	00002710 	.word	0x00002710
 8002a60:	08008060 	.word	0x08008060
 8002a64:	0000ffff 	.word	0x0000ffff
 8002a68:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 8002a6c:	210c      	movs	r1, #12
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	789b      	ldrb	r3, [r3, #2]
 8002a72:	227f      	movs	r2, #127	@ 0x7f
 8002a74:	4013      	ands	r3, r2
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	709a      	strb	r2, [r3, #2]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	789b      	ldrb	r3, [r3, #2]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	18ba      	adds	r2, r7, r2
 8002a86:	78d2      	ldrb	r2, [r2, #3]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7fd fe4a 	bl	8000724 <__aeabi_i2f>
 8002a90:	1c03      	adds	r3, r0, #0
 8002a92:	4918      	ldr	r1, [pc, #96]	@ (8002af4 <DHT_getData+0x3c8>)
 8002a94:	1c18      	adds	r0, r3, #0
 8002a96:	f7fd fd07 	bl	80004a8 <__aeabi_fmul>
 8002a9a:	1c03      	adds	r3, r0, #0
 8002a9c:	1c1a      	adds	r2, r3, #0
 8002a9e:	2314      	movs	r3, #20
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	605a      	str	r2, [r3, #4]
			}
		}
		if (sensor->type == DHT11) {
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	799b      	ldrb	r3, [r3, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <DHT_getData+0x3a4>
			data.hum = (float)rawData[0];
 8002aac:	240c      	movs	r4, #12
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7fd fe82 	bl	80007bc <__aeabi_ui2f>
 8002ab8:	1c02      	adds	r2, r0, #0
 8002aba:	2514      	movs	r5, #20
 8002abc:	197b      	adds	r3, r7, r5
 8002abe:	601a      	str	r2, [r3, #0]
			data.temp = (float)rawData[2];
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	789b      	ldrb	r3, [r3, #2]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fd fe79 	bl	80007bc <__aeabi_ui2f>
 8002aca:	1c02      	adds	r2, r0, #0
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	605a      	str	r2, [r3, #4]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8002ad0:	2114      	movs	r1, #20
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	187a      	adds	r2, r7, r1
 8002ae6:	ca03      	ldmia	r2!, {r0, r1}
 8002ae8:	c303      	stmia	r3!, {r0, r1}
}
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b00a      	add	sp, #40	@ 0x28
 8002af0:	bdb0      	pop	{r4, r5, r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	bdcccccd 	.word	0xbdcccccd

08002af8 <lcd.0>:
  /* USER CODE BEGIN 2 */
  st7567a_Init();

  static DHT_sensor livingRoom = {GPIOA, GPIO_PIN_0, DHT22, GPIO_PULLUP};

  void lcd(uint8_t x, uint8_t y, uint8_t font, char msg[]){
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	0004      	movs	r4, r0
 8002b00:	0008      	movs	r0, r1
 8002b02:	0011      	movs	r1, r2
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	250f      	movs	r5, #15
 8002b08:	197b      	adds	r3, r7, r5
 8002b0a:	1c22      	adds	r2, r4, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	240e      	movs	r4, #14
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	1c02      	adds	r2, r0, #0
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	260d      	movs	r6, #13
 8002b18:	19bb      	adds	r3, r7, r6
 8002b1a:	1c0a      	adds	r2, r1, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	4663      	mov	r3, ip
 8002b20:	607b      	str	r3, [r7, #4]
	  st7567a_SetCursor(x, y);
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	197b      	adds	r3, r7, r5
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fb57 	bl	80031e0 <st7567a_SetCursor>
	  if		(font==1){st7567a_WriteString(msg, FontStyle_RetroVilleNC_9, PIXEL_ON);}
 8002b32:	19bb      	adds	r3, r7, r6
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <lcd.0+0x5c>
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <lcd.0+0x88>)
 8002b3c:	68b8      	ldr	r0, [r7, #8]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	9201      	str	r2, [sp, #4]
 8002b42:	466a      	mov	r2, sp
 8002b44:	68d9      	ldr	r1, [r3, #12]
 8002b46:	6011      	str	r1, [r2, #0]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f000 fc59 	bl	8003404 <st7567a_WriteString>
	  else if	(font==2){st7567a_WriteString(msg, FontStyle_videotype_18, PIXEL_ON);}
  }
 8002b52:	e010      	b.n	8002b76 <lcd.0+0x7e>
	  else if	(font==2){st7567a_WriteString(msg, FontStyle_videotype_18, PIXEL_ON);}
 8002b54:	230d      	movs	r3, #13
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d10b      	bne.n	8002b76 <lcd.0+0x7e>
 8002b5e:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <lcd.0+0x8c>)
 8002b60:	68b8      	ldr	r0, [r7, #8]
 8002b62:	2201      	movs	r2, #1
 8002b64:	9201      	str	r2, [sp, #4]
 8002b66:	466a      	mov	r2, sp
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	6011      	str	r1, [r2, #0]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f000 fc47 	bl	8003404 <st7567a_WriteString>
  }
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b005      	add	sp, #20
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	20000010 	.word	0x20000010
 8002b84:	20000000 	.word	0x20000000

08002b88 <main>:
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b08f      	sub	sp, #60	@ 0x3c
 8002b8c:	af00      	add	r7, sp, #0
int main(void)
 8002b8e:	2340      	movs	r3, #64	@ 0x40
 8002b90:	2210      	movs	r2, #16
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	19db      	adds	r3, r3, r7
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_Init();
 8002b98:	f000 fe02 	bl	80037a0 <HAL_Init>
  SystemClock_Config();
 8002b9c:	f000 f87a 	bl	8002c94 <SystemClock_Config>
  MX_GPIO_Init();
 8002ba0:	f000 f958 	bl	8002e54 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ba4:	f000 f8c0 	bl	8002d28 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002ba8:	f000 f8fc 	bl	8002da4 <MX_TIM1_Init>
  st7567a_Init();
 8002bac:	f000 fa26 	bl	8002ffc <st7567a_Init>
  uint8_t x = 21;
 8002bb0:	2337      	movs	r3, #55	@ 0x37
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2215      	movs	r2, #21
 8002bb6:	701a      	strb	r2, [r3, #0]
  int8_t increment = 1;
 8002bb8:	2336      	movs	r3, #54	@ 0x36
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  st7567a_Fill(0);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f000 fa49 	bl	8003058 <st7567a_Fill>
	  lcd(x, 3, 2, "35 years");
 8002bc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002c80 <main+0xf8>)
 8002bc8:	2437      	movs	r4, #55	@ 0x37
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	7818      	ldrb	r0, [r3, #0]
 8002bce:	2530      	movs	r5, #48	@ 0x30
 8002bd0:	197b      	adds	r3, r7, r5
 8002bd2:	469c      	mov	ip, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	2103      	movs	r1, #3
 8002bda:	f7ff ff8d 	bl	8002af8 <lcd.0>

	  char msg[40];
      DHT_data d = DHT_getData(&livingRoom);
 8002bde:	2628      	movs	r6, #40	@ 0x28
 8002be0:	19bb      	adds	r3, r7, r6
 8002be2:	4a28      	ldr	r2, [pc, #160]	@ (8002c84 <main+0xfc>)
 8002be4:	0011      	movs	r1, r2
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7ff fda0 	bl	800272c <DHT_getData>
      sprintf(msg, " % 3.1f°C", d.temp);
 8002bec:	19bb      	adds	r3, r7, r6
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	1c18      	adds	r0, r3, #0
 8002bf2:	f7ff fce1 	bl	80025b8 <__aeabi_f2d>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	000b      	movs	r3, r1
 8002bfa:	4923      	ldr	r1, [pc, #140]	@ (8002c88 <main+0x100>)
 8002bfc:	0038      	movs	r0, r7
 8002bfe:	f003 f841 	bl	8005c84 <siprintf>
      lcd(x, 23, 2, msg);
 8002c02:	003a      	movs	r2, r7
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	7818      	ldrb	r0, [r3, #0]
 8002c08:	197b      	adds	r3, r7, r5
 8002c0a:	469c      	mov	ip, r3
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	2202      	movs	r2, #2
 8002c10:	2117      	movs	r1, #23
 8002c12:	f7ff ff71 	bl	8002af8 <lcd.0>
      sprintf(msg, " % 3.1f%%", d.hum);
 8002c16:	19bb      	adds	r3, r7, r6
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	1c18      	adds	r0, r3, #0
 8002c1c:	f7ff fccc 	bl	80025b8 <__aeabi_f2d>
 8002c20:	0002      	movs	r2, r0
 8002c22:	000b      	movs	r3, r1
 8002c24:	4919      	ldr	r1, [pc, #100]	@ (8002c8c <main+0x104>)
 8002c26:	0038      	movs	r0, r7
 8002c28:	f003 f82c 	bl	8005c84 <siprintf>
      lcd(x, 43, 2, msg);
 8002c2c:	003a      	movs	r2, r7
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	7818      	ldrb	r0, [r3, #0]
 8002c32:	197b      	adds	r3, r7, r5
 8002c34:	469c      	mov	ip, r3
 8002c36:	0013      	movs	r3, r2
 8002c38:	2202      	movs	r2, #2
 8002c3a:	212b      	movs	r1, #43	@ 0x2b
 8002c3c:	f7ff ff5c 	bl	8002af8 <lcd.0>

	  x += increment;
 8002c40:	2036      	movs	r0, #54	@ 0x36
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	7819      	ldrb	r1, [r3, #0]
 8002c46:	193b      	adds	r3, r7, r4
 8002c48:	193a      	adds	r2, r7, r4
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	188a      	adds	r2, r1, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
	  if (x == 42) {increment = -1;} else if (x == 0) {increment = 1;}
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c56:	d103      	bne.n	8002c60 <main+0xd8>
 8002c58:	183b      	adds	r3, r7, r0
 8002c5a:	22ff      	movs	r2, #255	@ 0xff
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e008      	b.n	8002c72 <main+0xea>
 8002c60:	2337      	movs	r3, #55	@ 0x37
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <main+0xea>
 8002c6a:	2336      	movs	r3, #54	@ 0x36
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
	  st7567a_Display();
 8002c72:	f000 fa21 	bl	80030b8 <st7567a_Display>
	  HAL_Delay(10000);
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <main+0x108>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f000 fdf5 	bl	8003868 <HAL_Delay>
  {
 8002c7e:	e79f      	b.n	8002bc0 <main+0x38>
 8002c80:	08008068 	.word	0x08008068
 8002c84:	20000020 	.word	0x20000020
 8002c88:	08008074 	.word	0x08008074
 8002c8c:	08008080 	.word	0x08008080
 8002c90:	00002710 	.word	0x00002710

08002c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b091      	sub	sp, #68	@ 0x44
 8002c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9a:	2410      	movs	r4, #16
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	2330      	movs	r3, #48	@ 0x30
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	f003 f859 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002caa:	003b      	movs	r3, r7
 8002cac:	0018      	movs	r0, r3
 8002cae:	2310      	movs	r3, #16
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	f003 f852 	bl	8005d5c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb8:	0021      	movs	r1, r4
 8002cba:	187b      	adds	r3, r7, r1
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2210      	movs	r2, #16
 8002cca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2202      	movs	r2, #2
 8002cd0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2280      	movs	r2, #128	@ 0x80
 8002cdc:	0312      	lsls	r2, r2, #12
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f001 f83f 	bl	8003d6c <HAL_RCC_OscConfig>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002cf2:	f000 f911 	bl	8002f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cf6:	003b      	movs	r3, r7
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cfc:	003b      	movs	r3, r7
 8002cfe:	2202      	movs	r2, #2
 8002d00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d02:	003b      	movs	r3, r7
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d08:	003b      	movs	r3, r7
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d0e:	003b      	movs	r3, r7
 8002d10:	2100      	movs	r1, #0
 8002d12:	0018      	movs	r0, r3
 8002d14:	f001 fb44 	bl	80043a0 <HAL_RCC_ClockConfig>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d001      	beq.n	8002d20 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d1c:	f000 f8fc 	bl	8002f18 <Error_Handler>
  }
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b011      	add	sp, #68	@ 0x44
 8002d26:	bd90      	pop	{r4, r7, pc}

08002d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8002da0 <MX_SPI1_Init+0x78>)
 8002d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d34:	2282      	movs	r2, #130	@ 0x82
 8002d36:	0052      	lsls	r2, r2, #1
 8002d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d3a:	4b18      	ldr	r3, [pc, #96]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d40:	4b16      	ldr	r3, [pc, #88]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d42:	22e0      	movs	r2, #224	@ 0xe0
 8002d44:	00d2      	lsls	r2, r2, #3
 8002d46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d48:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d54:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d56:	2280      	movs	r2, #128	@ 0x80
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d5e:	2210      	movs	r2, #16
 8002d60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d74:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d76:	2207      	movs	r2, #7
 8002d78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d82:	2208      	movs	r2, #8
 8002d84:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d86:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <MX_SPI1_Init+0x74>)
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f001 fc2d 	bl	80045e8 <HAL_SPI_Init>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d92:	f000 f8c1 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000224 	.word	0x20000224
 8002da0:	40013000 	.word	0x40013000

08002da4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002daa:	2308      	movs	r3, #8
 8002dac:	18fb      	adds	r3, r7, r3
 8002dae:	0018      	movs	r0, r3
 8002db0:	2310      	movs	r3, #16
 8002db2:	001a      	movs	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	f002 ffd1 	bl	8005d5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dba:	003b      	movs	r3, r7
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	f002 ffca 	bl	8005d5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002dca:	4a20      	ldr	r2, [pc, #128]	@ (8002e4c <MX_TIM1_Init+0xa8>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8002dce:	4b1e      	ldr	r3, [pc, #120]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002dd0:	220f      	movs	r2, #15
 8002dd2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002dda:	4b1b      	ldr	r3, [pc, #108]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <MX_TIM1_Init+0xac>)
 8002dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de0:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002de6:	4b18      	ldr	r3, [pc, #96]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dec:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002df4:	0018      	movs	r0, r3
 8002df6:	f001 ff85 	bl	8004d04 <HAL_TIM_Base_Init>
 8002dfa:	1e03      	subs	r3, r0, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002dfe:	f000 f88b 	bl	8002f18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e02:	2108      	movs	r1, #8
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2280      	movs	r2, #128	@ 0x80
 8002e08:	0152      	lsls	r2, r2, #5
 8002e0a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e0c:	187a      	adds	r2, r7, r1
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002e10:	0011      	movs	r1, r2
 8002e12:	0018      	movs	r0, r3
 8002e14:	f001 ffc6 	bl	8004da4 <HAL_TIM_ConfigClockSource>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002e1c:	f000 f87c 	bl	8002f18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e20:	003b      	movs	r3, r7
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e26:	003b      	movs	r3, r7
 8002e28:	2200      	movs	r2, #0
 8002e2a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e2c:	003a      	movs	r2, r7
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <MX_TIM1_Init+0xa4>)
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f002 f9a8 	bl	8005188 <HAL_TIMEx_MasterConfigSynchronization>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002e3c:	f000 f86c 	bl	8002f18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e40:	46c0      	nop			@ (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b006      	add	sp, #24
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000288 	.word	0x20000288
 8002e4c:	40012c00 	.word	0x40012c00
 8002e50:	0000ffff 	.word	0x0000ffff

08002e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	240c      	movs	r4, #12
 8002e5c:	193b      	adds	r3, r7, r4
 8002e5e:	0018      	movs	r0, r3
 8002e60:	2314      	movs	r3, #20
 8002e62:	001a      	movs	r2, r3
 8002e64:	2100      	movs	r1, #0
 8002e66:	f002 ff79 	bl	8005d5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <MX_GPIO_Init+0xc0>)
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <MX_GPIO_Init+0xc0>)
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	03c9      	lsls	r1, r1, #15
 8002e74:	430a      	orrs	r2, r1
 8002e76:	615a      	str	r2, [r3, #20]
 8002e78:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <MX_GPIO_Init+0xc0>)
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	03db      	lsls	r3, r3, #15
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <MX_GPIO_Init+0xc0>)
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <MX_GPIO_Init+0xc0>)
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	0289      	lsls	r1, r1, #10
 8002e90:	430a      	orrs	r2, r1
 8002e92:	615a      	str	r2, [r3, #20]
 8002e94:	4b1f      	ldr	r3, [pc, #124]	@ (8002f14 <MX_GPIO_Init+0xc0>)
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	029b      	lsls	r3, r3, #10
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	607b      	str	r3, [r7, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002ea2:	2390      	movs	r3, #144	@ 0x90
 8002ea4:	05db      	lsls	r3, r3, #23
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2141      	movs	r1, #65	@ 0x41
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 ff41 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002eb0:	2390      	movs	r3, #144	@ 0x90
 8002eb2:	05db      	lsls	r3, r3, #23
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	2118      	movs	r1, #24
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 ff3a 	bl	8003d32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8002ebe:	193b      	adds	r3, r7, r4
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec4:	193b      	adds	r3, r7, r4
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	2201      	movs	r2, #1
 8002ece:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002ed6:	193a      	adds	r2, r7, r4
 8002ed8:	2390      	movs	r3, #144	@ 0x90
 8002eda:	05db      	lsls	r3, r3, #23
 8002edc:	0011      	movs	r1, r2
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f000 fd9a 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002ee4:	0021      	movs	r1, r4
 8002ee6:	187b      	adds	r3, r7, r1
 8002ee8:	2258      	movs	r2, #88	@ 0x58
 8002eea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	2201      	movs	r2, #1
 8002ef0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	187a      	adds	r2, r7, r1
 8002f00:	2390      	movs	r3, #144	@ 0x90
 8002f02:	05db      	lsls	r3, r3, #23
 8002f04:	0011      	movs	r1, r2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fd86 	bl	8003a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b009      	add	sp, #36	@ 0x24
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1c:	b672      	cpsid	i
}
 8002f1e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	e7fd      	b.n	8002f20 <Error_Handler+0x8>

08002f24 <st7567a_Reset>:

static uint8_t ST7567A_buffer[ST7567A_BUFFER_SIZE];
static ST7567A_pos_t ST7567A;

// ----------------------------------------------------------------------------
void st7567a_Reset(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7567A_RST_GPIO_Port, ST7567A_RST_Pin, GPIO_PIN_RESET);			// reset low
 8002f28:	2390      	movs	r3, #144	@ 0x90
 8002f2a:	05db      	lsls	r3, r3, #23
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2110      	movs	r1, #16
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 fefe 	bl	8003d32 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002f36:	2005      	movs	r0, #5
 8002f38:	f000 fc96 	bl	8003868 <HAL_Delay>
	HAL_GPIO_WritePin(ST7567A_RST_GPIO_Port, ST7567A_RST_Pin, GPIO_PIN_SET);				// reset high
 8002f3c:	2390      	movs	r3, #144	@ 0x90
 8002f3e:	05db      	lsls	r3, r3, #23
 8002f40:	2201      	movs	r2, #1
 8002f42:	2110      	movs	r1, #16
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 fef4 	bl	8003d32 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002f4a:	2005      	movs	r0, #5
 8002f4c:	f000 fc8c 	bl	8003868 <HAL_Delay>
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <st7567a_WriteCommand>:

void st7567a_WriteCommand(uint8_t byte) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	0002      	movs	r2, r0
 8002f60:	1dfb      	adds	r3, r7, #7
 8002f62:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_RESET);				// chip select
 8002f64:	2390      	movs	r3, #144	@ 0x90
 8002f66:	05db      	lsls	r3, r3, #23
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2108      	movs	r1, #8
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 fee0 	bl	8003d32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ST7567A_DC_GPIO_Port, ST7567A_DC_Pin, GPIO_PIN_RESET);				// byte is command
 8002f72:	2390      	movs	r3, #144	@ 0x90
 8002f74:	05db      	lsls	r3, r3, #23
 8002f76:	2200      	movs	r2, #0
 8002f78:	2140      	movs	r1, #64	@ 0x40
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 fed9 	bl	8003d32 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7567A_SPI_PORT, &byte, 1, ST7567A_TIMEOUT);
 8002f80:	1df9      	adds	r1, r7, #7
 8002f82:	4808      	ldr	r0, [pc, #32]	@ (8002fa4 <st7567a_WriteCommand+0x4c>)
 8002f84:	2364      	movs	r3, #100	@ 0x64
 8002f86:	2201      	movs	r2, #1
 8002f88:	f001 fbe6 	bl	8004758 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_SET);					// chip unselect
 8002f8c:	2390      	movs	r3, #144	@ 0x90
 8002f8e:	05db      	lsls	r3, r3, #23
 8002f90:	2201      	movs	r2, #1
 8002f92:	2108      	movs	r1, #8
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fecc 	bl	8003d32 <HAL_GPIO_WritePin>
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	20000224 	.word	0x20000224

08002fa8 <st7567a_WriteData>:

void st7567a_WriteData(uint8_t* buffer, uint8_t size) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	000a      	movs	r2, r1
 8002fb2:	1cfb      	adds	r3, r7, #3
 8002fb4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_RESET);				// chip select
 8002fb6:	2390      	movs	r3, #144	@ 0x90
 8002fb8:	05db      	lsls	r3, r3, #23
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2108      	movs	r1, #8
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 feb7 	bl	8003d32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ST7567A_DC_GPIO_Port, ST7567A_DC_Pin, GPIO_PIN_SET);					// byte is display data
 8002fc4:	2390      	movs	r3, #144	@ 0x90
 8002fc6:	05db      	lsls	r3, r3, #23
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2140      	movs	r1, #64	@ 0x40
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 feb0 	bl	8003d32 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7567A_SPI_PORT, buffer, size, ST7567A_TIMEOUT);
 8002fd2:	1cfb      	adds	r3, r7, #3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4807      	ldr	r0, [pc, #28]	@ (8002ff8 <st7567a_WriteData+0x50>)
 8002fdc:	2364      	movs	r3, #100	@ 0x64
 8002fde:	f001 fbbb 	bl	8004758 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_SET);					// chip unselect
 8002fe2:	2390      	movs	r3, #144	@ 0x90
 8002fe4:	05db      	lsls	r3, r3, #23
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	2108      	movs	r1, #8
 8002fea:	0018      	movs	r0, r3
 8002fec:	f000 fea1 	bl	8003d32 <HAL_GPIO_WritePin>
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000224 	.word	0x20000224

08002ffc <st7567a_Init>:

// ----------------------------------------------------------------------------
void st7567a_Init(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	st7567a_Reset();
 8003000:	f7ff ff90 	bl	8002f24 <st7567a_Reset>

	st7567a_WriteCommand(ST7567A_BIAS9);
 8003004:	20a2      	movs	r0, #162	@ 0xa2
 8003006:	f7ff ffa7 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_SEG_NORMAL);
 800300a:	20a0      	movs	r0, #160	@ 0xa0
 800300c:	f7ff ffa4 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_COM_REVERSE);
 8003010:	20c8      	movs	r0, #200	@ 0xc8
 8003012:	f7ff ffa1 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_SET_RR | 0x4);		// regulation ratio 5.0
 8003016:	2024      	movs	r0, #36	@ 0x24
 8003018:	f7ff ff9e 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_SET_EV_CMD);
 800301c:	2081      	movs	r0, #129	@ 0x81
 800301e:	f7ff ff9b 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(38);											// set EV=38
 8003022:	2026      	movs	r0, #38	@ 0x26
 8003024:	f7ff ff98 	bl	8002f58 <st7567a_WriteCommand>

	st7567a_WriteCommand(ST7567A_POWER_CONTROL | ST7567A_PWR_BOOSTER_ON);
 8003028:	202c      	movs	r0, #44	@ 0x2c
 800302a:	f7ff ff95 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_POWER_CONTROL | ST7567A_PWR_BOOSTER_ON | ST7567A_PWR_REGULATOR_ON);
 800302e:	202e      	movs	r0, #46	@ 0x2e
 8003030:	f7ff ff92 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_POWER_CONTROL | ST7567A_PWR_BOOSTER_ON | ST7567A_PWR_REGULATOR_ON | ST7567A_PWR_FOLLOWER_ON);
 8003034:	202f      	movs	r0, #47	@ 0x2f
 8003036:	f7ff ff8f 	bl	8002f58 <st7567a_WriteCommand>

	st7567a_Fill(PIXEL_OFF);
 800303a:	2000      	movs	r0, #0
 800303c:	f000 f80c 	bl	8003058 <st7567a_Fill>
	st7567a_Display();
 8003040:	f000 f83a 	bl	80030b8 <st7567a_Display>
	st7567a_WriteCommand(ST7567A_DISPLAY_DRAM);
 8003044:	20a4      	movs	r0, #164	@ 0xa4
 8003046:	f7ff ff87 	bl	8002f58 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_DISPLAY_ON);
 800304a:	20af      	movs	r0, #175	@ 0xaf
 800304c:	f7ff ff84 	bl	8002f58 <st7567a_WriteCommand>
}
 8003050:	46c0      	nop			@ (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <st7567a_Fill>:

void st7567a_Fill(ST7567A_PixelState_t state) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	0002      	movs	r2, r0
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	701a      	strb	r2, [r3, #0]
	uint8_t val = (state == PIXEL_ON) ? 0xFF : 0x00;
 8003064:	1dfb      	adds	r3, r7, #7
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <st7567a_Fill+0x18>
 800306c:	22ff      	movs	r2, #255	@ 0xff
 800306e:	e000      	b.n	8003072 <st7567a_Fill+0x1a>
 8003070:	2200      	movs	r2, #0
 8003072:	230d      	movs	r3, #13
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < ST7567A_BUFFER_SIZE; ++i) {
 8003078:	230e      	movs	r3, #14
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	801a      	strh	r2, [r3, #0]
 8003080:	e00c      	b.n	800309c <st7567a_Fill+0x44>
		ST7567A_buffer[i] = val;
 8003082:	200e      	movs	r0, #14
 8003084:	183b      	adds	r3, r7, r0
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	@ (80030b4 <st7567a_Fill+0x5c>)
 800308a:	210d      	movs	r1, #13
 800308c:	1879      	adds	r1, r7, r1
 800308e:	7809      	ldrb	r1, [r1, #0]
 8003090:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < ST7567A_BUFFER_SIZE; ++i) {
 8003092:	183b      	adds	r3, r7, r0
 8003094:	183a      	adds	r2, r7, r0
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	3201      	adds	r2, #1
 800309a:	801a      	strh	r2, [r3, #0]
 800309c:	230e      	movs	r3, #14
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	881a      	ldrh	r2, [r3, #0]
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d3eb      	bcc.n	8003082 <st7567a_Fill+0x2a>
	}
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b004      	add	sp, #16
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	200002d0 	.word	0x200002d0

080030b8 <st7567a_Display>:

void st7567a_Display(void) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
	st7567a_WriteCommand(ST7567A_SET_START_LINE);
 80030be:	2040      	movs	r0, #64	@ 0x40
 80030c0:	f7ff ff4a 	bl	8002f58 <st7567a_WriteCommand>

	for(uint8_t i = 0; i < ST7567A_HEIGHT/8; i++) {
 80030c4:	1dfb      	adds	r3, r7, #7
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e01a      	b.n	8003102 <st7567a_Display+0x4a>
		st7567a_WriteCommand(ST7567A_PAGE_ADDR + i); 				// set DDRAM page
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	3b50      	subs	r3, #80	@ 0x50
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7ff ff3f 	bl	8002f58 <st7567a_WriteCommand>
		st7567a_WriteCommand(ST7567A_COL_ADDR_H);						// set MSB column address
 80030da:	2010      	movs	r0, #16
 80030dc:	f7ff ff3c 	bl	8002f58 <st7567a_WriteCommand>
		st7567a_WriteCommand(ST7567A_COL_ADDR_L);						// set LSB column address
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7ff ff39 	bl	8002f58 <st7567a_WriteCommand>
		st7567a_WriteData(&ST7567A_buffer[ST7567A_WIDTH * i], ST7567A_WIDTH);
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	01da      	lsls	r2, r3, #7
 80030ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <st7567a_Display+0x60>)
 80030ee:	18d3      	adds	r3, r2, r3
 80030f0:	2180      	movs	r1, #128	@ 0x80
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7ff ff58 	bl	8002fa8 <st7567a_WriteData>
	for(uint8_t i = 0; i < ST7567A_HEIGHT/8; i++) {
 80030f8:	1dfb      	adds	r3, r7, #7
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	3201      	adds	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b07      	cmp	r3, #7
 8003108:	d9e0      	bls.n	80030cc <st7567a_Display+0x14>
	}
	st7567a_WriteCommand(ST7567A_DISPLAY_ON);
 800310a:	20af      	movs	r0, #175	@ 0xaf
 800310c:	f7ff ff24 	bl	8002f58 <st7567a_WriteCommand>
}
 8003110:	46c0      	nop			@ (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b002      	add	sp, #8
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200002d0 	.word	0x200002d0

0800311c <st7567a_DrawPixel>:
		st7567a_WriteCommand(ST7567A_DISPLAY_DRAM);
		st7567a_WriteCommand(ST7567A_DISPLAY_ON);
	}
}

void st7567a_DrawPixel(uint8_t x, uint8_t y, ST7567A_PixelState_t state) {
 800311c:	b590      	push	{r4, r7, lr}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	0004      	movs	r4, r0
 8003124:	0008      	movs	r0, r1
 8003126:	0011      	movs	r1, r2
 8003128:	1dfb      	adds	r3, r7, #7
 800312a:	1c22      	adds	r2, r4, #0
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	1dbb      	adds	r3, r7, #6
 8003130:	1c02      	adds	r2, r0, #0
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	1d7b      	adds	r3, r7, #5
 8003136:	1c0a      	adds	r2, r1, #0
 8003138:	701a      	strb	r2, [r3, #0]
	if(x >= ST7567A_WIDTH || y >= ST7567A_HEIGHT) {
 800313a:	1dfb      	adds	r3, r7, #7
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b25b      	sxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	db47      	blt.n	80031d4 <st7567a_DrawPixel+0xb8>
 8003144:	1dbb      	adds	r3, r7, #6
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b3f      	cmp	r3, #63	@ 0x3f
 800314a:	d843      	bhi.n	80031d4 <st7567a_DrawPixel+0xb8>
		return;
	}

	// Draw in the right color
	if(state == PIXEL_ON) {
 800314c:	1d7b      	adds	r3, r7, #5
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d11e      	bne.n	8003192 <st7567a_DrawPixel+0x76>
		ST7567A_buffer[x + (y / 8) * ST7567A_WIDTH] |= 1 << (y % 8);
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	781a      	ldrb	r2, [r3, #0]
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	b2d8      	uxtb	r0, r3
 8003160:	0003      	movs	r3, r0
 8003162:	01db      	lsls	r3, r3, #7
 8003164:	18d3      	adds	r3, r2, r3
 8003166:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <st7567a_DrawPixel+0xc0>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	b25a      	sxtb	r2, r3
 800316c:	1dbb      	adds	r3, r7, #6
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2107      	movs	r1, #7
 8003172:	400b      	ands	r3, r1
 8003174:	2101      	movs	r1, #1
 8003176:	4099      	lsls	r1, r3
 8003178:	000b      	movs	r3, r1
 800317a:	b25b      	sxtb	r3, r3
 800317c:	4313      	orrs	r3, r2
 800317e:	b259      	sxtb	r1, r3
 8003180:	1dfb      	adds	r3, r7, #7
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	0003      	movs	r3, r0
 8003186:	01db      	lsls	r3, r3, #7
 8003188:	18d3      	adds	r3, r2, r3
 800318a:	b2c9      	uxtb	r1, r1
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <st7567a_DrawPixel+0xc0>)
 800318e:	54d1      	strb	r1, [r2, r3]
 8003190:	e021      	b.n	80031d6 <st7567a_DrawPixel+0xba>
	} else {
		ST7567A_buffer[x + (y / 8) * ST7567A_WIDTH] &= ~(1 << (y % 8));
 8003192:	1dfb      	adds	r3, r7, #7
 8003194:	781a      	ldrb	r2, [r3, #0]
 8003196:	1dbb      	adds	r3, r7, #6
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	b2d8      	uxtb	r0, r3
 800319e:	0003      	movs	r3, r0
 80031a0:	01db      	lsls	r3, r3, #7
 80031a2:	18d3      	adds	r3, r2, r3
 80031a4:	4a0d      	ldr	r2, [pc, #52]	@ (80031dc <st7567a_DrawPixel+0xc0>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	b25b      	sxtb	r3, r3
 80031aa:	1dba      	adds	r2, r7, #6
 80031ac:	7812      	ldrb	r2, [r2, #0]
 80031ae:	2107      	movs	r1, #7
 80031b0:	400a      	ands	r2, r1
 80031b2:	2101      	movs	r1, #1
 80031b4:	4091      	lsls	r1, r2
 80031b6:	000a      	movs	r2, r1
 80031b8:	b252      	sxtb	r2, r2
 80031ba:	43d2      	mvns	r2, r2
 80031bc:	b252      	sxtb	r2, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	b259      	sxtb	r1, r3
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	0003      	movs	r3, r0
 80031c8:	01db      	lsls	r3, r3, #7
 80031ca:	18d3      	adds	r3, r2, r3
 80031cc:	b2c9      	uxtb	r1, r1
 80031ce:	4a03      	ldr	r2, [pc, #12]	@ (80031dc <st7567a_DrawPixel+0xc0>)
 80031d0:	54d1      	strb	r1, [r2, r3]
 80031d2:	e000      	b.n	80031d6 <st7567a_DrawPixel+0xba>
		return;
 80031d4:	46c0      	nop			@ (mov r8, r8)
	}
}
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b003      	add	sp, #12
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	200002d0 	.word	0x200002d0

080031e0 <st7567a_SetCursor>:
			ST7567A_buffer[x + (y / 8) * ST7567A_WIDTH] &= ~(val);
		}
	}
}

void st7567a_SetCursor(uint8_t x, uint8_t y) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	0002      	movs	r2, r0
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	1dbb      	adds	r3, r7, #6
 80031ee:	1c0a      	adds	r2, r1, #0
 80031f0:	701a      	strb	r2, [r3, #0]
	ST7567A.curr_x = x;
 80031f2:	4b06      	ldr	r3, [pc, #24]	@ (800320c <st7567a_SetCursor+0x2c>)
 80031f4:	1dfa      	adds	r2, r7, #7
 80031f6:	7812      	ldrb	r2, [r2, #0]
 80031f8:	701a      	strb	r2, [r3, #0]
	ST7567A.curr_y = y;
 80031fa:	4b04      	ldr	r3, [pc, #16]	@ (800320c <st7567a_SetCursor+0x2c>)
 80031fc:	1dba      	adds	r2, r7, #6
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	705a      	strb	r2, [r3, #1]
}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	46bd      	mov	sp, r7
 8003206:	b002      	add	sp, #8
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	200006d0 	.word	0x200006d0

08003210 <st7567a_WriteChar>:

void st7567a_WriteChar(char ch, fontStyle_t font, ST7567A_PixelState_t state) {
 8003210:	b084      	sub	sp, #16
 8003212:	b5b0      	push	{r4, r5, r7, lr}
 8003214:	b088      	sub	sp, #32
 8003216:	af00      	add	r7, sp, #0
 8003218:	0004      	movs	r4, r0
 800321a:	2004      	movs	r0, #4
 800321c:	2530      	movs	r5, #48	@ 0x30
 800321e:	1940      	adds	r0, r0, r5
 8003220:	19c0      	adds	r0, r0, r7
 8003222:	6001      	str	r1, [r0, #0]
 8003224:	6042      	str	r2, [r0, #4]
 8003226:	6083      	str	r3, [r0, #8]
 8003228:	1dfb      	adds	r3, r7, #7
 800322a:	1c22      	adds	r2, r4, #0
 800322c:	701a      	strb	r2, [r3, #0]
	// check if char is available in the font
	if(ch < font.FirstAsciiCode) {
 800322e:	2304      	movs	r3, #4
 8003230:	195b      	adds	r3, r3, r5
 8003232:	19db      	adds	r3, r3, r7
 8003234:	785b      	ldrb	r3, [r3, #1]
 8003236:	1dfa      	adds	r2, r7, #7
 8003238:	7812      	ldrb	r2, [r2, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d203      	bcs.n	8003246 <st7567a_WriteChar+0x36>
		ch = 0;
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e009      	b.n	800325a <st7567a_WriteChar+0x4a>
	}
	else {
		ch -= font.FirstAsciiCode;
 8003246:	2304      	movs	r3, #4
 8003248:	2230      	movs	r2, #48	@ 0x30
 800324a:	189b      	adds	r3, r3, r2
 800324c:	19db      	adds	r3, r3, r7
 800324e:	785a      	ldrb	r2, [r3, #1]
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	1df9      	adds	r1, r7, #7
 8003254:	7809      	ldrb	r1, [r1, #0]
 8003256:	1a8a      	subs	r2, r1, r2
 8003258:	701a      	strb	r2, [r3, #0]
	}

	// check remaining space on the current line
	if (ST7567A_WIDTH < (ST7567A.curr_x + font.GlyphWidth[(int)ch]) ||
 800325a:	4b69      	ldr	r3, [pc, #420]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	0019      	movs	r1, r3
 8003260:	2304      	movs	r3, #4
 8003262:	2030      	movs	r0, #48	@ 0x30
 8003264:	181b      	adds	r3, r3, r0
 8003266:	19db      	adds	r3, r3, r7
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	18d3      	adds	r3, r2, r3
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	18cb      	adds	r3, r1, r3
 8003274:	2b80      	cmp	r3, #128	@ 0x80
 8003276:	dd00      	ble.n	800327a <st7567a_WriteChar+0x6a>
 8003278:	e0ba      	b.n	80033f0 <st7567a_WriteChar+0x1e0>
		ST7567A_HEIGHT < (ST7567A.curr_y + font.GlyphWidth[(int)ch])) {
 800327a:	4b61      	ldr	r3, [pc, #388]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 800327c:	785b      	ldrb	r3, [r3, #1]
 800327e:	0019      	movs	r1, r3
 8003280:	2304      	movs	r3, #4
 8003282:	181b      	adds	r3, r3, r0
 8003284:	19db      	adds	r3, r3, r7
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	1dfb      	adds	r3, r7, #7
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	18d3      	adds	r3, r2, r3
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	18cb      	adds	r3, r1, r3
	if (ST7567A_WIDTH < (ST7567A.curr_x + font.GlyphWidth[(int)ch]) ||
 8003292:	2b40      	cmp	r3, #64	@ 0x40
 8003294:	dd00      	ble.n	8003298 <st7567a_WriteChar+0x88>
 8003296:	e0ab      	b.n	80033f0 <st7567a_WriteChar+0x1e0>
		return;
	}

	uint32_t chr;

	for(uint32_t j = 0; j < font.GlyphHeight; ++j) {
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e08f      	b.n	80033be <st7567a_WriteChar+0x1ae>
		uint8_t width = font.GlyphWidth[(int)ch];
 800329e:	2304      	movs	r3, #4
 80032a0:	2230      	movs	r2, #48	@ 0x30
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	18d2      	adds	r2, r2, r3
 80032ae:	231b      	movs	r3, #27
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	7812      	ldrb	r2, [r2, #0]
 80032b4:	701a      	strb	r2, [r3, #0]

		for(uint32_t w = 0; w < font.GlyphBytesWidth; ++w) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e074      	b.n	80033a6 <st7567a_WriteChar+0x196>
			chr = font.GlyphBitmaps[(ch * font.GlyphHeight + j) * font.GlyphBytesWidth + w];
 80032bc:	2304      	movs	r3, #4
 80032be:	2030      	movs	r0, #48	@ 0x30
 80032c0:	181b      	adds	r3, r3, r0
 80032c2:	19db      	adds	r3, r3, r7
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	1dfb      	adds	r3, r7, #7
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2104      	movs	r1, #4
 80032cc:	1809      	adds	r1, r1, r0
 80032ce:	19c9      	adds	r1, r1, r7
 80032d0:	78c9      	ldrb	r1, [r1, #3]
 80032d2:	434b      	muls	r3, r1
 80032d4:	0019      	movs	r1, r3
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	18cb      	adds	r3, r1, r3
 80032da:	2104      	movs	r1, #4
 80032dc:	1809      	adds	r1, r1, r0
 80032de:	19c9      	adds	r1, r1, r7
 80032e0:	7889      	ldrb	r1, [r1, #2]
 80032e2:	4359      	muls	r1, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	18cb      	adds	r3, r1, r3
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	60bb      	str	r3, [r7, #8]

			uint8_t w_range = width;
 80032ee:	2113      	movs	r1, #19
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	201b      	movs	r0, #27
 80032f4:	183a      	adds	r2, r7, r0
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	701a      	strb	r2, [r3, #0]
			if(w_range >= 8) {
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b07      	cmp	r3, #7
 8003300:	d907      	bls.n	8003312 <st7567a_WriteChar+0x102>
				w_range = 8;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2208      	movs	r2, #8
 8003306:	701a      	strb	r2, [r3, #0]
				width -= 8;
 8003308:	183b      	adds	r3, r7, r0
 800330a:	183a      	adds	r2, r7, r0
 800330c:	7812      	ldrb	r2, [r2, #0]
 800330e:	3a08      	subs	r2, #8
 8003310:	701a      	strb	r2, [r3, #0]
			}

			for(uint32_t i = 0; i < w_range; ++i) {
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e03d      	b.n	8003394 <st7567a_WriteChar+0x184>
				if((chr << i) & 0x80)  {
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	409a      	lsls	r2, r3
 800331e:	0013      	movs	r3, r2
 8003320:	2280      	movs	r2, #128	@ 0x80
 8003322:	4013      	ands	r3, r2
 8003324:	d018      	beq.n	8003358 <st7567a_WriteChar+0x148>
					st7567a_DrawPixel(ST7567A.curr_x + i + w*8, ST7567A.curr_y + j, state);
 8003326:	4b36      	ldr	r3, [pc, #216]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	18d3      	adds	r3, r2, r3
 8003330:	b2da      	uxtb	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	b2db      	uxtb	r3, r3
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	b2d8      	uxtb	r0, r3
 800333e:	4b30      	ldr	r3, [pc, #192]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 8003340:	785a      	ldrb	r2, [r3, #1]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	18d3      	adds	r3, r2, r3
 8003348:	b2d9      	uxtb	r1, r3
 800334a:	2344      	movs	r3, #68	@ 0x44
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	001a      	movs	r2, r3
 8003352:	f7ff fee3 	bl	800311c <st7567a_DrawPixel>
 8003356:	e01a      	b.n	800338e <st7567a_WriteChar+0x17e>
				} else {
					st7567a_DrawPixel(ST7567A.curr_x + i + w*8, ST7567A.curr_y + j, !state);
 8003358:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	b2da      	uxtb	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	b2d8      	uxtb	r0, r3
 8003370:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 8003372:	785a      	ldrb	r2, [r3, #1]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	b2d9      	uxtb	r1, r3
 800337c:	2344      	movs	r3, #68	@ 0x44
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	425a      	negs	r2, r3
 8003384:	4153      	adcs	r3, r2
 8003386:	b2db      	uxtb	r3, r3
 8003388:	001a      	movs	r2, r3
 800338a:	f7ff fec7 	bl	800311c <st7567a_DrawPixel>
			for(uint32_t i = 0; i < w_range; ++i) {
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3301      	adds	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	2313      	movs	r3, #19
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	429a      	cmp	r2, r3
 800339e:	d3bb      	bcc.n	8003318 <st7567a_WriteChar+0x108>
		for(uint32_t w = 0; w < font.GlyphBytesWidth; ++w) {
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	2304      	movs	r3, #4
 80033a8:	2230      	movs	r2, #48	@ 0x30
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	19db      	adds	r3, r3, r7
 80033ae:	789b      	ldrb	r3, [r3, #2]
 80033b0:	001a      	movs	r2, r3
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d381      	bcc.n	80032bc <st7567a_WriteChar+0xac>
	for(uint32_t j = 0; j < font.GlyphHeight; ++j) {
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	3301      	adds	r3, #1
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	2304      	movs	r3, #4
 80033c0:	2130      	movs	r1, #48	@ 0x30
 80033c2:	185b      	adds	r3, r3, r1
 80033c4:	19db      	adds	r3, r3, r7
 80033c6:	78db      	ldrb	r3, [r3, #3]
 80033c8:	001a      	movs	r2, r3
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d200      	bcs.n	80033d2 <st7567a_WriteChar+0x1c2>
 80033d0:	e765      	b.n	800329e <st7567a_WriteChar+0x8e>
				}
			}
		}
	}

	ST7567A.curr_x += font.GlyphWidth[(int)ch];
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 80033d4:	781a      	ldrb	r2, [r3, #0]
 80033d6:	2304      	movs	r3, #4
 80033d8:	185b      	adds	r3, r3, r1
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	6899      	ldr	r1, [r3, #8]
 80033de:	1dfb      	adds	r3, r7, #7
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	18cb      	adds	r3, r1, r3
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	18d3      	adds	r3, r2, r3
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <st7567a_WriteChar+0x1f0>)
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e000      	b.n	80033f2 <st7567a_WriteChar+0x1e2>
		return;
 80033f0:	46c0      	nop			@ (mov r8, r8)

//	return ch + font.FirstAsciiCode;
}
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b008      	add	sp, #32
 80033f6:	bcb0      	pop	{r4, r5, r7}
 80033f8:	bc08      	pop	{r3}
 80033fa:	b004      	add	sp, #16
 80033fc:	4718      	bx	r3
 80033fe:	46c0      	nop			@ (mov r8, r8)
 8003400:	200006d0 	.word	0x200006d0

08003404 <st7567a_WriteString>:

void st7567a_WriteString(const char *str, fontStyle_t font, ST7567A_PixelState_t state) {
 8003404:	b084      	sub	sp, #16
 8003406:	b590      	push	{r4, r7, lr}
 8003408:	b085      	sub	sp, #20
 800340a:	af02      	add	r7, sp, #8
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	2004      	movs	r0, #4
 8003410:	2410      	movs	r4, #16
 8003412:	1900      	adds	r0, r0, r4
 8003414:	2408      	movs	r4, #8
 8003416:	46a4      	mov	ip, r4
 8003418:	44bc      	add	ip, r7
 800341a:	4460      	add	r0, ip
 800341c:	6001      	str	r1, [r0, #0]
 800341e:	6042      	str	r2, [r0, #4]
 8003420:	6083      	str	r3, [r0, #8]
	while(*str) {
 8003422:	e018      	b.n	8003456 <st7567a_WriteString+0x52>
		st7567a_WriteChar(*str++, font, state);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	7818      	ldrb	r0, [r3, #0]
 800342c:	2304      	movs	r3, #4
 800342e:	2210      	movs	r2, #16
 8003430:	189b      	adds	r3, r3, r2
 8003432:	2208      	movs	r2, #8
 8003434:	4694      	mov	ip, r2
 8003436:	44bc      	add	ip, r7
 8003438:	4463      	add	r3, ip
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	2108      	movs	r1, #8
 800343e:	1852      	adds	r2, r2, r1
 8003440:	19d2      	adds	r2, r2, r7
 8003442:	7812      	ldrb	r2, [r2, #0]
 8003444:	9201      	str	r2, [sp, #4]
 8003446:	466a      	mov	r2, sp
 8003448:	68d9      	ldr	r1, [r3, #12]
 800344a:	6011      	str	r1, [r2, #0]
 800344c:	6819      	ldr	r1, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f7ff fedd 	bl	8003210 <st7567a_WriteChar>
	while(*str) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e2      	bne.n	8003424 <st7567a_WriteString+0x20>
	}
}
 800345e:	46c0      	nop			@ (mov r8, r8)
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b003      	add	sp, #12
 8003466:	bc90      	pop	{r4, r7}
 8003468:	bc08      	pop	{r3}
 800346a:	b004      	add	sp, #16
 800346c:	4718      	bx	r3
	...

08003470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003476:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <HAL_MspInit+0x44>)
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	4b0e      	ldr	r3, [pc, #56]	@ (80034b4 <HAL_MspInit+0x44>)
 800347c:	2101      	movs	r1, #1
 800347e:	430a      	orrs	r2, r1
 8003480:	619a      	str	r2, [r3, #24]
 8003482:	4b0c      	ldr	r3, [pc, #48]	@ (80034b4 <HAL_MspInit+0x44>)
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2201      	movs	r2, #1
 8003488:	4013      	ands	r3, r2
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_MspInit+0x44>)
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_MspInit+0x44>)
 8003494:	2180      	movs	r1, #128	@ 0x80
 8003496:	0549      	lsls	r1, r1, #21
 8003498:	430a      	orrs	r2, r1
 800349a:	61da      	str	r2, [r3, #28]
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_MspInit+0x44>)
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	055b      	lsls	r3, r3, #21
 80034a4:	4013      	ands	r3, r2
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b08b      	sub	sp, #44	@ 0x2c
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	2414      	movs	r4, #20
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	0018      	movs	r0, r3
 80034c6:	2314      	movs	r3, #20
 80034c8:	001a      	movs	r2, r3
 80034ca:	2100      	movs	r1, #0
 80034cc:	f002 fc46 	bl	8005d5c <memset>
  if(hspi->Instance==SPI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003548 <HAL_SPI_MspInit+0x90>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d132      	bne.n	8003540 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034da:	4b1c      	ldr	r3, [pc, #112]	@ (800354c <HAL_SPI_MspInit+0x94>)
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	4b1b      	ldr	r3, [pc, #108]	@ (800354c <HAL_SPI_MspInit+0x94>)
 80034e0:	2180      	movs	r1, #128	@ 0x80
 80034e2:	0149      	lsls	r1, r1, #5
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
 80034e8:	4b18      	ldr	r3, [pc, #96]	@ (800354c <HAL_SPI_MspInit+0x94>)
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	2380      	movs	r3, #128	@ 0x80
 80034ee:	015b      	lsls	r3, r3, #5
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	4b15      	ldr	r3, [pc, #84]	@ (800354c <HAL_SPI_MspInit+0x94>)
 80034f8:	695a      	ldr	r2, [r3, #20]
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <HAL_SPI_MspInit+0x94>)
 80034fc:	2180      	movs	r1, #128	@ 0x80
 80034fe:	0289      	lsls	r1, r1, #10
 8003500:	430a      	orrs	r2, r1
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	4b11      	ldr	r3, [pc, #68]	@ (800354c <HAL_SPI_MspInit+0x94>)
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	029b      	lsls	r3, r3, #10
 800350c:	4013      	ands	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003512:	0021      	movs	r1, r4
 8003514:	187b      	adds	r3, r7, r1
 8003516:	22a0      	movs	r2, #160	@ 0xa0
 8003518:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	187b      	adds	r3, r7, r1
 800351c:	2202      	movs	r2, #2
 800351e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	187b      	adds	r3, r7, r1
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2203      	movs	r2, #3
 800352a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003532:	187a      	adds	r2, r7, r1
 8003534:	2390      	movs	r3, #144	@ 0x90
 8003536:	05db      	lsls	r3, r3, #23
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fa6c 	bl	8003a18 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b00b      	add	sp, #44	@ 0x2c
 8003546:	bd90      	pop	{r4, r7, pc}
 8003548:	40013000 	.word	0x40013000
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <HAL_TIM_Base_MspInit+0x38>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d10d      	bne.n	800357e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_TIM_Base_MspInit+0x3c>)
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_TIM_Base_MspInit+0x3c>)
 8003568:	2180      	movs	r1, #128	@ 0x80
 800356a:	0109      	lsls	r1, r1, #4
 800356c:	430a      	orrs	r2, r1
 800356e:	619a      	str	r2, [r3, #24]
 8003570:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_TIM_Base_MspInit+0x3c>)
 8003572:	699a      	ldr	r2, [r3, #24]
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40021000 	.word	0x40021000

08003590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003594:	46c0      	nop			@ (mov r8, r8)
 8003596:	e7fd      	b.n	8003594 <NMI_Handler+0x4>

08003598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	e7fd      	b.n	800359c <HardFault_Handler+0x4>

080035a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b8:	f000 f93a 	bl	8003830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	af00      	add	r7, sp, #0
  return 1;
 80035c6:	2301      	movs	r3, #1
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_kill>:

int _kill(int pid, int sig)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035d8:	f002 fc1a 	bl	8005e10 <__errno>
 80035dc:	0003      	movs	r3, r0
 80035de:	2216      	movs	r2, #22
 80035e0:	601a      	str	r2, [r3, #0]
  return -1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	425b      	negs	r3, r3
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_exit>:

void _exit (int status)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035f6:	2301      	movs	r3, #1
 80035f8:	425a      	negs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f7ff ffe5 	bl	80035ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8003604:	46c0      	nop			@ (mov r8, r8)
 8003606:	e7fd      	b.n	8003604 <_exit+0x16>

08003608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e00a      	b.n	8003630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800361a:	e000      	b.n	800361e <_read+0x16>
 800361c:	bf00      	nop
 800361e:	0001      	movs	r1, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	60ba      	str	r2, [r7, #8]
 8003626:	b2ca      	uxtb	r2, r1
 8003628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3301      	adds	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	dbf0      	blt.n	800361a <_read+0x12>
  }

  return len;
 8003638:	687b      	ldr	r3, [r7, #4]
}
 800363a:	0018      	movs	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	b006      	add	sp, #24
 8003640:	bd80      	pop	{r7, pc}

08003642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e009      	b.n	8003668 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	60ba      	str	r2, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	0018      	movs	r0, r3
 800365e:	e000      	b.n	8003662 <_write+0x20>
 8003660:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	dbf1      	blt.n	8003654 <_write+0x12>
  }
  return len;
 8003670:	687b      	ldr	r3, [r7, #4]
}
 8003672:	0018      	movs	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	b006      	add	sp, #24
 8003678:	bd80      	pop	{r7, pc}

0800367a <_close>:

int _close(int file)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003682:	2301      	movs	r3, #1
 8003684:	425b      	negs	r3, r3
}
 8003686:	0018      	movs	r0, r3
 8003688:	46bd      	mov	sp, r7
 800368a:	b002      	add	sp, #8
 800368c:	bd80      	pop	{r7, pc}

0800368e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2280      	movs	r2, #128	@ 0x80
 800369c:	0192      	lsls	r2, r2, #6
 800369e:	605a      	str	r2, [r3, #4]
  return 0;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}

080036aa <_isatty>:

int _isatty(int file)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036b2:	2301      	movs	r3, #1
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b002      	add	sp, #8
 80036ba:	bd80      	pop	{r7, pc}

080036bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	0018      	movs	r0, r3
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b004      	add	sp, #16
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036dc:	4a14      	ldr	r2, [pc, #80]	@ (8003730 <_sbrk+0x5c>)
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <_sbrk+0x60>)
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e8:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f0:	4b11      	ldr	r3, [pc, #68]	@ (8003738 <_sbrk+0x64>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	@ (800373c <_sbrk+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f6:	4b10      	ldr	r3, [pc, #64]	@ (8003738 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	18d3      	adds	r3, r2, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003704:	f002 fb84 	bl	8005e10 <__errno>
 8003708:	0003      	movs	r3, r0
 800370a:	220c      	movs	r2, #12
 800370c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800370e:	2301      	movs	r3, #1
 8003710:	425b      	negs	r3, r3
 8003712:	e009      	b.n	8003728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003714:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800371a:	4b07      	ldr	r3, [pc, #28]	@ (8003738 <_sbrk+0x64>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	18d2      	adds	r2, r2, r3
 8003722:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <_sbrk+0x64>)
 8003724:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b006      	add	sp, #24
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20002000 	.word	0x20002000
 8003734:	00000400 	.word	0x00000400
 8003738:	200006d4 	.word	0x200006d4
 800373c:	20000828 	.word	0x20000828

08003740 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003744:	46c0      	nop			@ (mov r8, r8)
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800374c:	480d      	ldr	r0, [pc, #52]	@ (8003784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800374e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003750:	f7ff fff6 	bl	8003740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003754:	480c      	ldr	r0, [pc, #48]	@ (8003788 <LoopForever+0x6>)
  ldr r1, =_edata
 8003756:	490d      	ldr	r1, [pc, #52]	@ (800378c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003758:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <LoopForever+0xe>)
  movs r3, #0
 800375a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800375c:	e002      	b.n	8003764 <LoopCopyDataInit>

0800375e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800375e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003762:	3304      	adds	r3, #4

08003764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003768:	d3f9      	bcc.n	800375e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800376a:	4a0a      	ldr	r2, [pc, #40]	@ (8003794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800376c:	4c0a      	ldr	r4, [pc, #40]	@ (8003798 <LoopForever+0x16>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003770:	e001      	b.n	8003776 <LoopFillZerobss>

08003772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003774:	3204      	adds	r2, #4

08003776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003778:	d3fb      	bcc.n	8003772 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800377a:	f002 fb4f 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800377e:	f7ff fa03 	bl	8002b88 <main>

08003782 <LoopForever>:

LoopForever:
    b LoopForever
 8003782:	e7fe      	b.n	8003782 <LoopForever>
  ldr   r0, =_estack
 8003784:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800378c:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003790:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 8003794:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8003798:	20000828 	.word	0x20000828

0800379c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800379c:	e7fe      	b.n	800379c <ADC1_IRQHandler>
	...

080037a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <HAL_Init+0x24>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <HAL_Init+0x24>)
 80037aa:	2110      	movs	r1, #16
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 f809 	bl	80037c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037b6:	f7ff fe5b 	bl	8003470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			@ (mov r8, r8)
 80037c4:	40022000 	.word	0x40022000

080037c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d0:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <HAL_InitTick+0x5c>)
 80037d2:	681c      	ldr	r4, [r3, #0]
 80037d4:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <HAL_InitTick+0x60>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	0019      	movs	r1, r3
 80037da:	23fa      	movs	r3, #250	@ 0xfa
 80037dc:	0098      	lsls	r0, r3, #2
 80037de:	f7fc fcaf 	bl	8000140 <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	0019      	movs	r1, r3
 80037e6:	0020      	movs	r0, r4
 80037e8:	f7fc fcaa 	bl	8000140 <__udivsi3>
 80037ec:	0003      	movs	r3, r0
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 f905 	bl	80039fe <HAL_SYSTICK_Config>
 80037f4:	1e03      	subs	r3, r0, #0
 80037f6:	d001      	beq.n	80037fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e00f      	b.n	800381c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d80b      	bhi.n	800381a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	2301      	movs	r3, #1
 8003806:	425b      	negs	r3, r3
 8003808:	2200      	movs	r2, #0
 800380a:	0018      	movs	r0, r3
 800380c:	f000 f8e2 	bl	80039d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_InitTick+0x64>)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	e000      	b.n	800381c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b003      	add	sp, #12
 8003822:	bd90      	pop	{r4, r7, pc}
 8003824:	20000034 	.word	0x20000034
 8003828:	2000003c 	.word	0x2000003c
 800382c:	20000038 	.word	0x20000038

08003830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003834:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_IncTick+0x1c>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	001a      	movs	r2, r3
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <HAL_IncTick+0x20>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	18d2      	adds	r2, r2, r3
 8003840:	4b03      	ldr	r3, [pc, #12]	@ (8003850 <HAL_IncTick+0x20>)
 8003842:	601a      	str	r2, [r3, #0]
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	2000003c 	.word	0x2000003c
 8003850:	200006d8 	.word	0x200006d8

08003854 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  return uwTick;
 8003858:	4b02      	ldr	r3, [pc, #8]	@ (8003864 <HAL_GetTick+0x10>)
 800385a:	681b      	ldr	r3, [r3, #0]
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	200006d8 	.word	0x200006d8

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff fff0 	bl	8003854 <HAL_GetTick>
 8003874:	0003      	movs	r3, r0
 8003876:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <HAL_Delay+0x44>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	001a      	movs	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	189b      	adds	r3, r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800388e:	46c0      	nop			@ (mov r8, r8)
 8003890:	f7ff ffe0 	bl	8003854 <HAL_GetTick>
 8003894:	0002      	movs	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b004      	add	sp, #16
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	2000003c 	.word	0x2000003c

080038b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b0:	b590      	push	{r4, r7, lr}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	0002      	movs	r2, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038be:	1dfb      	adds	r3, r7, #7
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80038c4:	d828      	bhi.n	8003918 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038c6:	4a2f      	ldr	r2, [pc, #188]	@ (8003984 <__NVIC_SetPriority+0xd4>)
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b25b      	sxtb	r3, r3
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	33c0      	adds	r3, #192	@ 0xc0
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	589b      	ldr	r3, [r3, r2]
 80038d6:	1dfa      	adds	r2, r7, #7
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	0011      	movs	r1, r2
 80038dc:	2203      	movs	r2, #3
 80038de:	400a      	ands	r2, r1
 80038e0:	00d2      	lsls	r2, r2, #3
 80038e2:	21ff      	movs	r1, #255	@ 0xff
 80038e4:	4091      	lsls	r1, r2
 80038e6:	000a      	movs	r2, r1
 80038e8:	43d2      	mvns	r2, r2
 80038ea:	401a      	ands	r2, r3
 80038ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	22ff      	movs	r2, #255	@ 0xff
 80038f4:	401a      	ands	r2, r3
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	0018      	movs	r0, r3
 80038fc:	2303      	movs	r3, #3
 80038fe:	4003      	ands	r3, r0
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003904:	481f      	ldr	r0, [pc, #124]	@ (8003984 <__NVIC_SetPriority+0xd4>)
 8003906:	1dfb      	adds	r3, r7, #7
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b25b      	sxtb	r3, r3
 800390c:	089b      	lsrs	r3, r3, #2
 800390e:	430a      	orrs	r2, r1
 8003910:	33c0      	adds	r3, #192	@ 0xc0
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003916:	e031      	b.n	800397c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003918:	4a1b      	ldr	r2, [pc, #108]	@ (8003988 <__NVIC_SetPriority+0xd8>)
 800391a:	1dfb      	adds	r3, r7, #7
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	0019      	movs	r1, r3
 8003920:	230f      	movs	r3, #15
 8003922:	400b      	ands	r3, r1
 8003924:	3b08      	subs	r3, #8
 8003926:	089b      	lsrs	r3, r3, #2
 8003928:	3306      	adds	r3, #6
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	18d3      	adds	r3, r2, r3
 800392e:	3304      	adds	r3, #4
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1dfa      	adds	r2, r7, #7
 8003934:	7812      	ldrb	r2, [r2, #0]
 8003936:	0011      	movs	r1, r2
 8003938:	2203      	movs	r2, #3
 800393a:	400a      	ands	r2, r1
 800393c:	00d2      	lsls	r2, r2, #3
 800393e:	21ff      	movs	r1, #255	@ 0xff
 8003940:	4091      	lsls	r1, r2
 8003942:	000a      	movs	r2, r1
 8003944:	43d2      	mvns	r2, r2
 8003946:	401a      	ands	r2, r3
 8003948:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	019b      	lsls	r3, r3, #6
 800394e:	22ff      	movs	r2, #255	@ 0xff
 8003950:	401a      	ands	r2, r3
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	0018      	movs	r0, r3
 8003958:	2303      	movs	r3, #3
 800395a:	4003      	ands	r3, r0
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003960:	4809      	ldr	r0, [pc, #36]	@ (8003988 <__NVIC_SetPriority+0xd8>)
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	001c      	movs	r4, r3
 8003968:	230f      	movs	r3, #15
 800396a:	4023      	ands	r3, r4
 800396c:	3b08      	subs	r3, #8
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	430a      	orrs	r2, r1
 8003972:	3306      	adds	r3, #6
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	18c3      	adds	r3, r0, r3
 8003978:	3304      	adds	r3, #4
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	46c0      	nop			@ (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b003      	add	sp, #12
 8003982:	bd90      	pop	{r4, r7, pc}
 8003984:	e000e100 	.word	0xe000e100
 8003988:	e000ed00 	.word	0xe000ed00

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1e5a      	subs	r2, r3, #1
 8003998:	2380      	movs	r3, #128	@ 0x80
 800399a:	045b      	lsls	r3, r3, #17
 800399c:	429a      	cmp	r2, r3
 800399e:	d301      	bcc.n	80039a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039a0:	2301      	movs	r3, #1
 80039a2:	e010      	b.n	80039c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <SysTick_Config+0x44>)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	3a01      	subs	r2, #1
 80039aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ac:	2301      	movs	r3, #1
 80039ae:	425b      	negs	r3, r3
 80039b0:	2103      	movs	r1, #3
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff ff7c 	bl	80038b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b8:	4b05      	ldr	r3, [pc, #20]	@ (80039d0 <SysTick_Config+0x44>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039be:	4b04      	ldr	r3, [pc, #16]	@ (80039d0 <SysTick_Config+0x44>)
 80039c0:	2207      	movs	r2, #7
 80039c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b002      	add	sp, #8
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	e000e010 	.word	0xe000e010

080039d4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	210f      	movs	r1, #15
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	1c02      	adds	r2, r0, #0
 80039e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	b25b      	sxtb	r3, r3
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7ff ff5d 	bl	80038b0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f7ff ffbf 	bl	800398c <SysTick_Config>
 8003a0e:	0003      	movs	r3, r0
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b002      	add	sp, #8
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a26:	e14f      	b.n	8003cc8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	4091      	lsls	r1, r2
 8003a32:	000a      	movs	r2, r1
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d100      	bne.n	8003a40 <HAL_GPIO_Init+0x28>
 8003a3e:	e140      	b.n	8003cc2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d005      	beq.n	8003a58 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d130      	bne.n	8003aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	409a      	lsls	r2, r3
 8003a66:	0013      	movs	r3, r2
 8003a68:	43da      	mvns	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a8e:	2201      	movs	r2, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	409a      	lsls	r2, r3
 8003a94:	0013      	movs	r3, r2
 8003a96:	43da      	mvns	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	0013      	movs	r3, r2
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2203      	movs	r2, #3
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d017      	beq.n	8003af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	0013      	movs	r3, r2
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2203      	movs	r2, #3
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d123      	bne.n	8003b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	0092      	lsls	r2, r2, #2
 8003b0c:	58d3      	ldr	r3, [r2, r3]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2207      	movs	r2, #7
 8003b14:	4013      	ands	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	0013      	movs	r3, r2
 8003b1e:	43da      	mvns	r2, r3
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2107      	movs	r1, #7
 8003b2e:	400b      	ands	r3, r1
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	409a      	lsls	r2, r3
 8003b34:	0013      	movs	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	6939      	ldr	r1, [r7, #16]
 8003b48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2203      	movs	r2, #3
 8003b68:	401a      	ands	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	0013      	movs	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	23c0      	movs	r3, #192	@ 0xc0
 8003b84:	029b      	lsls	r3, r3, #10
 8003b86:	4013      	ands	r3, r2
 8003b88:	d100      	bne.n	8003b8c <HAL_GPIO_Init+0x174>
 8003b8a:	e09a      	b.n	8003cc2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8c:	4b54      	ldr	r3, [pc, #336]	@ (8003ce0 <HAL_GPIO_Init+0x2c8>)
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_GPIO_Init+0x2c8>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	430a      	orrs	r2, r1
 8003b96:	619a      	str	r2, [r3, #24]
 8003b98:	4b51      	ldr	r3, [pc, #324]	@ (8003ce0 <HAL_GPIO_Init+0x2c8>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ba4:	4a4f      	ldr	r2, [pc, #316]	@ (8003ce4 <HAL_GPIO_Init+0x2cc>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	3302      	adds	r3, #2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	589b      	ldr	r3, [r3, r2]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	220f      	movs	r2, #15
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	0013      	movs	r3, r2
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	2390      	movs	r3, #144	@ 0x90
 8003bcc:	05db      	lsls	r3, r3, #23
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d013      	beq.n	8003bfa <HAL_GPIO_Init+0x1e2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a44      	ldr	r2, [pc, #272]	@ (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00d      	beq.n	8003bf6 <HAL_GPIO_Init+0x1de>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a43      	ldr	r2, [pc, #268]	@ (8003cec <HAL_GPIO_Init+0x2d4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <HAL_GPIO_Init+0x1da>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a42      	ldr	r2, [pc, #264]	@ (8003cf0 <HAL_GPIO_Init+0x2d8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003bea:	2303      	movs	r3, #3
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_Init+0x1e4>
 8003bee:	2305      	movs	r3, #5
 8003bf0:	e004      	b.n	8003bfc <HAL_GPIO_Init+0x1e4>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_Init+0x1e4>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_GPIO_Init+0x1e4>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	2103      	movs	r1, #3
 8003c00:	400a      	ands	r2, r1
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	4093      	lsls	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c0c:	4935      	ldr	r1, [pc, #212]	@ (8003ce4 <HAL_GPIO_Init+0x2cc>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c1a:	4b36      	ldr	r3, [pc, #216]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43da      	mvns	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	035b      	lsls	r3, r3, #13
 8003c32:	4013      	ands	r3, r2
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c44:	4b2b      	ldr	r3, [pc, #172]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	039b      	lsls	r3, r3, #14
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c68:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	4013      	ands	r3, r2
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c92:	4b18      	ldr	r3, [pc, #96]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003c98:	4b16      	ldr	r3, [pc, #88]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <HAL_GPIO_Init+0x2dc>)
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	40da      	lsrs	r2, r3
 8003cd0:	1e13      	subs	r3, r2, #0
 8003cd2:	d000      	beq.n	8003cd6 <HAL_GPIO_Init+0x2be>
 8003cd4:	e6a8      	b.n	8003a28 <HAL_GPIO_Init+0x10>
  } 
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b006      	add	sp, #24
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	48000400 	.word	0x48000400
 8003cec:	48000800 	.word	0x48000800
 8003cf0:	48000c00 	.word	0x48000c00
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	000a      	movs	r2, r1
 8003d02:	1cbb      	adds	r3, r7, #2
 8003d04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	1cba      	adds	r2, r7, #2
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d12:	230f      	movs	r3, #15
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	e003      	b.n	8003d24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d24:	230f      	movs	r3, #15
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
  }
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
 8003d3a:	0008      	movs	r0, r1
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	1cbb      	adds	r3, r7, #2
 8003d40:	1c02      	adds	r2, r0, #0
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	1c7b      	adds	r3, r7, #1
 8003d46:	1c0a      	adds	r2, r1, #0
 8003d48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d4a:	1c7b      	adds	r3, r7, #1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d004      	beq.n	8003d5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d52:	1cbb      	adds	r3, r7, #2
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d5a:	e003      	b.n	8003d64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d5c:	1cbb      	adds	r3, r7, #2
 8003d5e:	881a      	ldrh	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d64:	46c0      	nop			@ (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b002      	add	sp, #8
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e301      	b.n	8004382 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4013      	ands	r3, r2
 8003d86:	d100      	bne.n	8003d8a <HAL_RCC_OscConfig+0x1e>
 8003d88:	e08d      	b.n	8003ea6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d8a:	4bc3      	ldr	r3, [pc, #780]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	220c      	movs	r2, #12
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d00e      	beq.n	8003db4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d96:	4bc0      	ldr	r3, [pc, #768]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d116      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x64>
 8003da2:	4bbd      	ldr	r3, [pc, #756]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	025b      	lsls	r3, r3, #9
 8003daa:	401a      	ands	r2, r3
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	025b      	lsls	r3, r3, #9
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	4bb8      	ldr	r3, [pc, #736]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	029b      	lsls	r3, r3, #10
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x56>
 8003dc0:	e070      	b.n	8003ea4 <HAL_RCC_OscConfig+0x138>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d000      	beq.n	8003dcc <HAL_RCC_OscConfig+0x60>
 8003dca:	e06b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e2d8      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x7c>
 8003dd8:	4baf      	ldr	r3, [pc, #700]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4bae      	ldr	r3, [pc, #696]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	0249      	lsls	r1, r1, #9
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e02f      	b.n	8003e48 <HAL_RCC_OscConfig+0xdc>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x9e>
 8003df0:	4ba9      	ldr	r3, [pc, #676]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4ba8      	ldr	r3, [pc, #672]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003df6:	49a9      	ldr	r1, [pc, #676]	@ (800409c <HAL_RCC_OscConfig+0x330>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	4ba6      	ldr	r3, [pc, #664]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4ba5      	ldr	r3, [pc, #660]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e02:	49a7      	ldr	r1, [pc, #668]	@ (80040a0 <HAL_RCC_OscConfig+0x334>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	e01e      	b.n	8003e48 <HAL_RCC_OscConfig+0xdc>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d10e      	bne.n	8003e30 <HAL_RCC_OscConfig+0xc4>
 8003e12:	4ba1      	ldr	r3, [pc, #644]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4ba0      	ldr	r3, [pc, #640]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e18:	2180      	movs	r1, #128	@ 0x80
 8003e1a:	02c9      	lsls	r1, r1, #11
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b9d      	ldr	r3, [pc, #628]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b9c      	ldr	r3, [pc, #624]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	0249      	lsls	r1, r1, #9
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e00b      	b.n	8003e48 <HAL_RCC_OscConfig+0xdc>
 8003e30:	4b99      	ldr	r3, [pc, #612]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	4b98      	ldr	r3, [pc, #608]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e36:	4999      	ldr	r1, [pc, #612]	@ (800409c <HAL_RCC_OscConfig+0x330>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	4b96      	ldr	r3, [pc, #600]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b95      	ldr	r3, [pc, #596]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e42:	4997      	ldr	r1, [pc, #604]	@ (80040a0 <HAL_RCC_OscConfig+0x334>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d014      	beq.n	8003e7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7ff fd00 	bl	8003854 <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5a:	f7ff fcfb 	bl	8003854 <HAL_GetTick>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	@ 0x64
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e28a      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2380      	movs	r3, #128	@ 0x80
 8003e72:	029b      	lsls	r3, r3, #10
 8003e74:	4013      	ands	r3, r2
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0xee>
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7a:	f7ff fceb 	bl	8003854 <HAL_GetTick>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7ff fce6 	bl	8003854 <HAL_GetTick>
 8003e88:	0002      	movs	r2, r0
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	@ 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e275      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b80      	ldr	r3, [pc, #512]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	029b      	lsls	r3, r3, #10
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x118>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	4013      	ands	r3, r2
 8003eae:	d100      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x146>
 8003eb0:	e069      	b.n	8003f86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003eb2:	4b79      	ldr	r3, [pc, #484]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	220c      	movs	r2, #12
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ebc:	4b76      	ldr	r3, [pc, #472]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	220c      	movs	r2, #12
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d11c      	bne.n	8003f02 <HAL_RCC_OscConfig+0x196>
 8003ec8:	4b73      	ldr	r3, [pc, #460]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	2380      	movs	r3, #128	@ 0x80
 8003ece:	025b      	lsls	r3, r3, #9
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d116      	bne.n	8003f02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed4:	4b70      	ldr	r3, [pc, #448]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	4013      	ands	r3, r2
 8003edc:	d005      	beq.n	8003eea <HAL_RCC_OscConfig+0x17e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d001      	beq.n	8003eea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e24b      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eea:	4b6b      	ldr	r3, [pc, #428]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	22f8      	movs	r2, #248	@ 0xf8
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	00da      	lsls	r2, r3, #3
 8003efa:	4b67      	ldr	r3, [pc, #412]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f00:	e041      	b.n	8003f86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d024      	beq.n	8003f54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0a:	4b63      	ldr	r3, [pc, #396]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4b62      	ldr	r3, [pc, #392]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f16:	f7ff fc9d 	bl	8003854 <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f20:	f7ff fc98 	bl	8003854 <HAL_GetTick>
 8003f24:	0002      	movs	r2, r0
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e227      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f32:	4b59      	ldr	r3, [pc, #356]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2202      	movs	r2, #2
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d0f1      	beq.n	8003f20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	4b56      	ldr	r3, [pc, #344]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	22f8      	movs	r2, #248	@ 0xf8
 8003f42:	4393      	bics	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00da      	lsls	r2, r3, #3
 8003f4c:	4b52      	ldr	r3, [pc, #328]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e018      	b.n	8003f86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f54:	4b50      	ldr	r3, [pc, #320]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	4b4f      	ldr	r3, [pc, #316]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7ff fc78 	bl	8003854 <HAL_GetTick>
 8003f64:	0003      	movs	r3, r0
 8003f66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6a:	f7ff fc73 	bl	8003854 <HAL_GetTick>
 8003f6e:	0002      	movs	r2, r0
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e202      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7c:	4b46      	ldr	r3, [pc, #280]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2202      	movs	r2, #2
 8003f82:	4013      	ands	r3, r2
 8003f84:	d1f1      	bne.n	8003f6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d036      	beq.n	8003ffe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d019      	beq.n	8003fcc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f98:	4b3f      	ldr	r3, [pc, #252]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7ff fc56 	bl	8003854 <HAL_GetTick>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fae:	f7ff fc51 	bl	8003854 <HAL_GetTick>
 8003fb2:	0002      	movs	r2, r0
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1e0      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc0:	4b35      	ldr	r3, [pc, #212]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d0f1      	beq.n	8003fae <HAL_RCC_OscConfig+0x242>
 8003fca:	e018      	b.n	8003ffe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fcc:	4b32      	ldr	r3, [pc, #200]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd0:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd8:	f7ff fc3c 	bl	8003854 <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7ff fc37 	bl	8003854 <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e1c6      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff4:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d1f1      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2204      	movs	r2, #4
 8004004:	4013      	ands	r3, r2
 8004006:	d100      	bne.n	800400a <HAL_RCC_OscConfig+0x29e>
 8004008:	e0b4      	b.n	8004174 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400a:	201f      	movs	r0, #31
 800400c:	183b      	adds	r3, r7, r0
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004012:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	2380      	movs	r3, #128	@ 0x80
 8004018:	055b      	lsls	r3, r3, #21
 800401a:	4013      	ands	r3, r2
 800401c:	d110      	bne.n	8004040 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	4b1e      	ldr	r3, [pc, #120]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8004024:	2180      	movs	r1, #128	@ 0x80
 8004026:	0549      	lsls	r1, r1, #21
 8004028:	430a      	orrs	r2, r1
 800402a:	61da      	str	r2, [r3, #28]
 800402c:	4b1a      	ldr	r3, [pc, #104]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	055b      	lsls	r3, r3, #21
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800403a:	183b      	adds	r3, r7, r0
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004040:	4b18      	ldr	r3, [pc, #96]	@ (80040a4 <HAL_RCC_OscConfig+0x338>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	2380      	movs	r3, #128	@ 0x80
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d11a      	bne.n	8004082 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404c:	4b15      	ldr	r3, [pc, #84]	@ (80040a4 <HAL_RCC_OscConfig+0x338>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b14      	ldr	r3, [pc, #80]	@ (80040a4 <HAL_RCC_OscConfig+0x338>)
 8004052:	2180      	movs	r1, #128	@ 0x80
 8004054:	0049      	lsls	r1, r1, #1
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7ff fbfb 	bl	8003854 <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004064:	f7ff fbf6 	bl	8003854 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e185      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004076:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCC_OscConfig+0x338>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	2380      	movs	r3, #128	@ 0x80
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4013      	ands	r3, r2
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10e      	bne.n	80040a8 <HAL_RCC_OscConfig+0x33c>
 800408a:	4b03      	ldr	r3, [pc, #12]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 800408c:	6a1a      	ldr	r2, [r3, #32]
 800408e:	4b02      	ldr	r3, [pc, #8]	@ (8004098 <HAL_RCC_OscConfig+0x32c>)
 8004090:	2101      	movs	r1, #1
 8004092:	430a      	orrs	r2, r1
 8004094:	621a      	str	r2, [r3, #32]
 8004096:	e035      	b.n	8004104 <HAL_RCC_OscConfig+0x398>
 8004098:	40021000 	.word	0x40021000
 800409c:	fffeffff 	.word	0xfffeffff
 80040a0:	fffbffff 	.word	0xfffbffff
 80040a4:	40007000 	.word	0x40007000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10c      	bne.n	80040ca <HAL_RCC_OscConfig+0x35e>
 80040b0:	4bb6      	ldr	r3, [pc, #728]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	4bb5      	ldr	r3, [pc, #724]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040b6:	2101      	movs	r1, #1
 80040b8:	438a      	bics	r2, r1
 80040ba:	621a      	str	r2, [r3, #32]
 80040bc:	4bb3      	ldr	r3, [pc, #716]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	4bb2      	ldr	r3, [pc, #712]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040c2:	2104      	movs	r1, #4
 80040c4:	438a      	bics	r2, r1
 80040c6:	621a      	str	r2, [r3, #32]
 80040c8:	e01c      	b.n	8004104 <HAL_RCC_OscConfig+0x398>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d10c      	bne.n	80040ec <HAL_RCC_OscConfig+0x380>
 80040d2:	4bae      	ldr	r3, [pc, #696]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040d4:	6a1a      	ldr	r2, [r3, #32]
 80040d6:	4bad      	ldr	r3, [pc, #692]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040d8:	2104      	movs	r1, #4
 80040da:	430a      	orrs	r2, r1
 80040dc:	621a      	str	r2, [r3, #32]
 80040de:	4bab      	ldr	r3, [pc, #684]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	4baa      	ldr	r3, [pc, #680]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040e4:	2101      	movs	r1, #1
 80040e6:	430a      	orrs	r2, r1
 80040e8:	621a      	str	r2, [r3, #32]
 80040ea:	e00b      	b.n	8004104 <HAL_RCC_OscConfig+0x398>
 80040ec:	4ba7      	ldr	r3, [pc, #668]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	4ba6      	ldr	r3, [pc, #664]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	621a      	str	r2, [r3, #32]
 80040f8:	4ba4      	ldr	r3, [pc, #656]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040fa:	6a1a      	ldr	r2, [r3, #32]
 80040fc:	4ba3      	ldr	r3, [pc, #652]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80040fe:	2104      	movs	r1, #4
 8004100:	438a      	bics	r2, r1
 8004102:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d014      	beq.n	8004136 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410c:	f7ff fba2 	bl	8003854 <HAL_GetTick>
 8004110:	0003      	movs	r3, r0
 8004112:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004114:	e009      	b.n	800412a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7ff fb9d 	bl	8003854 <HAL_GetTick>
 800411a:	0002      	movs	r2, r0
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	4a9b      	ldr	r2, [pc, #620]	@ (8004390 <HAL_RCC_OscConfig+0x624>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e12b      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800412a:	4b98      	ldr	r3, [pc, #608]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	2202      	movs	r2, #2
 8004130:	4013      	ands	r3, r2
 8004132:	d0f0      	beq.n	8004116 <HAL_RCC_OscConfig+0x3aa>
 8004134:	e013      	b.n	800415e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004136:	f7ff fb8d 	bl	8003854 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413e:	e009      	b.n	8004154 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7ff fb88 	bl	8003854 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	4a91      	ldr	r2, [pc, #580]	@ (8004390 <HAL_RCC_OscConfig+0x624>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e116      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004154:	4b8d      	ldr	r3, [pc, #564]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	2202      	movs	r2, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800415e:	231f      	movs	r3, #31
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d105      	bne.n	8004174 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004168:	4b88      	ldr	r3, [pc, #544]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	4b87      	ldr	r3, [pc, #540]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800416e:	4989      	ldr	r1, [pc, #548]	@ (8004394 <HAL_RCC_OscConfig+0x628>)
 8004170:	400a      	ands	r2, r1
 8004172:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2210      	movs	r2, #16
 800417a:	4013      	ands	r3, r2
 800417c:	d063      	beq.n	8004246 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d12a      	bne.n	80041dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004186:	4b81      	ldr	r3, [pc, #516]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800418a:	4b80      	ldr	r3, [pc, #512]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800418c:	2104      	movs	r1, #4
 800418e:	430a      	orrs	r2, r1
 8004190:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004192:	4b7e      	ldr	r3, [pc, #504]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004196:	4b7d      	ldr	r3, [pc, #500]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004198:	2101      	movs	r1, #1
 800419a:	430a      	orrs	r2, r1
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419e:	f7ff fb59 	bl	8003854 <HAL_GetTick>
 80041a2:	0003      	movs	r3, r0
 80041a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041a8:	f7ff fb54 	bl	8003854 <HAL_GetTick>
 80041ac:	0002      	movs	r2, r0
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0e3      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041ba:	4b74      	ldr	r3, [pc, #464]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80041bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041be:	2202      	movs	r2, #2
 80041c0:	4013      	ands	r3, r2
 80041c2:	d0f1      	beq.n	80041a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041c4:	4b71      	ldr	r3, [pc, #452]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	22f8      	movs	r2, #248	@ 0xf8
 80041ca:	4393      	bics	r3, r2
 80041cc:	0019      	movs	r1, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	00da      	lsls	r2, r3, #3
 80041d4:	4b6d      	ldr	r3, [pc, #436]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80041d6:	430a      	orrs	r2, r1
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80041da:	e034      	b.n	8004246 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	3305      	adds	r3, #5
 80041e2:	d111      	bne.n	8004208 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80041e4:	4b69      	ldr	r3, [pc, #420]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80041e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e8:	4b68      	ldr	r3, [pc, #416]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80041ea:	2104      	movs	r1, #4
 80041ec:	438a      	bics	r2, r1
 80041ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041f0:	4b66      	ldr	r3, [pc, #408]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80041f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f4:	22f8      	movs	r2, #248	@ 0xf8
 80041f6:	4393      	bics	r3, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	00da      	lsls	r2, r3, #3
 8004200:	4b62      	ldr	r3, [pc, #392]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004202:	430a      	orrs	r2, r1
 8004204:	635a      	str	r2, [r3, #52]	@ 0x34
 8004206:	e01e      	b.n	8004246 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004208:	4b60      	ldr	r3, [pc, #384]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800420a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800420c:	4b5f      	ldr	r3, [pc, #380]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800420e:	2104      	movs	r1, #4
 8004210:	430a      	orrs	r2, r1
 8004212:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004214:	4b5d      	ldr	r3, [pc, #372]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004218:	4b5c      	ldr	r3, [pc, #368]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800421a:	2101      	movs	r1, #1
 800421c:	438a      	bics	r2, r1
 800421e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7ff fb18 	bl	8003854 <HAL_GetTick>
 8004224:	0003      	movs	r3, r0
 8004226:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800422a:	f7ff fb13 	bl	8003854 <HAL_GetTick>
 800422e:	0002      	movs	r2, r0
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e0a2      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800423c:	4b53      	ldr	r3, [pc, #332]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800423e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004240:	2202      	movs	r2, #2
 8004242:	4013      	ands	r3, r2
 8004244:	d1f1      	bne.n	800422a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d100      	bne.n	8004250 <HAL_RCC_OscConfig+0x4e4>
 800424e:	e097      	b.n	8004380 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004250:	4b4e      	ldr	r3, [pc, #312]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	220c      	movs	r2, #12
 8004256:	4013      	ands	r3, r2
 8004258:	2b08      	cmp	r3, #8
 800425a:	d100      	bne.n	800425e <HAL_RCC_OscConfig+0x4f2>
 800425c:	e06b      	b.n	8004336 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d14c      	bne.n	8004300 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b49      	ldr	r3, [pc, #292]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	4b48      	ldr	r3, [pc, #288]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800426c:	494a      	ldr	r1, [pc, #296]	@ (8004398 <HAL_RCC_OscConfig+0x62c>)
 800426e:	400a      	ands	r2, r1
 8004270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004272:	f7ff faef 	bl	8003854 <HAL_GetTick>
 8004276:	0003      	movs	r3, r0
 8004278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7ff faea 	bl	8003854 <HAL_GetTick>
 8004280:	0002      	movs	r2, r0
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e079      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428e:	4b3f      	ldr	r3, [pc, #252]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	2380      	movs	r3, #128	@ 0x80
 8004294:	049b      	lsls	r3, r3, #18
 8004296:	4013      	ands	r3, r2
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800429a:	4b3c      	ldr	r3, [pc, #240]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800429c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429e:	220f      	movs	r2, #15
 80042a0:	4393      	bics	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a8:	4b38      	ldr	r3, [pc, #224]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80042aa:	430a      	orrs	r2, r1
 80042ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042ae:	4b37      	ldr	r3, [pc, #220]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a3a      	ldr	r2, [pc, #232]	@ (800439c <HAL_RCC_OscConfig+0x630>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c0:	431a      	orrs	r2, r3
 80042c2:	4b32      	ldr	r3, [pc, #200]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80042c4:	430a      	orrs	r2, r1
 80042c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c8:	4b30      	ldr	r3, [pc, #192]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	4b2f      	ldr	r3, [pc, #188]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80042ce:	2180      	movs	r1, #128	@ 0x80
 80042d0:	0449      	lsls	r1, r1, #17
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7ff fabd 	bl	8003854 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042e0:	f7ff fab8 	bl	8003854 <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e047      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042f2:	4b26      	ldr	r3, [pc, #152]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	2380      	movs	r3, #128	@ 0x80
 80042f8:	049b      	lsls	r3, r3, #18
 80042fa:	4013      	ands	r3, r2
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x574>
 80042fe:	e03f      	b.n	8004380 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004300:	4b22      	ldr	r3, [pc, #136]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4b21      	ldr	r3, [pc, #132]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004306:	4924      	ldr	r1, [pc, #144]	@ (8004398 <HAL_RCC_OscConfig+0x62c>)
 8004308:	400a      	ands	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7ff faa2 	bl	8003854 <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004316:	f7ff fa9d 	bl	8003854 <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e02c      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004328:	4b18      	ldr	r3, [pc, #96]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	049b      	lsls	r3, r3, #18
 8004330:	4013      	ands	r3, r2
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x5aa>
 8004334:	e024      	b.n	8004380 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e01f      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004342:	4b12      	ldr	r3, [pc, #72]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004348:	4b10      	ldr	r3, [pc, #64]	@ (800438c <HAL_RCC_OscConfig+0x620>)
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	025b      	lsls	r3, r3, #9
 8004354:	401a      	ands	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	429a      	cmp	r2, r3
 800435c:	d10e      	bne.n	800437c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	220f      	movs	r2, #15
 8004362:	401a      	ands	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d107      	bne.n	800437c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	23f0      	movs	r3, #240	@ 0xf0
 8004370:	039b      	lsls	r3, r3, #14
 8004372:	401a      	ands	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b008      	add	sp, #32
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	40021000 	.word	0x40021000
 8004390:	00001388 	.word	0x00001388
 8004394:	efffffff 	.word	0xefffffff
 8004398:	feffffff 	.word	0xfeffffff
 800439c:	ffc2ffff 	.word	0xffc2ffff

080043a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b3      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2201      	movs	r2, #1
 80043ba:	4013      	ands	r3, r2
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d911      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b58      	ldr	r3, [pc, #352]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2201      	movs	r2, #1
 80043c8:	4393      	bics	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	4b55      	ldr	r3, [pc, #340]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d4:	4b53      	ldr	r3, [pc, #332]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2201      	movs	r2, #1
 80043da:	4013      	ands	r3, r2
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e09a      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2202      	movs	r2, #2
 80043ec:	4013      	ands	r3, r2
 80043ee:	d015      	beq.n	800441c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2204      	movs	r2, #4
 80043f6:	4013      	ands	r3, r2
 80043f8:	d006      	beq.n	8004408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80043fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004400:	21e0      	movs	r1, #224	@ 0xe0
 8004402:	00c9      	lsls	r1, r1, #3
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b47      	ldr	r3, [pc, #284]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	22f0      	movs	r2, #240	@ 0xf0
 800440e:	4393      	bics	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	4b44      	ldr	r3, [pc, #272]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004418:	430a      	orrs	r2, r1
 800441a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2201      	movs	r2, #1
 8004422:	4013      	ands	r3, r2
 8004424:	d040      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b3e      	ldr	r3, [pc, #248]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	2380      	movs	r3, #128	@ 0x80
 8004434:	029b      	lsls	r3, r3, #10
 8004436:	4013      	ands	r3, r2
 8004438:	d114      	bne.n	8004464 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06e      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b38      	ldr	r3, [pc, #224]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	@ 0x80
 800444c:	049b      	lsls	r3, r3, #18
 800444e:	4013      	ands	r3, r2
 8004450:	d108      	bne.n	8004464 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e062      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2202      	movs	r2, #2
 800445c:	4013      	ands	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e05b      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004464:	4b30      	ldr	r3, [pc, #192]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2203      	movs	r2, #3
 800446a:	4393      	bics	r3, r2
 800446c:	0019      	movs	r1, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004478:	f7ff f9ec 	bl	8003854 <HAL_GetTick>
 800447c:	0003      	movs	r3, r0
 800447e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004480:	e009      	b.n	8004496 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004482:	f7ff f9e7 	bl	8003854 <HAL_GetTick>
 8004486:	0002      	movs	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	4a27      	ldr	r2, [pc, #156]	@ (800452c <HAL_RCC_ClockConfig+0x18c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e042      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	220c      	movs	r2, #12
 800449c:	401a      	ands	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1ec      	bne.n	8004482 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	4013      	ands	r3, r2
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d211      	bcs.n	80044da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2201      	movs	r2, #1
 80044bc:	4393      	bics	r3, r2
 80044be:	0019      	movs	r1, r3
 80044c0:	4b18      	ldr	r3, [pc, #96]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c8:	4b16      	ldr	r3, [pc, #88]	@ (8004524 <HAL_RCC_ClockConfig+0x184>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2201      	movs	r2, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d001      	beq.n	80044da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e020      	b.n	800451c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2204      	movs	r2, #4
 80044e0:	4013      	ands	r3, r2
 80044e2:	d009      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044e4:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	4a11      	ldr	r2, [pc, #68]	@ (8004530 <HAL_RCC_ClockConfig+0x190>)
 80044ea:	4013      	ands	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044f8:	f000 f820 	bl	800453c <HAL_RCC_GetSysClockFreq>
 80044fc:	0001      	movs	r1, r0
 80044fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004528 <HAL_RCC_ClockConfig+0x188>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	091b      	lsrs	r3, r3, #4
 8004504:	220f      	movs	r2, #15
 8004506:	4013      	ands	r3, r2
 8004508:	4a0a      	ldr	r2, [pc, #40]	@ (8004534 <HAL_RCC_ClockConfig+0x194>)
 800450a:	5cd3      	ldrb	r3, [r2, r3]
 800450c:	000a      	movs	r2, r1
 800450e:	40da      	lsrs	r2, r3
 8004510:	4b09      	ldr	r3, [pc, #36]	@ (8004538 <HAL_RCC_ClockConfig+0x198>)
 8004512:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004514:	2003      	movs	r0, #3
 8004516:	f7ff f957 	bl	80037c8 <HAL_InitTick>
  
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	0018      	movs	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	b004      	add	sp, #16
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40022000 	.word	0x40022000
 8004528:	40021000 	.word	0x40021000
 800452c:	00001388 	.word	0x00001388
 8004530:	fffff8ff 	.word	0xfffff8ff
 8004534:	08009598 	.word	0x08009598
 8004538:	20000034 	.word	0x20000034

0800453c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	2300      	movs	r3, #0
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	2300      	movs	r3, #0
 8004550:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004556:	4b20      	ldr	r3, [pc, #128]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	220c      	movs	r2, #12
 8004560:	4013      	ands	r3, r2
 8004562:	2b04      	cmp	r3, #4
 8004564:	d002      	beq.n	800456c <HAL_RCC_GetSysClockFreq+0x30>
 8004566:	2b08      	cmp	r3, #8
 8004568:	d003      	beq.n	8004572 <HAL_RCC_GetSysClockFreq+0x36>
 800456a:	e02c      	b.n	80045c6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800456c:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800456e:	613b      	str	r3, [r7, #16]
      break;
 8004570:	e02c      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0c9b      	lsrs	r3, r3, #18
 8004576:	220f      	movs	r2, #15
 8004578:	4013      	ands	r3, r2
 800457a:	4a19      	ldr	r2, [pc, #100]	@ (80045e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800457c:	5cd3      	ldrb	r3, [r2, r3]
 800457e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004580:	4b15      	ldr	r3, [pc, #84]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	220f      	movs	r2, #15
 8004586:	4013      	ands	r3, r2
 8004588:	4a16      	ldr	r2, [pc, #88]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800458a:	5cd3      	ldrb	r3, [r2, r3]
 800458c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	025b      	lsls	r3, r3, #9
 8004594:	4013      	ands	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004598:	68b9      	ldr	r1, [r7, #8]
 800459a:	4810      	ldr	r0, [pc, #64]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800459c:	f7fb fdd0 	bl	8000140 <__udivsi3>
 80045a0:	0003      	movs	r3, r0
 80045a2:	001a      	movs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4353      	muls	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e009      	b.n	80045c0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	000a      	movs	r2, r1
 80045b0:	0152      	lsls	r2, r2, #5
 80045b2:	1a52      	subs	r2, r2, r1
 80045b4:	0193      	lsls	r3, r2, #6
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	185b      	adds	r3, r3, r1
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	613b      	str	r3, [r7, #16]
      break;
 80045c4:	e002      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045c6:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80045c8:	613b      	str	r3, [r7, #16]
      break;
 80045ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80045cc:	693b      	ldr	r3, [r7, #16]
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b006      	add	sp, #24
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	40021000 	.word	0x40021000
 80045dc:	007a1200 	.word	0x007a1200
 80045e0:	080095a8 	.word	0x080095a8
 80045e4:	080095b8 	.word	0x080095b8

080045e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0a8      	b.n	800474c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d109      	bne.n	8004616 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	2382      	movs	r3, #130	@ 0x82
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	429a      	cmp	r2, r3
 800460c:	d009      	beq.n	8004622 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	61da      	str	r2, [r3, #28]
 8004614:	e005      	b.n	8004622 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	225d      	movs	r2, #93	@ 0x5d
 800462c:	5c9b      	ldrb	r3, [r3, r2]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	225c      	movs	r2, #92	@ 0x5c
 8004638:	2100      	movs	r1, #0
 800463a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	0018      	movs	r0, r3
 8004640:	f7fe ff3a 	bl	80034b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	225d      	movs	r2, #93	@ 0x5d
 8004648:	2102      	movs	r1, #2
 800464a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2140      	movs	r1, #64	@ 0x40
 8004658:	438a      	bics	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	23e0      	movs	r3, #224	@ 0xe0
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	429a      	cmp	r2, r3
 8004666:	d902      	bls.n	800466e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	e002      	b.n	8004674 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800466e:	2380      	movs	r3, #128	@ 0x80
 8004670:	015b      	lsls	r3, r3, #5
 8004672:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	23f0      	movs	r3, #240	@ 0xf0
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	429a      	cmp	r2, r3
 800467e:	d008      	beq.n	8004692 <HAL_SPI_Init+0xaa>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	23e0      	movs	r3, #224	@ 0xe0
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	429a      	cmp	r2, r3
 800468a:	d002      	beq.n	8004692 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	2382      	movs	r3, #130	@ 0x82
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	401a      	ands	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6899      	ldr	r1, [r3, #8]
 80046a0:	2384      	movs	r3, #132	@ 0x84
 80046a2:	021b      	lsls	r3, r3, #8
 80046a4:	400b      	ands	r3, r1
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2102      	movs	r1, #2
 80046ae:	400b      	ands	r3, r1
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2101      	movs	r1, #1
 80046b8:	400b      	ands	r3, r1
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6999      	ldr	r1, [r3, #24]
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	400b      	ands	r3, r1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2138      	movs	r1, #56	@ 0x38
 80046ce:	400b      	ands	r3, r1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	2180      	movs	r1, #128	@ 0x80
 80046d8:	400b      	ands	r3, r1
 80046da:	431a      	orrs	r2, r3
 80046dc:	0011      	movs	r1, r2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046e2:	2380      	movs	r3, #128	@ 0x80
 80046e4:	019b      	lsls	r3, r3, #6
 80046e6:	401a      	ands	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	2204      	movs	r2, #4
 80046f8:	401a      	ands	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fe:	2110      	movs	r1, #16
 8004700:	400b      	ands	r3, r1
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004708:	2108      	movs	r1, #8
 800470a:	400b      	ands	r3, r1
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68d9      	ldr	r1, [r3, #12]
 8004712:	23f0      	movs	r3, #240	@ 0xf0
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	400b      	ands	r3, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	0011      	movs	r1, r2
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	015b      	lsls	r3, r3, #5
 8004722:	401a      	ands	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69da      	ldr	r2, [r3, #28]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4907      	ldr	r1, [pc, #28]	@ (8004754 <HAL_SPI_Init+0x16c>)
 8004738:	400a      	ands	r2, r1
 800473a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	225d      	movs	r2, #93	@ 0x5d
 8004746:	2101      	movs	r1, #1
 8004748:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800474a:	2300      	movs	r3, #0
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b004      	add	sp, #16
 8004752:	bd80      	pop	{r7, pc}
 8004754:	fffff7ff 	.word	0xfffff7ff

08004758 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	1dbb      	adds	r3, r7, #6
 8004766:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004768:	231f      	movs	r3, #31
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	225c      	movs	r2, #92	@ 0x5c
 8004774:	5c9b      	ldrb	r3, [r3, r2]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d101      	bne.n	800477e <HAL_SPI_Transmit+0x26>
 800477a:	2302      	movs	r3, #2
 800477c:	e147      	b.n	8004a0e <HAL_SPI_Transmit+0x2b6>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	225c      	movs	r2, #92	@ 0x5c
 8004782:	2101      	movs	r1, #1
 8004784:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004786:	f7ff f865 	bl	8003854 <HAL_GetTick>
 800478a:	0003      	movs	r3, r0
 800478c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800478e:	2316      	movs	r3, #22
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	1dba      	adds	r2, r7, #6
 8004794:	8812      	ldrh	r2, [r2, #0]
 8004796:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	225d      	movs	r2, #93	@ 0x5d
 800479c:	5c9b      	ldrb	r3, [r3, r2]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d004      	beq.n	80047ae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80047a4:	231f      	movs	r3, #31
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80047ac:	e128      	b.n	8004a00 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_SPI_Transmit+0x64>
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d104      	bne.n	80047c6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80047bc:	231f      	movs	r3, #31
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2201      	movs	r2, #1
 80047c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80047c4:	e11c      	b.n	8004a00 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	225d      	movs	r2, #93	@ 0x5d
 80047ca:	2103      	movs	r1, #3
 80047cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1dba      	adds	r2, r7, #6
 80047de:	8812      	ldrh	r2, [r2, #0]
 80047e0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1dba      	adds	r2, r7, #6
 80047e6:	8812      	ldrh	r2, [r2, #0]
 80047e8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2244      	movs	r2, #68	@ 0x44
 80047f4:	2100      	movs	r1, #0
 80047f6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2246      	movs	r2, #70	@ 0x46
 80047fc:	2100      	movs	r1, #0
 80047fe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	2380      	movs	r3, #128	@ 0x80
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	429a      	cmp	r2, r3
 8004816:	d110      	bne.n	800483a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2140      	movs	r1, #64	@ 0x40
 8004824:	438a      	bics	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2180      	movs	r1, #128	@ 0x80
 8004834:	01c9      	lsls	r1, r1, #7
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2240      	movs	r2, #64	@ 0x40
 8004842:	4013      	ands	r3, r2
 8004844:	2b40      	cmp	r3, #64	@ 0x40
 8004846:	d007      	beq.n	8004858 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2140      	movs	r1, #64	@ 0x40
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	23e0      	movs	r3, #224	@ 0xe0
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	429a      	cmp	r2, r3
 8004862:	d952      	bls.n	800490a <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d004      	beq.n	8004876 <HAL_SPI_Transmit+0x11e>
 800486c:	2316      	movs	r3, #22
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d143      	bne.n	80048fe <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	1c9a      	adds	r2, r3, #2
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800489a:	e030      	b.n	80048fe <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2202      	movs	r2, #2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d112      	bne.n	80048d0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ae:	881a      	ldrh	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	1c9a      	adds	r2, r3, #2
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048ce:	e016      	b.n	80048fe <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d0:	f7fe ffc0 	bl	8003854 <HAL_GetTick>
 80048d4:	0002      	movs	r2, r0
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d802      	bhi.n	80048e6 <HAL_SPI_Transmit+0x18e>
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	d102      	bne.n	80048ec <HAL_SPI_Transmit+0x194>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d108      	bne.n	80048fe <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80048ec:	231f      	movs	r3, #31
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	2203      	movs	r2, #3
 80048f2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	225d      	movs	r2, #93	@ 0x5d
 80048f8:	2101      	movs	r1, #1
 80048fa:	5499      	strb	r1, [r3, r2]
          goto error;
 80048fc:	e080      	b.n	8004a00 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1c9      	bne.n	800489c <HAL_SPI_Transmit+0x144>
 8004908:	e053      	b.n	80049b2 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_SPI_Transmit+0x1c4>
 8004912:	2316      	movs	r3, #22
 8004914:	18fb      	adds	r3, r7, r3
 8004916:	881b      	ldrh	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d145      	bne.n	80049a8 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	7812      	ldrb	r2, [r2, #0]
 8004928:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8004942:	e031      	b.n	80049a8 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2202      	movs	r2, #2
 800494c:	4013      	ands	r3, r2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d113      	bne.n	800497a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	330c      	adds	r3, #12
 800495c:	7812      	ldrb	r2, [r2, #0]
 800495e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004978:	e016      	b.n	80049a8 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497a:	f7fe ff6b 	bl	8003854 <HAL_GetTick>
 800497e:	0002      	movs	r2, r0
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	429a      	cmp	r2, r3
 8004988:	d802      	bhi.n	8004990 <HAL_SPI_Transmit+0x238>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	3301      	adds	r3, #1
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x23e>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d108      	bne.n	80049a8 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8004996:	231f      	movs	r3, #31
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	2203      	movs	r2, #3
 800499c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	225d      	movs	r2, #93	@ 0x5d
 80049a2:	2101      	movs	r1, #1
 80049a4:	5499      	strb	r1, [r3, r2]
          goto error;
 80049a6:	e02b      	b.n	8004a00 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1c8      	bne.n	8004944 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 f95d 	bl	8004c78 <SPI_EndRxTxTransaction>
 80049be:	1e03      	subs	r3, r0, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10a      	bne.n	80049e6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049d0:	2300      	movs	r3, #0
 80049d2:	613b      	str	r3, [r7, #16]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80049ee:	231f      	movs	r3, #31
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	2201      	movs	r2, #1
 80049f4:	701a      	strb	r2, [r3, #0]
 80049f6:	e003      	b.n	8004a00 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	225d      	movs	r2, #93	@ 0x5d
 80049fc:	2101      	movs	r1, #1
 80049fe:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	225c      	movs	r2, #92	@ 0x5c
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a08:	231f      	movs	r3, #31
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
}
 8004a0e:	0018      	movs	r0, r3
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b008      	add	sp, #32
 8004a14:	bd80      	pop	{r7, pc}
	...

08004a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	603b      	str	r3, [r7, #0]
 8004a24:	1dfb      	adds	r3, r7, #7
 8004a26:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a28:	f7fe ff14 	bl	8003854 <HAL_GetTick>
 8004a2c:	0002      	movs	r2, r0
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	1a9b      	subs	r3, r3, r2
 8004a32:	683a      	ldr	r2, [r7, #0]
 8004a34:	18d3      	adds	r3, r2, r3
 8004a36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a38:	f7fe ff0c 	bl	8003854 <HAL_GetTick>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a40:	4b3a      	ldr	r3, [pc, #232]	@ (8004b2c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	015b      	lsls	r3, r3, #5
 8004a46:	0d1b      	lsrs	r3, r3, #20
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	4353      	muls	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a4e:	e058      	b.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	d055      	beq.n	8004b02 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a56:	f7fe fefd 	bl	8003854 <HAL_GetTick>
 8004a5a:	0002      	movs	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d902      	bls.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d142      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	21e0      	movs	r1, #224	@ 0xe0
 8004a78:	438a      	bics	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	2382      	movs	r3, #130	@ 0x82
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d113      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	2380      	movs	r3, #128	@ 0x80
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d005      	beq.n	8004aa0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	2380      	movs	r3, #128	@ 0x80
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d107      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2140      	movs	r1, #64	@ 0x40
 8004aac:	438a      	bics	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	019b      	lsls	r3, r3, #6
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d110      	bne.n	8004ade <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	491a      	ldr	r1, [pc, #104]	@ (8004b30 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2180      	movs	r1, #128	@ 0x80
 8004ad8:	0189      	lsls	r1, r1, #6
 8004ada:	430a      	orrs	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	225d      	movs	r2, #93	@ 0x5d
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	225c      	movs	r2, #92	@ 0x5c
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e017      	b.n	8004b22 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	425a      	negs	r2, r3
 8004b12:	4153      	adcs	r3, r2
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	001a      	movs	r2, r3
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d197      	bne.n	8004a50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	0018      	movs	r0, r3
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b008      	add	sp, #32
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	20000034 	.word	0x20000034
 8004b30:	ffffdfff 	.word	0xffffdfff

08004b34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	@ 0x28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b42:	2317      	movs	r3, #23
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b4a:	f7fe fe83 	bl	8003854 <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	1a9b      	subs	r3, r3, r2
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	18d3      	adds	r3, r2, r3
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b5a:	f7fe fe7b 	bl	8003854 <HAL_GetTick>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	330c      	adds	r3, #12
 8004b68:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b6a:	4b41      	ldr	r3, [pc, #260]	@ (8004c70 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	0013      	movs	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	00da      	lsls	r2, r3, #3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	0d1b      	lsrs	r3, r3, #20
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7c:	4353      	muls	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b80:	e068      	b.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	23c0      	movs	r3, #192	@ 0xc0
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d10a      	bne.n	8004ba2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	2117      	movs	r1, #23
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	d055      	beq.n	8004c54 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ba8:	f7fe fe54 	bl	8003854 <HAL_GetTick>
 8004bac:	0002      	movs	r2, r0
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d902      	bls.n	8004bbe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d142      	bne.n	8004c44 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	21e0      	movs	r1, #224	@ 0xe0
 8004bca:	438a      	bics	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	2382      	movs	r3, #130	@ 0x82
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d113      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xce>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d005      	beq.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d107      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2140      	movs	r1, #64	@ 0x40
 8004bfe:	438a      	bics	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	019b      	lsls	r3, r3, #6
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d110      	bne.n	8004c30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4916      	ldr	r1, [pc, #88]	@ (8004c74 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2180      	movs	r1, #128	@ 0x80
 8004c2a:	0189      	lsls	r1, r1, #6
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	225d      	movs	r2, #93	@ 0x5d
 8004c34:	2101      	movs	r1, #1
 8004c36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	225c      	movs	r2, #92	@ 0x5c
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e010      	b.n	8004c66 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d18e      	bne.n	8004b82 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	0018      	movs	r0, r3
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	b00a      	add	sp, #40	@ 0x28
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	20000034 	.word	0x20000034
 8004c74:	ffffdfff 	.word	0xffffdfff

08004c78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	23c0      	movs	r3, #192	@ 0xc0
 8004c88:	0159      	lsls	r1, r3, #5
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	0013      	movs	r3, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	f7ff ff4e 	bl	8004b34 <SPI_WaitFifoStateUntilTimeout>
 8004c98:	1e03      	subs	r3, r0, #0
 8004c9a:	d007      	beq.n	8004cac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e027      	b.n	8004cfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	0013      	movs	r3, r2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2180      	movs	r1, #128	@ 0x80
 8004cba:	f7ff fead 	bl	8004a18 <SPI_WaitFlagStateUntilTimeout>
 8004cbe:	1e03      	subs	r3, r0, #0
 8004cc0:	d007      	beq.n	8004cd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e014      	b.n	8004cfc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	23c0      	movs	r3, #192	@ 0xc0
 8004cd6:	00d9      	lsls	r1, r3, #3
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	0013      	movs	r3, r2
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f7ff ff27 	bl	8004b34 <SPI_WaitFifoStateUntilTimeout>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d007      	beq.n	8004cfa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cee:	2220      	movs	r2, #32
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e000      	b.n	8004cfc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b004      	add	sp, #16
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e042      	b.n	8004d9c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	223d      	movs	r2, #61	@ 0x3d
 8004d1a:	5c9b      	ldrb	r3, [r3, r2]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	223c      	movs	r2, #60	@ 0x3c
 8004d26:	2100      	movs	r1, #0
 8004d28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f7fe fc0f 	bl	8003550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	223d      	movs	r2, #61	@ 0x3d
 8004d36:	2102      	movs	r1, #2
 8004d38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3304      	adds	r3, #4
 8004d42:	0019      	movs	r1, r3
 8004d44:	0010      	movs	r0, r2
 8004d46:	f000 f901 	bl	8004f4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2246      	movs	r2, #70	@ 0x46
 8004d4e:	2101      	movs	r1, #1
 8004d50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	223e      	movs	r2, #62	@ 0x3e
 8004d56:	2101      	movs	r1, #1
 8004d58:	5499      	strb	r1, [r3, r2]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	223f      	movs	r2, #63	@ 0x3f
 8004d5e:	2101      	movs	r1, #1
 8004d60:	5499      	strb	r1, [r3, r2]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2240      	movs	r2, #64	@ 0x40
 8004d66:	2101      	movs	r1, #1
 8004d68:	5499      	strb	r1, [r3, r2]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2241      	movs	r2, #65	@ 0x41
 8004d6e:	2101      	movs	r1, #1
 8004d70:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2242      	movs	r2, #66	@ 0x42
 8004d76:	2101      	movs	r1, #1
 8004d78:	5499      	strb	r1, [r3, r2]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2243      	movs	r2, #67	@ 0x43
 8004d7e:	2101      	movs	r1, #1
 8004d80:	5499      	strb	r1, [r3, r2]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2244      	movs	r2, #68	@ 0x44
 8004d86:	2101      	movs	r1, #1
 8004d88:	5499      	strb	r1, [r3, r2]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2245      	movs	r2, #69	@ 0x45
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	223d      	movs	r2, #61	@ 0x3d
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	0018      	movs	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	b002      	add	sp, #8
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	230f      	movs	r3, #15
 8004db0:	18fb      	adds	r3, r7, r3
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	223c      	movs	r2, #60	@ 0x3c
 8004dba:	5c9b      	ldrb	r3, [r3, r2]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_TIM_ConfigClockSource+0x20>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e0bc      	b.n	8004f3e <HAL_TIM_ConfigClockSource+0x19a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	223c      	movs	r2, #60	@ 0x3c
 8004dc8:	2101      	movs	r1, #1
 8004dca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	223d      	movs	r2, #61	@ 0x3d
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2277      	movs	r2, #119	@ 0x77
 8004de0:	4393      	bics	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4a58      	ldr	r2, [pc, #352]	@ (8004f48 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2280      	movs	r2, #128	@ 0x80
 8004dfa:	0192      	lsls	r2, r2, #6
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d040      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xde>
 8004e00:	2280      	movs	r2, #128	@ 0x80
 8004e02:	0192      	lsls	r2, r2, #6
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d900      	bls.n	8004e0a <HAL_TIM_ConfigClockSource+0x66>
 8004e08:	e088      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e0a:	2280      	movs	r2, #128	@ 0x80
 8004e0c:	0152      	lsls	r2, r2, #5
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d100      	bne.n	8004e14 <HAL_TIM_ConfigClockSource+0x70>
 8004e12:	e088      	b.n	8004f26 <HAL_TIM_ConfigClockSource+0x182>
 8004e14:	2280      	movs	r2, #128	@ 0x80
 8004e16:	0152      	lsls	r2, r2, #5
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d900      	bls.n	8004e1e <HAL_TIM_ConfigClockSource+0x7a>
 8004e1c:	e07e      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e1e:	2b70      	cmp	r3, #112	@ 0x70
 8004e20:	d018      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xb0>
 8004e22:	d900      	bls.n	8004e26 <HAL_TIM_ConfigClockSource+0x82>
 8004e24:	e07a      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e26:	2b60      	cmp	r3, #96	@ 0x60
 8004e28:	d04f      	beq.n	8004eca <HAL_TIM_ConfigClockSource+0x126>
 8004e2a:	d900      	bls.n	8004e2e <HAL_TIM_ConfigClockSource+0x8a>
 8004e2c:	e076      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e2e:	2b50      	cmp	r3, #80	@ 0x50
 8004e30:	d03b      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x106>
 8004e32:	d900      	bls.n	8004e36 <HAL_TIM_ConfigClockSource+0x92>
 8004e34:	e072      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e36:	2b40      	cmp	r3, #64	@ 0x40
 8004e38:	d057      	beq.n	8004eea <HAL_TIM_ConfigClockSource+0x146>
 8004e3a:	d900      	bls.n	8004e3e <HAL_TIM_ConfigClockSource+0x9a>
 8004e3c:	e06e      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e3e:	2b30      	cmp	r3, #48	@ 0x30
 8004e40:	d063      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x166>
 8004e42:	d86b      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d060      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x166>
 8004e48:	d868      	bhi.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d05d      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x166>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d05b      	beq.n	8004f0a <HAL_TIM_ConfigClockSource+0x166>
 8004e52:	e063      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e64:	f000 f970 	bl	8005148 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2277      	movs	r2, #119	@ 0x77
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e052      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e92:	f000 f959 	bl	8005148 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2180      	movs	r1, #128	@ 0x80
 8004ea2:	01c9      	lsls	r1, r1, #7
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	609a      	str	r2, [r3, #8]
      break;
 8004ea8:	e03e      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	001a      	movs	r2, r3
 8004eb8:	f000 f8cc 	bl	8005054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2150      	movs	r1, #80	@ 0x50
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 f926 	bl	8005114 <TIM_ITRx_SetConfig>
      break;
 8004ec8:	e02e      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	f000 f8ea 	bl	80050b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2160      	movs	r1, #96	@ 0x60
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	f000 f916 	bl	8005114 <TIM_ITRx_SetConfig>
      break;
 8004ee8:	e01e      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	f000 f8ac 	bl	8005054 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2140      	movs	r1, #64	@ 0x40
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 f906 	bl	8005114 <TIM_ITRx_SetConfig>
      break;
 8004f08:	e00e      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	0019      	movs	r1, r3
 8004f14:	0010      	movs	r0, r2
 8004f16:	f000 f8fd 	bl	8005114 <TIM_ITRx_SetConfig>
      break;
 8004f1a:	e005      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f1c:	230f      	movs	r3, #15
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2201      	movs	r2, #1
 8004f22:	701a      	strb	r2, [r3, #0]
      break;
 8004f24:	e000      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f26:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	223d      	movs	r2, #61	@ 0x3d
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223c      	movs	r2, #60	@ 0x3c
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]

  return status;
 8004f38:	230f      	movs	r3, #15
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	781b      	ldrb	r3, [r3, #0]
}
 8004f3e:	0018      	movs	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b004      	add	sp, #16
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	ffff00ff 	.word	0xffff00ff

08004f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a36      	ldr	r2, [pc, #216]	@ (8005038 <TIM_Base_SetConfig+0xec>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0x20>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a35      	ldr	r2, [pc, #212]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2270      	movs	r2, #112	@ 0x70
 8004f70:	4393      	bics	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2d      	ldr	r2, [pc, #180]	@ (8005038 <TIM_Base_SetConfig+0xec>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	@ (800503c <TIM_Base_SetConfig+0xf0>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00f      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	@ (8005040 <TIM_Base_SetConfig+0xf4>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	@ (8005044 <TIM_Base_SetConfig+0xf8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <TIM_Base_SetConfig+0xfc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	@ (800504c <TIM_Base_SetConfig+0x100>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	@ (8005050 <TIM_Base_SetConfig+0x104>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2280      	movs	r2, #128	@ 0x80
 8004fc4:	4393      	bics	r3, r2
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a13      	ldr	r2, [pc, #76]	@ (8005038 <TIM_Base_SetConfig+0xec>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0xba>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a14      	ldr	r2, [pc, #80]	@ (8005044 <TIM_Base_SetConfig+0xf8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0xba>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a13      	ldr	r2, [pc, #76]	@ (8005048 <TIM_Base_SetConfig+0xfc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0xba>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a12      	ldr	r2, [pc, #72]	@ (800504c <TIM_Base_SetConfig+0x100>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d103      	bne.n	800500e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2201      	movs	r2, #1
 800501a:	4013      	ands	r3, r2
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2201      	movs	r2, #1
 8005026:	4393      	bics	r3, r2
 8005028:	001a      	movs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	611a      	str	r2, [r3, #16]
  }
}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	46bd      	mov	sp, r7
 8005032:	b004      	add	sp, #16
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	40012c00 	.word	0x40012c00
 800503c:	40000400 	.word	0x40000400
 8005040:	40002000 	.word	0x40002000
 8005044:	40014000 	.word	0x40014000
 8005048:	40014400 	.word	0x40014400
 800504c:	40014800 	.word	0x40014800
 8005050:	fffffcff 	.word	0xfffffcff

08005054 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	2201      	movs	r2, #1
 800506c:	4393      	bics	r3, r2
 800506e:	001a      	movs	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	22f0      	movs	r2, #240	@ 0xf0
 800507e:	4393      	bics	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	220a      	movs	r2, #10
 8005090:	4393      	bics	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	621a      	str	r2, [r3, #32]
}
 80050a8:	46c0      	nop			@ (mov r8, r8)
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b006      	add	sp, #24
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	2210      	movs	r2, #16
 80050c8:	4393      	bics	r3, r2
 80050ca:	001a      	movs	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005110 <TIM_TI2_ConfigInputStage+0x60>)
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	22a0      	movs	r2, #160	@ 0xa0
 80050ec:	4393      	bics	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b006      	add	sp, #24
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	ffff0fff 	.word	0xffff0fff

08005114 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2270      	movs	r2, #112	@ 0x70
 8005128:	4393      	bics	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	2207      	movs	r2, #7
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	609a      	str	r2, [r3, #8]
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b004      	add	sp, #16
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b086      	sub	sp, #24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	4a09      	ldr	r2, [pc, #36]	@ (8005184 <TIM_ETR_SetConfig+0x3c>)
 8005160:	4013      	ands	r3, r2
 8005162:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	021a      	lsls	r2, r3, #8
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	431a      	orrs	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	46c0      	nop			@ (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b006      	add	sp, #24
 8005182:	bd80      	pop	{r7, pc}
 8005184:	ffff00ff 	.word	0xffff00ff

08005188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	223c      	movs	r2, #60	@ 0x3c
 8005196:	5c9b      	ldrb	r3, [r3, r2]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800519c:	2302      	movs	r3, #2
 800519e:	e041      	b.n	8005224 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	223c      	movs	r2, #60	@ 0x3c
 80051a4:	2101      	movs	r1, #1
 80051a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	223d      	movs	r2, #61	@ 0x3d
 80051ac:	2102      	movs	r1, #2
 80051ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2270      	movs	r2, #112	@ 0x70
 80051c4:	4393      	bics	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a13      	ldr	r2, [pc, #76]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a10      	ldr	r2, [pc, #64]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10c      	bne.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2280      	movs	r2, #128	@ 0x80
 80051fc:	4393      	bics	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	4313      	orrs	r3, r2
 8005208:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	223d      	movs	r2, #61	@ 0x3d
 8005216:	2101      	movs	r1, #1
 8005218:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	223c      	movs	r2, #60	@ 0x3c
 800521e:	2100      	movs	r1, #0
 8005220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	b004      	add	sp, #16
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40012c00 	.word	0x40012c00
 8005230:	40000400 	.word	0x40000400
 8005234:	40014000 	.word	0x40014000

08005238 <__cvt>:
 8005238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800523a:	001f      	movs	r7, r3
 800523c:	2300      	movs	r3, #0
 800523e:	0016      	movs	r6, r2
 8005240:	b08b      	sub	sp, #44	@ 0x2c
 8005242:	429f      	cmp	r7, r3
 8005244:	da04      	bge.n	8005250 <__cvt+0x18>
 8005246:	2180      	movs	r1, #128	@ 0x80
 8005248:	0609      	lsls	r1, r1, #24
 800524a:	187b      	adds	r3, r7, r1
 800524c:	001f      	movs	r7, r3
 800524e:	232d      	movs	r3, #45	@ 0x2d
 8005250:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005252:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005254:	7013      	strb	r3, [r2, #0]
 8005256:	2320      	movs	r3, #32
 8005258:	2203      	movs	r2, #3
 800525a:	439d      	bics	r5, r3
 800525c:	2d46      	cmp	r5, #70	@ 0x46
 800525e:	d007      	beq.n	8005270 <__cvt+0x38>
 8005260:	002b      	movs	r3, r5
 8005262:	3b45      	subs	r3, #69	@ 0x45
 8005264:	4259      	negs	r1, r3
 8005266:	414b      	adcs	r3, r1
 8005268:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800526a:	3a01      	subs	r2, #1
 800526c:	18cb      	adds	r3, r1, r3
 800526e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005270:	ab09      	add	r3, sp, #36	@ 0x24
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	ab08      	add	r3, sp, #32
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800527a:	9200      	str	r2, [sp, #0]
 800527c:	9302      	str	r3, [sp, #8]
 800527e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005280:	0032      	movs	r2, r6
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	003b      	movs	r3, r7
 8005286:	f000 fe89 	bl	8005f9c <_dtoa_r>
 800528a:	0004      	movs	r4, r0
 800528c:	2d47      	cmp	r5, #71	@ 0x47
 800528e:	d11b      	bne.n	80052c8 <__cvt+0x90>
 8005290:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005292:	07db      	lsls	r3, r3, #31
 8005294:	d511      	bpl.n	80052ba <__cvt+0x82>
 8005296:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005298:	18c3      	adds	r3, r0, r3
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	2200      	movs	r2, #0
 800529e:	2300      	movs	r3, #0
 80052a0:	0030      	movs	r0, r6
 80052a2:	0039      	movs	r1, r7
 80052a4:	f7fb f8d2 	bl	800044c <__aeabi_dcmpeq>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d001      	beq.n	80052b0 <__cvt+0x78>
 80052ac:	9b07      	ldr	r3, [sp, #28]
 80052ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80052b0:	2230      	movs	r2, #48	@ 0x30
 80052b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b4:	9907      	ldr	r1, [sp, #28]
 80052b6:	428b      	cmp	r3, r1
 80052b8:	d320      	bcc.n	80052fc <__cvt+0xc4>
 80052ba:	0020      	movs	r0, r4
 80052bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052c0:	1b1b      	subs	r3, r3, r4
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	b00b      	add	sp, #44	@ 0x2c
 80052c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052ca:	18c3      	adds	r3, r0, r3
 80052cc:	9307      	str	r3, [sp, #28]
 80052ce:	2d46      	cmp	r5, #70	@ 0x46
 80052d0:	d1e4      	bne.n	800529c <__cvt+0x64>
 80052d2:	7803      	ldrb	r3, [r0, #0]
 80052d4:	2b30      	cmp	r3, #48	@ 0x30
 80052d6:	d10c      	bne.n	80052f2 <__cvt+0xba>
 80052d8:	2200      	movs	r2, #0
 80052da:	2300      	movs	r3, #0
 80052dc:	0030      	movs	r0, r6
 80052de:	0039      	movs	r1, r7
 80052e0:	f7fb f8b4 	bl	800044c <__aeabi_dcmpeq>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d104      	bne.n	80052f2 <__cvt+0xba>
 80052e8:	2301      	movs	r3, #1
 80052ea:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80052f4:	9a07      	ldr	r2, [sp, #28]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	18d3      	adds	r3, r2, r3
 80052fa:	e7ce      	b.n	800529a <__cvt+0x62>
 80052fc:	1c59      	adds	r1, r3, #1
 80052fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e7d6      	b.n	80052b2 <__cvt+0x7a>

08005304 <__exponent>:
 8005304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005306:	232b      	movs	r3, #43	@ 0x2b
 8005308:	0005      	movs	r5, r0
 800530a:	000c      	movs	r4, r1
 800530c:	b085      	sub	sp, #20
 800530e:	7002      	strb	r2, [r0, #0]
 8005310:	2900      	cmp	r1, #0
 8005312:	da01      	bge.n	8005318 <__exponent+0x14>
 8005314:	424c      	negs	r4, r1
 8005316:	3302      	adds	r3, #2
 8005318:	706b      	strb	r3, [r5, #1]
 800531a:	2c09      	cmp	r4, #9
 800531c:	dd2c      	ble.n	8005378 <__exponent+0x74>
 800531e:	ab02      	add	r3, sp, #8
 8005320:	1dde      	adds	r6, r3, #7
 8005322:	0020      	movs	r0, r4
 8005324:	210a      	movs	r1, #10
 8005326:	f7fb f87b 	bl	8000420 <__aeabi_idivmod>
 800532a:	0037      	movs	r7, r6
 800532c:	3130      	adds	r1, #48	@ 0x30
 800532e:	3e01      	subs	r6, #1
 8005330:	0020      	movs	r0, r4
 8005332:	7031      	strb	r1, [r6, #0]
 8005334:	210a      	movs	r1, #10
 8005336:	9401      	str	r4, [sp, #4]
 8005338:	f7fa ff8c 	bl	8000254 <__divsi3>
 800533c:	9b01      	ldr	r3, [sp, #4]
 800533e:	0004      	movs	r4, r0
 8005340:	2b63      	cmp	r3, #99	@ 0x63
 8005342:	dcee      	bgt.n	8005322 <__exponent+0x1e>
 8005344:	1eba      	subs	r2, r7, #2
 8005346:	1ca8      	adds	r0, r5, #2
 8005348:	0001      	movs	r1, r0
 800534a:	0013      	movs	r3, r2
 800534c:	3430      	adds	r4, #48	@ 0x30
 800534e:	7014      	strb	r4, [r2, #0]
 8005350:	ac02      	add	r4, sp, #8
 8005352:	3407      	adds	r4, #7
 8005354:	429c      	cmp	r4, r3
 8005356:	d80a      	bhi.n	800536e <__exponent+0x6a>
 8005358:	2300      	movs	r3, #0
 800535a:	42a2      	cmp	r2, r4
 800535c:	d803      	bhi.n	8005366 <__exponent+0x62>
 800535e:	3309      	adds	r3, #9
 8005360:	aa02      	add	r2, sp, #8
 8005362:	189b      	adds	r3, r3, r2
 8005364:	1bdb      	subs	r3, r3, r7
 8005366:	18c0      	adds	r0, r0, r3
 8005368:	1b40      	subs	r0, r0, r5
 800536a:	b005      	add	sp, #20
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536e:	781c      	ldrb	r4, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	700c      	strb	r4, [r1, #0]
 8005374:	3101      	adds	r1, #1
 8005376:	e7eb      	b.n	8005350 <__exponent+0x4c>
 8005378:	2330      	movs	r3, #48	@ 0x30
 800537a:	18e4      	adds	r4, r4, r3
 800537c:	70ab      	strb	r3, [r5, #2]
 800537e:	1d28      	adds	r0, r5, #4
 8005380:	70ec      	strb	r4, [r5, #3]
 8005382:	e7f1      	b.n	8005368 <__exponent+0x64>

08005384 <_printf_float>:
 8005384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005386:	b097      	sub	sp, #92	@ 0x5c
 8005388:	000d      	movs	r5, r1
 800538a:	920a      	str	r2, [sp, #40]	@ 0x28
 800538c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800538e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005390:	9009      	str	r0, [sp, #36]	@ 0x24
 8005392:	f000 fceb 	bl	8005d6c <_localeconv_r>
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	0018      	movs	r0, r3
 800539a:	930d      	str	r3, [sp, #52]	@ 0x34
 800539c:	f7fa feb4 	bl	8000108 <strlen>
 80053a0:	2300      	movs	r3, #0
 80053a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80053a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80053a6:	7e2b      	ldrb	r3, [r5, #24]
 80053a8:	2207      	movs	r2, #7
 80053aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80053b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	05c9      	lsls	r1, r1, #23
 80053b6:	d545      	bpl.n	8005444 <_printf_float+0xc0>
 80053b8:	189b      	adds	r3, r3, r2
 80053ba:	4393      	bics	r3, r2
 80053bc:	001a      	movs	r2, r3
 80053be:	3208      	adds	r2, #8
 80053c0:	6022      	str	r2, [r4, #0]
 80053c2:	2201      	movs	r2, #1
 80053c4:	681e      	ldr	r6, [r3, #0]
 80053c6:	685f      	ldr	r7, [r3, #4]
 80053c8:	007b      	lsls	r3, r7, #1
 80053ca:	085b      	lsrs	r3, r3, #1
 80053cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80053ce:	9610      	str	r6, [sp, #64]	@ 0x40
 80053d0:	64ae      	str	r6, [r5, #72]	@ 0x48
 80053d2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80053d4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80053d6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80053d8:	4ba7      	ldr	r3, [pc, #668]	@ (8005678 <_printf_float+0x2f4>)
 80053da:	4252      	negs	r2, r2
 80053dc:	f7fd f83c 	bl	8002458 <__aeabi_dcmpun>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d131      	bne.n	8005448 <_printf_float+0xc4>
 80053e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80053e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80053e8:	2201      	movs	r2, #1
 80053ea:	4ba3      	ldr	r3, [pc, #652]	@ (8005678 <_printf_float+0x2f4>)
 80053ec:	4252      	negs	r2, r2
 80053ee:	f7fb f83d 	bl	800046c <__aeabi_dcmple>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d128      	bne.n	8005448 <_printf_float+0xc4>
 80053f6:	2200      	movs	r2, #0
 80053f8:	2300      	movs	r3, #0
 80053fa:	0030      	movs	r0, r6
 80053fc:	0039      	movs	r1, r7
 80053fe:	f7fb f82b 	bl	8000458 <__aeabi_dcmplt>
 8005402:	2800      	cmp	r0, #0
 8005404:	d003      	beq.n	800540e <_printf_float+0x8a>
 8005406:	002b      	movs	r3, r5
 8005408:	222d      	movs	r2, #45	@ 0x2d
 800540a:	3343      	adds	r3, #67	@ 0x43
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005410:	4f9a      	ldr	r7, [pc, #616]	@ (800567c <_printf_float+0x2f8>)
 8005412:	2b47      	cmp	r3, #71	@ 0x47
 8005414:	d900      	bls.n	8005418 <_printf_float+0x94>
 8005416:	4f9a      	ldr	r7, [pc, #616]	@ (8005680 <_printf_float+0x2fc>)
 8005418:	2303      	movs	r3, #3
 800541a:	2400      	movs	r4, #0
 800541c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800541e:	612b      	str	r3, [r5, #16]
 8005420:	3301      	adds	r3, #1
 8005422:	439a      	bics	r2, r3
 8005424:	602a      	str	r2, [r5, #0]
 8005426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005428:	0029      	movs	r1, r5
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800542e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005430:	aa15      	add	r2, sp, #84	@ 0x54
 8005432:	f000 f9e5 	bl	8005800 <_printf_common>
 8005436:	3001      	adds	r0, #1
 8005438:	d000      	beq.n	800543c <_printf_float+0xb8>
 800543a:	e09f      	b.n	800557c <_printf_float+0x1f8>
 800543c:	2001      	movs	r0, #1
 800543e:	4240      	negs	r0, r0
 8005440:	b017      	add	sp, #92	@ 0x5c
 8005442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005444:	3307      	adds	r3, #7
 8005446:	e7b8      	b.n	80053ba <_printf_float+0x36>
 8005448:	0032      	movs	r2, r6
 800544a:	003b      	movs	r3, r7
 800544c:	0030      	movs	r0, r6
 800544e:	0039      	movs	r1, r7
 8005450:	f7fd f802 	bl	8002458 <__aeabi_dcmpun>
 8005454:	2800      	cmp	r0, #0
 8005456:	d00b      	beq.n	8005470 <_printf_float+0xec>
 8005458:	2f00      	cmp	r7, #0
 800545a:	da03      	bge.n	8005464 <_printf_float+0xe0>
 800545c:	002b      	movs	r3, r5
 800545e:	222d      	movs	r2, #45	@ 0x2d
 8005460:	3343      	adds	r3, #67	@ 0x43
 8005462:	701a      	strb	r2, [r3, #0]
 8005464:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005466:	4f87      	ldr	r7, [pc, #540]	@ (8005684 <_printf_float+0x300>)
 8005468:	2b47      	cmp	r3, #71	@ 0x47
 800546a:	d9d5      	bls.n	8005418 <_printf_float+0x94>
 800546c:	4f86      	ldr	r7, [pc, #536]	@ (8005688 <_printf_float+0x304>)
 800546e:	e7d3      	b.n	8005418 <_printf_float+0x94>
 8005470:	2220      	movs	r2, #32
 8005472:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005474:	686b      	ldr	r3, [r5, #4]
 8005476:	4394      	bics	r4, r2
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	d146      	bne.n	800550a <_printf_float+0x186>
 800547c:	3307      	adds	r3, #7
 800547e:	606b      	str	r3, [r5, #4]
 8005480:	2380      	movs	r3, #128	@ 0x80
 8005482:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4313      	orrs	r3, r2
 8005488:	2200      	movs	r2, #0
 800548a:	602b      	str	r3, [r5, #0]
 800548c:	9206      	str	r2, [sp, #24]
 800548e:	aa14      	add	r2, sp, #80	@ 0x50
 8005490:	9205      	str	r2, [sp, #20]
 8005492:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005494:	a90a      	add	r1, sp, #40	@ 0x28
 8005496:	9204      	str	r2, [sp, #16]
 8005498:	aa13      	add	r2, sp, #76	@ 0x4c
 800549a:	9203      	str	r2, [sp, #12]
 800549c:	2223      	movs	r2, #35	@ 0x23
 800549e:	1852      	adds	r2, r2, r1
 80054a0:	9202      	str	r2, [sp, #8]
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	686b      	ldr	r3, [r5, #4]
 80054a6:	0032      	movs	r2, r6
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054ac:	003b      	movs	r3, r7
 80054ae:	f7ff fec3 	bl	8005238 <__cvt>
 80054b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054b4:	0007      	movs	r7, r0
 80054b6:	2c47      	cmp	r4, #71	@ 0x47
 80054b8:	d12d      	bne.n	8005516 <_printf_float+0x192>
 80054ba:	1cd3      	adds	r3, r2, #3
 80054bc:	db02      	blt.n	80054c4 <_printf_float+0x140>
 80054be:	686b      	ldr	r3, [r5, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dd48      	ble.n	8005556 <_printf_float+0x1d2>
 80054c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054c6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80054c8:	3b02      	subs	r3, #2
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80054ce:	0028      	movs	r0, r5
 80054d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80054d2:	3901      	subs	r1, #1
 80054d4:	3050      	adds	r0, #80	@ 0x50
 80054d6:	9113      	str	r1, [sp, #76]	@ 0x4c
 80054d8:	f7ff ff14 	bl	8005304 <__exponent>
 80054dc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80054de:	0004      	movs	r4, r0
 80054e0:	1813      	adds	r3, r2, r0
 80054e2:	612b      	str	r3, [r5, #16]
 80054e4:	2a01      	cmp	r2, #1
 80054e6:	dc02      	bgt.n	80054ee <_printf_float+0x16a>
 80054e8:	682a      	ldr	r2, [r5, #0]
 80054ea:	07d2      	lsls	r2, r2, #31
 80054ec:	d501      	bpl.n	80054f2 <_printf_float+0x16e>
 80054ee:	3301      	adds	r3, #1
 80054f0:	612b      	str	r3, [r5, #16]
 80054f2:	2323      	movs	r3, #35	@ 0x23
 80054f4:	aa0a      	add	r2, sp, #40	@ 0x28
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d100      	bne.n	8005500 <_printf_float+0x17c>
 80054fe:	e792      	b.n	8005426 <_printf_float+0xa2>
 8005500:	002b      	movs	r3, r5
 8005502:	222d      	movs	r2, #45	@ 0x2d
 8005504:	3343      	adds	r3, #67	@ 0x43
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	e78d      	b.n	8005426 <_printf_float+0xa2>
 800550a:	2c47      	cmp	r4, #71	@ 0x47
 800550c:	d1b8      	bne.n	8005480 <_printf_float+0xfc>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1b6      	bne.n	8005480 <_printf_float+0xfc>
 8005512:	3301      	adds	r3, #1
 8005514:	e7b3      	b.n	800547e <_printf_float+0xfa>
 8005516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005518:	0011      	movs	r1, r2
 800551a:	2b65      	cmp	r3, #101	@ 0x65
 800551c:	d9d7      	bls.n	80054ce <_printf_float+0x14a>
 800551e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005520:	2b66      	cmp	r3, #102	@ 0x66
 8005522:	d11a      	bne.n	800555a <_printf_float+0x1d6>
 8005524:	686b      	ldr	r3, [r5, #4]
 8005526:	2a00      	cmp	r2, #0
 8005528:	dd09      	ble.n	800553e <_printf_float+0x1ba>
 800552a:	612a      	str	r2, [r5, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <_printf_float+0x1b2>
 8005530:	6829      	ldr	r1, [r5, #0]
 8005532:	07c9      	lsls	r1, r1, #31
 8005534:	d50b      	bpl.n	800554e <_printf_float+0x1ca>
 8005536:	3301      	adds	r3, #1
 8005538:	189b      	adds	r3, r3, r2
 800553a:	612b      	str	r3, [r5, #16]
 800553c:	e007      	b.n	800554e <_printf_float+0x1ca>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d103      	bne.n	800554a <_printf_float+0x1c6>
 8005542:	2201      	movs	r2, #1
 8005544:	6829      	ldr	r1, [r5, #0]
 8005546:	4211      	tst	r1, r2
 8005548:	d000      	beq.n	800554c <_printf_float+0x1c8>
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	612a      	str	r2, [r5, #16]
 800554e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005550:	2400      	movs	r4, #0
 8005552:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005554:	e7cd      	b.n	80054f2 <_printf_float+0x16e>
 8005556:	2367      	movs	r3, #103	@ 0x67
 8005558:	930c      	str	r3, [sp, #48]	@ 0x30
 800555a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800555c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800555e:	4299      	cmp	r1, r3
 8005560:	db06      	blt.n	8005570 <_printf_float+0x1ec>
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	6129      	str	r1, [r5, #16]
 8005566:	07db      	lsls	r3, r3, #31
 8005568:	d5f1      	bpl.n	800554e <_printf_float+0x1ca>
 800556a:	3101      	adds	r1, #1
 800556c:	6129      	str	r1, [r5, #16]
 800556e:	e7ee      	b.n	800554e <_printf_float+0x1ca>
 8005570:	2201      	movs	r2, #1
 8005572:	2900      	cmp	r1, #0
 8005574:	dce0      	bgt.n	8005538 <_printf_float+0x1b4>
 8005576:	1892      	adds	r2, r2, r2
 8005578:	1a52      	subs	r2, r2, r1
 800557a:	e7dd      	b.n	8005538 <_printf_float+0x1b4>
 800557c:	682a      	ldr	r2, [r5, #0]
 800557e:	0553      	lsls	r3, r2, #21
 8005580:	d408      	bmi.n	8005594 <_printf_float+0x210>
 8005582:	692b      	ldr	r3, [r5, #16]
 8005584:	003a      	movs	r2, r7
 8005586:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005588:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800558a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800558c:	47a0      	blx	r4
 800558e:	3001      	adds	r0, #1
 8005590:	d129      	bne.n	80055e6 <_printf_float+0x262>
 8005592:	e753      	b.n	800543c <_printf_float+0xb8>
 8005594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005596:	2b65      	cmp	r3, #101	@ 0x65
 8005598:	d800      	bhi.n	800559c <_printf_float+0x218>
 800559a:	e0da      	b.n	8005752 <_printf_float+0x3ce>
 800559c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800559e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80055a0:	2200      	movs	r2, #0
 80055a2:	2300      	movs	r3, #0
 80055a4:	f7fa ff52 	bl	800044c <__aeabi_dcmpeq>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d033      	beq.n	8005614 <_printf_float+0x290>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4a37      	ldr	r2, [pc, #220]	@ (800568c <_printf_float+0x308>)
 80055b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055b4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80055b6:	47a0      	blx	r4
 80055b8:	3001      	adds	r0, #1
 80055ba:	d100      	bne.n	80055be <_printf_float+0x23a>
 80055bc:	e73e      	b.n	800543c <_printf_float+0xb8>
 80055be:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80055c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055c2:	42b3      	cmp	r3, r6
 80055c4:	db02      	blt.n	80055cc <_printf_float+0x248>
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	07db      	lsls	r3, r3, #31
 80055ca:	d50c      	bpl.n	80055e6 <_printf_float+0x262>
 80055cc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80055ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055d6:	47a0      	blx	r4
 80055d8:	2400      	movs	r4, #0
 80055da:	3001      	adds	r0, #1
 80055dc:	d100      	bne.n	80055e0 <_printf_float+0x25c>
 80055de:	e72d      	b.n	800543c <_printf_float+0xb8>
 80055e0:	1e73      	subs	r3, r6, #1
 80055e2:	42a3      	cmp	r3, r4
 80055e4:	dc0a      	bgt.n	80055fc <_printf_float+0x278>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d500      	bpl.n	80055ee <_printf_float+0x26a>
 80055ec:	e105      	b.n	80057fa <_printf_float+0x476>
 80055ee:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80055f0:	68e8      	ldr	r0, [r5, #12]
 80055f2:	4298      	cmp	r0, r3
 80055f4:	db00      	blt.n	80055f8 <_printf_float+0x274>
 80055f6:	e723      	b.n	8005440 <_printf_float+0xbc>
 80055f8:	0018      	movs	r0, r3
 80055fa:	e721      	b.n	8005440 <_printf_float+0xbc>
 80055fc:	002a      	movs	r2, r5
 80055fe:	2301      	movs	r3, #1
 8005600:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005604:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005606:	321a      	adds	r2, #26
 8005608:	47b8      	blx	r7
 800560a:	3001      	adds	r0, #1
 800560c:	d100      	bne.n	8005610 <_printf_float+0x28c>
 800560e:	e715      	b.n	800543c <_printf_float+0xb8>
 8005610:	3401      	adds	r4, #1
 8005612:	e7e5      	b.n	80055e0 <_printf_float+0x25c>
 8005614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005616:	2b00      	cmp	r3, #0
 8005618:	dc3a      	bgt.n	8005690 <_printf_float+0x30c>
 800561a:	2301      	movs	r3, #1
 800561c:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <_printf_float+0x308>)
 800561e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005620:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005622:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005624:	47a0      	blx	r4
 8005626:	3001      	adds	r0, #1
 8005628:	d100      	bne.n	800562c <_printf_float+0x2a8>
 800562a:	e707      	b.n	800543c <_printf_float+0xb8>
 800562c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800562e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005630:	4333      	orrs	r3, r6
 8005632:	d102      	bne.n	800563a <_printf_float+0x2b6>
 8005634:	682b      	ldr	r3, [r5, #0]
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d5d5      	bpl.n	80055e6 <_printf_float+0x262>
 800563a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800563c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800563e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005640:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005642:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005644:	47a0      	blx	r4
 8005646:	2300      	movs	r3, #0
 8005648:	3001      	adds	r0, #1
 800564a:	d100      	bne.n	800564e <_printf_float+0x2ca>
 800564c:	e6f6      	b.n	800543c <_printf_float+0xb8>
 800564e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005650:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005652:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005654:	425b      	negs	r3, r3
 8005656:	4293      	cmp	r3, r2
 8005658:	dc01      	bgt.n	800565e <_printf_float+0x2da>
 800565a:	0033      	movs	r3, r6
 800565c:	e792      	b.n	8005584 <_printf_float+0x200>
 800565e:	002a      	movs	r2, r5
 8005660:	2301      	movs	r3, #1
 8005662:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005664:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005666:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005668:	321a      	adds	r2, #26
 800566a:	47a0      	blx	r4
 800566c:	3001      	adds	r0, #1
 800566e:	d100      	bne.n	8005672 <_printf_float+0x2ee>
 8005670:	e6e4      	b.n	800543c <_printf_float+0xb8>
 8005672:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005674:	3301      	adds	r3, #1
 8005676:	e7ea      	b.n	800564e <_printf_float+0x2ca>
 8005678:	7fefffff 	.word	0x7fefffff
 800567c:	080095c8 	.word	0x080095c8
 8005680:	080095cc 	.word	0x080095cc
 8005684:	080095d0 	.word	0x080095d0
 8005688:	080095d4 	.word	0x080095d4
 800568c:	080095d8 	.word	0x080095d8
 8005690:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005692:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005694:	930c      	str	r3, [sp, #48]	@ 0x30
 8005696:	429e      	cmp	r6, r3
 8005698:	dd00      	ble.n	800569c <_printf_float+0x318>
 800569a:	001e      	movs	r6, r3
 800569c:	2e00      	cmp	r6, #0
 800569e:	dc31      	bgt.n	8005704 <_printf_float+0x380>
 80056a0:	43f3      	mvns	r3, r6
 80056a2:	2400      	movs	r4, #0
 80056a4:	17db      	asrs	r3, r3, #31
 80056a6:	4033      	ands	r3, r6
 80056a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80056aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80056ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056ae:	1af3      	subs	r3, r6, r3
 80056b0:	42a3      	cmp	r3, r4
 80056b2:	dc30      	bgt.n	8005716 <_printf_float+0x392>
 80056b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056b6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056b8:	429a      	cmp	r2, r3
 80056ba:	dc38      	bgt.n	800572e <_printf_float+0x3aa>
 80056bc:	682b      	ldr	r3, [r5, #0]
 80056be:	07db      	lsls	r3, r3, #31
 80056c0:	d435      	bmi.n	800572e <_printf_float+0x3aa>
 80056c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80056c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056c8:	1b9b      	subs	r3, r3, r6
 80056ca:	1b14      	subs	r4, r2, r4
 80056cc:	429c      	cmp	r4, r3
 80056ce:	dd00      	ble.n	80056d2 <_printf_float+0x34e>
 80056d0:	001c      	movs	r4, r3
 80056d2:	2c00      	cmp	r4, #0
 80056d4:	dc34      	bgt.n	8005740 <_printf_float+0x3bc>
 80056d6:	43e3      	mvns	r3, r4
 80056d8:	2600      	movs	r6, #0
 80056da:	17db      	asrs	r3, r3, #31
 80056dc:	401c      	ands	r4, r3
 80056de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	1b1b      	subs	r3, r3, r4
 80056e6:	42b3      	cmp	r3, r6
 80056e8:	dc00      	bgt.n	80056ec <_printf_float+0x368>
 80056ea:	e77c      	b.n	80055e6 <_printf_float+0x262>
 80056ec:	002a      	movs	r2, r5
 80056ee:	2301      	movs	r3, #1
 80056f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056f4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80056f6:	321a      	adds	r2, #26
 80056f8:	47b8      	blx	r7
 80056fa:	3001      	adds	r0, #1
 80056fc:	d100      	bne.n	8005700 <_printf_float+0x37c>
 80056fe:	e69d      	b.n	800543c <_printf_float+0xb8>
 8005700:	3601      	adds	r6, #1
 8005702:	e7ec      	b.n	80056de <_printf_float+0x35a>
 8005704:	0033      	movs	r3, r6
 8005706:	003a      	movs	r2, r7
 8005708:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800570a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800570c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800570e:	47a0      	blx	r4
 8005710:	3001      	adds	r0, #1
 8005712:	d1c5      	bne.n	80056a0 <_printf_float+0x31c>
 8005714:	e692      	b.n	800543c <_printf_float+0xb8>
 8005716:	002a      	movs	r2, r5
 8005718:	2301      	movs	r3, #1
 800571a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800571c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800571e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005720:	321a      	adds	r2, #26
 8005722:	47b0      	blx	r6
 8005724:	3001      	adds	r0, #1
 8005726:	d100      	bne.n	800572a <_printf_float+0x3a6>
 8005728:	e688      	b.n	800543c <_printf_float+0xb8>
 800572a:	3401      	adds	r4, #1
 800572c:	e7bd      	b.n	80056aa <_printf_float+0x326>
 800572e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005730:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005732:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005734:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005736:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005738:	47a0      	blx	r4
 800573a:	3001      	adds	r0, #1
 800573c:	d1c1      	bne.n	80056c2 <_printf_float+0x33e>
 800573e:	e67d      	b.n	800543c <_printf_float+0xb8>
 8005740:	19ba      	adds	r2, r7, r6
 8005742:	0023      	movs	r3, r4
 8005744:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005748:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800574a:	47b0      	blx	r6
 800574c:	3001      	adds	r0, #1
 800574e:	d1c2      	bne.n	80056d6 <_printf_float+0x352>
 8005750:	e674      	b.n	800543c <_printf_float+0xb8>
 8005752:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005754:	930c      	str	r3, [sp, #48]	@ 0x30
 8005756:	2b01      	cmp	r3, #1
 8005758:	dc02      	bgt.n	8005760 <_printf_float+0x3dc>
 800575a:	2301      	movs	r3, #1
 800575c:	421a      	tst	r2, r3
 800575e:	d039      	beq.n	80057d4 <_printf_float+0x450>
 8005760:	2301      	movs	r3, #1
 8005762:	003a      	movs	r2, r7
 8005764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005768:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800576a:	47b0      	blx	r6
 800576c:	3001      	adds	r0, #1
 800576e:	d100      	bne.n	8005772 <_printf_float+0x3ee>
 8005770:	e664      	b.n	800543c <_printf_float+0xb8>
 8005772:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005774:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005776:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005778:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800577a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800577c:	47b0      	blx	r6
 800577e:	3001      	adds	r0, #1
 8005780:	d100      	bne.n	8005784 <_printf_float+0x400>
 8005782:	e65b      	b.n	800543c <_printf_float+0xb8>
 8005784:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005786:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800578a:	2200      	movs	r2, #0
 800578c:	3b01      	subs	r3, #1
 800578e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005790:	2300      	movs	r3, #0
 8005792:	f7fa fe5b 	bl	800044c <__aeabi_dcmpeq>
 8005796:	2800      	cmp	r0, #0
 8005798:	d11a      	bne.n	80057d0 <_printf_float+0x44c>
 800579a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800579c:	1c7a      	adds	r2, r7, #1
 800579e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057a0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057a2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80057a4:	47b0      	blx	r6
 80057a6:	3001      	adds	r0, #1
 80057a8:	d10e      	bne.n	80057c8 <_printf_float+0x444>
 80057aa:	e647      	b.n	800543c <_printf_float+0xb8>
 80057ac:	002a      	movs	r2, r5
 80057ae:	2301      	movs	r3, #1
 80057b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057b4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80057b6:	321a      	adds	r2, #26
 80057b8:	47b8      	blx	r7
 80057ba:	3001      	adds	r0, #1
 80057bc:	d100      	bne.n	80057c0 <_printf_float+0x43c>
 80057be:	e63d      	b.n	800543c <_printf_float+0xb8>
 80057c0:	3601      	adds	r6, #1
 80057c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057c4:	429e      	cmp	r6, r3
 80057c6:	dbf1      	blt.n	80057ac <_printf_float+0x428>
 80057c8:	002a      	movs	r2, r5
 80057ca:	0023      	movs	r3, r4
 80057cc:	3250      	adds	r2, #80	@ 0x50
 80057ce:	e6da      	b.n	8005586 <_printf_float+0x202>
 80057d0:	2600      	movs	r6, #0
 80057d2:	e7f6      	b.n	80057c2 <_printf_float+0x43e>
 80057d4:	003a      	movs	r2, r7
 80057d6:	e7e2      	b.n	800579e <_printf_float+0x41a>
 80057d8:	002a      	movs	r2, r5
 80057da:	2301      	movs	r3, #1
 80057dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057e0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80057e2:	3219      	adds	r2, #25
 80057e4:	47b0      	blx	r6
 80057e6:	3001      	adds	r0, #1
 80057e8:	d100      	bne.n	80057ec <_printf_float+0x468>
 80057ea:	e627      	b.n	800543c <_printf_float+0xb8>
 80057ec:	3401      	adds	r4, #1
 80057ee:	68eb      	ldr	r3, [r5, #12]
 80057f0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80057f2:	1a9b      	subs	r3, r3, r2
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	dcef      	bgt.n	80057d8 <_printf_float+0x454>
 80057f8:	e6f9      	b.n	80055ee <_printf_float+0x26a>
 80057fa:	2400      	movs	r4, #0
 80057fc:	e7f7      	b.n	80057ee <_printf_float+0x46a>
 80057fe:	46c0      	nop			@ (mov r8, r8)

08005800 <_printf_common>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	0016      	movs	r6, r2
 8005804:	9301      	str	r3, [sp, #4]
 8005806:	688a      	ldr	r2, [r1, #8]
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	000c      	movs	r4, r1
 800580c:	9000      	str	r0, [sp, #0]
 800580e:	4293      	cmp	r3, r2
 8005810:	da00      	bge.n	8005814 <_printf_common+0x14>
 8005812:	0013      	movs	r3, r2
 8005814:	0022      	movs	r2, r4
 8005816:	6033      	str	r3, [r6, #0]
 8005818:	3243      	adds	r2, #67	@ 0x43
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	2a00      	cmp	r2, #0
 800581e:	d001      	beq.n	8005824 <_printf_common+0x24>
 8005820:	3301      	adds	r3, #1
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	069b      	lsls	r3, r3, #26
 8005828:	d502      	bpl.n	8005830 <_printf_common+0x30>
 800582a:	6833      	ldr	r3, [r6, #0]
 800582c:	3302      	adds	r3, #2
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	2306      	movs	r3, #6
 8005834:	0015      	movs	r5, r2
 8005836:	401d      	ands	r5, r3
 8005838:	421a      	tst	r2, r3
 800583a:	d027      	beq.n	800588c <_printf_common+0x8c>
 800583c:	0023      	movs	r3, r4
 800583e:	3343      	adds	r3, #67	@ 0x43
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	4193      	sbcs	r3, r2
 8005846:	6822      	ldr	r2, [r4, #0]
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d430      	bmi.n	80058ae <_printf_common+0xae>
 800584c:	0022      	movs	r2, r4
 800584e:	9901      	ldr	r1, [sp, #4]
 8005850:	9800      	ldr	r0, [sp, #0]
 8005852:	9d08      	ldr	r5, [sp, #32]
 8005854:	3243      	adds	r2, #67	@ 0x43
 8005856:	47a8      	blx	r5
 8005858:	3001      	adds	r0, #1
 800585a:	d025      	beq.n	80058a8 <_printf_common+0xa8>
 800585c:	2206      	movs	r2, #6
 800585e:	6823      	ldr	r3, [r4, #0]
 8005860:	2500      	movs	r5, #0
 8005862:	4013      	ands	r3, r2
 8005864:	2b04      	cmp	r3, #4
 8005866:	d105      	bne.n	8005874 <_printf_common+0x74>
 8005868:	6833      	ldr	r3, [r6, #0]
 800586a:	68e5      	ldr	r5, [r4, #12]
 800586c:	1aed      	subs	r5, r5, r3
 800586e:	43eb      	mvns	r3, r5
 8005870:	17db      	asrs	r3, r3, #31
 8005872:	401d      	ands	r5, r3
 8005874:	68a3      	ldr	r3, [r4, #8]
 8005876:	6922      	ldr	r2, [r4, #16]
 8005878:	4293      	cmp	r3, r2
 800587a:	dd01      	ble.n	8005880 <_printf_common+0x80>
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	18ed      	adds	r5, r5, r3
 8005880:	2600      	movs	r6, #0
 8005882:	42b5      	cmp	r5, r6
 8005884:	d120      	bne.n	80058c8 <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e010      	b.n	80058ac <_printf_common+0xac>
 800588a:	3501      	adds	r5, #1
 800588c:	68e3      	ldr	r3, [r4, #12]
 800588e:	6832      	ldr	r2, [r6, #0]
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	42ab      	cmp	r3, r5
 8005894:	ddd2      	ble.n	800583c <_printf_common+0x3c>
 8005896:	0022      	movs	r2, r4
 8005898:	2301      	movs	r3, #1
 800589a:	9901      	ldr	r1, [sp, #4]
 800589c:	9800      	ldr	r0, [sp, #0]
 800589e:	9f08      	ldr	r7, [sp, #32]
 80058a0:	3219      	adds	r2, #25
 80058a2:	47b8      	blx	r7
 80058a4:	3001      	adds	r0, #1
 80058a6:	d1f0      	bne.n	800588a <_printf_common+0x8a>
 80058a8:	2001      	movs	r0, #1
 80058aa:	4240      	negs	r0, r0
 80058ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ae:	2030      	movs	r0, #48	@ 0x30
 80058b0:	18e1      	adds	r1, r4, r3
 80058b2:	3143      	adds	r1, #67	@ 0x43
 80058b4:	7008      	strb	r0, [r1, #0]
 80058b6:	0021      	movs	r1, r4
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	3145      	adds	r1, #69	@ 0x45
 80058bc:	7809      	ldrb	r1, [r1, #0]
 80058be:	18a2      	adds	r2, r4, r2
 80058c0:	3243      	adds	r2, #67	@ 0x43
 80058c2:	3302      	adds	r3, #2
 80058c4:	7011      	strb	r1, [r2, #0]
 80058c6:	e7c1      	b.n	800584c <_printf_common+0x4c>
 80058c8:	0022      	movs	r2, r4
 80058ca:	2301      	movs	r3, #1
 80058cc:	9901      	ldr	r1, [sp, #4]
 80058ce:	9800      	ldr	r0, [sp, #0]
 80058d0:	9f08      	ldr	r7, [sp, #32]
 80058d2:	321a      	adds	r2, #26
 80058d4:	47b8      	blx	r7
 80058d6:	3001      	adds	r0, #1
 80058d8:	d0e6      	beq.n	80058a8 <_printf_common+0xa8>
 80058da:	3601      	adds	r6, #1
 80058dc:	e7d1      	b.n	8005882 <_printf_common+0x82>
	...

080058e0 <_printf_i>:
 80058e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e2:	b08b      	sub	sp, #44	@ 0x2c
 80058e4:	9206      	str	r2, [sp, #24]
 80058e6:	000a      	movs	r2, r1
 80058e8:	3243      	adds	r2, #67	@ 0x43
 80058ea:	9307      	str	r3, [sp, #28]
 80058ec:	9005      	str	r0, [sp, #20]
 80058ee:	9203      	str	r2, [sp, #12]
 80058f0:	7e0a      	ldrb	r2, [r1, #24]
 80058f2:	000c      	movs	r4, r1
 80058f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80058f6:	2a78      	cmp	r2, #120	@ 0x78
 80058f8:	d809      	bhi.n	800590e <_printf_i+0x2e>
 80058fa:	2a62      	cmp	r2, #98	@ 0x62
 80058fc:	d80b      	bhi.n	8005916 <_printf_i+0x36>
 80058fe:	2a00      	cmp	r2, #0
 8005900:	d100      	bne.n	8005904 <_printf_i+0x24>
 8005902:	e0bc      	b.n	8005a7e <_printf_i+0x19e>
 8005904:	497b      	ldr	r1, [pc, #492]	@ (8005af4 <_printf_i+0x214>)
 8005906:	9104      	str	r1, [sp, #16]
 8005908:	2a58      	cmp	r2, #88	@ 0x58
 800590a:	d100      	bne.n	800590e <_printf_i+0x2e>
 800590c:	e090      	b.n	8005a30 <_printf_i+0x150>
 800590e:	0025      	movs	r5, r4
 8005910:	3542      	adds	r5, #66	@ 0x42
 8005912:	702a      	strb	r2, [r5, #0]
 8005914:	e022      	b.n	800595c <_printf_i+0x7c>
 8005916:	0010      	movs	r0, r2
 8005918:	3863      	subs	r0, #99	@ 0x63
 800591a:	2815      	cmp	r0, #21
 800591c:	d8f7      	bhi.n	800590e <_printf_i+0x2e>
 800591e:	f7fa fc05 	bl	800012c <__gnu_thumb1_case_shi>
 8005922:	0016      	.short	0x0016
 8005924:	fff6001f 	.word	0xfff6001f
 8005928:	fff6fff6 	.word	0xfff6fff6
 800592c:	001ffff6 	.word	0x001ffff6
 8005930:	fff6fff6 	.word	0xfff6fff6
 8005934:	fff6fff6 	.word	0xfff6fff6
 8005938:	003600a1 	.word	0x003600a1
 800593c:	fff60080 	.word	0xfff60080
 8005940:	00b2fff6 	.word	0x00b2fff6
 8005944:	0036fff6 	.word	0x0036fff6
 8005948:	fff6fff6 	.word	0xfff6fff6
 800594c:	0084      	.short	0x0084
 800594e:	0025      	movs	r5, r4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	3542      	adds	r5, #66	@ 0x42
 8005954:	1d11      	adds	r1, r2, #4
 8005956:	6019      	str	r1, [r3, #0]
 8005958:	6813      	ldr	r3, [r2, #0]
 800595a:	702b      	strb	r3, [r5, #0]
 800595c:	2301      	movs	r3, #1
 800595e:	e0a0      	b.n	8005aa2 <_printf_i+0x1c2>
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	6809      	ldr	r1, [r1, #0]
 8005964:	1d02      	adds	r2, r0, #4
 8005966:	060d      	lsls	r5, r1, #24
 8005968:	d50b      	bpl.n	8005982 <_printf_i+0xa2>
 800596a:	6806      	ldr	r6, [r0, #0]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	2e00      	cmp	r6, #0
 8005970:	da03      	bge.n	800597a <_printf_i+0x9a>
 8005972:	232d      	movs	r3, #45	@ 0x2d
 8005974:	9a03      	ldr	r2, [sp, #12]
 8005976:	4276      	negs	r6, r6
 8005978:	7013      	strb	r3, [r2, #0]
 800597a:	4b5e      	ldr	r3, [pc, #376]	@ (8005af4 <_printf_i+0x214>)
 800597c:	270a      	movs	r7, #10
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	e018      	b.n	80059b4 <_printf_i+0xd4>
 8005982:	6806      	ldr	r6, [r0, #0]
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	0649      	lsls	r1, r1, #25
 8005988:	d5f1      	bpl.n	800596e <_printf_i+0x8e>
 800598a:	b236      	sxth	r6, r6
 800598c:	e7ef      	b.n	800596e <_printf_i+0x8e>
 800598e:	6808      	ldr	r0, [r1, #0]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	c940      	ldmia	r1!, {r6}
 8005994:	0605      	lsls	r5, r0, #24
 8005996:	d402      	bmi.n	800599e <_printf_i+0xbe>
 8005998:	0640      	lsls	r0, r0, #25
 800599a:	d500      	bpl.n	800599e <_printf_i+0xbe>
 800599c:	b2b6      	uxth	r6, r6
 800599e:	6019      	str	r1, [r3, #0]
 80059a0:	4b54      	ldr	r3, [pc, #336]	@ (8005af4 <_printf_i+0x214>)
 80059a2:	270a      	movs	r7, #10
 80059a4:	9304      	str	r3, [sp, #16]
 80059a6:	2a6f      	cmp	r2, #111	@ 0x6f
 80059a8:	d100      	bne.n	80059ac <_printf_i+0xcc>
 80059aa:	3f02      	subs	r7, #2
 80059ac:	0023      	movs	r3, r4
 80059ae:	2200      	movs	r2, #0
 80059b0:	3343      	adds	r3, #67	@ 0x43
 80059b2:	701a      	strb	r2, [r3, #0]
 80059b4:	6863      	ldr	r3, [r4, #4]
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db03      	blt.n	80059c4 <_printf_i+0xe4>
 80059bc:	2104      	movs	r1, #4
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	438a      	bics	r2, r1
 80059c2:	6022      	str	r2, [r4, #0]
 80059c4:	2e00      	cmp	r6, #0
 80059c6:	d102      	bne.n	80059ce <_printf_i+0xee>
 80059c8:	9d03      	ldr	r5, [sp, #12]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <_printf_i+0x108>
 80059ce:	9d03      	ldr	r5, [sp, #12]
 80059d0:	0030      	movs	r0, r6
 80059d2:	0039      	movs	r1, r7
 80059d4:	f7fa fc3a 	bl	800024c <__aeabi_uidivmod>
 80059d8:	9b04      	ldr	r3, [sp, #16]
 80059da:	3d01      	subs	r5, #1
 80059dc:	5c5b      	ldrb	r3, [r3, r1]
 80059de:	702b      	strb	r3, [r5, #0]
 80059e0:	0033      	movs	r3, r6
 80059e2:	0006      	movs	r6, r0
 80059e4:	429f      	cmp	r7, r3
 80059e6:	d9f3      	bls.n	80059d0 <_printf_i+0xf0>
 80059e8:	2f08      	cmp	r7, #8
 80059ea:	d109      	bne.n	8005a00 <_printf_i+0x120>
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	07db      	lsls	r3, r3, #31
 80059f0:	d506      	bpl.n	8005a00 <_printf_i+0x120>
 80059f2:	6862      	ldr	r2, [r4, #4]
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	dc02      	bgt.n	8005a00 <_printf_i+0x120>
 80059fa:	2330      	movs	r3, #48	@ 0x30
 80059fc:	3d01      	subs	r5, #1
 80059fe:	702b      	strb	r3, [r5, #0]
 8005a00:	9b03      	ldr	r3, [sp, #12]
 8005a02:	1b5b      	subs	r3, r3, r5
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	9b07      	ldr	r3, [sp, #28]
 8005a08:	0021      	movs	r1, r4
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	9805      	ldr	r0, [sp, #20]
 8005a0e:	9b06      	ldr	r3, [sp, #24]
 8005a10:	aa09      	add	r2, sp, #36	@ 0x24
 8005a12:	f7ff fef5 	bl	8005800 <_printf_common>
 8005a16:	3001      	adds	r0, #1
 8005a18:	d148      	bne.n	8005aac <_printf_i+0x1cc>
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	4240      	negs	r0, r0
 8005a1e:	b00b      	add	sp, #44	@ 0x2c
 8005a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a22:	2220      	movs	r2, #32
 8005a24:	6809      	ldr	r1, [r1, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	6022      	str	r2, [r4, #0]
 8005a2a:	2278      	movs	r2, #120	@ 0x78
 8005a2c:	4932      	ldr	r1, [pc, #200]	@ (8005af8 <_printf_i+0x218>)
 8005a2e:	9104      	str	r1, [sp, #16]
 8005a30:	0021      	movs	r1, r4
 8005a32:	3145      	adds	r1, #69	@ 0x45
 8005a34:	700a      	strb	r2, [r1, #0]
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	c940      	ldmia	r1!, {r6}
 8005a3c:	0610      	lsls	r0, r2, #24
 8005a3e:	d402      	bmi.n	8005a46 <_printf_i+0x166>
 8005a40:	0650      	lsls	r0, r2, #25
 8005a42:	d500      	bpl.n	8005a46 <_printf_i+0x166>
 8005a44:	b2b6      	uxth	r6, r6
 8005a46:	6019      	str	r1, [r3, #0]
 8005a48:	07d3      	lsls	r3, r2, #31
 8005a4a:	d502      	bpl.n	8005a52 <_printf_i+0x172>
 8005a4c:	2320      	movs	r3, #32
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2e00      	cmp	r6, #0
 8005a54:	d001      	beq.n	8005a5a <_printf_i+0x17a>
 8005a56:	2710      	movs	r7, #16
 8005a58:	e7a8      	b.n	80059ac <_printf_i+0xcc>
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	4393      	bics	r3, r2
 8005a60:	6023      	str	r3, [r4, #0]
 8005a62:	e7f8      	b.n	8005a56 <_printf_i+0x176>
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	680d      	ldr	r5, [r1, #0]
 8005a68:	1d10      	adds	r0, r2, #4
 8005a6a:	6949      	ldr	r1, [r1, #20]
 8005a6c:	6018      	str	r0, [r3, #0]
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	062e      	lsls	r6, r5, #24
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0x198>
 8005a74:	6019      	str	r1, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <_printf_i+0x19e>
 8005a78:	066d      	lsls	r5, r5, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0x194>
 8005a7c:	8019      	strh	r1, [r3, #0]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9d03      	ldr	r5, [sp, #12]
 8005a82:	6123      	str	r3, [r4, #16]
 8005a84:	e7bf      	b.n	8005a06 <_printf_i+0x126>
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	1d11      	adds	r1, r2, #4
 8005a8a:	6019      	str	r1, [r3, #0]
 8005a8c:	6815      	ldr	r5, [r2, #0]
 8005a8e:	2100      	movs	r1, #0
 8005a90:	0028      	movs	r0, r5
 8005a92:	6862      	ldr	r2, [r4, #4]
 8005a94:	f000 f9e9 	bl	8005e6a <memchr>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	d001      	beq.n	8005aa0 <_printf_i+0x1c0>
 8005a9c:	1b40      	subs	r0, r0, r5
 8005a9e:	6060      	str	r0, [r4, #4]
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9a03      	ldr	r2, [sp, #12]
 8005aa8:	7013      	strb	r3, [r2, #0]
 8005aaa:	e7ac      	b.n	8005a06 <_printf_i+0x126>
 8005aac:	002a      	movs	r2, r5
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	9906      	ldr	r1, [sp, #24]
 8005ab2:	9805      	ldr	r0, [sp, #20]
 8005ab4:	9d07      	ldr	r5, [sp, #28]
 8005ab6:	47a8      	blx	r5
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d0ae      	beq.n	8005a1a <_printf_i+0x13a>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	079b      	lsls	r3, r3, #30
 8005ac0:	d415      	bmi.n	8005aee <_printf_i+0x20e>
 8005ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac4:	68e0      	ldr	r0, [r4, #12]
 8005ac6:	4298      	cmp	r0, r3
 8005ac8:	daa9      	bge.n	8005a1e <_printf_i+0x13e>
 8005aca:	0018      	movs	r0, r3
 8005acc:	e7a7      	b.n	8005a1e <_printf_i+0x13e>
 8005ace:	0022      	movs	r2, r4
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9906      	ldr	r1, [sp, #24]
 8005ad4:	9805      	ldr	r0, [sp, #20]
 8005ad6:	9e07      	ldr	r6, [sp, #28]
 8005ad8:	3219      	adds	r2, #25
 8005ada:	47b0      	blx	r6
 8005adc:	3001      	adds	r0, #1
 8005ade:	d09c      	beq.n	8005a1a <_printf_i+0x13a>
 8005ae0:	3501      	adds	r5, #1
 8005ae2:	68e3      	ldr	r3, [r4, #12]
 8005ae4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae6:	1a9b      	subs	r3, r3, r2
 8005ae8:	42ab      	cmp	r3, r5
 8005aea:	dcf0      	bgt.n	8005ace <_printf_i+0x1ee>
 8005aec:	e7e9      	b.n	8005ac2 <_printf_i+0x1e2>
 8005aee:	2500      	movs	r5, #0
 8005af0:	e7f7      	b.n	8005ae2 <_printf_i+0x202>
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	080095da 	.word	0x080095da
 8005af8:	080095eb 	.word	0x080095eb

08005afc <std>:
 8005afc:	2300      	movs	r3, #0
 8005afe:	b510      	push	{r4, lr}
 8005b00:	0004      	movs	r4, r0
 8005b02:	6003      	str	r3, [r0, #0]
 8005b04:	6043      	str	r3, [r0, #4]
 8005b06:	6083      	str	r3, [r0, #8]
 8005b08:	8181      	strh	r1, [r0, #12]
 8005b0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b0c:	81c2      	strh	r2, [r0, #14]
 8005b0e:	6103      	str	r3, [r0, #16]
 8005b10:	6143      	str	r3, [r0, #20]
 8005b12:	6183      	str	r3, [r0, #24]
 8005b14:	0019      	movs	r1, r3
 8005b16:	2208      	movs	r2, #8
 8005b18:	305c      	adds	r0, #92	@ 0x5c
 8005b1a:	f000 f91f 	bl	8005d5c <memset>
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b4c <std+0x50>)
 8005b20:	6224      	str	r4, [r4, #32]
 8005b22:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b24:	4b0a      	ldr	r3, [pc, #40]	@ (8005b50 <std+0x54>)
 8005b26:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b28:	4b0a      	ldr	r3, [pc, #40]	@ (8005b54 <std+0x58>)
 8005b2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b58 <std+0x5c>)
 8005b2e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <std+0x60>)
 8005b32:	429c      	cmp	r4, r3
 8005b34:	d005      	beq.n	8005b42 <std+0x46>
 8005b36:	4b0a      	ldr	r3, [pc, #40]	@ (8005b60 <std+0x64>)
 8005b38:	429c      	cmp	r4, r3
 8005b3a:	d002      	beq.n	8005b42 <std+0x46>
 8005b3c:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <std+0x68>)
 8005b3e:	429c      	cmp	r4, r3
 8005b40:	d103      	bne.n	8005b4a <std+0x4e>
 8005b42:	0020      	movs	r0, r4
 8005b44:	3058      	adds	r0, #88	@ 0x58
 8005b46:	f000 f98d 	bl	8005e64 <__retarget_lock_init_recursive>
 8005b4a:	bd10      	pop	{r4, pc}
 8005b4c:	08005cc5 	.word	0x08005cc5
 8005b50:	08005ced 	.word	0x08005ced
 8005b54:	08005d25 	.word	0x08005d25
 8005b58:	08005d51 	.word	0x08005d51
 8005b5c:	200006dc 	.word	0x200006dc
 8005b60:	20000744 	.word	0x20000744
 8005b64:	200007ac 	.word	0x200007ac

08005b68 <stdio_exit_handler>:
 8005b68:	b510      	push	{r4, lr}
 8005b6a:	4a03      	ldr	r2, [pc, #12]	@ (8005b78 <stdio_exit_handler+0x10>)
 8005b6c:	4903      	ldr	r1, [pc, #12]	@ (8005b7c <stdio_exit_handler+0x14>)
 8005b6e:	4804      	ldr	r0, [pc, #16]	@ (8005b80 <stdio_exit_handler+0x18>)
 8005b70:	f000 f86c 	bl	8005c4c <_fwalk_sglue>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	20000040 	.word	0x20000040
 8005b7c:	080078a1 	.word	0x080078a1
 8005b80:	20000050 	.word	0x20000050

08005b84 <cleanup_stdio>:
 8005b84:	6841      	ldr	r1, [r0, #4]
 8005b86:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb4 <cleanup_stdio+0x30>)
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	0004      	movs	r4, r0
 8005b8c:	4299      	cmp	r1, r3
 8005b8e:	d001      	beq.n	8005b94 <cleanup_stdio+0x10>
 8005b90:	f001 fe86 	bl	80078a0 <_fflush_r>
 8005b94:	68a1      	ldr	r1, [r4, #8]
 8005b96:	4b08      	ldr	r3, [pc, #32]	@ (8005bb8 <cleanup_stdio+0x34>)
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d002      	beq.n	8005ba2 <cleanup_stdio+0x1e>
 8005b9c:	0020      	movs	r0, r4
 8005b9e:	f001 fe7f 	bl	80078a0 <_fflush_r>
 8005ba2:	68e1      	ldr	r1, [r4, #12]
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <cleanup_stdio+0x38>)
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	d002      	beq.n	8005bb0 <cleanup_stdio+0x2c>
 8005baa:	0020      	movs	r0, r4
 8005bac:	f001 fe78 	bl	80078a0 <_fflush_r>
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	46c0      	nop			@ (mov r8, r8)
 8005bb4:	200006dc 	.word	0x200006dc
 8005bb8:	20000744 	.word	0x20000744
 8005bbc:	200007ac 	.word	0x200007ac

08005bc0 <global_stdio_init.part.0>:
 8005bc0:	b510      	push	{r4, lr}
 8005bc2:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <global_stdio_init.part.0+0x28>)
 8005bc4:	4a09      	ldr	r2, [pc, #36]	@ (8005bec <global_stdio_init.part.0+0x2c>)
 8005bc6:	2104      	movs	r1, #4
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	4809      	ldr	r0, [pc, #36]	@ (8005bf0 <global_stdio_init.part.0+0x30>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f7ff ff95 	bl	8005afc <std>
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2109      	movs	r1, #9
 8005bd6:	4807      	ldr	r0, [pc, #28]	@ (8005bf4 <global_stdio_init.part.0+0x34>)
 8005bd8:	f7ff ff90 	bl	8005afc <std>
 8005bdc:	2202      	movs	r2, #2
 8005bde:	2112      	movs	r1, #18
 8005be0:	4805      	ldr	r0, [pc, #20]	@ (8005bf8 <global_stdio_init.part.0+0x38>)
 8005be2:	f7ff ff8b 	bl	8005afc <std>
 8005be6:	bd10      	pop	{r4, pc}
 8005be8:	20000814 	.word	0x20000814
 8005bec:	08005b69 	.word	0x08005b69
 8005bf0:	200006dc 	.word	0x200006dc
 8005bf4:	20000744 	.word	0x20000744
 8005bf8:	200007ac 	.word	0x200007ac

08005bfc <__sfp_lock_acquire>:
 8005bfc:	b510      	push	{r4, lr}
 8005bfe:	4802      	ldr	r0, [pc, #8]	@ (8005c08 <__sfp_lock_acquire+0xc>)
 8005c00:	f000 f931 	bl	8005e66 <__retarget_lock_acquire_recursive>
 8005c04:	bd10      	pop	{r4, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	2000081d 	.word	0x2000081d

08005c0c <__sfp_lock_release>:
 8005c0c:	b510      	push	{r4, lr}
 8005c0e:	4802      	ldr	r0, [pc, #8]	@ (8005c18 <__sfp_lock_release+0xc>)
 8005c10:	f000 f92a 	bl	8005e68 <__retarget_lock_release_recursive>
 8005c14:	bd10      	pop	{r4, pc}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	2000081d 	.word	0x2000081d

08005c1c <__sinit>:
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	0004      	movs	r4, r0
 8005c20:	f7ff ffec 	bl	8005bfc <__sfp_lock_acquire>
 8005c24:	6a23      	ldr	r3, [r4, #32]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <__sinit+0x14>
 8005c2a:	f7ff ffef 	bl	8005c0c <__sfp_lock_release>
 8005c2e:	bd10      	pop	{r4, pc}
 8005c30:	4b04      	ldr	r3, [pc, #16]	@ (8005c44 <__sinit+0x28>)
 8005c32:	6223      	str	r3, [r4, #32]
 8005c34:	4b04      	ldr	r3, [pc, #16]	@ (8005c48 <__sinit+0x2c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f6      	bne.n	8005c2a <__sinit+0xe>
 8005c3c:	f7ff ffc0 	bl	8005bc0 <global_stdio_init.part.0>
 8005c40:	e7f3      	b.n	8005c2a <__sinit+0xe>
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	08005b85 	.word	0x08005b85
 8005c48:	20000814 	.word	0x20000814

08005c4c <_fwalk_sglue>:
 8005c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c4e:	0014      	movs	r4, r2
 8005c50:	2600      	movs	r6, #0
 8005c52:	9000      	str	r0, [sp, #0]
 8005c54:	9101      	str	r1, [sp, #4]
 8005c56:	68a5      	ldr	r5, [r4, #8]
 8005c58:	6867      	ldr	r7, [r4, #4]
 8005c5a:	3f01      	subs	r7, #1
 8005c5c:	d504      	bpl.n	8005c68 <_fwalk_sglue+0x1c>
 8005c5e:	6824      	ldr	r4, [r4, #0]
 8005c60:	2c00      	cmp	r4, #0
 8005c62:	d1f8      	bne.n	8005c56 <_fwalk_sglue+0xa>
 8005c64:	0030      	movs	r0, r6
 8005c66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c68:	89ab      	ldrh	r3, [r5, #12]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d908      	bls.n	8005c80 <_fwalk_sglue+0x34>
 8005c6e:	220e      	movs	r2, #14
 8005c70:	5eab      	ldrsh	r3, [r5, r2]
 8005c72:	3301      	adds	r3, #1
 8005c74:	d004      	beq.n	8005c80 <_fwalk_sglue+0x34>
 8005c76:	0029      	movs	r1, r5
 8005c78:	9800      	ldr	r0, [sp, #0]
 8005c7a:	9b01      	ldr	r3, [sp, #4]
 8005c7c:	4798      	blx	r3
 8005c7e:	4306      	orrs	r6, r0
 8005c80:	3568      	adds	r5, #104	@ 0x68
 8005c82:	e7ea      	b.n	8005c5a <_fwalk_sglue+0xe>

08005c84 <siprintf>:
 8005c84:	b40e      	push	{r1, r2, r3}
 8005c86:	b500      	push	{lr}
 8005c88:	490b      	ldr	r1, [pc, #44]	@ (8005cb8 <siprintf+0x34>)
 8005c8a:	b09c      	sub	sp, #112	@ 0x70
 8005c8c:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c8e:	9002      	str	r0, [sp, #8]
 8005c90:	9006      	str	r0, [sp, #24]
 8005c92:	9107      	str	r1, [sp, #28]
 8005c94:	9104      	str	r1, [sp, #16]
 8005c96:	4809      	ldr	r0, [pc, #36]	@ (8005cbc <siprintf+0x38>)
 8005c98:	4909      	ldr	r1, [pc, #36]	@ (8005cc0 <siprintf+0x3c>)
 8005c9a:	cb04      	ldmia	r3!, {r2}
 8005c9c:	9105      	str	r1, [sp, #20]
 8005c9e:	6800      	ldr	r0, [r0, #0]
 8005ca0:	a902      	add	r1, sp, #8
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	f001 fc78 	bl	8007598 <_svfiprintf_r>
 8005ca8:	2200      	movs	r2, #0
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	b01c      	add	sp, #112	@ 0x70
 8005cb0:	bc08      	pop	{r3}
 8005cb2:	b003      	add	sp, #12
 8005cb4:	4718      	bx	r3
 8005cb6:	46c0      	nop			@ (mov r8, r8)
 8005cb8:	7fffffff 	.word	0x7fffffff
 8005cbc:	2000004c 	.word	0x2000004c
 8005cc0:	ffff0208 	.word	0xffff0208

08005cc4 <__sread>:
 8005cc4:	b570      	push	{r4, r5, r6, lr}
 8005cc6:	000c      	movs	r4, r1
 8005cc8:	250e      	movs	r5, #14
 8005cca:	5f49      	ldrsh	r1, [r1, r5]
 8005ccc:	f000 f878 	bl	8005dc0 <_read_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	db03      	blt.n	8005cdc <__sread+0x18>
 8005cd4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005cd6:	181b      	adds	r3, r3, r0
 8005cd8:	6563      	str	r3, [r4, #84]	@ 0x54
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	4a02      	ldr	r2, [pc, #8]	@ (8005ce8 <__sread+0x24>)
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	e7f9      	b.n	8005cda <__sread+0x16>
 8005ce6:	46c0      	nop			@ (mov r8, r8)
 8005ce8:	ffffefff 	.word	0xffffefff

08005cec <__swrite>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	001f      	movs	r7, r3
 8005cf0:	898b      	ldrh	r3, [r1, #12]
 8005cf2:	0005      	movs	r5, r0
 8005cf4:	000c      	movs	r4, r1
 8005cf6:	0016      	movs	r6, r2
 8005cf8:	05db      	lsls	r3, r3, #23
 8005cfa:	d505      	bpl.n	8005d08 <__swrite+0x1c>
 8005cfc:	230e      	movs	r3, #14
 8005cfe:	5ec9      	ldrsh	r1, [r1, r3]
 8005d00:	2200      	movs	r2, #0
 8005d02:	2302      	movs	r3, #2
 8005d04:	f000 f848 	bl	8005d98 <_lseek_r>
 8005d08:	89a3      	ldrh	r3, [r4, #12]
 8005d0a:	4a05      	ldr	r2, [pc, #20]	@ (8005d20 <__swrite+0x34>)
 8005d0c:	0028      	movs	r0, r5
 8005d0e:	4013      	ands	r3, r2
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	0032      	movs	r2, r6
 8005d14:	230e      	movs	r3, #14
 8005d16:	5ee1      	ldrsh	r1, [r4, r3]
 8005d18:	003b      	movs	r3, r7
 8005d1a:	f000 f865 	bl	8005de8 <_write_r>
 8005d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d20:	ffffefff 	.word	0xffffefff

08005d24 <__sseek>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	000c      	movs	r4, r1
 8005d28:	250e      	movs	r5, #14
 8005d2a:	5f49      	ldrsh	r1, [r1, r5]
 8005d2c:	f000 f834 	bl	8005d98 <_lseek_r>
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	1c42      	adds	r2, r0, #1
 8005d34:	d103      	bne.n	8005d3e <__sseek+0x1a>
 8005d36:	4a05      	ldr	r2, [pc, #20]	@ (8005d4c <__sseek+0x28>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	81a3      	strh	r3, [r4, #12]
 8005d3c:	bd70      	pop	{r4, r5, r6, pc}
 8005d3e:	2280      	movs	r2, #128	@ 0x80
 8005d40:	0152      	lsls	r2, r2, #5
 8005d42:	4313      	orrs	r3, r2
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d48:	e7f8      	b.n	8005d3c <__sseek+0x18>
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	ffffefff 	.word	0xffffefff

08005d50 <__sclose>:
 8005d50:	b510      	push	{r4, lr}
 8005d52:	230e      	movs	r3, #14
 8005d54:	5ec9      	ldrsh	r1, [r1, r3]
 8005d56:	f000 f80d 	bl	8005d74 <_close_r>
 8005d5a:	bd10      	pop	{r4, pc}

08005d5c <memset>:
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	1882      	adds	r2, r0, r2
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	7019      	strb	r1, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <_localeconv_r>:
 8005d6c:	4800      	ldr	r0, [pc, #0]	@ (8005d70 <_localeconv_r+0x4>)
 8005d6e:	4770      	bx	lr
 8005d70:	2000018c 	.word	0x2000018c

08005d74 <_close_r>:
 8005d74:	2300      	movs	r3, #0
 8005d76:	b570      	push	{r4, r5, r6, lr}
 8005d78:	4d06      	ldr	r5, [pc, #24]	@ (8005d94 <_close_r+0x20>)
 8005d7a:	0004      	movs	r4, r0
 8005d7c:	0008      	movs	r0, r1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	f7fd fc7b 	bl	800367a <_close>
 8005d84:	1c43      	adds	r3, r0, #1
 8005d86:	d103      	bne.n	8005d90 <_close_r+0x1c>
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d000      	beq.n	8005d90 <_close_r+0x1c>
 8005d8e:	6023      	str	r3, [r4, #0]
 8005d90:	bd70      	pop	{r4, r5, r6, pc}
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	20000818 	.word	0x20000818

08005d98 <_lseek_r>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	0004      	movs	r4, r0
 8005d9c:	0008      	movs	r0, r1
 8005d9e:	0011      	movs	r1, r2
 8005da0:	001a      	movs	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	4d05      	ldr	r5, [pc, #20]	@ (8005dbc <_lseek_r+0x24>)
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fd fc88 	bl	80036bc <_lseek>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d103      	bne.n	8005db8 <_lseek_r+0x20>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d000      	beq.n	8005db8 <_lseek_r+0x20>
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	bd70      	pop	{r4, r5, r6, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	20000818 	.word	0x20000818

08005dc0 <_read_r>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	0004      	movs	r4, r0
 8005dc4:	0008      	movs	r0, r1
 8005dc6:	0011      	movs	r1, r2
 8005dc8:	001a      	movs	r2, r3
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4d05      	ldr	r5, [pc, #20]	@ (8005de4 <_read_r+0x24>)
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fd fc1a 	bl	8003608 <_read>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d103      	bne.n	8005de0 <_read_r+0x20>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d000      	beq.n	8005de0 <_read_r+0x20>
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	bd70      	pop	{r4, r5, r6, pc}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	20000818 	.word	0x20000818

08005de8 <_write_r>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	0004      	movs	r4, r0
 8005dec:	0008      	movs	r0, r1
 8005dee:	0011      	movs	r1, r2
 8005df0:	001a      	movs	r2, r3
 8005df2:	2300      	movs	r3, #0
 8005df4:	4d05      	ldr	r5, [pc, #20]	@ (8005e0c <_write_r+0x24>)
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fd fc23 	bl	8003642 <_write>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_write_r+0x20>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d000      	beq.n	8005e08 <_write_r+0x20>
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	46c0      	nop			@ (mov r8, r8)
 8005e0c:	20000818 	.word	0x20000818

08005e10 <__errno>:
 8005e10:	4b01      	ldr	r3, [pc, #4]	@ (8005e18 <__errno+0x8>)
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	4770      	bx	lr
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	2000004c 	.word	0x2000004c

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	2600      	movs	r6, #0
 8005e20:	4c0c      	ldr	r4, [pc, #48]	@ (8005e54 <__libc_init_array+0x38>)
 8005e22:	4d0d      	ldr	r5, [pc, #52]	@ (8005e58 <__libc_init_array+0x3c>)
 8005e24:	1b64      	subs	r4, r4, r5
 8005e26:	10a4      	asrs	r4, r4, #2
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	2600      	movs	r6, #0
 8005e2e:	f002 f907 	bl	8008040 <_init>
 8005e32:	4c0a      	ldr	r4, [pc, #40]	@ (8005e5c <__libc_init_array+0x40>)
 8005e34:	4d0a      	ldr	r5, [pc, #40]	@ (8005e60 <__libc_init_array+0x44>)
 8005e36:	1b64      	subs	r4, r4, r5
 8005e38:	10a4      	asrs	r4, r4, #2
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	00b3      	lsls	r3, r6, #2
 8005e42:	58eb      	ldr	r3, [r5, r3]
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	00b3      	lsls	r3, r6, #2
 8005e4c:	58eb      	ldr	r3, [r5, r3]
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08009938 	.word	0x08009938
 8005e58:	08009938 	.word	0x08009938
 8005e5c:	0800993c 	.word	0x0800993c
 8005e60:	08009938 	.word	0x08009938

08005e64 <__retarget_lock_init_recursive>:
 8005e64:	4770      	bx	lr

08005e66 <__retarget_lock_acquire_recursive>:
 8005e66:	4770      	bx	lr

08005e68 <__retarget_lock_release_recursive>:
 8005e68:	4770      	bx	lr

08005e6a <memchr>:
 8005e6a:	b2c9      	uxtb	r1, r1
 8005e6c:	1882      	adds	r2, r0, r2
 8005e6e:	4290      	cmp	r0, r2
 8005e70:	d101      	bne.n	8005e76 <memchr+0xc>
 8005e72:	2000      	movs	r0, #0
 8005e74:	4770      	bx	lr
 8005e76:	7803      	ldrb	r3, [r0, #0]
 8005e78:	428b      	cmp	r3, r1
 8005e7a:	d0fb      	beq.n	8005e74 <memchr+0xa>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	e7f6      	b.n	8005e6e <memchr+0x4>

08005e80 <quorem>:
 8005e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e82:	6902      	ldr	r2, [r0, #16]
 8005e84:	690f      	ldr	r7, [r1, #16]
 8005e86:	b087      	sub	sp, #28
 8005e88:	0006      	movs	r6, r0
 8005e8a:	000b      	movs	r3, r1
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	9102      	str	r1, [sp, #8]
 8005e90:	42ba      	cmp	r2, r7
 8005e92:	db6d      	blt.n	8005f70 <quorem+0xf0>
 8005e94:	3f01      	subs	r7, #1
 8005e96:	00bc      	lsls	r4, r7, #2
 8005e98:	3314      	adds	r3, #20
 8005e9a:	9305      	str	r3, [sp, #20]
 8005e9c:	191b      	adds	r3, r3, r4
 8005e9e:	9303      	str	r3, [sp, #12]
 8005ea0:	0033      	movs	r3, r6
 8005ea2:	3314      	adds	r3, #20
 8005ea4:	191c      	adds	r4, r3, r4
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	9304      	str	r3, [sp, #16]
 8005eac:	9b03      	ldr	r3, [sp, #12]
 8005eae:	9804      	ldr	r0, [sp, #16]
 8005eb0:	681d      	ldr	r5, [r3, #0]
 8005eb2:	3501      	adds	r5, #1
 8005eb4:	0029      	movs	r1, r5
 8005eb6:	f7fa f943 	bl	8000140 <__udivsi3>
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	9000      	str	r0, [sp, #0]
 8005ebe:	42ab      	cmp	r3, r5
 8005ec0:	d32b      	bcc.n	8005f1a <quorem+0x9a>
 8005ec2:	9b05      	ldr	r3, [sp, #20]
 8005ec4:	9d01      	ldr	r5, [sp, #4]
 8005ec6:	469c      	mov	ip, r3
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9305      	str	r3, [sp, #20]
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	4662      	mov	r2, ip
 8005ed0:	ca08      	ldmia	r2!, {r3}
 8005ed2:	6828      	ldr	r0, [r5, #0]
 8005ed4:	4694      	mov	ip, r2
 8005ed6:	9a00      	ldr	r2, [sp, #0]
 8005ed8:	b299      	uxth	r1, r3
 8005eda:	4351      	muls	r1, r2
 8005edc:	9a05      	ldr	r2, [sp, #20]
 8005ede:	0c1b      	lsrs	r3, r3, #16
 8005ee0:	1889      	adds	r1, r1, r2
 8005ee2:	9a00      	ldr	r2, [sp, #0]
 8005ee4:	4353      	muls	r3, r2
 8005ee6:	0c0a      	lsrs	r2, r1, #16
 8005ee8:	189b      	adds	r3, r3, r2
 8005eea:	0c1a      	lsrs	r2, r3, #16
 8005eec:	b289      	uxth	r1, r1
 8005eee:	9205      	str	r2, [sp, #20]
 8005ef0:	b282      	uxth	r2, r0
 8005ef2:	1a52      	subs	r2, r2, r1
 8005ef4:	9904      	ldr	r1, [sp, #16]
 8005ef6:	0c00      	lsrs	r0, r0, #16
 8005ef8:	1852      	adds	r2, r2, r1
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	1411      	asrs	r1, r2, #16
 8005efe:	1ac3      	subs	r3, r0, r3
 8005f00:	185b      	adds	r3, r3, r1
 8005f02:	1419      	asrs	r1, r3, #16
 8005f04:	b292      	uxth	r2, r2
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	9b03      	ldr	r3, [sp, #12]
 8005f0c:	9104      	str	r1, [sp, #16]
 8005f0e:	c504      	stmia	r5!, {r2}
 8005f10:	4563      	cmp	r3, ip
 8005f12:	d2dc      	bcs.n	8005ece <quorem+0x4e>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d030      	beq.n	8005f7c <quorem+0xfc>
 8005f1a:	0030      	movs	r0, r6
 8005f1c:	9902      	ldr	r1, [sp, #8]
 8005f1e:	f001 f9c5 	bl	80072ac <__mcmp>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	db23      	blt.n	8005f6e <quorem+0xee>
 8005f26:	0034      	movs	r4, r6
 8005f28:	2500      	movs	r5, #0
 8005f2a:	9902      	ldr	r1, [sp, #8]
 8005f2c:	3414      	adds	r4, #20
 8005f2e:	3114      	adds	r1, #20
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	c901      	ldmia	r1!, {r0}
 8005f34:	9302      	str	r3, [sp, #8]
 8005f36:	466b      	mov	r3, sp
 8005f38:	891b      	ldrh	r3, [r3, #8]
 8005f3a:	b282      	uxth	r2, r0
 8005f3c:	1a9a      	subs	r2, r3, r2
 8005f3e:	9b02      	ldr	r3, [sp, #8]
 8005f40:	1952      	adds	r2, r2, r5
 8005f42:	0c00      	lsrs	r0, r0, #16
 8005f44:	0c1b      	lsrs	r3, r3, #16
 8005f46:	1a1b      	subs	r3, r3, r0
 8005f48:	1410      	asrs	r0, r2, #16
 8005f4a:	181b      	adds	r3, r3, r0
 8005f4c:	141d      	asrs	r5, r3, #16
 8005f4e:	b292      	uxth	r2, r2
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	431a      	orrs	r2, r3
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	c404      	stmia	r4!, {r2}
 8005f58:	428b      	cmp	r3, r1
 8005f5a:	d2e9      	bcs.n	8005f30 <quorem+0xb0>
 8005f5c:	9a01      	ldr	r2, [sp, #4]
 8005f5e:	00bb      	lsls	r3, r7, #2
 8005f60:	18d3      	adds	r3, r2, r3
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d013      	beq.n	8005f90 <quorem+0x110>
 8005f68:	9b00      	ldr	r3, [sp, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	9800      	ldr	r0, [sp, #0]
 8005f70:	b007      	add	sp, #28
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <quorem+0x104>
 8005f7a:	3f01      	subs	r7, #1
 8005f7c:	9b01      	ldr	r3, [sp, #4]
 8005f7e:	3c04      	subs	r4, #4
 8005f80:	42a3      	cmp	r3, r4
 8005f82:	d3f7      	bcc.n	8005f74 <quorem+0xf4>
 8005f84:	6137      	str	r7, [r6, #16]
 8005f86:	e7c8      	b.n	8005f1a <quorem+0x9a>
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	2a00      	cmp	r2, #0
 8005f8c:	d104      	bne.n	8005f98 <quorem+0x118>
 8005f8e:	3f01      	subs	r7, #1
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	3b04      	subs	r3, #4
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d3f7      	bcc.n	8005f88 <quorem+0x108>
 8005f98:	6137      	str	r7, [r6, #16]
 8005f9a:	e7e5      	b.n	8005f68 <quorem+0xe8>

08005f9c <_dtoa_r>:
 8005f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f9e:	0014      	movs	r4, r2
 8005fa0:	001d      	movs	r5, r3
 8005fa2:	69c6      	ldr	r6, [r0, #28]
 8005fa4:	b09d      	sub	sp, #116	@ 0x74
 8005fa6:	940a      	str	r4, [sp, #40]	@ 0x28
 8005fa8:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005faa:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8005fac:	9003      	str	r0, [sp, #12]
 8005fae:	2e00      	cmp	r6, #0
 8005fb0:	d10f      	bne.n	8005fd2 <_dtoa_r+0x36>
 8005fb2:	2010      	movs	r0, #16
 8005fb4:	f000 fe30 	bl	8006c18 <malloc>
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	1e02      	subs	r2, r0, #0
 8005fbc:	61d8      	str	r0, [r3, #28]
 8005fbe:	d104      	bne.n	8005fca <_dtoa_r+0x2e>
 8005fc0:	21ef      	movs	r1, #239	@ 0xef
 8005fc2:	4bc7      	ldr	r3, [pc, #796]	@ (80062e0 <_dtoa_r+0x344>)
 8005fc4:	48c7      	ldr	r0, [pc, #796]	@ (80062e4 <_dtoa_r+0x348>)
 8005fc6:	f001 fcc5 	bl	8007954 <__assert_func>
 8005fca:	6046      	str	r6, [r0, #4]
 8005fcc:	6086      	str	r6, [r0, #8]
 8005fce:	6006      	str	r6, [r0, #0]
 8005fd0:	60c6      	str	r6, [r0, #12]
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	6819      	ldr	r1, [r3, #0]
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	d00b      	beq.n	8005ff4 <_dtoa_r+0x58>
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4093      	lsls	r3, r2
 8005fe2:	604a      	str	r2, [r1, #4]
 8005fe4:	608b      	str	r3, [r1, #8]
 8005fe6:	9803      	ldr	r0, [sp, #12]
 8005fe8:	f000 ff16 	bl	8006e18 <_Bfree>
 8005fec:	2200      	movs	r2, #0
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	2d00      	cmp	r5, #0
 8005ff6:	da1e      	bge.n	8006036 <_dtoa_r+0x9a>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	006b      	lsls	r3, r5, #1
 8005ffe:	085b      	lsrs	r3, r3, #1
 8006000:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006002:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006004:	4bb8      	ldr	r3, [pc, #736]	@ (80062e8 <_dtoa_r+0x34c>)
 8006006:	4ab8      	ldr	r2, [pc, #736]	@ (80062e8 <_dtoa_r+0x34c>)
 8006008:	403b      	ands	r3, r7
 800600a:	4293      	cmp	r3, r2
 800600c:	d116      	bne.n	800603c <_dtoa_r+0xa0>
 800600e:	4bb7      	ldr	r3, [pc, #732]	@ (80062ec <_dtoa_r+0x350>)
 8006010:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	033b      	lsls	r3, r7, #12
 8006016:	0b1b      	lsrs	r3, r3, #12
 8006018:	4323      	orrs	r3, r4
 800601a:	d101      	bne.n	8006020 <_dtoa_r+0x84>
 800601c:	f000 fd83 	bl	8006b26 <_dtoa_r+0xb8a>
 8006020:	4bb3      	ldr	r3, [pc, #716]	@ (80062f0 <_dtoa_r+0x354>)
 8006022:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006024:	9308      	str	r3, [sp, #32]
 8006026:	2a00      	cmp	r2, #0
 8006028:	d002      	beq.n	8006030 <_dtoa_r+0x94>
 800602a:	4bb2      	ldr	r3, [pc, #712]	@ (80062f4 <_dtoa_r+0x358>)
 800602c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	9808      	ldr	r0, [sp, #32]
 8006032:	b01d      	add	sp, #116	@ 0x74
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	2300      	movs	r3, #0
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	e7e2      	b.n	8006002 <_dtoa_r+0x66>
 800603c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800603e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006040:	9212      	str	r2, [sp, #72]	@ 0x48
 8006042:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006044:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006046:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006048:	2200      	movs	r2, #0
 800604a:	2300      	movs	r3, #0
 800604c:	f7fa f9fe 	bl	800044c <__aeabi_dcmpeq>
 8006050:	1e06      	subs	r6, r0, #0
 8006052:	d00b      	beq.n	800606c <_dtoa_r+0xd0>
 8006054:	2301      	movs	r3, #1
 8006056:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006058:	6013      	str	r3, [r2, #0]
 800605a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <_dtoa_r+0xca>
 8006060:	4ba5      	ldr	r3, [pc, #660]	@ (80062f8 <_dtoa_r+0x35c>)
 8006062:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	4ba5      	ldr	r3, [pc, #660]	@ (80062fc <_dtoa_r+0x360>)
 8006068:	9308      	str	r3, [sp, #32]
 800606a:	e7e1      	b.n	8006030 <_dtoa_r+0x94>
 800606c:	ab1a      	add	r3, sp, #104	@ 0x68
 800606e:	9301      	str	r3, [sp, #4]
 8006070:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	9803      	ldr	r0, [sp, #12]
 8006076:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006078:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800607a:	f001 f9cd 	bl	8007418 <__d2b>
 800607e:	007a      	lsls	r2, r7, #1
 8006080:	9005      	str	r0, [sp, #20]
 8006082:	0d52      	lsrs	r2, r2, #21
 8006084:	d100      	bne.n	8006088 <_dtoa_r+0xec>
 8006086:	e07b      	b.n	8006180 <_dtoa_r+0x1e4>
 8006088:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800608a:	9618      	str	r6, [sp, #96]	@ 0x60
 800608c:	0319      	lsls	r1, r3, #12
 800608e:	4b9c      	ldr	r3, [pc, #624]	@ (8006300 <_dtoa_r+0x364>)
 8006090:	0b09      	lsrs	r1, r1, #12
 8006092:	430b      	orrs	r3, r1
 8006094:	499b      	ldr	r1, [pc, #620]	@ (8006304 <_dtoa_r+0x368>)
 8006096:	1857      	adds	r7, r2, r1
 8006098:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800609a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800609c:	0019      	movs	r1, r3
 800609e:	2200      	movs	r2, #0
 80060a0:	4b99      	ldr	r3, [pc, #612]	@ (8006308 <_dtoa_r+0x36c>)
 80060a2:	f7fb fe3d 	bl	8001d20 <__aeabi_dsub>
 80060a6:	4a99      	ldr	r2, [pc, #612]	@ (800630c <_dtoa_r+0x370>)
 80060a8:	4b99      	ldr	r3, [pc, #612]	@ (8006310 <_dtoa_r+0x374>)
 80060aa:	f7fb fb71 	bl	8001790 <__aeabi_dmul>
 80060ae:	4a99      	ldr	r2, [pc, #612]	@ (8006314 <_dtoa_r+0x378>)
 80060b0:	4b99      	ldr	r3, [pc, #612]	@ (8006318 <_dtoa_r+0x37c>)
 80060b2:	f7fa fbc5 	bl	8000840 <__aeabi_dadd>
 80060b6:	0004      	movs	r4, r0
 80060b8:	0038      	movs	r0, r7
 80060ba:	000d      	movs	r5, r1
 80060bc:	f7fc fa2a 	bl	8002514 <__aeabi_i2d>
 80060c0:	4a96      	ldr	r2, [pc, #600]	@ (800631c <_dtoa_r+0x380>)
 80060c2:	4b97      	ldr	r3, [pc, #604]	@ (8006320 <_dtoa_r+0x384>)
 80060c4:	f7fb fb64 	bl	8001790 <__aeabi_dmul>
 80060c8:	0002      	movs	r2, r0
 80060ca:	000b      	movs	r3, r1
 80060cc:	0020      	movs	r0, r4
 80060ce:	0029      	movs	r1, r5
 80060d0:	f7fa fbb6 	bl	8000840 <__aeabi_dadd>
 80060d4:	0004      	movs	r4, r0
 80060d6:	000d      	movs	r5, r1
 80060d8:	f7fc f9e0 	bl	800249c <__aeabi_d2iz>
 80060dc:	2200      	movs	r2, #0
 80060de:	9004      	str	r0, [sp, #16]
 80060e0:	2300      	movs	r3, #0
 80060e2:	0020      	movs	r0, r4
 80060e4:	0029      	movs	r1, r5
 80060e6:	f7fa f9b7 	bl	8000458 <__aeabi_dcmplt>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d00b      	beq.n	8006106 <_dtoa_r+0x16a>
 80060ee:	9804      	ldr	r0, [sp, #16]
 80060f0:	f7fc fa10 	bl	8002514 <__aeabi_i2d>
 80060f4:	002b      	movs	r3, r5
 80060f6:	0022      	movs	r2, r4
 80060f8:	f7fa f9a8 	bl	800044c <__aeabi_dcmpeq>
 80060fc:	4243      	negs	r3, r0
 80060fe:	4158      	adcs	r0, r3
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	1a1b      	subs	r3, r3, r0
 8006104:	9304      	str	r3, [sp, #16]
 8006106:	2301      	movs	r3, #1
 8006108:	9315      	str	r3, [sp, #84]	@ 0x54
 800610a:	9b04      	ldr	r3, [sp, #16]
 800610c:	2b16      	cmp	r3, #22
 800610e:	d810      	bhi.n	8006132 <_dtoa_r+0x196>
 8006110:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006112:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006114:	9a04      	ldr	r2, [sp, #16]
 8006116:	4b83      	ldr	r3, [pc, #524]	@ (8006324 <_dtoa_r+0x388>)
 8006118:	00d2      	lsls	r2, r2, #3
 800611a:	189b      	adds	r3, r3, r2
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f7fa f99a 	bl	8000458 <__aeabi_dcmplt>
 8006124:	2800      	cmp	r0, #0
 8006126:	d047      	beq.n	80061b8 <_dtoa_r+0x21c>
 8006128:	9b04      	ldr	r3, [sp, #16]
 800612a:	3b01      	subs	r3, #1
 800612c:	9304      	str	r3, [sp, #16]
 800612e:	2300      	movs	r3, #0
 8006130:	9315      	str	r3, [sp, #84]	@ 0x54
 8006132:	2200      	movs	r2, #0
 8006134:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006136:	9206      	str	r2, [sp, #24]
 8006138:	1bdb      	subs	r3, r3, r7
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	d53e      	bpl.n	80061bc <_dtoa_r+0x220>
 800613e:	2201      	movs	r2, #1
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	9306      	str	r3, [sp, #24]
 8006144:	2300      	movs	r3, #0
 8006146:	930d      	str	r3, [sp, #52]	@ 0x34
 8006148:	9b04      	ldr	r3, [sp, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	db38      	blt.n	80061c0 <_dtoa_r+0x224>
 800614e:	9a04      	ldr	r2, [sp, #16]
 8006150:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006152:	4694      	mov	ip, r2
 8006154:	4463      	add	r3, ip
 8006156:	930d      	str	r3, [sp, #52]	@ 0x34
 8006158:	2300      	movs	r3, #0
 800615a:	9214      	str	r2, [sp, #80]	@ 0x50
 800615c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800615e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006160:	2401      	movs	r4, #1
 8006162:	2b09      	cmp	r3, #9
 8006164:	d867      	bhi.n	8006236 <_dtoa_r+0x29a>
 8006166:	2b05      	cmp	r3, #5
 8006168:	dd02      	ble.n	8006170 <_dtoa_r+0x1d4>
 800616a:	2400      	movs	r4, #0
 800616c:	3b04      	subs	r3, #4
 800616e:	9322      	str	r3, [sp, #136]	@ 0x88
 8006170:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006172:	1e98      	subs	r0, r3, #2
 8006174:	2803      	cmp	r0, #3
 8006176:	d867      	bhi.n	8006248 <_dtoa_r+0x2ac>
 8006178:	f7f9 ffce 	bl	8000118 <__gnu_thumb1_case_uqi>
 800617c:	5b383a2b 	.word	0x5b383a2b
 8006180:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006182:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006184:	18f6      	adds	r6, r6, r3
 8006186:	4b68      	ldr	r3, [pc, #416]	@ (8006328 <_dtoa_r+0x38c>)
 8006188:	18f2      	adds	r2, r6, r3
 800618a:	2a20      	cmp	r2, #32
 800618c:	dd0f      	ble.n	80061ae <_dtoa_r+0x212>
 800618e:	2340      	movs	r3, #64	@ 0x40
 8006190:	1a9b      	subs	r3, r3, r2
 8006192:	409f      	lsls	r7, r3
 8006194:	4b65      	ldr	r3, [pc, #404]	@ (800632c <_dtoa_r+0x390>)
 8006196:	0038      	movs	r0, r7
 8006198:	18f3      	adds	r3, r6, r3
 800619a:	40dc      	lsrs	r4, r3
 800619c:	4320      	orrs	r0, r4
 800619e:	f7fc f9e7 	bl	8002570 <__aeabi_ui2d>
 80061a2:	2201      	movs	r2, #1
 80061a4:	4b62      	ldr	r3, [pc, #392]	@ (8006330 <_dtoa_r+0x394>)
 80061a6:	1e77      	subs	r7, r6, #1
 80061a8:	18cb      	adds	r3, r1, r3
 80061aa:	9218      	str	r2, [sp, #96]	@ 0x60
 80061ac:	e776      	b.n	800609c <_dtoa_r+0x100>
 80061ae:	2320      	movs	r3, #32
 80061b0:	0020      	movs	r0, r4
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	4098      	lsls	r0, r3
 80061b6:	e7f2      	b.n	800619e <_dtoa_r+0x202>
 80061b8:	9015      	str	r0, [sp, #84]	@ 0x54
 80061ba:	e7ba      	b.n	8006132 <_dtoa_r+0x196>
 80061bc:	920d      	str	r2, [sp, #52]	@ 0x34
 80061be:	e7c3      	b.n	8006148 <_dtoa_r+0x1ac>
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	9a04      	ldr	r2, [sp, #16]
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	9306      	str	r3, [sp, #24]
 80061c8:	4253      	negs	r3, r2
 80061ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061cc:	2300      	movs	r3, #0
 80061ce:	9314      	str	r3, [sp, #80]	@ 0x50
 80061d0:	e7c5      	b.n	800615e <_dtoa_r+0x1c2>
 80061d2:	2300      	movs	r3, #0
 80061d4:	9310      	str	r3, [sp, #64]	@ 0x40
 80061d6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80061da:	9309      	str	r3, [sp, #36]	@ 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dc13      	bgt.n	8006208 <_dtoa_r+0x26c>
 80061e0:	2301      	movs	r3, #1
 80061e2:	001a      	movs	r2, r3
 80061e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80061e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e8:	9223      	str	r2, [sp, #140]	@ 0x8c
 80061ea:	e00d      	b.n	8006208 <_dtoa_r+0x26c>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e7f1      	b.n	80061d4 <_dtoa_r+0x238>
 80061f0:	2300      	movs	r3, #0
 80061f2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061f4:	9310      	str	r3, [sp, #64]	@ 0x40
 80061f6:	4694      	mov	ip, r2
 80061f8:	9b04      	ldr	r3, [sp, #16]
 80061fa:	4463      	add	r3, ip
 80061fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80061fe:	3301      	adds	r3, #1
 8006200:	9309      	str	r3, [sp, #36]	@ 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	dc00      	bgt.n	8006208 <_dtoa_r+0x26c>
 8006206:	2301      	movs	r3, #1
 8006208:	9a03      	ldr	r2, [sp, #12]
 800620a:	2100      	movs	r1, #0
 800620c:	69d0      	ldr	r0, [r2, #28]
 800620e:	2204      	movs	r2, #4
 8006210:	0015      	movs	r5, r2
 8006212:	3514      	adds	r5, #20
 8006214:	429d      	cmp	r5, r3
 8006216:	d91b      	bls.n	8006250 <_dtoa_r+0x2b4>
 8006218:	6041      	str	r1, [r0, #4]
 800621a:	9803      	ldr	r0, [sp, #12]
 800621c:	f000 fdb8 	bl	8006d90 <_Balloc>
 8006220:	9008      	str	r0, [sp, #32]
 8006222:	2800      	cmp	r0, #0
 8006224:	d117      	bne.n	8006256 <_dtoa_r+0x2ba>
 8006226:	21b0      	movs	r1, #176	@ 0xb0
 8006228:	4b42      	ldr	r3, [pc, #264]	@ (8006334 <_dtoa_r+0x398>)
 800622a:	482e      	ldr	r0, [pc, #184]	@ (80062e4 <_dtoa_r+0x348>)
 800622c:	9a08      	ldr	r2, [sp, #32]
 800622e:	31ff      	adds	r1, #255	@ 0xff
 8006230:	e6c9      	b.n	8005fc6 <_dtoa_r+0x2a>
 8006232:	2301      	movs	r3, #1
 8006234:	e7dd      	b.n	80061f2 <_dtoa_r+0x256>
 8006236:	2300      	movs	r3, #0
 8006238:	9410      	str	r4, [sp, #64]	@ 0x40
 800623a:	9322      	str	r3, [sp, #136]	@ 0x88
 800623c:	3b01      	subs	r3, #1
 800623e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006240:	9309      	str	r3, [sp, #36]	@ 0x24
 8006242:	2200      	movs	r2, #0
 8006244:	3313      	adds	r3, #19
 8006246:	e7cf      	b.n	80061e8 <_dtoa_r+0x24c>
 8006248:	2301      	movs	r3, #1
 800624a:	9310      	str	r3, [sp, #64]	@ 0x40
 800624c:	3b02      	subs	r3, #2
 800624e:	e7f6      	b.n	800623e <_dtoa_r+0x2a2>
 8006250:	3101      	adds	r1, #1
 8006252:	0052      	lsls	r2, r2, #1
 8006254:	e7dc      	b.n	8006210 <_dtoa_r+0x274>
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	9a08      	ldr	r2, [sp, #32]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006260:	2b0e      	cmp	r3, #14
 8006262:	d900      	bls.n	8006266 <_dtoa_r+0x2ca>
 8006264:	e0d9      	b.n	800641a <_dtoa_r+0x47e>
 8006266:	2c00      	cmp	r4, #0
 8006268:	d100      	bne.n	800626c <_dtoa_r+0x2d0>
 800626a:	e0d6      	b.n	800641a <_dtoa_r+0x47e>
 800626c:	9b04      	ldr	r3, [sp, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	dd64      	ble.n	800633c <_dtoa_r+0x3a0>
 8006272:	210f      	movs	r1, #15
 8006274:	9a04      	ldr	r2, [sp, #16]
 8006276:	4b2b      	ldr	r3, [pc, #172]	@ (8006324 <_dtoa_r+0x388>)
 8006278:	400a      	ands	r2, r1
 800627a:	00d2      	lsls	r2, r2, #3
 800627c:	189b      	adds	r3, r3, r2
 800627e:	681e      	ldr	r6, [r3, #0]
 8006280:	685f      	ldr	r7, [r3, #4]
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	2402      	movs	r4, #2
 8006286:	111d      	asrs	r5, r3, #4
 8006288:	05db      	lsls	r3, r3, #23
 800628a:	d50a      	bpl.n	80062a2 <_dtoa_r+0x306>
 800628c:	4b2a      	ldr	r3, [pc, #168]	@ (8006338 <_dtoa_r+0x39c>)
 800628e:	400d      	ands	r5, r1
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006296:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006298:	f7fa fe36 	bl	8000f08 <__aeabi_ddiv>
 800629c:	900a      	str	r0, [sp, #40]	@ 0x28
 800629e:	910b      	str	r1, [sp, #44]	@ 0x2c
 80062a0:	3401      	adds	r4, #1
 80062a2:	4b25      	ldr	r3, [pc, #148]	@ (8006338 <_dtoa_r+0x39c>)
 80062a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	d108      	bne.n	80062bc <_dtoa_r+0x320>
 80062aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062ae:	0032      	movs	r2, r6
 80062b0:	003b      	movs	r3, r7
 80062b2:	f7fa fe29 	bl	8000f08 <__aeabi_ddiv>
 80062b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80062b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80062ba:	e05a      	b.n	8006372 <_dtoa_r+0x3d6>
 80062bc:	2301      	movs	r3, #1
 80062be:	421d      	tst	r5, r3
 80062c0:	d009      	beq.n	80062d6 <_dtoa_r+0x33a>
 80062c2:	18e4      	adds	r4, r4, r3
 80062c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062c6:	0030      	movs	r0, r6
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	0039      	movs	r1, r7
 80062ce:	f7fb fa5f 	bl	8001790 <__aeabi_dmul>
 80062d2:	0006      	movs	r6, r0
 80062d4:	000f      	movs	r7, r1
 80062d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062d8:	106d      	asrs	r5, r5, #1
 80062da:	3308      	adds	r3, #8
 80062dc:	e7e2      	b.n	80062a4 <_dtoa_r+0x308>
 80062de:	46c0      	nop			@ (mov r8, r8)
 80062e0:	08009609 	.word	0x08009609
 80062e4:	08009620 	.word	0x08009620
 80062e8:	7ff00000 	.word	0x7ff00000
 80062ec:	0000270f 	.word	0x0000270f
 80062f0:	08009605 	.word	0x08009605
 80062f4:	08009608 	.word	0x08009608
 80062f8:	080095d9 	.word	0x080095d9
 80062fc:	080095d8 	.word	0x080095d8
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	fffffc01 	.word	0xfffffc01
 8006308:	3ff80000 	.word	0x3ff80000
 800630c:	636f4361 	.word	0x636f4361
 8006310:	3fd287a7 	.word	0x3fd287a7
 8006314:	8b60c8b3 	.word	0x8b60c8b3
 8006318:	3fc68a28 	.word	0x3fc68a28
 800631c:	509f79fb 	.word	0x509f79fb
 8006320:	3fd34413 	.word	0x3fd34413
 8006324:	08009718 	.word	0x08009718
 8006328:	00000432 	.word	0x00000432
 800632c:	00000412 	.word	0x00000412
 8006330:	fe100000 	.word	0xfe100000
 8006334:	08009678 	.word	0x08009678
 8006338:	080096f0 	.word	0x080096f0
 800633c:	9b04      	ldr	r3, [sp, #16]
 800633e:	2402      	movs	r4, #2
 8006340:	2b00      	cmp	r3, #0
 8006342:	d016      	beq.n	8006372 <_dtoa_r+0x3d6>
 8006344:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006346:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006348:	220f      	movs	r2, #15
 800634a:	425d      	negs	r5, r3
 800634c:	402a      	ands	r2, r5
 800634e:	4bd7      	ldr	r3, [pc, #860]	@ (80066ac <_dtoa_r+0x710>)
 8006350:	00d2      	lsls	r2, r2, #3
 8006352:	189b      	adds	r3, r3, r2
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f7fb fa1a 	bl	8001790 <__aeabi_dmul>
 800635c:	2701      	movs	r7, #1
 800635e:	2300      	movs	r3, #0
 8006360:	900a      	str	r0, [sp, #40]	@ 0x28
 8006362:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006364:	4ed2      	ldr	r6, [pc, #840]	@ (80066b0 <_dtoa_r+0x714>)
 8006366:	112d      	asrs	r5, r5, #4
 8006368:	2d00      	cmp	r5, #0
 800636a:	d000      	beq.n	800636e <_dtoa_r+0x3d2>
 800636c:	e0ba      	b.n	80064e4 <_dtoa_r+0x548>
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1a1      	bne.n	80062b6 <_dtoa_r+0x31a>
 8006372:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006374:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006376:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006378:	2b00      	cmp	r3, #0
 800637a:	d100      	bne.n	800637e <_dtoa_r+0x3e2>
 800637c:	e0bd      	b.n	80064fa <_dtoa_r+0x55e>
 800637e:	2200      	movs	r2, #0
 8006380:	0030      	movs	r0, r6
 8006382:	0039      	movs	r1, r7
 8006384:	4bcb      	ldr	r3, [pc, #812]	@ (80066b4 <_dtoa_r+0x718>)
 8006386:	f7fa f867 	bl	8000458 <__aeabi_dcmplt>
 800638a:	2800      	cmp	r0, #0
 800638c:	d100      	bne.n	8006390 <_dtoa_r+0x3f4>
 800638e:	e0b4      	b.n	80064fa <_dtoa_r+0x55e>
 8006390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006392:	2b00      	cmp	r3, #0
 8006394:	d100      	bne.n	8006398 <_dtoa_r+0x3fc>
 8006396:	e0b0      	b.n	80064fa <_dtoa_r+0x55e>
 8006398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800639a:	2b00      	cmp	r3, #0
 800639c:	dd39      	ble.n	8006412 <_dtoa_r+0x476>
 800639e:	9b04      	ldr	r3, [sp, #16]
 80063a0:	2200      	movs	r2, #0
 80063a2:	3b01      	subs	r3, #1
 80063a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80063a6:	0030      	movs	r0, r6
 80063a8:	4bc3      	ldr	r3, [pc, #780]	@ (80066b8 <_dtoa_r+0x71c>)
 80063aa:	0039      	movs	r1, r7
 80063ac:	f7fb f9f0 	bl	8001790 <__aeabi_dmul>
 80063b0:	900a      	str	r0, [sp, #40]	@ 0x28
 80063b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b6:	3401      	adds	r4, #1
 80063b8:	0020      	movs	r0, r4
 80063ba:	9311      	str	r3, [sp, #68]	@ 0x44
 80063bc:	f7fc f8aa 	bl	8002514 <__aeabi_i2d>
 80063c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063c4:	f7fb f9e4 	bl	8001790 <__aeabi_dmul>
 80063c8:	4bbc      	ldr	r3, [pc, #752]	@ (80066bc <_dtoa_r+0x720>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	f7fa fa38 	bl	8000840 <__aeabi_dadd>
 80063d0:	4bbb      	ldr	r3, [pc, #748]	@ (80066c0 <_dtoa_r+0x724>)
 80063d2:	0006      	movs	r6, r0
 80063d4:	18cf      	adds	r7, r1, r3
 80063d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d000      	beq.n	80063de <_dtoa_r+0x442>
 80063dc:	e091      	b.n	8006502 <_dtoa_r+0x566>
 80063de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80063e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063e2:	2200      	movs	r2, #0
 80063e4:	4bb7      	ldr	r3, [pc, #732]	@ (80066c4 <_dtoa_r+0x728>)
 80063e6:	f7fb fc9b 	bl	8001d20 <__aeabi_dsub>
 80063ea:	0032      	movs	r2, r6
 80063ec:	003b      	movs	r3, r7
 80063ee:	0004      	movs	r4, r0
 80063f0:	000d      	movs	r5, r1
 80063f2:	f7fa f845 	bl	8000480 <__aeabi_dcmpgt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d000      	beq.n	80063fc <_dtoa_r+0x460>
 80063fa:	e29d      	b.n	8006938 <_dtoa_r+0x99c>
 80063fc:	2180      	movs	r1, #128	@ 0x80
 80063fe:	0609      	lsls	r1, r1, #24
 8006400:	187b      	adds	r3, r7, r1
 8006402:	0032      	movs	r2, r6
 8006404:	0020      	movs	r0, r4
 8006406:	0029      	movs	r1, r5
 8006408:	f7fa f826 	bl	8000458 <__aeabi_dcmplt>
 800640c:	2800      	cmp	r0, #0
 800640e:	d000      	beq.n	8006412 <_dtoa_r+0x476>
 8006410:	e130      	b.n	8006674 <_dtoa_r+0x6d8>
 8006412:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006414:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006416:	930a      	str	r3, [sp, #40]	@ 0x28
 8006418:	940b      	str	r4, [sp, #44]	@ 0x2c
 800641a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800641c:	2b00      	cmp	r3, #0
 800641e:	da00      	bge.n	8006422 <_dtoa_r+0x486>
 8006420:	e177      	b.n	8006712 <_dtoa_r+0x776>
 8006422:	9a04      	ldr	r2, [sp, #16]
 8006424:	2a0e      	cmp	r2, #14
 8006426:	dd00      	ble.n	800642a <_dtoa_r+0x48e>
 8006428:	e173      	b.n	8006712 <_dtoa_r+0x776>
 800642a:	4ba0      	ldr	r3, [pc, #640]	@ (80066ac <_dtoa_r+0x710>)
 800642c:	00d2      	lsls	r2, r2, #3
 800642e:	189b      	adds	r3, r3, r2
 8006430:	685c      	ldr	r4, [r3, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	9306      	str	r3, [sp, #24]
 8006436:	9407      	str	r4, [sp, #28]
 8006438:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800643a:	2b00      	cmp	r3, #0
 800643c:	da03      	bge.n	8006446 <_dtoa_r+0x4aa>
 800643e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	dc00      	bgt.n	8006446 <_dtoa_r+0x4aa>
 8006444:	e106      	b.n	8006654 <_dtoa_r+0x6b8>
 8006446:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006448:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800644a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644c:	9d08      	ldr	r5, [sp, #32]
 800644e:	3b01      	subs	r3, #1
 8006450:	195b      	adds	r3, r3, r5
 8006452:	930a      	str	r3, [sp, #40]	@ 0x28
 8006454:	9a06      	ldr	r2, [sp, #24]
 8006456:	9b07      	ldr	r3, [sp, #28]
 8006458:	0030      	movs	r0, r6
 800645a:	0039      	movs	r1, r7
 800645c:	f7fa fd54 	bl	8000f08 <__aeabi_ddiv>
 8006460:	f7fc f81c 	bl	800249c <__aeabi_d2iz>
 8006464:	9009      	str	r0, [sp, #36]	@ 0x24
 8006466:	f7fc f855 	bl	8002514 <__aeabi_i2d>
 800646a:	9a06      	ldr	r2, [sp, #24]
 800646c:	9b07      	ldr	r3, [sp, #28]
 800646e:	f7fb f98f 	bl	8001790 <__aeabi_dmul>
 8006472:	0002      	movs	r2, r0
 8006474:	000b      	movs	r3, r1
 8006476:	0030      	movs	r0, r6
 8006478:	0039      	movs	r1, r7
 800647a:	f7fb fc51 	bl	8001d20 <__aeabi_dsub>
 800647e:	002b      	movs	r3, r5
 8006480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006482:	3501      	adds	r5, #1
 8006484:	3230      	adds	r2, #48	@ 0x30
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800648a:	002c      	movs	r4, r5
 800648c:	429a      	cmp	r2, r3
 800648e:	d000      	beq.n	8006492 <_dtoa_r+0x4f6>
 8006490:	e131      	b.n	80066f6 <_dtoa_r+0x75a>
 8006492:	0002      	movs	r2, r0
 8006494:	000b      	movs	r3, r1
 8006496:	f7fa f9d3 	bl	8000840 <__aeabi_dadd>
 800649a:	9a06      	ldr	r2, [sp, #24]
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	0006      	movs	r6, r0
 80064a0:	000f      	movs	r7, r1
 80064a2:	f7f9 ffed 	bl	8000480 <__aeabi_dcmpgt>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d000      	beq.n	80064ac <_dtoa_r+0x510>
 80064aa:	e10f      	b.n	80066cc <_dtoa_r+0x730>
 80064ac:	9a06      	ldr	r2, [sp, #24]
 80064ae:	9b07      	ldr	r3, [sp, #28]
 80064b0:	0030      	movs	r0, r6
 80064b2:	0039      	movs	r1, r7
 80064b4:	f7f9 ffca 	bl	800044c <__aeabi_dcmpeq>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d003      	beq.n	80064c4 <_dtoa_r+0x528>
 80064bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064be:	07dd      	lsls	r5, r3, #31
 80064c0:	d500      	bpl.n	80064c4 <_dtoa_r+0x528>
 80064c2:	e103      	b.n	80066cc <_dtoa_r+0x730>
 80064c4:	9905      	ldr	r1, [sp, #20]
 80064c6:	9803      	ldr	r0, [sp, #12]
 80064c8:	f000 fca6 	bl	8006e18 <_Bfree>
 80064cc:	2300      	movs	r3, #0
 80064ce:	7023      	strb	r3, [r4, #0]
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80064d4:	3301      	adds	r3, #1
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d100      	bne.n	80064e0 <_dtoa_r+0x544>
 80064de:	e5a7      	b.n	8006030 <_dtoa_r+0x94>
 80064e0:	601c      	str	r4, [r3, #0]
 80064e2:	e5a5      	b.n	8006030 <_dtoa_r+0x94>
 80064e4:	423d      	tst	r5, r7
 80064e6:	d005      	beq.n	80064f4 <_dtoa_r+0x558>
 80064e8:	6832      	ldr	r2, [r6, #0]
 80064ea:	6873      	ldr	r3, [r6, #4]
 80064ec:	f7fb f950 	bl	8001790 <__aeabi_dmul>
 80064f0:	003b      	movs	r3, r7
 80064f2:	3401      	adds	r4, #1
 80064f4:	106d      	asrs	r5, r5, #1
 80064f6:	3608      	adds	r6, #8
 80064f8:	e736      	b.n	8006368 <_dtoa_r+0x3cc>
 80064fa:	9b04      	ldr	r3, [sp, #16]
 80064fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80064fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006500:	e75a      	b.n	80063b8 <_dtoa_r+0x41c>
 8006502:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006504:	4b69      	ldr	r3, [pc, #420]	@ (80066ac <_dtoa_r+0x710>)
 8006506:	3a01      	subs	r2, #1
 8006508:	00d2      	lsls	r2, r2, #3
 800650a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800650c:	189b      	adds	r3, r3, r2
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2900      	cmp	r1, #0
 8006514:	d04c      	beq.n	80065b0 <_dtoa_r+0x614>
 8006516:	2000      	movs	r0, #0
 8006518:	496b      	ldr	r1, [pc, #428]	@ (80066c8 <_dtoa_r+0x72c>)
 800651a:	f7fa fcf5 	bl	8000f08 <__aeabi_ddiv>
 800651e:	0032      	movs	r2, r6
 8006520:	003b      	movs	r3, r7
 8006522:	f7fb fbfd 	bl	8001d20 <__aeabi_dsub>
 8006526:	9a08      	ldr	r2, [sp, #32]
 8006528:	0006      	movs	r6, r0
 800652a:	4694      	mov	ip, r2
 800652c:	000f      	movs	r7, r1
 800652e:	9b08      	ldr	r3, [sp, #32]
 8006530:	9316      	str	r3, [sp, #88]	@ 0x58
 8006532:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006534:	4463      	add	r3, ip
 8006536:	9311      	str	r3, [sp, #68]	@ 0x44
 8006538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800653a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800653c:	f7fb ffae 	bl	800249c <__aeabi_d2iz>
 8006540:	0005      	movs	r5, r0
 8006542:	f7fb ffe7 	bl	8002514 <__aeabi_i2d>
 8006546:	0002      	movs	r2, r0
 8006548:	000b      	movs	r3, r1
 800654a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800654c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800654e:	f7fb fbe7 	bl	8001d20 <__aeabi_dsub>
 8006552:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006554:	3530      	adds	r5, #48	@ 0x30
 8006556:	1c5c      	adds	r4, r3, #1
 8006558:	701d      	strb	r5, [r3, #0]
 800655a:	0032      	movs	r2, r6
 800655c:	003b      	movs	r3, r7
 800655e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006560:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006562:	f7f9 ff79 	bl	8000458 <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	d16a      	bne.n	8006640 <_dtoa_r+0x6a4>
 800656a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800656c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800656e:	2000      	movs	r0, #0
 8006570:	4950      	ldr	r1, [pc, #320]	@ (80066b4 <_dtoa_r+0x718>)
 8006572:	f7fb fbd5 	bl	8001d20 <__aeabi_dsub>
 8006576:	0032      	movs	r2, r6
 8006578:	003b      	movs	r3, r7
 800657a:	f7f9 ff6d 	bl	8000458 <__aeabi_dcmplt>
 800657e:	2800      	cmp	r0, #0
 8006580:	d000      	beq.n	8006584 <_dtoa_r+0x5e8>
 8006582:	e0a5      	b.n	80066d0 <_dtoa_r+0x734>
 8006584:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006586:	42a3      	cmp	r3, r4
 8006588:	d100      	bne.n	800658c <_dtoa_r+0x5f0>
 800658a:	e742      	b.n	8006412 <_dtoa_r+0x476>
 800658c:	2200      	movs	r2, #0
 800658e:	0030      	movs	r0, r6
 8006590:	0039      	movs	r1, r7
 8006592:	4b49      	ldr	r3, [pc, #292]	@ (80066b8 <_dtoa_r+0x71c>)
 8006594:	f7fb f8fc 	bl	8001790 <__aeabi_dmul>
 8006598:	2200      	movs	r2, #0
 800659a:	0006      	movs	r6, r0
 800659c:	000f      	movs	r7, r1
 800659e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065a2:	4b45      	ldr	r3, [pc, #276]	@ (80066b8 <_dtoa_r+0x71c>)
 80065a4:	f7fb f8f4 	bl	8001790 <__aeabi_dmul>
 80065a8:	9416      	str	r4, [sp, #88]	@ 0x58
 80065aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80065ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065ae:	e7c3      	b.n	8006538 <_dtoa_r+0x59c>
 80065b0:	0030      	movs	r0, r6
 80065b2:	0039      	movs	r1, r7
 80065b4:	f7fb f8ec 	bl	8001790 <__aeabi_dmul>
 80065b8:	9d08      	ldr	r5, [sp, #32]
 80065ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065bc:	002b      	movs	r3, r5
 80065be:	4694      	mov	ip, r2
 80065c0:	9016      	str	r0, [sp, #88]	@ 0x58
 80065c2:	9117      	str	r1, [sp, #92]	@ 0x5c
 80065c4:	4463      	add	r3, ip
 80065c6:	9319      	str	r3, [sp, #100]	@ 0x64
 80065c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065cc:	f7fb ff66 	bl	800249c <__aeabi_d2iz>
 80065d0:	0004      	movs	r4, r0
 80065d2:	f7fb ff9f 	bl	8002514 <__aeabi_i2d>
 80065d6:	000b      	movs	r3, r1
 80065d8:	0002      	movs	r2, r0
 80065da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065de:	f7fb fb9f 	bl	8001d20 <__aeabi_dsub>
 80065e2:	3430      	adds	r4, #48	@ 0x30
 80065e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065e6:	702c      	strb	r4, [r5, #0]
 80065e8:	3501      	adds	r5, #1
 80065ea:	0006      	movs	r6, r0
 80065ec:	000f      	movs	r7, r1
 80065ee:	42ab      	cmp	r3, r5
 80065f0:	d129      	bne.n	8006646 <_dtoa_r+0x6aa>
 80065f2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80065f4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80065f6:	9b08      	ldr	r3, [sp, #32]
 80065f8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80065fa:	469c      	mov	ip, r3
 80065fc:	2200      	movs	r2, #0
 80065fe:	4b32      	ldr	r3, [pc, #200]	@ (80066c8 <_dtoa_r+0x72c>)
 8006600:	4464      	add	r4, ip
 8006602:	f7fa f91d 	bl	8000840 <__aeabi_dadd>
 8006606:	0002      	movs	r2, r0
 8006608:	000b      	movs	r3, r1
 800660a:	0030      	movs	r0, r6
 800660c:	0039      	movs	r1, r7
 800660e:	f7f9 ff37 	bl	8000480 <__aeabi_dcmpgt>
 8006612:	2800      	cmp	r0, #0
 8006614:	d15c      	bne.n	80066d0 <_dtoa_r+0x734>
 8006616:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006618:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800661a:	2000      	movs	r0, #0
 800661c:	492a      	ldr	r1, [pc, #168]	@ (80066c8 <_dtoa_r+0x72c>)
 800661e:	f7fb fb7f 	bl	8001d20 <__aeabi_dsub>
 8006622:	0002      	movs	r2, r0
 8006624:	000b      	movs	r3, r1
 8006626:	0030      	movs	r0, r6
 8006628:	0039      	movs	r1, r7
 800662a:	f7f9 ff15 	bl	8000458 <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	d100      	bne.n	8006634 <_dtoa_r+0x698>
 8006632:	e6ee      	b.n	8006412 <_dtoa_r+0x476>
 8006634:	0023      	movs	r3, r4
 8006636:	3c01      	subs	r4, #1
 8006638:	7822      	ldrb	r2, [r4, #0]
 800663a:	2a30      	cmp	r2, #48	@ 0x30
 800663c:	d0fa      	beq.n	8006634 <_dtoa_r+0x698>
 800663e:	001c      	movs	r4, r3
 8006640:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006642:	9304      	str	r3, [sp, #16]
 8006644:	e73e      	b.n	80064c4 <_dtoa_r+0x528>
 8006646:	2200      	movs	r2, #0
 8006648:	4b1b      	ldr	r3, [pc, #108]	@ (80066b8 <_dtoa_r+0x71c>)
 800664a:	f7fb f8a1 	bl	8001790 <__aeabi_dmul>
 800664e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006650:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006652:	e7b9      	b.n	80065c8 <_dtoa_r+0x62c>
 8006654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <_dtoa_r+0x6d8>
 800665a:	9806      	ldr	r0, [sp, #24]
 800665c:	9907      	ldr	r1, [sp, #28]
 800665e:	2200      	movs	r2, #0
 8006660:	4b18      	ldr	r3, [pc, #96]	@ (80066c4 <_dtoa_r+0x728>)
 8006662:	f7fb f895 	bl	8001790 <__aeabi_dmul>
 8006666:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006668:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800666a:	f7f9 ff13 	bl	8000494 <__aeabi_dcmpge>
 800666e:	2800      	cmp	r0, #0
 8006670:	d100      	bne.n	8006674 <_dtoa_r+0x6d8>
 8006672:	e164      	b.n	800693e <_dtoa_r+0x9a2>
 8006674:	2600      	movs	r6, #0
 8006676:	0037      	movs	r7, r6
 8006678:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800667a:	9c08      	ldr	r4, [sp, #32]
 800667c:	43db      	mvns	r3, r3
 800667e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006680:	2300      	movs	r3, #0
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	0031      	movs	r1, r6
 8006686:	9803      	ldr	r0, [sp, #12]
 8006688:	f000 fbc6 	bl	8006e18 <_Bfree>
 800668c:	2f00      	cmp	r7, #0
 800668e:	d0d7      	beq.n	8006640 <_dtoa_r+0x6a4>
 8006690:	9b04      	ldr	r3, [sp, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d005      	beq.n	80066a2 <_dtoa_r+0x706>
 8006696:	42bb      	cmp	r3, r7
 8006698:	d003      	beq.n	80066a2 <_dtoa_r+0x706>
 800669a:	0019      	movs	r1, r3
 800669c:	9803      	ldr	r0, [sp, #12]
 800669e:	f000 fbbb 	bl	8006e18 <_Bfree>
 80066a2:	0039      	movs	r1, r7
 80066a4:	9803      	ldr	r0, [sp, #12]
 80066a6:	f000 fbb7 	bl	8006e18 <_Bfree>
 80066aa:	e7c9      	b.n	8006640 <_dtoa_r+0x6a4>
 80066ac:	08009718 	.word	0x08009718
 80066b0:	080096f0 	.word	0x080096f0
 80066b4:	3ff00000 	.word	0x3ff00000
 80066b8:	40240000 	.word	0x40240000
 80066bc:	401c0000 	.word	0x401c0000
 80066c0:	fcc00000 	.word	0xfcc00000
 80066c4:	40140000 	.word	0x40140000
 80066c8:	3fe00000 	.word	0x3fe00000
 80066cc:	9b04      	ldr	r3, [sp, #16]
 80066ce:	930c      	str	r3, [sp, #48]	@ 0x30
 80066d0:	0023      	movs	r3, r4
 80066d2:	001c      	movs	r4, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	781a      	ldrb	r2, [r3, #0]
 80066d8:	2a39      	cmp	r2, #57	@ 0x39
 80066da:	d108      	bne.n	80066ee <_dtoa_r+0x752>
 80066dc:	9a08      	ldr	r2, [sp, #32]
 80066de:	429a      	cmp	r2, r3
 80066e0:	d1f7      	bne.n	80066d2 <_dtoa_r+0x736>
 80066e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066e4:	9908      	ldr	r1, [sp, #32]
 80066e6:	3201      	adds	r2, #1
 80066e8:	920c      	str	r2, [sp, #48]	@ 0x30
 80066ea:	2230      	movs	r2, #48	@ 0x30
 80066ec:	700a      	strb	r2, [r1, #0]
 80066ee:	781a      	ldrb	r2, [r3, #0]
 80066f0:	3201      	adds	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	e7a4      	b.n	8006640 <_dtoa_r+0x6a4>
 80066f6:	2200      	movs	r2, #0
 80066f8:	4bc6      	ldr	r3, [pc, #792]	@ (8006a14 <_dtoa_r+0xa78>)
 80066fa:	f7fb f849 	bl	8001790 <__aeabi_dmul>
 80066fe:	2200      	movs	r2, #0
 8006700:	2300      	movs	r3, #0
 8006702:	0006      	movs	r6, r0
 8006704:	000f      	movs	r7, r1
 8006706:	f7f9 fea1 	bl	800044c <__aeabi_dcmpeq>
 800670a:	2800      	cmp	r0, #0
 800670c:	d100      	bne.n	8006710 <_dtoa_r+0x774>
 800670e:	e6a1      	b.n	8006454 <_dtoa_r+0x4b8>
 8006710:	e6d8      	b.n	80064c4 <_dtoa_r+0x528>
 8006712:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006714:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006716:	9c06      	ldr	r4, [sp, #24]
 8006718:	2f00      	cmp	r7, #0
 800671a:	d014      	beq.n	8006746 <_dtoa_r+0x7aa>
 800671c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800671e:	2a01      	cmp	r2, #1
 8006720:	dd00      	ble.n	8006724 <_dtoa_r+0x788>
 8006722:	e0c8      	b.n	80068b6 <_dtoa_r+0x91a>
 8006724:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006726:	2a00      	cmp	r2, #0
 8006728:	d100      	bne.n	800672c <_dtoa_r+0x790>
 800672a:	e0be      	b.n	80068aa <_dtoa_r+0x90e>
 800672c:	4aba      	ldr	r2, [pc, #744]	@ (8006a18 <_dtoa_r+0xa7c>)
 800672e:	189b      	adds	r3, r3, r2
 8006730:	9a06      	ldr	r2, [sp, #24]
 8006732:	2101      	movs	r1, #1
 8006734:	18d2      	adds	r2, r2, r3
 8006736:	9206      	str	r2, [sp, #24]
 8006738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800673a:	9803      	ldr	r0, [sp, #12]
 800673c:	18d3      	adds	r3, r2, r3
 800673e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006740:	f000 fc22 	bl	8006f88 <__i2b>
 8006744:	0007      	movs	r7, r0
 8006746:	2c00      	cmp	r4, #0
 8006748:	d00e      	beq.n	8006768 <_dtoa_r+0x7cc>
 800674a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800674c:	2b00      	cmp	r3, #0
 800674e:	dd0b      	ble.n	8006768 <_dtoa_r+0x7cc>
 8006750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006752:	0023      	movs	r3, r4
 8006754:	4294      	cmp	r4, r2
 8006756:	dd00      	ble.n	800675a <_dtoa_r+0x7be>
 8006758:	0013      	movs	r3, r2
 800675a:	9a06      	ldr	r2, [sp, #24]
 800675c:	1ae4      	subs	r4, r4, r3
 800675e:	1ad2      	subs	r2, r2, r3
 8006760:	9206      	str	r2, [sp, #24]
 8006762:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	930d      	str	r3, [sp, #52]	@ 0x34
 8006768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01f      	beq.n	80067ae <_dtoa_r+0x812>
 800676e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d100      	bne.n	8006776 <_dtoa_r+0x7da>
 8006774:	e0b5      	b.n	80068e2 <_dtoa_r+0x946>
 8006776:	2d00      	cmp	r5, #0
 8006778:	d010      	beq.n	800679c <_dtoa_r+0x800>
 800677a:	0039      	movs	r1, r7
 800677c:	002a      	movs	r2, r5
 800677e:	9803      	ldr	r0, [sp, #12]
 8006780:	f000 fccc 	bl	800711c <__pow5mult>
 8006784:	9a05      	ldr	r2, [sp, #20]
 8006786:	0001      	movs	r1, r0
 8006788:	0007      	movs	r7, r0
 800678a:	9803      	ldr	r0, [sp, #12]
 800678c:	f000 fc14 	bl	8006fb8 <__multiply>
 8006790:	0006      	movs	r6, r0
 8006792:	9905      	ldr	r1, [sp, #20]
 8006794:	9803      	ldr	r0, [sp, #12]
 8006796:	f000 fb3f 	bl	8006e18 <_Bfree>
 800679a:	9605      	str	r6, [sp, #20]
 800679c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800679e:	1b5a      	subs	r2, r3, r5
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	d004      	beq.n	80067ae <_dtoa_r+0x812>
 80067a4:	9905      	ldr	r1, [sp, #20]
 80067a6:	9803      	ldr	r0, [sp, #12]
 80067a8:	f000 fcb8 	bl	800711c <__pow5mult>
 80067ac:	9005      	str	r0, [sp, #20]
 80067ae:	2101      	movs	r1, #1
 80067b0:	9803      	ldr	r0, [sp, #12]
 80067b2:	f000 fbe9 	bl	8006f88 <__i2b>
 80067b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067b8:	0006      	movs	r6, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d100      	bne.n	80067c0 <_dtoa_r+0x824>
 80067be:	e1bc      	b.n	8006b3a <_dtoa_r+0xb9e>
 80067c0:	001a      	movs	r2, r3
 80067c2:	0001      	movs	r1, r0
 80067c4:	9803      	ldr	r0, [sp, #12]
 80067c6:	f000 fca9 	bl	800711c <__pow5mult>
 80067ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80067cc:	0006      	movs	r6, r0
 80067ce:	2500      	movs	r5, #0
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	dc16      	bgt.n	8006802 <_dtoa_r+0x866>
 80067d4:	2500      	movs	r5, #0
 80067d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067d8:	42ab      	cmp	r3, r5
 80067da:	d10e      	bne.n	80067fa <_dtoa_r+0x85e>
 80067dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067de:	031b      	lsls	r3, r3, #12
 80067e0:	42ab      	cmp	r3, r5
 80067e2:	d10a      	bne.n	80067fa <_dtoa_r+0x85e>
 80067e4:	4b8d      	ldr	r3, [pc, #564]	@ (8006a1c <_dtoa_r+0xa80>)
 80067e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067e8:	4213      	tst	r3, r2
 80067ea:	d006      	beq.n	80067fa <_dtoa_r+0x85e>
 80067ec:	9b06      	ldr	r3, [sp, #24]
 80067ee:	3501      	adds	r5, #1
 80067f0:	3301      	adds	r3, #1
 80067f2:	9306      	str	r3, [sp, #24]
 80067f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067f6:	3301      	adds	r3, #1
 80067f8:	930d      	str	r3, [sp, #52]	@ 0x34
 80067fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067fc:	2001      	movs	r0, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <_dtoa_r+0x878>
 8006802:	6933      	ldr	r3, [r6, #16]
 8006804:	3303      	adds	r3, #3
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	18f3      	adds	r3, r6, r3
 800680a:	6858      	ldr	r0, [r3, #4]
 800680c:	f000 fb6c 	bl	8006ee8 <__hi0bits>
 8006810:	2320      	movs	r3, #32
 8006812:	1a18      	subs	r0, r3, r0
 8006814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006816:	1818      	adds	r0, r3, r0
 8006818:	0002      	movs	r2, r0
 800681a:	231f      	movs	r3, #31
 800681c:	401a      	ands	r2, r3
 800681e:	4218      	tst	r0, r3
 8006820:	d065      	beq.n	80068ee <_dtoa_r+0x952>
 8006822:	3301      	adds	r3, #1
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	2b04      	cmp	r3, #4
 8006828:	dd5d      	ble.n	80068e6 <_dtoa_r+0x94a>
 800682a:	231c      	movs	r3, #28
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	9a06      	ldr	r2, [sp, #24]
 8006830:	18e4      	adds	r4, r4, r3
 8006832:	18d2      	adds	r2, r2, r3
 8006834:	9206      	str	r2, [sp, #24]
 8006836:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006838:	18d3      	adds	r3, r2, r3
 800683a:	930d      	str	r3, [sp, #52]	@ 0x34
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd05      	ble.n	800684e <_dtoa_r+0x8b2>
 8006842:	001a      	movs	r2, r3
 8006844:	9905      	ldr	r1, [sp, #20]
 8006846:	9803      	ldr	r0, [sp, #12]
 8006848:	f000 fcc4 	bl	80071d4 <__lshift>
 800684c:	9005      	str	r0, [sp, #20]
 800684e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006850:	2b00      	cmp	r3, #0
 8006852:	dd05      	ble.n	8006860 <_dtoa_r+0x8c4>
 8006854:	0031      	movs	r1, r6
 8006856:	001a      	movs	r2, r3
 8006858:	9803      	ldr	r0, [sp, #12]
 800685a:	f000 fcbb 	bl	80071d4 <__lshift>
 800685e:	0006      	movs	r6, r0
 8006860:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006862:	2b00      	cmp	r3, #0
 8006864:	d045      	beq.n	80068f2 <_dtoa_r+0x956>
 8006866:	0031      	movs	r1, r6
 8006868:	9805      	ldr	r0, [sp, #20]
 800686a:	f000 fd1f 	bl	80072ac <__mcmp>
 800686e:	2800      	cmp	r0, #0
 8006870:	da3f      	bge.n	80068f2 <_dtoa_r+0x956>
 8006872:	9b04      	ldr	r3, [sp, #16]
 8006874:	220a      	movs	r2, #10
 8006876:	3b01      	subs	r3, #1
 8006878:	930c      	str	r3, [sp, #48]	@ 0x30
 800687a:	9905      	ldr	r1, [sp, #20]
 800687c:	2300      	movs	r3, #0
 800687e:	9803      	ldr	r0, [sp, #12]
 8006880:	f000 faee 	bl	8006e60 <__multadd>
 8006884:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006886:	9005      	str	r0, [sp, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d100      	bne.n	800688e <_dtoa_r+0x8f2>
 800688c:	e15c      	b.n	8006b48 <_dtoa_r+0xbac>
 800688e:	2300      	movs	r3, #0
 8006890:	0039      	movs	r1, r7
 8006892:	220a      	movs	r2, #10
 8006894:	9803      	ldr	r0, [sp, #12]
 8006896:	f000 fae3 	bl	8006e60 <__multadd>
 800689a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800689c:	0007      	movs	r7, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dc55      	bgt.n	800694e <_dtoa_r+0x9b2>
 80068a2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	dc2d      	bgt.n	8006904 <_dtoa_r+0x968>
 80068a8:	e051      	b.n	800694e <_dtoa_r+0x9b2>
 80068aa:	2336      	movs	r3, #54	@ 0x36
 80068ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80068ae:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80068b0:	9c06      	ldr	r4, [sp, #24]
 80068b2:	1a9b      	subs	r3, r3, r2
 80068b4:	e73c      	b.n	8006730 <_dtoa_r+0x794>
 80068b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b8:	1e5d      	subs	r5, r3, #1
 80068ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068bc:	42ab      	cmp	r3, r5
 80068be:	db08      	blt.n	80068d2 <_dtoa_r+0x936>
 80068c0:	1b5d      	subs	r5, r3, r5
 80068c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c4:	9c06      	ldr	r4, [sp, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	db00      	blt.n	80068cc <_dtoa_r+0x930>
 80068ca:	e731      	b.n	8006730 <_dtoa_r+0x794>
 80068cc:	1ae4      	subs	r4, r4, r3
 80068ce:	2300      	movs	r3, #0
 80068d0:	e72e      	b.n	8006730 <_dtoa_r+0x794>
 80068d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068d4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068d6:	1aeb      	subs	r3, r5, r3
 80068d8:	18d3      	adds	r3, r2, r3
 80068da:	950f      	str	r5, [sp, #60]	@ 0x3c
 80068dc:	9314      	str	r3, [sp, #80]	@ 0x50
 80068de:	2500      	movs	r5, #0
 80068e0:	e7ef      	b.n	80068c2 <_dtoa_r+0x926>
 80068e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80068e4:	e75e      	b.n	80067a4 <_dtoa_r+0x808>
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d0a8      	beq.n	800683c <_dtoa_r+0x8a0>
 80068ea:	331c      	adds	r3, #28
 80068ec:	e79f      	b.n	800682e <_dtoa_r+0x892>
 80068ee:	0013      	movs	r3, r2
 80068f0:	e7fb      	b.n	80068ea <_dtoa_r+0x94e>
 80068f2:	9b04      	ldr	r3, [sp, #16]
 80068f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80068f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	dc23      	bgt.n	8006946 <_dtoa_r+0x9aa>
 80068fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006900:	2b02      	cmp	r3, #2
 8006902:	dd20      	ble.n	8006946 <_dtoa_r+0x9aa>
 8006904:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006906:	2b00      	cmp	r3, #0
 8006908:	d000      	beq.n	800690c <_dtoa_r+0x970>
 800690a:	e6b5      	b.n	8006678 <_dtoa_r+0x6dc>
 800690c:	0031      	movs	r1, r6
 800690e:	2205      	movs	r2, #5
 8006910:	9803      	ldr	r0, [sp, #12]
 8006912:	f000 faa5 	bl	8006e60 <__multadd>
 8006916:	0006      	movs	r6, r0
 8006918:	0001      	movs	r1, r0
 800691a:	9805      	ldr	r0, [sp, #20]
 800691c:	f000 fcc6 	bl	80072ac <__mcmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	dc00      	bgt.n	8006926 <_dtoa_r+0x98a>
 8006924:	e6a8      	b.n	8006678 <_dtoa_r+0x6dc>
 8006926:	9b08      	ldr	r3, [sp, #32]
 8006928:	9a08      	ldr	r2, [sp, #32]
 800692a:	1c5c      	adds	r4, r3, #1
 800692c:	2331      	movs	r3, #49	@ 0x31
 800692e:	7013      	strb	r3, [r2, #0]
 8006930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006932:	3301      	adds	r3, #1
 8006934:	930c      	str	r3, [sp, #48]	@ 0x30
 8006936:	e6a3      	b.n	8006680 <_dtoa_r+0x6e4>
 8006938:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800693a:	0037      	movs	r7, r6
 800693c:	e7f3      	b.n	8006926 <_dtoa_r+0x98a>
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006942:	930c      	str	r3, [sp, #48]	@ 0x30
 8006944:	e7f9      	b.n	800693a <_dtoa_r+0x99e>
 8006946:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d100      	bne.n	800694e <_dtoa_r+0x9b2>
 800694c:	e100      	b.n	8006b50 <_dtoa_r+0xbb4>
 800694e:	2c00      	cmp	r4, #0
 8006950:	dd05      	ble.n	800695e <_dtoa_r+0x9c2>
 8006952:	0039      	movs	r1, r7
 8006954:	0022      	movs	r2, r4
 8006956:	9803      	ldr	r0, [sp, #12]
 8006958:	f000 fc3c 	bl	80071d4 <__lshift>
 800695c:	0007      	movs	r7, r0
 800695e:	0038      	movs	r0, r7
 8006960:	2d00      	cmp	r5, #0
 8006962:	d018      	beq.n	8006996 <_dtoa_r+0x9fa>
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	9803      	ldr	r0, [sp, #12]
 8006968:	f000 fa12 	bl	8006d90 <_Balloc>
 800696c:	1e04      	subs	r4, r0, #0
 800696e:	d105      	bne.n	800697c <_dtoa_r+0x9e0>
 8006970:	0022      	movs	r2, r4
 8006972:	4b2b      	ldr	r3, [pc, #172]	@ (8006a20 <_dtoa_r+0xa84>)
 8006974:	482b      	ldr	r0, [pc, #172]	@ (8006a24 <_dtoa_r+0xa88>)
 8006976:	492c      	ldr	r1, [pc, #176]	@ (8006a28 <_dtoa_r+0xa8c>)
 8006978:	f7ff fb25 	bl	8005fc6 <_dtoa_r+0x2a>
 800697c:	0039      	movs	r1, r7
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	310c      	adds	r1, #12
 8006982:	3202      	adds	r2, #2
 8006984:	0092      	lsls	r2, r2, #2
 8006986:	300c      	adds	r0, #12
 8006988:	f000 ffda 	bl	8007940 <memcpy>
 800698c:	2201      	movs	r2, #1
 800698e:	0021      	movs	r1, r4
 8006990:	9803      	ldr	r0, [sp, #12]
 8006992:	f000 fc1f 	bl	80071d4 <__lshift>
 8006996:	9b08      	ldr	r3, [sp, #32]
 8006998:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800699a:	9306      	str	r3, [sp, #24]
 800699c:	3b01      	subs	r3, #1
 800699e:	189b      	adds	r3, r3, r2
 80069a0:	2201      	movs	r2, #1
 80069a2:	9704      	str	r7, [sp, #16]
 80069a4:	0007      	movs	r7, r0
 80069a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069aa:	4013      	ands	r3, r2
 80069ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80069ae:	0031      	movs	r1, r6
 80069b0:	9805      	ldr	r0, [sp, #20]
 80069b2:	f7ff fa65 	bl	8005e80 <quorem>
 80069b6:	9904      	ldr	r1, [sp, #16]
 80069b8:	0005      	movs	r5, r0
 80069ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80069bc:	9805      	ldr	r0, [sp, #20]
 80069be:	f000 fc75 	bl	80072ac <__mcmp>
 80069c2:	003a      	movs	r2, r7
 80069c4:	900d      	str	r0, [sp, #52]	@ 0x34
 80069c6:	0031      	movs	r1, r6
 80069c8:	9803      	ldr	r0, [sp, #12]
 80069ca:	f000 fc8b 	bl	80072e4 <__mdiff>
 80069ce:	2201      	movs	r2, #1
 80069d0:	68c3      	ldr	r3, [r0, #12]
 80069d2:	0004      	movs	r4, r0
 80069d4:	3530      	adds	r5, #48	@ 0x30
 80069d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <_dtoa_r+0xa4a>
 80069dc:	0001      	movs	r1, r0
 80069de:	9805      	ldr	r0, [sp, #20]
 80069e0:	f000 fc64 	bl	80072ac <__mcmp>
 80069e4:	9009      	str	r0, [sp, #36]	@ 0x24
 80069e6:	0021      	movs	r1, r4
 80069e8:	9803      	ldr	r0, [sp, #12]
 80069ea:	f000 fa15 	bl	8006e18 <_Bfree>
 80069ee:	9b06      	ldr	r3, [sp, #24]
 80069f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069f2:	1c5c      	adds	r4, r3, #1
 80069f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80069f6:	4313      	orrs	r3, r2
 80069f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069fa:	4313      	orrs	r3, r2
 80069fc:	d116      	bne.n	8006a2c <_dtoa_r+0xa90>
 80069fe:	2d39      	cmp	r5, #57	@ 0x39
 8006a00:	d02f      	beq.n	8006a62 <_dtoa_r+0xac6>
 8006a02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dd01      	ble.n	8006a0c <_dtoa_r+0xa70>
 8006a08:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006a0a:	3531      	adds	r5, #49	@ 0x31
 8006a0c:	9b06      	ldr	r3, [sp, #24]
 8006a0e:	701d      	strb	r5, [r3, #0]
 8006a10:	e638      	b.n	8006684 <_dtoa_r+0x6e8>
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	40240000 	.word	0x40240000
 8006a18:	00000433 	.word	0x00000433
 8006a1c:	7ff00000 	.word	0x7ff00000
 8006a20:	08009678 	.word	0x08009678
 8006a24:	08009620 	.word	0x08009620
 8006a28:	000002ef 	.word	0x000002ef
 8006a2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	db04      	blt.n	8006a3c <_dtoa_r+0xaa0>
 8006a32:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a34:	4313      	orrs	r3, r2
 8006a36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d11e      	bne.n	8006a7a <_dtoa_r+0xade>
 8006a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dde4      	ble.n	8006a0c <_dtoa_r+0xa70>
 8006a42:	9905      	ldr	r1, [sp, #20]
 8006a44:	2201      	movs	r2, #1
 8006a46:	9803      	ldr	r0, [sp, #12]
 8006a48:	f000 fbc4 	bl	80071d4 <__lshift>
 8006a4c:	0031      	movs	r1, r6
 8006a4e:	9005      	str	r0, [sp, #20]
 8006a50:	f000 fc2c 	bl	80072ac <__mcmp>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dc02      	bgt.n	8006a5e <_dtoa_r+0xac2>
 8006a58:	d1d8      	bne.n	8006a0c <_dtoa_r+0xa70>
 8006a5a:	07eb      	lsls	r3, r5, #31
 8006a5c:	d5d6      	bpl.n	8006a0c <_dtoa_r+0xa70>
 8006a5e:	2d39      	cmp	r5, #57	@ 0x39
 8006a60:	d1d2      	bne.n	8006a08 <_dtoa_r+0xa6c>
 8006a62:	2339      	movs	r3, #57	@ 0x39
 8006a64:	9a06      	ldr	r2, [sp, #24]
 8006a66:	7013      	strb	r3, [r2, #0]
 8006a68:	0023      	movs	r3, r4
 8006a6a:	001c      	movs	r4, r3
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	781a      	ldrb	r2, [r3, #0]
 8006a70:	2a39      	cmp	r2, #57	@ 0x39
 8006a72:	d04f      	beq.n	8006b14 <_dtoa_r+0xb78>
 8006a74:	3201      	adds	r2, #1
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e604      	b.n	8006684 <_dtoa_r+0x6e8>
 8006a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dd03      	ble.n	8006a88 <_dtoa_r+0xaec>
 8006a80:	2d39      	cmp	r5, #57	@ 0x39
 8006a82:	d0ee      	beq.n	8006a62 <_dtoa_r+0xac6>
 8006a84:	3501      	adds	r5, #1
 8006a86:	e7c1      	b.n	8006a0c <_dtoa_r+0xa70>
 8006a88:	9b06      	ldr	r3, [sp, #24]
 8006a8a:	9a06      	ldr	r2, [sp, #24]
 8006a8c:	701d      	strb	r5, [r3, #0]
 8006a8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d02a      	beq.n	8006aea <_dtoa_r+0xb4e>
 8006a94:	2300      	movs	r3, #0
 8006a96:	220a      	movs	r2, #10
 8006a98:	9905      	ldr	r1, [sp, #20]
 8006a9a:	9803      	ldr	r0, [sp, #12]
 8006a9c:	f000 f9e0 	bl	8006e60 <__multadd>
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	9005      	str	r0, [sp, #20]
 8006aa4:	42bb      	cmp	r3, r7
 8006aa6:	d109      	bne.n	8006abc <_dtoa_r+0xb20>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	220a      	movs	r2, #10
 8006aac:	9904      	ldr	r1, [sp, #16]
 8006aae:	9803      	ldr	r0, [sp, #12]
 8006ab0:	f000 f9d6 	bl	8006e60 <__multadd>
 8006ab4:	9004      	str	r0, [sp, #16]
 8006ab6:	0007      	movs	r7, r0
 8006ab8:	9406      	str	r4, [sp, #24]
 8006aba:	e778      	b.n	80069ae <_dtoa_r+0xa12>
 8006abc:	9904      	ldr	r1, [sp, #16]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	9803      	ldr	r0, [sp, #12]
 8006ac4:	f000 f9cc 	bl	8006e60 <__multadd>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9004      	str	r0, [sp, #16]
 8006acc:	220a      	movs	r2, #10
 8006ace:	0039      	movs	r1, r7
 8006ad0:	9803      	ldr	r0, [sp, #12]
 8006ad2:	f000 f9c5 	bl	8006e60 <__multadd>
 8006ad6:	e7ee      	b.n	8006ab6 <_dtoa_r+0xb1a>
 8006ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ada:	2401      	movs	r4, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dd00      	ble.n	8006ae2 <_dtoa_r+0xb46>
 8006ae0:	001c      	movs	r4, r3
 8006ae2:	9b08      	ldr	r3, [sp, #32]
 8006ae4:	191c      	adds	r4, r3, r4
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	9304      	str	r3, [sp, #16]
 8006aea:	9905      	ldr	r1, [sp, #20]
 8006aec:	2201      	movs	r2, #1
 8006aee:	9803      	ldr	r0, [sp, #12]
 8006af0:	f000 fb70 	bl	80071d4 <__lshift>
 8006af4:	0031      	movs	r1, r6
 8006af6:	9005      	str	r0, [sp, #20]
 8006af8:	f000 fbd8 	bl	80072ac <__mcmp>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	dcb3      	bgt.n	8006a68 <_dtoa_r+0xacc>
 8006b00:	d101      	bne.n	8006b06 <_dtoa_r+0xb6a>
 8006b02:	07ed      	lsls	r5, r5, #31
 8006b04:	d4b0      	bmi.n	8006a68 <_dtoa_r+0xacc>
 8006b06:	0023      	movs	r3, r4
 8006b08:	001c      	movs	r4, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	2a30      	cmp	r2, #48	@ 0x30
 8006b10:	d0fa      	beq.n	8006b08 <_dtoa_r+0xb6c>
 8006b12:	e5b7      	b.n	8006684 <_dtoa_r+0x6e8>
 8006b14:	9a08      	ldr	r2, [sp, #32]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d1a7      	bne.n	8006a6a <_dtoa_r+0xace>
 8006b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b20:	2331      	movs	r3, #49	@ 0x31
 8006b22:	7013      	strb	r3, [r2, #0]
 8006b24:	e5ae      	b.n	8006684 <_dtoa_r+0x6e8>
 8006b26:	4b15      	ldr	r3, [pc, #84]	@ (8006b7c <_dtoa_r+0xbe0>)
 8006b28:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006b2a:	9308      	str	r3, [sp, #32]
 8006b2c:	4b14      	ldr	r3, [pc, #80]	@ (8006b80 <_dtoa_r+0xbe4>)
 8006b2e:	2a00      	cmp	r2, #0
 8006b30:	d001      	beq.n	8006b36 <_dtoa_r+0xb9a>
 8006b32:	f7ff fa7b 	bl	800602c <_dtoa_r+0x90>
 8006b36:	f7ff fa7b 	bl	8006030 <_dtoa_r+0x94>
 8006b3a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	dc00      	bgt.n	8006b42 <_dtoa_r+0xba6>
 8006b40:	e648      	b.n	80067d4 <_dtoa_r+0x838>
 8006b42:	2001      	movs	r0, #1
 8006b44:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006b46:	e665      	b.n	8006814 <_dtoa_r+0x878>
 8006b48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dc00      	bgt.n	8006b50 <_dtoa_r+0xbb4>
 8006b4e:	e6d6      	b.n	80068fe <_dtoa_r+0x962>
 8006b50:	2400      	movs	r4, #0
 8006b52:	0031      	movs	r1, r6
 8006b54:	9805      	ldr	r0, [sp, #20]
 8006b56:	f7ff f993 	bl	8005e80 <quorem>
 8006b5a:	9b08      	ldr	r3, [sp, #32]
 8006b5c:	3030      	adds	r0, #48	@ 0x30
 8006b5e:	5518      	strb	r0, [r3, r4]
 8006b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b62:	3401      	adds	r4, #1
 8006b64:	0005      	movs	r5, r0
 8006b66:	429c      	cmp	r4, r3
 8006b68:	dab6      	bge.n	8006ad8 <_dtoa_r+0xb3c>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	220a      	movs	r2, #10
 8006b6e:	9905      	ldr	r1, [sp, #20]
 8006b70:	9803      	ldr	r0, [sp, #12]
 8006b72:	f000 f975 	bl	8006e60 <__multadd>
 8006b76:	9005      	str	r0, [sp, #20]
 8006b78:	e7eb      	b.n	8006b52 <_dtoa_r+0xbb6>
 8006b7a:	46c0      	nop			@ (mov r8, r8)
 8006b7c:	080095fc 	.word	0x080095fc
 8006b80:	08009604 	.word	0x08009604

08006b84 <_free_r>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	0005      	movs	r5, r0
 8006b88:	1e0c      	subs	r4, r1, #0
 8006b8a:	d010      	beq.n	8006bae <_free_r+0x2a>
 8006b8c:	3c04      	subs	r4, #4
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da00      	bge.n	8006b96 <_free_r+0x12>
 8006b94:	18e4      	adds	r4, r4, r3
 8006b96:	0028      	movs	r0, r5
 8006b98:	f000 f8ea 	bl	8006d70 <__malloc_lock>
 8006b9c:	4a1d      	ldr	r2, [pc, #116]	@ (8006c14 <_free_r+0x90>)
 8006b9e:	6813      	ldr	r3, [r2, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <_free_r+0x2c>
 8006ba4:	6063      	str	r3, [r4, #4]
 8006ba6:	6014      	str	r4, [r2, #0]
 8006ba8:	0028      	movs	r0, r5
 8006baa:	f000 f8e9 	bl	8006d80 <__malloc_unlock>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	42a3      	cmp	r3, r4
 8006bb2:	d908      	bls.n	8006bc6 <_free_r+0x42>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	1821      	adds	r1, r4, r0
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	d1f3      	bne.n	8006ba4 <_free_r+0x20>
 8006bbc:	6819      	ldr	r1, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	1809      	adds	r1, r1, r0
 8006bc2:	6021      	str	r1, [r4, #0]
 8006bc4:	e7ee      	b.n	8006ba4 <_free_r+0x20>
 8006bc6:	001a      	movs	r2, r3
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <_free_r+0x4e>
 8006bce:	42a3      	cmp	r3, r4
 8006bd0:	d9f9      	bls.n	8006bc6 <_free_r+0x42>
 8006bd2:	6811      	ldr	r1, [r2, #0]
 8006bd4:	1850      	adds	r0, r2, r1
 8006bd6:	42a0      	cmp	r0, r4
 8006bd8:	d10b      	bne.n	8006bf2 <_free_r+0x6e>
 8006bda:	6820      	ldr	r0, [r4, #0]
 8006bdc:	1809      	adds	r1, r1, r0
 8006bde:	1850      	adds	r0, r2, r1
 8006be0:	6011      	str	r1, [r2, #0]
 8006be2:	4283      	cmp	r3, r0
 8006be4:	d1e0      	bne.n	8006ba8 <_free_r+0x24>
 8006be6:	6818      	ldr	r0, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	1841      	adds	r1, r0, r1
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	6053      	str	r3, [r2, #4]
 8006bf0:	e7da      	b.n	8006ba8 <_free_r+0x24>
 8006bf2:	42a0      	cmp	r0, r4
 8006bf4:	d902      	bls.n	8006bfc <_free_r+0x78>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	602b      	str	r3, [r5, #0]
 8006bfa:	e7d5      	b.n	8006ba8 <_free_r+0x24>
 8006bfc:	6820      	ldr	r0, [r4, #0]
 8006bfe:	1821      	adds	r1, r4, r0
 8006c00:	428b      	cmp	r3, r1
 8006c02:	d103      	bne.n	8006c0c <_free_r+0x88>
 8006c04:	6819      	ldr	r1, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	1809      	adds	r1, r1, r0
 8006c0a:	6021      	str	r1, [r4, #0]
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	6054      	str	r4, [r2, #4]
 8006c10:	e7ca      	b.n	8006ba8 <_free_r+0x24>
 8006c12:	46c0      	nop			@ (mov r8, r8)
 8006c14:	20000824 	.word	0x20000824

08006c18 <malloc>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4b03      	ldr	r3, [pc, #12]	@ (8006c28 <malloc+0x10>)
 8006c1c:	0001      	movs	r1, r0
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	f000 f826 	bl	8006c70 <_malloc_r>
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	2000004c 	.word	0x2000004c

08006c2c <sbrk_aligned>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8006c6c <sbrk_aligned+0x40>)
 8006c30:	000d      	movs	r5, r1
 8006c32:	6831      	ldr	r1, [r6, #0]
 8006c34:	0004      	movs	r4, r0
 8006c36:	2900      	cmp	r1, #0
 8006c38:	d102      	bne.n	8006c40 <sbrk_aligned+0x14>
 8006c3a:	f000 fe6f 	bl	800791c <_sbrk_r>
 8006c3e:	6030      	str	r0, [r6, #0]
 8006c40:	0029      	movs	r1, r5
 8006c42:	0020      	movs	r0, r4
 8006c44:	f000 fe6a 	bl	800791c <_sbrk_r>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d103      	bne.n	8006c54 <sbrk_aligned+0x28>
 8006c4c:	2501      	movs	r5, #1
 8006c4e:	426d      	negs	r5, r5
 8006c50:	0028      	movs	r0, r5
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	2303      	movs	r3, #3
 8006c56:	1cc5      	adds	r5, r0, #3
 8006c58:	439d      	bics	r5, r3
 8006c5a:	42a8      	cmp	r0, r5
 8006c5c:	d0f8      	beq.n	8006c50 <sbrk_aligned+0x24>
 8006c5e:	1a29      	subs	r1, r5, r0
 8006c60:	0020      	movs	r0, r4
 8006c62:	f000 fe5b 	bl	800791c <_sbrk_r>
 8006c66:	3001      	adds	r0, #1
 8006c68:	d1f2      	bne.n	8006c50 <sbrk_aligned+0x24>
 8006c6a:	e7ef      	b.n	8006c4c <sbrk_aligned+0x20>
 8006c6c:	20000820 	.word	0x20000820

08006c70 <_malloc_r>:
 8006c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c72:	2203      	movs	r2, #3
 8006c74:	1ccb      	adds	r3, r1, #3
 8006c76:	4393      	bics	r3, r2
 8006c78:	3308      	adds	r3, #8
 8006c7a:	0005      	movs	r5, r0
 8006c7c:	001f      	movs	r7, r3
 8006c7e:	2b0c      	cmp	r3, #12
 8006c80:	d234      	bcs.n	8006cec <_malloc_r+0x7c>
 8006c82:	270c      	movs	r7, #12
 8006c84:	42b9      	cmp	r1, r7
 8006c86:	d833      	bhi.n	8006cf0 <_malloc_r+0x80>
 8006c88:	0028      	movs	r0, r5
 8006c8a:	f000 f871 	bl	8006d70 <__malloc_lock>
 8006c8e:	4e37      	ldr	r6, [pc, #220]	@ (8006d6c <_malloc_r+0xfc>)
 8006c90:	6833      	ldr	r3, [r6, #0]
 8006c92:	001c      	movs	r4, r3
 8006c94:	2c00      	cmp	r4, #0
 8006c96:	d12f      	bne.n	8006cf8 <_malloc_r+0x88>
 8006c98:	0039      	movs	r1, r7
 8006c9a:	0028      	movs	r0, r5
 8006c9c:	f7ff ffc6 	bl	8006c2c <sbrk_aligned>
 8006ca0:	0004      	movs	r4, r0
 8006ca2:	1c43      	adds	r3, r0, #1
 8006ca4:	d15f      	bne.n	8006d66 <_malloc_r+0xf6>
 8006ca6:	6834      	ldr	r4, [r6, #0]
 8006ca8:	9400      	str	r4, [sp, #0]
 8006caa:	9b00      	ldr	r3, [sp, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d14a      	bne.n	8006d46 <_malloc_r+0xd6>
 8006cb0:	2c00      	cmp	r4, #0
 8006cb2:	d052      	beq.n	8006d5a <_malloc_r+0xea>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	0028      	movs	r0, r5
 8006cb8:	18e3      	adds	r3, r4, r3
 8006cba:	9900      	ldr	r1, [sp, #0]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	f000 fe2d 	bl	800791c <_sbrk_r>
 8006cc2:	9b01      	ldr	r3, [sp, #4]
 8006cc4:	4283      	cmp	r3, r0
 8006cc6:	d148      	bne.n	8006d5a <_malloc_r+0xea>
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	0028      	movs	r0, r5
 8006ccc:	1aff      	subs	r7, r7, r3
 8006cce:	0039      	movs	r1, r7
 8006cd0:	f7ff ffac 	bl	8006c2c <sbrk_aligned>
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d040      	beq.n	8006d5a <_malloc_r+0xea>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	19db      	adds	r3, r3, r7
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	6833      	ldr	r3, [r6, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	2a00      	cmp	r2, #0
 8006ce4:	d133      	bne.n	8006d4e <_malloc_r+0xde>
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	e019      	b.n	8006d20 <_malloc_r+0xb0>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dac9      	bge.n	8006c84 <_malloc_r+0x14>
 8006cf0:	230c      	movs	r3, #12
 8006cf2:	602b      	str	r3, [r5, #0]
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cf8:	6821      	ldr	r1, [r4, #0]
 8006cfa:	1bc9      	subs	r1, r1, r7
 8006cfc:	d420      	bmi.n	8006d40 <_malloc_r+0xd0>
 8006cfe:	290b      	cmp	r1, #11
 8006d00:	d90a      	bls.n	8006d18 <_malloc_r+0xa8>
 8006d02:	19e2      	adds	r2, r4, r7
 8006d04:	6027      	str	r7, [r4, #0]
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	d104      	bne.n	8006d14 <_malloc_r+0xa4>
 8006d0a:	6032      	str	r2, [r6, #0]
 8006d0c:	6863      	ldr	r3, [r4, #4]
 8006d0e:	6011      	str	r1, [r2, #0]
 8006d10:	6053      	str	r3, [r2, #4]
 8006d12:	e005      	b.n	8006d20 <_malloc_r+0xb0>
 8006d14:	605a      	str	r2, [r3, #4]
 8006d16:	e7f9      	b.n	8006d0c <_malloc_r+0x9c>
 8006d18:	6862      	ldr	r2, [r4, #4]
 8006d1a:	42a3      	cmp	r3, r4
 8006d1c:	d10e      	bne.n	8006d3c <_malloc_r+0xcc>
 8006d1e:	6032      	str	r2, [r6, #0]
 8006d20:	0028      	movs	r0, r5
 8006d22:	f000 f82d 	bl	8006d80 <__malloc_unlock>
 8006d26:	0020      	movs	r0, r4
 8006d28:	2207      	movs	r2, #7
 8006d2a:	300b      	adds	r0, #11
 8006d2c:	1d23      	adds	r3, r4, #4
 8006d2e:	4390      	bics	r0, r2
 8006d30:	1ac2      	subs	r2, r0, r3
 8006d32:	4298      	cmp	r0, r3
 8006d34:	d0df      	beq.n	8006cf6 <_malloc_r+0x86>
 8006d36:	1a1b      	subs	r3, r3, r0
 8006d38:	50a3      	str	r3, [r4, r2]
 8006d3a:	e7dc      	b.n	8006cf6 <_malloc_r+0x86>
 8006d3c:	605a      	str	r2, [r3, #4]
 8006d3e:	e7ef      	b.n	8006d20 <_malloc_r+0xb0>
 8006d40:	0023      	movs	r3, r4
 8006d42:	6864      	ldr	r4, [r4, #4]
 8006d44:	e7a6      	b.n	8006c94 <_malloc_r+0x24>
 8006d46:	9c00      	ldr	r4, [sp, #0]
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	e7ad      	b.n	8006caa <_malloc_r+0x3a>
 8006d4e:	001a      	movs	r2, r3
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	42a3      	cmp	r3, r4
 8006d54:	d1fb      	bne.n	8006d4e <_malloc_r+0xde>
 8006d56:	2300      	movs	r3, #0
 8006d58:	e7da      	b.n	8006d10 <_malloc_r+0xa0>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	0028      	movs	r0, r5
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	f000 f80e 	bl	8006d80 <__malloc_unlock>
 8006d64:	e7c6      	b.n	8006cf4 <_malloc_r+0x84>
 8006d66:	6007      	str	r7, [r0, #0]
 8006d68:	e7da      	b.n	8006d20 <_malloc_r+0xb0>
 8006d6a:	46c0      	nop			@ (mov r8, r8)
 8006d6c:	20000824 	.word	0x20000824

08006d70 <__malloc_lock>:
 8006d70:	b510      	push	{r4, lr}
 8006d72:	4802      	ldr	r0, [pc, #8]	@ (8006d7c <__malloc_lock+0xc>)
 8006d74:	f7ff f877 	bl	8005e66 <__retarget_lock_acquire_recursive>
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	46c0      	nop			@ (mov r8, r8)
 8006d7c:	2000081c 	.word	0x2000081c

08006d80 <__malloc_unlock>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	4802      	ldr	r0, [pc, #8]	@ (8006d8c <__malloc_unlock+0xc>)
 8006d84:	f7ff f870 	bl	8005e68 <__retarget_lock_release_recursive>
 8006d88:	bd10      	pop	{r4, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	2000081c 	.word	0x2000081c

08006d90 <_Balloc>:
 8006d90:	b570      	push	{r4, r5, r6, lr}
 8006d92:	69c5      	ldr	r5, [r0, #28]
 8006d94:	0006      	movs	r6, r0
 8006d96:	000c      	movs	r4, r1
 8006d98:	2d00      	cmp	r5, #0
 8006d9a:	d10e      	bne.n	8006dba <_Balloc+0x2a>
 8006d9c:	2010      	movs	r0, #16
 8006d9e:	f7ff ff3b 	bl	8006c18 <malloc>
 8006da2:	1e02      	subs	r2, r0, #0
 8006da4:	61f0      	str	r0, [r6, #28]
 8006da6:	d104      	bne.n	8006db2 <_Balloc+0x22>
 8006da8:	216b      	movs	r1, #107	@ 0x6b
 8006daa:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <_Balloc+0x80>)
 8006dac:	4819      	ldr	r0, [pc, #100]	@ (8006e14 <_Balloc+0x84>)
 8006dae:	f000 fdd1 	bl	8007954 <__assert_func>
 8006db2:	6045      	str	r5, [r0, #4]
 8006db4:	6085      	str	r5, [r0, #8]
 8006db6:	6005      	str	r5, [r0, #0]
 8006db8:	60c5      	str	r5, [r0, #12]
 8006dba:	69f5      	ldr	r5, [r6, #28]
 8006dbc:	68eb      	ldr	r3, [r5, #12]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d013      	beq.n	8006dea <_Balloc+0x5a>
 8006dc2:	69f3      	ldr	r3, [r6, #28]
 8006dc4:	00a2      	lsls	r2, r4, #2
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	189b      	adds	r3, r3, r2
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	2800      	cmp	r0, #0
 8006dce:	d118      	bne.n	8006e02 <_Balloc+0x72>
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	000d      	movs	r5, r1
 8006dd4:	40a5      	lsls	r5, r4
 8006dd6:	1d6a      	adds	r2, r5, #5
 8006dd8:	0030      	movs	r0, r6
 8006dda:	0092      	lsls	r2, r2, #2
 8006ddc:	f000 fdd8 	bl	8007990 <_calloc_r>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d00c      	beq.n	8006dfe <_Balloc+0x6e>
 8006de4:	6044      	str	r4, [r0, #4]
 8006de6:	6085      	str	r5, [r0, #8]
 8006de8:	e00d      	b.n	8006e06 <_Balloc+0x76>
 8006dea:	2221      	movs	r2, #33	@ 0x21
 8006dec:	2104      	movs	r1, #4
 8006dee:	0030      	movs	r0, r6
 8006df0:	f000 fdce 	bl	8007990 <_calloc_r>
 8006df4:	69f3      	ldr	r3, [r6, #28]
 8006df6:	60e8      	str	r0, [r5, #12]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e1      	bne.n	8006dc2 <_Balloc+0x32>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	bd70      	pop	{r4, r5, r6, pc}
 8006e02:	6802      	ldr	r2, [r0, #0]
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	2300      	movs	r3, #0
 8006e08:	6103      	str	r3, [r0, #16]
 8006e0a:	60c3      	str	r3, [r0, #12]
 8006e0c:	e7f8      	b.n	8006e00 <_Balloc+0x70>
 8006e0e:	46c0      	nop			@ (mov r8, r8)
 8006e10:	08009609 	.word	0x08009609
 8006e14:	08009689 	.word	0x08009689

08006e18 <_Bfree>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	69c6      	ldr	r6, [r0, #28]
 8006e1c:	0005      	movs	r5, r0
 8006e1e:	000c      	movs	r4, r1
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	d10e      	bne.n	8006e42 <_Bfree+0x2a>
 8006e24:	2010      	movs	r0, #16
 8006e26:	f7ff fef7 	bl	8006c18 <malloc>
 8006e2a:	1e02      	subs	r2, r0, #0
 8006e2c:	61e8      	str	r0, [r5, #28]
 8006e2e:	d104      	bne.n	8006e3a <_Bfree+0x22>
 8006e30:	218f      	movs	r1, #143	@ 0x8f
 8006e32:	4b09      	ldr	r3, [pc, #36]	@ (8006e58 <_Bfree+0x40>)
 8006e34:	4809      	ldr	r0, [pc, #36]	@ (8006e5c <_Bfree+0x44>)
 8006e36:	f000 fd8d 	bl	8007954 <__assert_func>
 8006e3a:	6046      	str	r6, [r0, #4]
 8006e3c:	6086      	str	r6, [r0, #8]
 8006e3e:	6006      	str	r6, [r0, #0]
 8006e40:	60c6      	str	r6, [r0, #12]
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d007      	beq.n	8006e56 <_Bfree+0x3e>
 8006e46:	69eb      	ldr	r3, [r5, #28]
 8006e48:	6862      	ldr	r2, [r4, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	0092      	lsls	r2, r2, #2
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	6022      	str	r2, [r4, #0]
 8006e54:	601c      	str	r4, [r3, #0]
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	08009609 	.word	0x08009609
 8006e5c:	08009689 	.word	0x08009689

08006e60 <__multadd>:
 8006e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e62:	000f      	movs	r7, r1
 8006e64:	9001      	str	r0, [sp, #4]
 8006e66:	000c      	movs	r4, r1
 8006e68:	001e      	movs	r6, r3
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	690d      	ldr	r5, [r1, #16]
 8006e6e:	3714      	adds	r7, #20
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	3001      	adds	r0, #1
 8006e74:	b299      	uxth	r1, r3
 8006e76:	4351      	muls	r1, r2
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	4353      	muls	r3, r2
 8006e7c:	1989      	adds	r1, r1, r6
 8006e7e:	0c0e      	lsrs	r6, r1, #16
 8006e80:	199b      	adds	r3, r3, r6
 8006e82:	0c1e      	lsrs	r6, r3, #16
 8006e84:	b289      	uxth	r1, r1
 8006e86:	041b      	lsls	r3, r3, #16
 8006e88:	185b      	adds	r3, r3, r1
 8006e8a:	c708      	stmia	r7!, {r3}
 8006e8c:	4285      	cmp	r5, r0
 8006e8e:	dcef      	bgt.n	8006e70 <__multadd+0x10>
 8006e90:	2e00      	cmp	r6, #0
 8006e92:	d022      	beq.n	8006eda <__multadd+0x7a>
 8006e94:	68a3      	ldr	r3, [r4, #8]
 8006e96:	42ab      	cmp	r3, r5
 8006e98:	dc19      	bgt.n	8006ece <__multadd+0x6e>
 8006e9a:	6861      	ldr	r1, [r4, #4]
 8006e9c:	9801      	ldr	r0, [sp, #4]
 8006e9e:	3101      	adds	r1, #1
 8006ea0:	f7ff ff76 	bl	8006d90 <_Balloc>
 8006ea4:	1e07      	subs	r7, r0, #0
 8006ea6:	d105      	bne.n	8006eb4 <__multadd+0x54>
 8006ea8:	003a      	movs	r2, r7
 8006eaa:	21ba      	movs	r1, #186	@ 0xba
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <__multadd+0x80>)
 8006eae:	480d      	ldr	r0, [pc, #52]	@ (8006ee4 <__multadd+0x84>)
 8006eb0:	f000 fd50 	bl	8007954 <__assert_func>
 8006eb4:	0021      	movs	r1, r4
 8006eb6:	6922      	ldr	r2, [r4, #16]
 8006eb8:	310c      	adds	r1, #12
 8006eba:	3202      	adds	r2, #2
 8006ebc:	0092      	lsls	r2, r2, #2
 8006ebe:	300c      	adds	r0, #12
 8006ec0:	f000 fd3e 	bl	8007940 <memcpy>
 8006ec4:	0021      	movs	r1, r4
 8006ec6:	9801      	ldr	r0, [sp, #4]
 8006ec8:	f7ff ffa6 	bl	8006e18 <_Bfree>
 8006ecc:	003c      	movs	r4, r7
 8006ece:	1d2b      	adds	r3, r5, #4
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	18e3      	adds	r3, r4, r3
 8006ed4:	3501      	adds	r5, #1
 8006ed6:	605e      	str	r6, [r3, #4]
 8006ed8:	6125      	str	r5, [r4, #16]
 8006eda:	0020      	movs	r0, r4
 8006edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ede:	46c0      	nop			@ (mov r8, r8)
 8006ee0:	08009678 	.word	0x08009678
 8006ee4:	08009689 	.word	0x08009689

08006ee8 <__hi0bits>:
 8006ee8:	2280      	movs	r2, #128	@ 0x80
 8006eea:	0003      	movs	r3, r0
 8006eec:	0252      	lsls	r2, r2, #9
 8006eee:	2000      	movs	r0, #0
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d201      	bcs.n	8006ef8 <__hi0bits+0x10>
 8006ef4:	041b      	lsls	r3, r3, #16
 8006ef6:	3010      	adds	r0, #16
 8006ef8:	2280      	movs	r2, #128	@ 0x80
 8006efa:	0452      	lsls	r2, r2, #17
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d201      	bcs.n	8006f04 <__hi0bits+0x1c>
 8006f00:	3008      	adds	r0, #8
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	2280      	movs	r2, #128	@ 0x80
 8006f06:	0552      	lsls	r2, r2, #21
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d201      	bcs.n	8006f10 <__hi0bits+0x28>
 8006f0c:	3004      	adds	r0, #4
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	2280      	movs	r2, #128	@ 0x80
 8006f12:	05d2      	lsls	r2, r2, #23
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d201      	bcs.n	8006f1c <__hi0bits+0x34>
 8006f18:	3002      	adds	r0, #2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	db03      	blt.n	8006f28 <__hi0bits+0x40>
 8006f20:	3001      	adds	r0, #1
 8006f22:	4213      	tst	r3, r2
 8006f24:	d100      	bne.n	8006f28 <__hi0bits+0x40>
 8006f26:	2020      	movs	r0, #32
 8006f28:	4770      	bx	lr

08006f2a <__lo0bits>:
 8006f2a:	6803      	ldr	r3, [r0, #0]
 8006f2c:	0001      	movs	r1, r0
 8006f2e:	2207      	movs	r2, #7
 8006f30:	0018      	movs	r0, r3
 8006f32:	4010      	ands	r0, r2
 8006f34:	4213      	tst	r3, r2
 8006f36:	d00d      	beq.n	8006f54 <__lo0bits+0x2a>
 8006f38:	3a06      	subs	r2, #6
 8006f3a:	2000      	movs	r0, #0
 8006f3c:	4213      	tst	r3, r2
 8006f3e:	d105      	bne.n	8006f4c <__lo0bits+0x22>
 8006f40:	3002      	adds	r0, #2
 8006f42:	4203      	tst	r3, r0
 8006f44:	d003      	beq.n	8006f4e <__lo0bits+0x24>
 8006f46:	40d3      	lsrs	r3, r2
 8006f48:	0010      	movs	r0, r2
 8006f4a:	600b      	str	r3, [r1, #0]
 8006f4c:	4770      	bx	lr
 8006f4e:	089b      	lsrs	r3, r3, #2
 8006f50:	600b      	str	r3, [r1, #0]
 8006f52:	e7fb      	b.n	8006f4c <__lo0bits+0x22>
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	2a00      	cmp	r2, #0
 8006f58:	d101      	bne.n	8006f5e <__lo0bits+0x34>
 8006f5a:	2010      	movs	r0, #16
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d101      	bne.n	8006f68 <__lo0bits+0x3e>
 8006f64:	3008      	adds	r0, #8
 8006f66:	0a1b      	lsrs	r3, r3, #8
 8006f68:	071a      	lsls	r2, r3, #28
 8006f6a:	d101      	bne.n	8006f70 <__lo0bits+0x46>
 8006f6c:	3004      	adds	r0, #4
 8006f6e:	091b      	lsrs	r3, r3, #4
 8006f70:	079a      	lsls	r2, r3, #30
 8006f72:	d101      	bne.n	8006f78 <__lo0bits+0x4e>
 8006f74:	3002      	adds	r0, #2
 8006f76:	089b      	lsrs	r3, r3, #2
 8006f78:	07da      	lsls	r2, r3, #31
 8006f7a:	d4e9      	bmi.n	8006f50 <__lo0bits+0x26>
 8006f7c:	3001      	adds	r0, #1
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	d1e6      	bne.n	8006f50 <__lo0bits+0x26>
 8006f82:	2020      	movs	r0, #32
 8006f84:	e7e2      	b.n	8006f4c <__lo0bits+0x22>
	...

08006f88 <__i2b>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	000c      	movs	r4, r1
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	f7ff feff 	bl	8006d90 <_Balloc>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d107      	bne.n	8006fa6 <__i2b+0x1e>
 8006f96:	2146      	movs	r1, #70	@ 0x46
 8006f98:	4c05      	ldr	r4, [pc, #20]	@ (8006fb0 <__i2b+0x28>)
 8006f9a:	0002      	movs	r2, r0
 8006f9c:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <__i2b+0x2c>)
 8006f9e:	0020      	movs	r0, r4
 8006fa0:	31ff      	adds	r1, #255	@ 0xff
 8006fa2:	f000 fcd7 	bl	8007954 <__assert_func>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	6144      	str	r4, [r0, #20]
 8006faa:	6103      	str	r3, [r0, #16]
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	46c0      	nop			@ (mov r8, r8)
 8006fb0:	08009689 	.word	0x08009689
 8006fb4:	08009678 	.word	0x08009678

08006fb8 <__multiply>:
 8006fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fba:	0014      	movs	r4, r2
 8006fbc:	690a      	ldr	r2, [r1, #16]
 8006fbe:	6923      	ldr	r3, [r4, #16]
 8006fc0:	000d      	movs	r5, r1
 8006fc2:	b08b      	sub	sp, #44	@ 0x2c
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	db02      	blt.n	8006fce <__multiply+0x16>
 8006fc8:	0023      	movs	r3, r4
 8006fca:	000c      	movs	r4, r1
 8006fcc:	001d      	movs	r5, r3
 8006fce:	6927      	ldr	r7, [r4, #16]
 8006fd0:	692e      	ldr	r6, [r5, #16]
 8006fd2:	6861      	ldr	r1, [r4, #4]
 8006fd4:	19bb      	adds	r3, r7, r6
 8006fd6:	9303      	str	r3, [sp, #12]
 8006fd8:	68a3      	ldr	r3, [r4, #8]
 8006fda:	19ba      	adds	r2, r7, r6
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	da00      	bge.n	8006fe2 <__multiply+0x2a>
 8006fe0:	3101      	adds	r1, #1
 8006fe2:	f7ff fed5 	bl	8006d90 <_Balloc>
 8006fe6:	9002      	str	r0, [sp, #8]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d106      	bne.n	8006ffa <__multiply+0x42>
 8006fec:	21b1      	movs	r1, #177	@ 0xb1
 8006fee:	4b49      	ldr	r3, [pc, #292]	@ (8007114 <__multiply+0x15c>)
 8006ff0:	4849      	ldr	r0, [pc, #292]	@ (8007118 <__multiply+0x160>)
 8006ff2:	9a02      	ldr	r2, [sp, #8]
 8006ff4:	0049      	lsls	r1, r1, #1
 8006ff6:	f000 fcad 	bl	8007954 <__assert_func>
 8006ffa:	9b02      	ldr	r3, [sp, #8]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	3314      	adds	r3, #20
 8007000:	469c      	mov	ip, r3
 8007002:	19bb      	adds	r3, r7, r6
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4463      	add	r3, ip
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	4663      	mov	r3, ip
 800700c:	9904      	ldr	r1, [sp, #16]
 800700e:	428b      	cmp	r3, r1
 8007010:	d32a      	bcc.n	8007068 <__multiply+0xb0>
 8007012:	0023      	movs	r3, r4
 8007014:	00bf      	lsls	r7, r7, #2
 8007016:	3314      	adds	r3, #20
 8007018:	3514      	adds	r5, #20
 800701a:	9308      	str	r3, [sp, #32]
 800701c:	00b6      	lsls	r6, r6, #2
 800701e:	19db      	adds	r3, r3, r7
 8007020:	9305      	str	r3, [sp, #20]
 8007022:	19ab      	adds	r3, r5, r6
 8007024:	9309      	str	r3, [sp, #36]	@ 0x24
 8007026:	2304      	movs	r3, #4
 8007028:	9306      	str	r3, [sp, #24]
 800702a:	0023      	movs	r3, r4
 800702c:	9a05      	ldr	r2, [sp, #20]
 800702e:	3315      	adds	r3, #21
 8007030:	9501      	str	r5, [sp, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d305      	bcc.n	8007042 <__multiply+0x8a>
 8007036:	1b13      	subs	r3, r2, r4
 8007038:	3b15      	subs	r3, #21
 800703a:	089b      	lsrs	r3, r3, #2
 800703c:	3301      	adds	r3, #1
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	9306      	str	r3, [sp, #24]
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007046:	4293      	cmp	r3, r2
 8007048:	d310      	bcc.n	800706c <__multiply+0xb4>
 800704a:	9b03      	ldr	r3, [sp, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	dd05      	ble.n	800705c <__multiply+0xa4>
 8007050:	9b04      	ldr	r3, [sp, #16]
 8007052:	3b04      	subs	r3, #4
 8007054:	9304      	str	r3, [sp, #16]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d056      	beq.n	800710a <__multiply+0x152>
 800705c:	9b02      	ldr	r3, [sp, #8]
 800705e:	9a03      	ldr	r2, [sp, #12]
 8007060:	0018      	movs	r0, r3
 8007062:	611a      	str	r2, [r3, #16]
 8007064:	b00b      	add	sp, #44	@ 0x2c
 8007066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007068:	c304      	stmia	r3!, {r2}
 800706a:	e7cf      	b.n	800700c <__multiply+0x54>
 800706c:	9b01      	ldr	r3, [sp, #4]
 800706e:	6818      	ldr	r0, [r3, #0]
 8007070:	b280      	uxth	r0, r0
 8007072:	2800      	cmp	r0, #0
 8007074:	d01e      	beq.n	80070b4 <__multiply+0xfc>
 8007076:	4667      	mov	r7, ip
 8007078:	2500      	movs	r5, #0
 800707a:	9e08      	ldr	r6, [sp, #32]
 800707c:	ce02      	ldmia	r6!, {r1}
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	9307      	str	r3, [sp, #28]
 8007082:	b28b      	uxth	r3, r1
 8007084:	4343      	muls	r3, r0
 8007086:	001a      	movs	r2, r3
 8007088:	466b      	mov	r3, sp
 800708a:	0c09      	lsrs	r1, r1, #16
 800708c:	8b9b      	ldrh	r3, [r3, #28]
 800708e:	4341      	muls	r1, r0
 8007090:	18d3      	adds	r3, r2, r3
 8007092:	9a07      	ldr	r2, [sp, #28]
 8007094:	195b      	adds	r3, r3, r5
 8007096:	0c12      	lsrs	r2, r2, #16
 8007098:	1889      	adds	r1, r1, r2
 800709a:	0c1a      	lsrs	r2, r3, #16
 800709c:	188a      	adds	r2, r1, r2
 800709e:	b29b      	uxth	r3, r3
 80070a0:	0c15      	lsrs	r5, r2, #16
 80070a2:	0412      	lsls	r2, r2, #16
 80070a4:	431a      	orrs	r2, r3
 80070a6:	9b05      	ldr	r3, [sp, #20]
 80070a8:	c704      	stmia	r7!, {r2}
 80070aa:	42b3      	cmp	r3, r6
 80070ac:	d8e6      	bhi.n	800707c <__multiply+0xc4>
 80070ae:	4663      	mov	r3, ip
 80070b0:	9a06      	ldr	r2, [sp, #24]
 80070b2:	509d      	str	r5, [r3, r2]
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	6818      	ldr	r0, [r3, #0]
 80070b8:	0c00      	lsrs	r0, r0, #16
 80070ba:	d020      	beq.n	80070fe <__multiply+0x146>
 80070bc:	4663      	mov	r3, ip
 80070be:	0025      	movs	r5, r4
 80070c0:	4661      	mov	r1, ip
 80070c2:	2700      	movs	r7, #0
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3514      	adds	r5, #20
 80070c8:	682a      	ldr	r2, [r5, #0]
 80070ca:	680e      	ldr	r6, [r1, #0]
 80070cc:	b292      	uxth	r2, r2
 80070ce:	4342      	muls	r2, r0
 80070d0:	0c36      	lsrs	r6, r6, #16
 80070d2:	1992      	adds	r2, r2, r6
 80070d4:	19d2      	adds	r2, r2, r7
 80070d6:	0416      	lsls	r6, r2, #16
 80070d8:	b29b      	uxth	r3, r3
 80070da:	431e      	orrs	r6, r3
 80070dc:	600e      	str	r6, [r1, #0]
 80070de:	cd40      	ldmia	r5!, {r6}
 80070e0:	684b      	ldr	r3, [r1, #4]
 80070e2:	0c36      	lsrs	r6, r6, #16
 80070e4:	4346      	muls	r6, r0
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	0c12      	lsrs	r2, r2, #16
 80070ea:	18f3      	adds	r3, r6, r3
 80070ec:	189b      	adds	r3, r3, r2
 80070ee:	9a05      	ldr	r2, [sp, #20]
 80070f0:	0c1f      	lsrs	r7, r3, #16
 80070f2:	3104      	adds	r1, #4
 80070f4:	42aa      	cmp	r2, r5
 80070f6:	d8e7      	bhi.n	80070c8 <__multiply+0x110>
 80070f8:	4662      	mov	r2, ip
 80070fa:	9906      	ldr	r1, [sp, #24]
 80070fc:	5053      	str	r3, [r2, r1]
 80070fe:	9b01      	ldr	r3, [sp, #4]
 8007100:	3304      	adds	r3, #4
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2304      	movs	r3, #4
 8007106:	449c      	add	ip, r3
 8007108:	e79b      	b.n	8007042 <__multiply+0x8a>
 800710a:	9b03      	ldr	r3, [sp, #12]
 800710c:	3b01      	subs	r3, #1
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	e79b      	b.n	800704a <__multiply+0x92>
 8007112:	46c0      	nop			@ (mov r8, r8)
 8007114:	08009678 	.word	0x08009678
 8007118:	08009689 	.word	0x08009689

0800711c <__pow5mult>:
 800711c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800711e:	2303      	movs	r3, #3
 8007120:	0015      	movs	r5, r2
 8007122:	0007      	movs	r7, r0
 8007124:	000e      	movs	r6, r1
 8007126:	401a      	ands	r2, r3
 8007128:	421d      	tst	r5, r3
 800712a:	d008      	beq.n	800713e <__pow5mult+0x22>
 800712c:	4925      	ldr	r1, [pc, #148]	@ (80071c4 <__pow5mult+0xa8>)
 800712e:	3a01      	subs	r2, #1
 8007130:	0092      	lsls	r2, r2, #2
 8007132:	5852      	ldr	r2, [r2, r1]
 8007134:	2300      	movs	r3, #0
 8007136:	0031      	movs	r1, r6
 8007138:	f7ff fe92 	bl	8006e60 <__multadd>
 800713c:	0006      	movs	r6, r0
 800713e:	10ad      	asrs	r5, r5, #2
 8007140:	d03d      	beq.n	80071be <__pow5mult+0xa2>
 8007142:	69fc      	ldr	r4, [r7, #28]
 8007144:	2c00      	cmp	r4, #0
 8007146:	d10f      	bne.n	8007168 <__pow5mult+0x4c>
 8007148:	2010      	movs	r0, #16
 800714a:	f7ff fd65 	bl	8006c18 <malloc>
 800714e:	1e02      	subs	r2, r0, #0
 8007150:	61f8      	str	r0, [r7, #28]
 8007152:	d105      	bne.n	8007160 <__pow5mult+0x44>
 8007154:	21b4      	movs	r1, #180	@ 0xb4
 8007156:	4b1c      	ldr	r3, [pc, #112]	@ (80071c8 <__pow5mult+0xac>)
 8007158:	481c      	ldr	r0, [pc, #112]	@ (80071cc <__pow5mult+0xb0>)
 800715a:	31ff      	adds	r1, #255	@ 0xff
 800715c:	f000 fbfa 	bl	8007954 <__assert_func>
 8007160:	6044      	str	r4, [r0, #4]
 8007162:	6084      	str	r4, [r0, #8]
 8007164:	6004      	str	r4, [r0, #0]
 8007166:	60c4      	str	r4, [r0, #12]
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	689c      	ldr	r4, [r3, #8]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2c00      	cmp	r4, #0
 8007170:	d108      	bne.n	8007184 <__pow5mult+0x68>
 8007172:	0038      	movs	r0, r7
 8007174:	4916      	ldr	r1, [pc, #88]	@ (80071d0 <__pow5mult+0xb4>)
 8007176:	f7ff ff07 	bl	8006f88 <__i2b>
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	0004      	movs	r4, r0
 800717e:	6098      	str	r0, [r3, #8]
 8007180:	2300      	movs	r3, #0
 8007182:	6003      	str	r3, [r0, #0]
 8007184:	2301      	movs	r3, #1
 8007186:	421d      	tst	r5, r3
 8007188:	d00a      	beq.n	80071a0 <__pow5mult+0x84>
 800718a:	0031      	movs	r1, r6
 800718c:	0022      	movs	r2, r4
 800718e:	0038      	movs	r0, r7
 8007190:	f7ff ff12 	bl	8006fb8 <__multiply>
 8007194:	0031      	movs	r1, r6
 8007196:	9001      	str	r0, [sp, #4]
 8007198:	0038      	movs	r0, r7
 800719a:	f7ff fe3d 	bl	8006e18 <_Bfree>
 800719e:	9e01      	ldr	r6, [sp, #4]
 80071a0:	106d      	asrs	r5, r5, #1
 80071a2:	d00c      	beq.n	80071be <__pow5mult+0xa2>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d107      	bne.n	80071ba <__pow5mult+0x9e>
 80071aa:	0022      	movs	r2, r4
 80071ac:	0021      	movs	r1, r4
 80071ae:	0038      	movs	r0, r7
 80071b0:	f7ff ff02 	bl	8006fb8 <__multiply>
 80071b4:	2300      	movs	r3, #0
 80071b6:	6020      	str	r0, [r4, #0]
 80071b8:	6003      	str	r3, [r0, #0]
 80071ba:	0004      	movs	r4, r0
 80071bc:	e7e2      	b.n	8007184 <__pow5mult+0x68>
 80071be:	0030      	movs	r0, r6
 80071c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071c2:	46c0      	nop			@ (mov r8, r8)
 80071c4:	080096e4 	.word	0x080096e4
 80071c8:	08009609 	.word	0x08009609
 80071cc:	08009689 	.word	0x08009689
 80071d0:	00000271 	.word	0x00000271

080071d4 <__lshift>:
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	000c      	movs	r4, r1
 80071d8:	0016      	movs	r6, r2
 80071da:	6923      	ldr	r3, [r4, #16]
 80071dc:	1157      	asrs	r7, r2, #5
 80071de:	b085      	sub	sp, #20
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	9301      	str	r3, [sp, #4]
 80071e4:	3301      	adds	r3, #1
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	6849      	ldr	r1, [r1, #4]
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	9002      	str	r0, [sp, #8]
 80071ee:	9a00      	ldr	r2, [sp, #0]
 80071f0:	4293      	cmp	r3, r2
 80071f2:	db10      	blt.n	8007216 <__lshift+0x42>
 80071f4:	9802      	ldr	r0, [sp, #8]
 80071f6:	f7ff fdcb 	bl	8006d90 <_Balloc>
 80071fa:	2300      	movs	r3, #0
 80071fc:	0001      	movs	r1, r0
 80071fe:	0005      	movs	r5, r0
 8007200:	001a      	movs	r2, r3
 8007202:	3114      	adds	r1, #20
 8007204:	4298      	cmp	r0, r3
 8007206:	d10c      	bne.n	8007222 <__lshift+0x4e>
 8007208:	21ef      	movs	r1, #239	@ 0xef
 800720a:	002a      	movs	r2, r5
 800720c:	4b25      	ldr	r3, [pc, #148]	@ (80072a4 <__lshift+0xd0>)
 800720e:	4826      	ldr	r0, [pc, #152]	@ (80072a8 <__lshift+0xd4>)
 8007210:	0049      	lsls	r1, r1, #1
 8007212:	f000 fb9f 	bl	8007954 <__assert_func>
 8007216:	3101      	adds	r1, #1
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	e7e8      	b.n	80071ee <__lshift+0x1a>
 800721c:	0098      	lsls	r0, r3, #2
 800721e:	500a      	str	r2, [r1, r0]
 8007220:	3301      	adds	r3, #1
 8007222:	42bb      	cmp	r3, r7
 8007224:	dbfa      	blt.n	800721c <__lshift+0x48>
 8007226:	43fb      	mvns	r3, r7
 8007228:	17db      	asrs	r3, r3, #31
 800722a:	401f      	ands	r7, r3
 800722c:	00bf      	lsls	r7, r7, #2
 800722e:	0023      	movs	r3, r4
 8007230:	201f      	movs	r0, #31
 8007232:	19c9      	adds	r1, r1, r7
 8007234:	0037      	movs	r7, r6
 8007236:	6922      	ldr	r2, [r4, #16]
 8007238:	3314      	adds	r3, #20
 800723a:	0092      	lsls	r2, r2, #2
 800723c:	189a      	adds	r2, r3, r2
 800723e:	4007      	ands	r7, r0
 8007240:	4206      	tst	r6, r0
 8007242:	d029      	beq.n	8007298 <__lshift+0xc4>
 8007244:	3001      	adds	r0, #1
 8007246:	1bc0      	subs	r0, r0, r7
 8007248:	9003      	str	r0, [sp, #12]
 800724a:	468c      	mov	ip, r1
 800724c:	2000      	movs	r0, #0
 800724e:	681e      	ldr	r6, [r3, #0]
 8007250:	40be      	lsls	r6, r7
 8007252:	4306      	orrs	r6, r0
 8007254:	4660      	mov	r0, ip
 8007256:	c040      	stmia	r0!, {r6}
 8007258:	4684      	mov	ip, r0
 800725a:	9e03      	ldr	r6, [sp, #12]
 800725c:	cb01      	ldmia	r3!, {r0}
 800725e:	40f0      	lsrs	r0, r6
 8007260:	429a      	cmp	r2, r3
 8007262:	d8f4      	bhi.n	800724e <__lshift+0x7a>
 8007264:	0026      	movs	r6, r4
 8007266:	3615      	adds	r6, #21
 8007268:	2304      	movs	r3, #4
 800726a:	42b2      	cmp	r2, r6
 800726c:	d304      	bcc.n	8007278 <__lshift+0xa4>
 800726e:	1b13      	subs	r3, r2, r4
 8007270:	3b15      	subs	r3, #21
 8007272:	089b      	lsrs	r3, r3, #2
 8007274:	3301      	adds	r3, #1
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	50c8      	str	r0, [r1, r3]
 800727a:	2800      	cmp	r0, #0
 800727c:	d002      	beq.n	8007284 <__lshift+0xb0>
 800727e:	9b01      	ldr	r3, [sp, #4]
 8007280:	3302      	adds	r3, #2
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	9802      	ldr	r0, [sp, #8]
 8007288:	3b01      	subs	r3, #1
 800728a:	0021      	movs	r1, r4
 800728c:	612b      	str	r3, [r5, #16]
 800728e:	f7ff fdc3 	bl	8006e18 <_Bfree>
 8007292:	0028      	movs	r0, r5
 8007294:	b005      	add	sp, #20
 8007296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007298:	cb01      	ldmia	r3!, {r0}
 800729a:	c101      	stmia	r1!, {r0}
 800729c:	429a      	cmp	r2, r3
 800729e:	d8fb      	bhi.n	8007298 <__lshift+0xc4>
 80072a0:	e7f0      	b.n	8007284 <__lshift+0xb0>
 80072a2:	46c0      	nop			@ (mov r8, r8)
 80072a4:	08009678 	.word	0x08009678
 80072a8:	08009689 	.word	0x08009689

080072ac <__mcmp>:
 80072ac:	b530      	push	{r4, r5, lr}
 80072ae:	690b      	ldr	r3, [r1, #16]
 80072b0:	6904      	ldr	r4, [r0, #16]
 80072b2:	0002      	movs	r2, r0
 80072b4:	1ae0      	subs	r0, r4, r3
 80072b6:	429c      	cmp	r4, r3
 80072b8:	d10f      	bne.n	80072da <__mcmp+0x2e>
 80072ba:	3214      	adds	r2, #20
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	3114      	adds	r1, #20
 80072c0:	0014      	movs	r4, r2
 80072c2:	18c9      	adds	r1, r1, r3
 80072c4:	18d2      	adds	r2, r2, r3
 80072c6:	3a04      	subs	r2, #4
 80072c8:	3904      	subs	r1, #4
 80072ca:	6815      	ldr	r5, [r2, #0]
 80072cc:	680b      	ldr	r3, [r1, #0]
 80072ce:	429d      	cmp	r5, r3
 80072d0:	d004      	beq.n	80072dc <__mcmp+0x30>
 80072d2:	2001      	movs	r0, #1
 80072d4:	429d      	cmp	r5, r3
 80072d6:	d200      	bcs.n	80072da <__mcmp+0x2e>
 80072d8:	3802      	subs	r0, #2
 80072da:	bd30      	pop	{r4, r5, pc}
 80072dc:	4294      	cmp	r4, r2
 80072de:	d3f2      	bcc.n	80072c6 <__mcmp+0x1a>
 80072e0:	e7fb      	b.n	80072da <__mcmp+0x2e>
	...

080072e4 <__mdiff>:
 80072e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e6:	000c      	movs	r4, r1
 80072e8:	b087      	sub	sp, #28
 80072ea:	9000      	str	r0, [sp, #0]
 80072ec:	0011      	movs	r1, r2
 80072ee:	0020      	movs	r0, r4
 80072f0:	0017      	movs	r7, r2
 80072f2:	f7ff ffdb 	bl	80072ac <__mcmp>
 80072f6:	1e05      	subs	r5, r0, #0
 80072f8:	d110      	bne.n	800731c <__mdiff+0x38>
 80072fa:	0001      	movs	r1, r0
 80072fc:	9800      	ldr	r0, [sp, #0]
 80072fe:	f7ff fd47 	bl	8006d90 <_Balloc>
 8007302:	1e02      	subs	r2, r0, #0
 8007304:	d104      	bne.n	8007310 <__mdiff+0x2c>
 8007306:	4b40      	ldr	r3, [pc, #256]	@ (8007408 <__mdiff+0x124>)
 8007308:	4840      	ldr	r0, [pc, #256]	@ (800740c <__mdiff+0x128>)
 800730a:	4941      	ldr	r1, [pc, #260]	@ (8007410 <__mdiff+0x12c>)
 800730c:	f000 fb22 	bl	8007954 <__assert_func>
 8007310:	2301      	movs	r3, #1
 8007312:	6145      	str	r5, [r0, #20]
 8007314:	6103      	str	r3, [r0, #16]
 8007316:	0010      	movs	r0, r2
 8007318:	b007      	add	sp, #28
 800731a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800731c:	2600      	movs	r6, #0
 800731e:	42b0      	cmp	r0, r6
 8007320:	da03      	bge.n	800732a <__mdiff+0x46>
 8007322:	0023      	movs	r3, r4
 8007324:	003c      	movs	r4, r7
 8007326:	001f      	movs	r7, r3
 8007328:	3601      	adds	r6, #1
 800732a:	6861      	ldr	r1, [r4, #4]
 800732c:	9800      	ldr	r0, [sp, #0]
 800732e:	f7ff fd2f 	bl	8006d90 <_Balloc>
 8007332:	1e02      	subs	r2, r0, #0
 8007334:	d103      	bne.n	800733e <__mdiff+0x5a>
 8007336:	4b34      	ldr	r3, [pc, #208]	@ (8007408 <__mdiff+0x124>)
 8007338:	4834      	ldr	r0, [pc, #208]	@ (800740c <__mdiff+0x128>)
 800733a:	4936      	ldr	r1, [pc, #216]	@ (8007414 <__mdiff+0x130>)
 800733c:	e7e6      	b.n	800730c <__mdiff+0x28>
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	3414      	adds	r4, #20
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	18e3      	adds	r3, r4, r3
 8007348:	0021      	movs	r1, r4
 800734a:	9401      	str	r4, [sp, #4]
 800734c:	003c      	movs	r4, r7
 800734e:	9302      	str	r3, [sp, #8]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	3414      	adds	r4, #20
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	18e3      	adds	r3, r4, r3
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	0003      	movs	r3, r0
 800735c:	60c6      	str	r6, [r0, #12]
 800735e:	468c      	mov	ip, r1
 8007360:	2000      	movs	r0, #0
 8007362:	3314      	adds	r3, #20
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	4663      	mov	r3, ip
 800736a:	cb20      	ldmia	r3!, {r5}
 800736c:	b2a9      	uxth	r1, r5
 800736e:	000e      	movs	r6, r1
 8007370:	469c      	mov	ip, r3
 8007372:	cc08      	ldmia	r4!, {r3}
 8007374:	0c2d      	lsrs	r5, r5, #16
 8007376:	b299      	uxth	r1, r3
 8007378:	1a71      	subs	r1, r6, r1
 800737a:	1809      	adds	r1, r1, r0
 800737c:	0c1b      	lsrs	r3, r3, #16
 800737e:	1408      	asrs	r0, r1, #16
 8007380:	1aeb      	subs	r3, r5, r3
 8007382:	181b      	adds	r3, r3, r0
 8007384:	1418      	asrs	r0, r3, #16
 8007386:	b289      	uxth	r1, r1
 8007388:	041b      	lsls	r3, r3, #16
 800738a:	4319      	orrs	r1, r3
 800738c:	9b05      	ldr	r3, [sp, #20]
 800738e:	c302      	stmia	r3!, {r1}
 8007390:	9305      	str	r3, [sp, #20]
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	42a3      	cmp	r3, r4
 8007396:	d8e7      	bhi.n	8007368 <__mdiff+0x84>
 8007398:	0039      	movs	r1, r7
 800739a:	9c03      	ldr	r4, [sp, #12]
 800739c:	3115      	adds	r1, #21
 800739e:	2304      	movs	r3, #4
 80073a0:	428c      	cmp	r4, r1
 80073a2:	d304      	bcc.n	80073ae <__mdiff+0xca>
 80073a4:	1be3      	subs	r3, r4, r7
 80073a6:	3b15      	subs	r3, #21
 80073a8:	089b      	lsrs	r3, r3, #2
 80073aa:	3301      	adds	r3, #1
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	9901      	ldr	r1, [sp, #4]
 80073b0:	18cd      	adds	r5, r1, r3
 80073b2:	9904      	ldr	r1, [sp, #16]
 80073b4:	002e      	movs	r6, r5
 80073b6:	18cb      	adds	r3, r1, r3
 80073b8:	001f      	movs	r7, r3
 80073ba:	9902      	ldr	r1, [sp, #8]
 80073bc:	428e      	cmp	r6, r1
 80073be:	d311      	bcc.n	80073e4 <__mdiff+0x100>
 80073c0:	9c02      	ldr	r4, [sp, #8]
 80073c2:	1ee9      	subs	r1, r5, #3
 80073c4:	2000      	movs	r0, #0
 80073c6:	428c      	cmp	r4, r1
 80073c8:	d304      	bcc.n	80073d4 <__mdiff+0xf0>
 80073ca:	0021      	movs	r1, r4
 80073cc:	3103      	adds	r1, #3
 80073ce:	1b49      	subs	r1, r1, r5
 80073d0:	0889      	lsrs	r1, r1, #2
 80073d2:	0088      	lsls	r0, r1, #2
 80073d4:	181b      	adds	r3, r3, r0
 80073d6:	3b04      	subs	r3, #4
 80073d8:	6819      	ldr	r1, [r3, #0]
 80073da:	2900      	cmp	r1, #0
 80073dc:	d010      	beq.n	8007400 <__mdiff+0x11c>
 80073de:	9b00      	ldr	r3, [sp, #0]
 80073e0:	6113      	str	r3, [r2, #16]
 80073e2:	e798      	b.n	8007316 <__mdiff+0x32>
 80073e4:	4684      	mov	ip, r0
 80073e6:	ce02      	ldmia	r6!, {r1}
 80073e8:	b288      	uxth	r0, r1
 80073ea:	4460      	add	r0, ip
 80073ec:	1400      	asrs	r0, r0, #16
 80073ee:	0c0c      	lsrs	r4, r1, #16
 80073f0:	1904      	adds	r4, r0, r4
 80073f2:	4461      	add	r1, ip
 80073f4:	1420      	asrs	r0, r4, #16
 80073f6:	b289      	uxth	r1, r1
 80073f8:	0424      	lsls	r4, r4, #16
 80073fa:	4321      	orrs	r1, r4
 80073fc:	c702      	stmia	r7!, {r1}
 80073fe:	e7dc      	b.n	80073ba <__mdiff+0xd6>
 8007400:	9900      	ldr	r1, [sp, #0]
 8007402:	3901      	subs	r1, #1
 8007404:	9100      	str	r1, [sp, #0]
 8007406:	e7e6      	b.n	80073d6 <__mdiff+0xf2>
 8007408:	08009678 	.word	0x08009678
 800740c:	08009689 	.word	0x08009689
 8007410:	00000237 	.word	0x00000237
 8007414:	00000245 	.word	0x00000245

08007418 <__d2b>:
 8007418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800741a:	2101      	movs	r1, #1
 800741c:	0016      	movs	r6, r2
 800741e:	001f      	movs	r7, r3
 8007420:	f7ff fcb6 	bl	8006d90 <_Balloc>
 8007424:	1e04      	subs	r4, r0, #0
 8007426:	d105      	bne.n	8007434 <__d2b+0x1c>
 8007428:	0022      	movs	r2, r4
 800742a:	4b25      	ldr	r3, [pc, #148]	@ (80074c0 <__d2b+0xa8>)
 800742c:	4825      	ldr	r0, [pc, #148]	@ (80074c4 <__d2b+0xac>)
 800742e:	4926      	ldr	r1, [pc, #152]	@ (80074c8 <__d2b+0xb0>)
 8007430:	f000 fa90 	bl	8007954 <__assert_func>
 8007434:	033b      	lsls	r3, r7, #12
 8007436:	007d      	lsls	r5, r7, #1
 8007438:	0b1b      	lsrs	r3, r3, #12
 800743a:	0d6d      	lsrs	r5, r5, #21
 800743c:	d002      	beq.n	8007444 <__d2b+0x2c>
 800743e:	2280      	movs	r2, #128	@ 0x80
 8007440:	0352      	lsls	r2, r2, #13
 8007442:	4313      	orrs	r3, r2
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	2e00      	cmp	r6, #0
 8007448:	d025      	beq.n	8007496 <__d2b+0x7e>
 800744a:	4668      	mov	r0, sp
 800744c:	9600      	str	r6, [sp, #0]
 800744e:	f7ff fd6c 	bl	8006f2a <__lo0bits>
 8007452:	9b01      	ldr	r3, [sp, #4]
 8007454:	9900      	ldr	r1, [sp, #0]
 8007456:	2800      	cmp	r0, #0
 8007458:	d01b      	beq.n	8007492 <__d2b+0x7a>
 800745a:	2220      	movs	r2, #32
 800745c:	001e      	movs	r6, r3
 800745e:	1a12      	subs	r2, r2, r0
 8007460:	4096      	lsls	r6, r2
 8007462:	0032      	movs	r2, r6
 8007464:	40c3      	lsrs	r3, r0
 8007466:	430a      	orrs	r2, r1
 8007468:	6162      	str	r2, [r4, #20]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	9e01      	ldr	r6, [sp, #4]
 800746e:	61a6      	str	r6, [r4, #24]
 8007470:	1e73      	subs	r3, r6, #1
 8007472:	419e      	sbcs	r6, r3
 8007474:	3601      	adds	r6, #1
 8007476:	6126      	str	r6, [r4, #16]
 8007478:	2d00      	cmp	r5, #0
 800747a:	d014      	beq.n	80074a6 <__d2b+0x8e>
 800747c:	2635      	movs	r6, #53	@ 0x35
 800747e:	4b13      	ldr	r3, [pc, #76]	@ (80074cc <__d2b+0xb4>)
 8007480:	18ed      	adds	r5, r5, r3
 8007482:	9b08      	ldr	r3, [sp, #32]
 8007484:	182d      	adds	r5, r5, r0
 8007486:	601d      	str	r5, [r3, #0]
 8007488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748a:	1a36      	subs	r6, r6, r0
 800748c:	601e      	str	r6, [r3, #0]
 800748e:	0020      	movs	r0, r4
 8007490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007492:	6161      	str	r1, [r4, #20]
 8007494:	e7ea      	b.n	800746c <__d2b+0x54>
 8007496:	a801      	add	r0, sp, #4
 8007498:	f7ff fd47 	bl	8006f2a <__lo0bits>
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	2601      	movs	r6, #1
 80074a0:	6163      	str	r3, [r4, #20]
 80074a2:	3020      	adds	r0, #32
 80074a4:	e7e7      	b.n	8007476 <__d2b+0x5e>
 80074a6:	4b0a      	ldr	r3, [pc, #40]	@ (80074d0 <__d2b+0xb8>)
 80074a8:	18c0      	adds	r0, r0, r3
 80074aa:	9b08      	ldr	r3, [sp, #32]
 80074ac:	6018      	str	r0, [r3, #0]
 80074ae:	4b09      	ldr	r3, [pc, #36]	@ (80074d4 <__d2b+0xbc>)
 80074b0:	18f3      	adds	r3, r6, r3
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	18e3      	adds	r3, r4, r3
 80074b6:	6958      	ldr	r0, [r3, #20]
 80074b8:	f7ff fd16 	bl	8006ee8 <__hi0bits>
 80074bc:	0176      	lsls	r6, r6, #5
 80074be:	e7e3      	b.n	8007488 <__d2b+0x70>
 80074c0:	08009678 	.word	0x08009678
 80074c4:	08009689 	.word	0x08009689
 80074c8:	0000030f 	.word	0x0000030f
 80074cc:	fffffbcd 	.word	0xfffffbcd
 80074d0:	fffffbce 	.word	0xfffffbce
 80074d4:	3fffffff 	.word	0x3fffffff

080074d8 <__ssputs_r>:
 80074d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074da:	688e      	ldr	r6, [r1, #8]
 80074dc:	b085      	sub	sp, #20
 80074de:	001f      	movs	r7, r3
 80074e0:	000c      	movs	r4, r1
 80074e2:	680b      	ldr	r3, [r1, #0]
 80074e4:	9002      	str	r0, [sp, #8]
 80074e6:	9203      	str	r2, [sp, #12]
 80074e8:	42be      	cmp	r6, r7
 80074ea:	d830      	bhi.n	800754e <__ssputs_r+0x76>
 80074ec:	210c      	movs	r1, #12
 80074ee:	5e62      	ldrsh	r2, [r4, r1]
 80074f0:	2190      	movs	r1, #144	@ 0x90
 80074f2:	00c9      	lsls	r1, r1, #3
 80074f4:	420a      	tst	r2, r1
 80074f6:	d028      	beq.n	800754a <__ssputs_r+0x72>
 80074f8:	2003      	movs	r0, #3
 80074fa:	6921      	ldr	r1, [r4, #16]
 80074fc:	1a5b      	subs	r3, r3, r1
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	6963      	ldr	r3, [r4, #20]
 8007502:	4343      	muls	r3, r0
 8007504:	9801      	ldr	r0, [sp, #4]
 8007506:	0fdd      	lsrs	r5, r3, #31
 8007508:	18ed      	adds	r5, r5, r3
 800750a:	1c7b      	adds	r3, r7, #1
 800750c:	181b      	adds	r3, r3, r0
 800750e:	106d      	asrs	r5, r5, #1
 8007510:	42ab      	cmp	r3, r5
 8007512:	d900      	bls.n	8007516 <__ssputs_r+0x3e>
 8007514:	001d      	movs	r5, r3
 8007516:	0552      	lsls	r2, r2, #21
 8007518:	d528      	bpl.n	800756c <__ssputs_r+0x94>
 800751a:	0029      	movs	r1, r5
 800751c:	9802      	ldr	r0, [sp, #8]
 800751e:	f7ff fba7 	bl	8006c70 <_malloc_r>
 8007522:	1e06      	subs	r6, r0, #0
 8007524:	d02c      	beq.n	8007580 <__ssputs_r+0xa8>
 8007526:	9a01      	ldr	r2, [sp, #4]
 8007528:	6921      	ldr	r1, [r4, #16]
 800752a:	f000 fa09 	bl	8007940 <memcpy>
 800752e:	89a2      	ldrh	r2, [r4, #12]
 8007530:	4b18      	ldr	r3, [pc, #96]	@ (8007594 <__ssputs_r+0xbc>)
 8007532:	401a      	ands	r2, r3
 8007534:	2380      	movs	r3, #128	@ 0x80
 8007536:	4313      	orrs	r3, r2
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	6126      	str	r6, [r4, #16]
 800753e:	18f6      	adds	r6, r6, r3
 8007540:	6026      	str	r6, [r4, #0]
 8007542:	003e      	movs	r6, r7
 8007544:	6165      	str	r5, [r4, #20]
 8007546:	1aed      	subs	r5, r5, r3
 8007548:	60a5      	str	r5, [r4, #8]
 800754a:	42be      	cmp	r6, r7
 800754c:	d900      	bls.n	8007550 <__ssputs_r+0x78>
 800754e:	003e      	movs	r6, r7
 8007550:	0032      	movs	r2, r6
 8007552:	9903      	ldr	r1, [sp, #12]
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	f000 f9ce 	bl	80078f6 <memmove>
 800755a:	2000      	movs	r0, #0
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	1b9b      	subs	r3, r3, r6
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	199b      	adds	r3, r3, r6
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	b005      	add	sp, #20
 800756a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800756c:	002a      	movs	r2, r5
 800756e:	9802      	ldr	r0, [sp, #8]
 8007570:	f000 fa4d 	bl	8007a0e <_realloc_r>
 8007574:	1e06      	subs	r6, r0, #0
 8007576:	d1e0      	bne.n	800753a <__ssputs_r+0x62>
 8007578:	6921      	ldr	r1, [r4, #16]
 800757a:	9802      	ldr	r0, [sp, #8]
 800757c:	f7ff fb02 	bl	8006b84 <_free_r>
 8007580:	230c      	movs	r3, #12
 8007582:	2001      	movs	r0, #1
 8007584:	9a02      	ldr	r2, [sp, #8]
 8007586:	4240      	negs	r0, r0
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	89a2      	ldrh	r2, [r4, #12]
 800758c:	3334      	adds	r3, #52	@ 0x34
 800758e:	4313      	orrs	r3, r2
 8007590:	81a3      	strh	r3, [r4, #12]
 8007592:	e7e9      	b.n	8007568 <__ssputs_r+0x90>
 8007594:	fffffb7f 	.word	0xfffffb7f

08007598 <_svfiprintf_r>:
 8007598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759a:	b0a1      	sub	sp, #132	@ 0x84
 800759c:	9003      	str	r0, [sp, #12]
 800759e:	001d      	movs	r5, r3
 80075a0:	898b      	ldrh	r3, [r1, #12]
 80075a2:	000f      	movs	r7, r1
 80075a4:	0016      	movs	r6, r2
 80075a6:	061b      	lsls	r3, r3, #24
 80075a8:	d511      	bpl.n	80075ce <_svfiprintf_r+0x36>
 80075aa:	690b      	ldr	r3, [r1, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10e      	bne.n	80075ce <_svfiprintf_r+0x36>
 80075b0:	2140      	movs	r1, #64	@ 0x40
 80075b2:	f7ff fb5d 	bl	8006c70 <_malloc_r>
 80075b6:	6038      	str	r0, [r7, #0]
 80075b8:	6138      	str	r0, [r7, #16]
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d105      	bne.n	80075ca <_svfiprintf_r+0x32>
 80075be:	230c      	movs	r3, #12
 80075c0:	9a03      	ldr	r2, [sp, #12]
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	2001      	movs	r0, #1
 80075c6:	4240      	negs	r0, r0
 80075c8:	e0cf      	b.n	800776a <_svfiprintf_r+0x1d2>
 80075ca:	2340      	movs	r3, #64	@ 0x40
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	2300      	movs	r3, #0
 80075d0:	ac08      	add	r4, sp, #32
 80075d2:	6163      	str	r3, [r4, #20]
 80075d4:	3320      	adds	r3, #32
 80075d6:	7663      	strb	r3, [r4, #25]
 80075d8:	3310      	adds	r3, #16
 80075da:	76a3      	strb	r3, [r4, #26]
 80075dc:	9507      	str	r5, [sp, #28]
 80075de:	0035      	movs	r5, r6
 80075e0:	782b      	ldrb	r3, [r5, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <_svfiprintf_r+0x52>
 80075e6:	2b25      	cmp	r3, #37	@ 0x25
 80075e8:	d148      	bne.n	800767c <_svfiprintf_r+0xe4>
 80075ea:	1bab      	subs	r3, r5, r6
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	42b5      	cmp	r5, r6
 80075f0:	d00b      	beq.n	800760a <_svfiprintf_r+0x72>
 80075f2:	0032      	movs	r2, r6
 80075f4:	0039      	movs	r1, r7
 80075f6:	9803      	ldr	r0, [sp, #12]
 80075f8:	f7ff ff6e 	bl	80074d8 <__ssputs_r>
 80075fc:	3001      	adds	r0, #1
 80075fe:	d100      	bne.n	8007602 <_svfiprintf_r+0x6a>
 8007600:	e0ae      	b.n	8007760 <_svfiprintf_r+0x1c8>
 8007602:	6963      	ldr	r3, [r4, #20]
 8007604:	9a05      	ldr	r2, [sp, #20]
 8007606:	189b      	adds	r3, r3, r2
 8007608:	6163      	str	r3, [r4, #20]
 800760a:	782b      	ldrb	r3, [r5, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d100      	bne.n	8007612 <_svfiprintf_r+0x7a>
 8007610:	e0a6      	b.n	8007760 <_svfiprintf_r+0x1c8>
 8007612:	2201      	movs	r2, #1
 8007614:	2300      	movs	r3, #0
 8007616:	4252      	negs	r2, r2
 8007618:	6062      	str	r2, [r4, #4]
 800761a:	a904      	add	r1, sp, #16
 800761c:	3254      	adds	r2, #84	@ 0x54
 800761e:	1852      	adds	r2, r2, r1
 8007620:	1c6e      	adds	r6, r5, #1
 8007622:	6023      	str	r3, [r4, #0]
 8007624:	60e3      	str	r3, [r4, #12]
 8007626:	60a3      	str	r3, [r4, #8]
 8007628:	7013      	strb	r3, [r2, #0]
 800762a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800762c:	4b54      	ldr	r3, [pc, #336]	@ (8007780 <_svfiprintf_r+0x1e8>)
 800762e:	2205      	movs	r2, #5
 8007630:	0018      	movs	r0, r3
 8007632:	7831      	ldrb	r1, [r6, #0]
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	f7fe fc18 	bl	8005e6a <memchr>
 800763a:	1c75      	adds	r5, r6, #1
 800763c:	2800      	cmp	r0, #0
 800763e:	d11f      	bne.n	8007680 <_svfiprintf_r+0xe8>
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	06d3      	lsls	r3, r2, #27
 8007644:	d504      	bpl.n	8007650 <_svfiprintf_r+0xb8>
 8007646:	2353      	movs	r3, #83	@ 0x53
 8007648:	a904      	add	r1, sp, #16
 800764a:	185b      	adds	r3, r3, r1
 800764c:	2120      	movs	r1, #32
 800764e:	7019      	strb	r1, [r3, #0]
 8007650:	0713      	lsls	r3, r2, #28
 8007652:	d504      	bpl.n	800765e <_svfiprintf_r+0xc6>
 8007654:	2353      	movs	r3, #83	@ 0x53
 8007656:	a904      	add	r1, sp, #16
 8007658:	185b      	adds	r3, r3, r1
 800765a:	212b      	movs	r1, #43	@ 0x2b
 800765c:	7019      	strb	r1, [r3, #0]
 800765e:	7833      	ldrb	r3, [r6, #0]
 8007660:	2b2a      	cmp	r3, #42	@ 0x2a
 8007662:	d016      	beq.n	8007692 <_svfiprintf_r+0xfa>
 8007664:	0035      	movs	r5, r6
 8007666:	2100      	movs	r1, #0
 8007668:	200a      	movs	r0, #10
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	782a      	ldrb	r2, [r5, #0]
 800766e:	1c6e      	adds	r6, r5, #1
 8007670:	3a30      	subs	r2, #48	@ 0x30
 8007672:	2a09      	cmp	r2, #9
 8007674:	d950      	bls.n	8007718 <_svfiprintf_r+0x180>
 8007676:	2900      	cmp	r1, #0
 8007678:	d111      	bne.n	800769e <_svfiprintf_r+0x106>
 800767a:	e017      	b.n	80076ac <_svfiprintf_r+0x114>
 800767c:	3501      	adds	r5, #1
 800767e:	e7af      	b.n	80075e0 <_svfiprintf_r+0x48>
 8007680:	9b05      	ldr	r3, [sp, #20]
 8007682:	6822      	ldr	r2, [r4, #0]
 8007684:	1ac0      	subs	r0, r0, r3
 8007686:	2301      	movs	r3, #1
 8007688:	4083      	lsls	r3, r0
 800768a:	4313      	orrs	r3, r2
 800768c:	002e      	movs	r6, r5
 800768e:	6023      	str	r3, [r4, #0]
 8007690:	e7cc      	b.n	800762c <_svfiprintf_r+0x94>
 8007692:	9b07      	ldr	r3, [sp, #28]
 8007694:	1d19      	adds	r1, r3, #4
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	9107      	str	r1, [sp, #28]
 800769a:	2b00      	cmp	r3, #0
 800769c:	db01      	blt.n	80076a2 <_svfiprintf_r+0x10a>
 800769e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076a0:	e004      	b.n	80076ac <_svfiprintf_r+0x114>
 80076a2:	425b      	negs	r3, r3
 80076a4:	60e3      	str	r3, [r4, #12]
 80076a6:	2302      	movs	r3, #2
 80076a8:	4313      	orrs	r3, r2
 80076aa:	6023      	str	r3, [r4, #0]
 80076ac:	782b      	ldrb	r3, [r5, #0]
 80076ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80076b0:	d10c      	bne.n	80076cc <_svfiprintf_r+0x134>
 80076b2:	786b      	ldrb	r3, [r5, #1]
 80076b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b6:	d134      	bne.n	8007722 <_svfiprintf_r+0x18a>
 80076b8:	9b07      	ldr	r3, [sp, #28]
 80076ba:	3502      	adds	r5, #2
 80076bc:	1d1a      	adds	r2, r3, #4
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	9207      	str	r2, [sp, #28]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da01      	bge.n	80076ca <_svfiprintf_r+0x132>
 80076c6:	2301      	movs	r3, #1
 80076c8:	425b      	negs	r3, r3
 80076ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80076cc:	4e2d      	ldr	r6, [pc, #180]	@ (8007784 <_svfiprintf_r+0x1ec>)
 80076ce:	2203      	movs	r2, #3
 80076d0:	0030      	movs	r0, r6
 80076d2:	7829      	ldrb	r1, [r5, #0]
 80076d4:	f7fe fbc9 	bl	8005e6a <memchr>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d006      	beq.n	80076ea <_svfiprintf_r+0x152>
 80076dc:	2340      	movs	r3, #64	@ 0x40
 80076de:	1b80      	subs	r0, r0, r6
 80076e0:	4083      	lsls	r3, r0
 80076e2:	6822      	ldr	r2, [r4, #0]
 80076e4:	3501      	adds	r5, #1
 80076e6:	4313      	orrs	r3, r2
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	7829      	ldrb	r1, [r5, #0]
 80076ec:	2206      	movs	r2, #6
 80076ee:	4826      	ldr	r0, [pc, #152]	@ (8007788 <_svfiprintf_r+0x1f0>)
 80076f0:	1c6e      	adds	r6, r5, #1
 80076f2:	7621      	strb	r1, [r4, #24]
 80076f4:	f7fe fbb9 	bl	8005e6a <memchr>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d038      	beq.n	800776e <_svfiprintf_r+0x1d6>
 80076fc:	4b23      	ldr	r3, [pc, #140]	@ (800778c <_svfiprintf_r+0x1f4>)
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d122      	bne.n	8007748 <_svfiprintf_r+0x1b0>
 8007702:	2207      	movs	r2, #7
 8007704:	9b07      	ldr	r3, [sp, #28]
 8007706:	3307      	adds	r3, #7
 8007708:	4393      	bics	r3, r2
 800770a:	3308      	adds	r3, #8
 800770c:	9307      	str	r3, [sp, #28]
 800770e:	6963      	ldr	r3, [r4, #20]
 8007710:	9a04      	ldr	r2, [sp, #16]
 8007712:	189b      	adds	r3, r3, r2
 8007714:	6163      	str	r3, [r4, #20]
 8007716:	e762      	b.n	80075de <_svfiprintf_r+0x46>
 8007718:	4343      	muls	r3, r0
 800771a:	0035      	movs	r5, r6
 800771c:	2101      	movs	r1, #1
 800771e:	189b      	adds	r3, r3, r2
 8007720:	e7a4      	b.n	800766c <_svfiprintf_r+0xd4>
 8007722:	2300      	movs	r3, #0
 8007724:	200a      	movs	r0, #10
 8007726:	0019      	movs	r1, r3
 8007728:	3501      	adds	r5, #1
 800772a:	6063      	str	r3, [r4, #4]
 800772c:	782a      	ldrb	r2, [r5, #0]
 800772e:	1c6e      	adds	r6, r5, #1
 8007730:	3a30      	subs	r2, #48	@ 0x30
 8007732:	2a09      	cmp	r2, #9
 8007734:	d903      	bls.n	800773e <_svfiprintf_r+0x1a6>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0c8      	beq.n	80076cc <_svfiprintf_r+0x134>
 800773a:	9109      	str	r1, [sp, #36]	@ 0x24
 800773c:	e7c6      	b.n	80076cc <_svfiprintf_r+0x134>
 800773e:	4341      	muls	r1, r0
 8007740:	0035      	movs	r5, r6
 8007742:	2301      	movs	r3, #1
 8007744:	1889      	adds	r1, r1, r2
 8007746:	e7f1      	b.n	800772c <_svfiprintf_r+0x194>
 8007748:	aa07      	add	r2, sp, #28
 800774a:	9200      	str	r2, [sp, #0]
 800774c:	0021      	movs	r1, r4
 800774e:	003a      	movs	r2, r7
 8007750:	4b0f      	ldr	r3, [pc, #60]	@ (8007790 <_svfiprintf_r+0x1f8>)
 8007752:	9803      	ldr	r0, [sp, #12]
 8007754:	f7fd fe16 	bl	8005384 <_printf_float>
 8007758:	9004      	str	r0, [sp, #16]
 800775a:	9b04      	ldr	r3, [sp, #16]
 800775c:	3301      	adds	r3, #1
 800775e:	d1d6      	bne.n	800770e <_svfiprintf_r+0x176>
 8007760:	89bb      	ldrh	r3, [r7, #12]
 8007762:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007764:	065b      	lsls	r3, r3, #25
 8007766:	d500      	bpl.n	800776a <_svfiprintf_r+0x1d2>
 8007768:	e72c      	b.n	80075c4 <_svfiprintf_r+0x2c>
 800776a:	b021      	add	sp, #132	@ 0x84
 800776c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800776e:	aa07      	add	r2, sp, #28
 8007770:	9200      	str	r2, [sp, #0]
 8007772:	0021      	movs	r1, r4
 8007774:	003a      	movs	r2, r7
 8007776:	4b06      	ldr	r3, [pc, #24]	@ (8007790 <_svfiprintf_r+0x1f8>)
 8007778:	9803      	ldr	r0, [sp, #12]
 800777a:	f7fe f8b1 	bl	80058e0 <_printf_i>
 800777e:	e7eb      	b.n	8007758 <_svfiprintf_r+0x1c0>
 8007780:	080097e0 	.word	0x080097e0
 8007784:	080097e6 	.word	0x080097e6
 8007788:	080097ea 	.word	0x080097ea
 800778c:	08005385 	.word	0x08005385
 8007790:	080074d9 	.word	0x080074d9

08007794 <__sflush_r>:
 8007794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007796:	220c      	movs	r2, #12
 8007798:	5e8b      	ldrsh	r3, [r1, r2]
 800779a:	0005      	movs	r5, r0
 800779c:	000c      	movs	r4, r1
 800779e:	071a      	lsls	r2, r3, #28
 80077a0:	d456      	bmi.n	8007850 <__sflush_r+0xbc>
 80077a2:	684a      	ldr	r2, [r1, #4]
 80077a4:	2a00      	cmp	r2, #0
 80077a6:	dc02      	bgt.n	80077ae <__sflush_r+0x1a>
 80077a8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	dd4e      	ble.n	800784c <__sflush_r+0xb8>
 80077ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80077b0:	2f00      	cmp	r7, #0
 80077b2:	d04b      	beq.n	800784c <__sflush_r+0xb8>
 80077b4:	2200      	movs	r2, #0
 80077b6:	2080      	movs	r0, #128	@ 0x80
 80077b8:	682e      	ldr	r6, [r5, #0]
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	001a      	movs	r2, r3
 80077be:	0140      	lsls	r0, r0, #5
 80077c0:	6a21      	ldr	r1, [r4, #32]
 80077c2:	4002      	ands	r2, r0
 80077c4:	4203      	tst	r3, r0
 80077c6:	d033      	beq.n	8007830 <__sflush_r+0x9c>
 80077c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	075b      	lsls	r3, r3, #29
 80077ce:	d506      	bpl.n	80077de <__sflush_r+0x4a>
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	1ad2      	subs	r2, r2, r3
 80077d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d001      	beq.n	80077de <__sflush_r+0x4a>
 80077da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077dc:	1ad2      	subs	r2, r2, r3
 80077de:	2300      	movs	r3, #0
 80077e0:	0028      	movs	r0, r5
 80077e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80077e4:	6a21      	ldr	r1, [r4, #32]
 80077e6:	47b8      	blx	r7
 80077e8:	89a2      	ldrh	r2, [r4, #12]
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	d106      	bne.n	80077fc <__sflush_r+0x68>
 80077ee:	6829      	ldr	r1, [r5, #0]
 80077f0:	291d      	cmp	r1, #29
 80077f2:	d846      	bhi.n	8007882 <__sflush_r+0xee>
 80077f4:	4b29      	ldr	r3, [pc, #164]	@ (800789c <__sflush_r+0x108>)
 80077f6:	410b      	asrs	r3, r1
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	d442      	bmi.n	8007882 <__sflush_r+0xee>
 80077fc:	2300      	movs	r3, #0
 80077fe:	6063      	str	r3, [r4, #4]
 8007800:	6923      	ldr	r3, [r4, #16]
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	04d2      	lsls	r2, r2, #19
 8007806:	d505      	bpl.n	8007814 <__sflush_r+0x80>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <__sflush_r+0x7e>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d100      	bne.n	8007814 <__sflush_r+0x80>
 8007812:	6560      	str	r0, [r4, #84]	@ 0x54
 8007814:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007816:	602e      	str	r6, [r5, #0]
 8007818:	2900      	cmp	r1, #0
 800781a:	d017      	beq.n	800784c <__sflush_r+0xb8>
 800781c:	0023      	movs	r3, r4
 800781e:	3344      	adds	r3, #68	@ 0x44
 8007820:	4299      	cmp	r1, r3
 8007822:	d002      	beq.n	800782a <__sflush_r+0x96>
 8007824:	0028      	movs	r0, r5
 8007826:	f7ff f9ad 	bl	8006b84 <_free_r>
 800782a:	2300      	movs	r3, #0
 800782c:	6363      	str	r3, [r4, #52]	@ 0x34
 800782e:	e00d      	b.n	800784c <__sflush_r+0xb8>
 8007830:	2301      	movs	r3, #1
 8007832:	0028      	movs	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	0002      	movs	r2, r0
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d1c6      	bne.n	80077ca <__sflush_r+0x36>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0c3      	beq.n	80077ca <__sflush_r+0x36>
 8007842:	2b1d      	cmp	r3, #29
 8007844:	d001      	beq.n	800784a <__sflush_r+0xb6>
 8007846:	2b16      	cmp	r3, #22
 8007848:	d11a      	bne.n	8007880 <__sflush_r+0xec>
 800784a:	602e      	str	r6, [r5, #0]
 800784c:	2000      	movs	r0, #0
 800784e:	e01e      	b.n	800788e <__sflush_r+0xfa>
 8007850:	690e      	ldr	r6, [r1, #16]
 8007852:	2e00      	cmp	r6, #0
 8007854:	d0fa      	beq.n	800784c <__sflush_r+0xb8>
 8007856:	680f      	ldr	r7, [r1, #0]
 8007858:	600e      	str	r6, [r1, #0]
 800785a:	1bba      	subs	r2, r7, r6
 800785c:	9201      	str	r2, [sp, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	079b      	lsls	r3, r3, #30
 8007862:	d100      	bne.n	8007866 <__sflush_r+0xd2>
 8007864:	694a      	ldr	r2, [r1, #20]
 8007866:	60a2      	str	r2, [r4, #8]
 8007868:	9b01      	ldr	r3, [sp, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	ddee      	ble.n	800784c <__sflush_r+0xb8>
 800786e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007870:	0032      	movs	r2, r6
 8007872:	001f      	movs	r7, r3
 8007874:	0028      	movs	r0, r5
 8007876:	9b01      	ldr	r3, [sp, #4]
 8007878:	6a21      	ldr	r1, [r4, #32]
 800787a:	47b8      	blx	r7
 800787c:	2800      	cmp	r0, #0
 800787e:	dc07      	bgt.n	8007890 <__sflush_r+0xfc>
 8007880:	89a2      	ldrh	r2, [r4, #12]
 8007882:	2340      	movs	r3, #64	@ 0x40
 8007884:	2001      	movs	r0, #1
 8007886:	4313      	orrs	r3, r2
 8007888:	b21b      	sxth	r3, r3
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	4240      	negs	r0, r0
 800788e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	1836      	adds	r6, r6, r0
 8007894:	1a1b      	subs	r3, r3, r0
 8007896:	9301      	str	r3, [sp, #4]
 8007898:	e7e6      	b.n	8007868 <__sflush_r+0xd4>
 800789a:	46c0      	nop			@ (mov r8, r8)
 800789c:	dfbffffe 	.word	0xdfbffffe

080078a0 <_fflush_r>:
 80078a0:	690b      	ldr	r3, [r1, #16]
 80078a2:	b570      	push	{r4, r5, r6, lr}
 80078a4:	0005      	movs	r5, r0
 80078a6:	000c      	movs	r4, r1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <_fflush_r+0x12>
 80078ac:	2500      	movs	r5, #0
 80078ae:	0028      	movs	r0, r5
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d004      	beq.n	80078c0 <_fflush_r+0x20>
 80078b6:	6a03      	ldr	r3, [r0, #32]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <_fflush_r+0x20>
 80078bc:	f7fe f9ae 	bl	8005c1c <__sinit>
 80078c0:	220c      	movs	r2, #12
 80078c2:	5ea3      	ldrsh	r3, [r4, r2]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d0f1      	beq.n	80078ac <_fflush_r+0xc>
 80078c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078ca:	07d2      	lsls	r2, r2, #31
 80078cc:	d404      	bmi.n	80078d8 <_fflush_r+0x38>
 80078ce:	059b      	lsls	r3, r3, #22
 80078d0:	d402      	bmi.n	80078d8 <_fflush_r+0x38>
 80078d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078d4:	f7fe fac7 	bl	8005e66 <__retarget_lock_acquire_recursive>
 80078d8:	0028      	movs	r0, r5
 80078da:	0021      	movs	r1, r4
 80078dc:	f7ff ff5a 	bl	8007794 <__sflush_r>
 80078e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078e2:	0005      	movs	r5, r0
 80078e4:	07db      	lsls	r3, r3, #31
 80078e6:	d4e2      	bmi.n	80078ae <_fflush_r+0xe>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	059b      	lsls	r3, r3, #22
 80078ec:	d4df      	bmi.n	80078ae <_fflush_r+0xe>
 80078ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078f0:	f7fe faba 	bl	8005e68 <__retarget_lock_release_recursive>
 80078f4:	e7db      	b.n	80078ae <_fflush_r+0xe>

080078f6 <memmove>:
 80078f6:	b510      	push	{r4, lr}
 80078f8:	4288      	cmp	r0, r1
 80078fa:	d806      	bhi.n	800790a <memmove+0x14>
 80078fc:	2300      	movs	r3, #0
 80078fe:	429a      	cmp	r2, r3
 8007900:	d008      	beq.n	8007914 <memmove+0x1e>
 8007902:	5ccc      	ldrb	r4, [r1, r3]
 8007904:	54c4      	strb	r4, [r0, r3]
 8007906:	3301      	adds	r3, #1
 8007908:	e7f9      	b.n	80078fe <memmove+0x8>
 800790a:	188b      	adds	r3, r1, r2
 800790c:	4298      	cmp	r0, r3
 800790e:	d2f5      	bcs.n	80078fc <memmove+0x6>
 8007910:	3a01      	subs	r2, #1
 8007912:	d200      	bcs.n	8007916 <memmove+0x20>
 8007914:	bd10      	pop	{r4, pc}
 8007916:	5c8b      	ldrb	r3, [r1, r2]
 8007918:	5483      	strb	r3, [r0, r2]
 800791a:	e7f9      	b.n	8007910 <memmove+0x1a>

0800791c <_sbrk_r>:
 800791c:	2300      	movs	r3, #0
 800791e:	b570      	push	{r4, r5, r6, lr}
 8007920:	4d06      	ldr	r5, [pc, #24]	@ (800793c <_sbrk_r+0x20>)
 8007922:	0004      	movs	r4, r0
 8007924:	0008      	movs	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7fb fed4 	bl	80036d4 <_sbrk>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d103      	bne.n	8007938 <_sbrk_r+0x1c>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d000      	beq.n	8007938 <_sbrk_r+0x1c>
 8007936:	6023      	str	r3, [r4, #0]
 8007938:	bd70      	pop	{r4, r5, r6, pc}
 800793a:	46c0      	nop			@ (mov r8, r8)
 800793c:	20000818 	.word	0x20000818

08007940 <memcpy>:
 8007940:	2300      	movs	r3, #0
 8007942:	b510      	push	{r4, lr}
 8007944:	429a      	cmp	r2, r3
 8007946:	d100      	bne.n	800794a <memcpy+0xa>
 8007948:	bd10      	pop	{r4, pc}
 800794a:	5ccc      	ldrb	r4, [r1, r3]
 800794c:	54c4      	strb	r4, [r0, r3]
 800794e:	3301      	adds	r3, #1
 8007950:	e7f8      	b.n	8007944 <memcpy+0x4>
	...

08007954 <__assert_func>:
 8007954:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007956:	0014      	movs	r4, r2
 8007958:	001a      	movs	r2, r3
 800795a:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <__assert_func+0x2c>)
 800795c:	0005      	movs	r5, r0
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	000e      	movs	r6, r1
 8007962:	68d8      	ldr	r0, [r3, #12]
 8007964:	4b07      	ldr	r3, [pc, #28]	@ (8007984 <__assert_func+0x30>)
 8007966:	2c00      	cmp	r4, #0
 8007968:	d101      	bne.n	800796e <__assert_func+0x1a>
 800796a:	4b07      	ldr	r3, [pc, #28]	@ (8007988 <__assert_func+0x34>)
 800796c:	001c      	movs	r4, r3
 800796e:	4907      	ldr	r1, [pc, #28]	@ (800798c <__assert_func+0x38>)
 8007970:	9301      	str	r3, [sp, #4]
 8007972:	9402      	str	r4, [sp, #8]
 8007974:	002b      	movs	r3, r5
 8007976:	9600      	str	r6, [sp, #0]
 8007978:	f000 f886 	bl	8007a88 <fiprintf>
 800797c:	f000 f894 	bl	8007aa8 <abort>
 8007980:	2000004c 	.word	0x2000004c
 8007984:	080097fb 	.word	0x080097fb
 8007988:	08009836 	.word	0x08009836
 800798c:	08009808 	.word	0x08009808

08007990 <_calloc_r>:
 8007990:	b570      	push	{r4, r5, r6, lr}
 8007992:	0c0b      	lsrs	r3, r1, #16
 8007994:	0c15      	lsrs	r5, r2, #16
 8007996:	2b00      	cmp	r3, #0
 8007998:	d11e      	bne.n	80079d8 <_calloc_r+0x48>
 800799a:	2d00      	cmp	r5, #0
 800799c:	d10c      	bne.n	80079b8 <_calloc_r+0x28>
 800799e:	b289      	uxth	r1, r1
 80079a0:	b294      	uxth	r4, r2
 80079a2:	434c      	muls	r4, r1
 80079a4:	0021      	movs	r1, r4
 80079a6:	f7ff f963 	bl	8006c70 <_malloc_r>
 80079aa:	1e05      	subs	r5, r0, #0
 80079ac:	d01a      	beq.n	80079e4 <_calloc_r+0x54>
 80079ae:	0022      	movs	r2, r4
 80079b0:	2100      	movs	r1, #0
 80079b2:	f7fe f9d3 	bl	8005d5c <memset>
 80079b6:	e016      	b.n	80079e6 <_calloc_r+0x56>
 80079b8:	1c2b      	adds	r3, r5, #0
 80079ba:	1c0c      	adds	r4, r1, #0
 80079bc:	b289      	uxth	r1, r1
 80079be:	b292      	uxth	r2, r2
 80079c0:	434a      	muls	r2, r1
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	b2a1      	uxth	r1, r4
 80079c6:	4359      	muls	r1, r3
 80079c8:	0c14      	lsrs	r4, r2, #16
 80079ca:	190c      	adds	r4, r1, r4
 80079cc:	0c23      	lsrs	r3, r4, #16
 80079ce:	d107      	bne.n	80079e0 <_calloc_r+0x50>
 80079d0:	0424      	lsls	r4, r4, #16
 80079d2:	b292      	uxth	r2, r2
 80079d4:	4314      	orrs	r4, r2
 80079d6:	e7e5      	b.n	80079a4 <_calloc_r+0x14>
 80079d8:	2d00      	cmp	r5, #0
 80079da:	d101      	bne.n	80079e0 <_calloc_r+0x50>
 80079dc:	1c14      	adds	r4, r2, #0
 80079de:	e7ed      	b.n	80079bc <_calloc_r+0x2c>
 80079e0:	230c      	movs	r3, #12
 80079e2:	6003      	str	r3, [r0, #0]
 80079e4:	2500      	movs	r5, #0
 80079e6:	0028      	movs	r0, r5
 80079e8:	bd70      	pop	{r4, r5, r6, pc}

080079ea <__ascii_mbtowc>:
 80079ea:	b082      	sub	sp, #8
 80079ec:	2900      	cmp	r1, #0
 80079ee:	d100      	bne.n	80079f2 <__ascii_mbtowc+0x8>
 80079f0:	a901      	add	r1, sp, #4
 80079f2:	1e10      	subs	r0, r2, #0
 80079f4:	d006      	beq.n	8007a04 <__ascii_mbtowc+0x1a>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d006      	beq.n	8007a08 <__ascii_mbtowc+0x1e>
 80079fa:	7813      	ldrb	r3, [r2, #0]
 80079fc:	600b      	str	r3, [r1, #0]
 80079fe:	7810      	ldrb	r0, [r2, #0]
 8007a00:	1e43      	subs	r3, r0, #1
 8007a02:	4198      	sbcs	r0, r3
 8007a04:	b002      	add	sp, #8
 8007a06:	4770      	bx	lr
 8007a08:	2002      	movs	r0, #2
 8007a0a:	4240      	negs	r0, r0
 8007a0c:	e7fa      	b.n	8007a04 <__ascii_mbtowc+0x1a>

08007a0e <_realloc_r>:
 8007a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a10:	0006      	movs	r6, r0
 8007a12:	000c      	movs	r4, r1
 8007a14:	0015      	movs	r5, r2
 8007a16:	2900      	cmp	r1, #0
 8007a18:	d105      	bne.n	8007a26 <_realloc_r+0x18>
 8007a1a:	0011      	movs	r1, r2
 8007a1c:	f7ff f928 	bl	8006c70 <_malloc_r>
 8007a20:	0004      	movs	r4, r0
 8007a22:	0020      	movs	r0, r4
 8007a24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a26:	2a00      	cmp	r2, #0
 8007a28:	d103      	bne.n	8007a32 <_realloc_r+0x24>
 8007a2a:	f7ff f8ab 	bl	8006b84 <_free_r>
 8007a2e:	2400      	movs	r4, #0
 8007a30:	e7f7      	b.n	8007a22 <_realloc_r+0x14>
 8007a32:	f000 f840 	bl	8007ab6 <_malloc_usable_size_r>
 8007a36:	0007      	movs	r7, r0
 8007a38:	4285      	cmp	r5, r0
 8007a3a:	d802      	bhi.n	8007a42 <_realloc_r+0x34>
 8007a3c:	0843      	lsrs	r3, r0, #1
 8007a3e:	42ab      	cmp	r3, r5
 8007a40:	d3ef      	bcc.n	8007a22 <_realloc_r+0x14>
 8007a42:	0029      	movs	r1, r5
 8007a44:	0030      	movs	r0, r6
 8007a46:	f7ff f913 	bl	8006c70 <_malloc_r>
 8007a4a:	9001      	str	r0, [sp, #4]
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d0ee      	beq.n	8007a2e <_realloc_r+0x20>
 8007a50:	002a      	movs	r2, r5
 8007a52:	42bd      	cmp	r5, r7
 8007a54:	d900      	bls.n	8007a58 <_realloc_r+0x4a>
 8007a56:	003a      	movs	r2, r7
 8007a58:	0021      	movs	r1, r4
 8007a5a:	9801      	ldr	r0, [sp, #4]
 8007a5c:	f7ff ff70 	bl	8007940 <memcpy>
 8007a60:	0021      	movs	r1, r4
 8007a62:	0030      	movs	r0, r6
 8007a64:	f7ff f88e 	bl	8006b84 <_free_r>
 8007a68:	9c01      	ldr	r4, [sp, #4]
 8007a6a:	e7da      	b.n	8007a22 <_realloc_r+0x14>

08007a6c <__ascii_wctomb>:
 8007a6c:	0003      	movs	r3, r0
 8007a6e:	1e08      	subs	r0, r1, #0
 8007a70:	d005      	beq.n	8007a7e <__ascii_wctomb+0x12>
 8007a72:	2aff      	cmp	r2, #255	@ 0xff
 8007a74:	d904      	bls.n	8007a80 <__ascii_wctomb+0x14>
 8007a76:	228a      	movs	r2, #138	@ 0x8a
 8007a78:	2001      	movs	r0, #1
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	4240      	negs	r0, r0
 8007a7e:	4770      	bx	lr
 8007a80:	2001      	movs	r0, #1
 8007a82:	700a      	strb	r2, [r1, #0]
 8007a84:	e7fb      	b.n	8007a7e <__ascii_wctomb+0x12>
	...

08007a88 <fiprintf>:
 8007a88:	b40e      	push	{r1, r2, r3}
 8007a8a:	b517      	push	{r0, r1, r2, r4, lr}
 8007a8c:	4c05      	ldr	r4, [pc, #20]	@ (8007aa4 <fiprintf+0x1c>)
 8007a8e:	ab05      	add	r3, sp, #20
 8007a90:	cb04      	ldmia	r3!, {r2}
 8007a92:	0001      	movs	r1, r0
 8007a94:	6820      	ldr	r0, [r4, #0]
 8007a96:	9301      	str	r3, [sp, #4]
 8007a98:	f000 f83c 	bl	8007b14 <_vfiprintf_r>
 8007a9c:	bc1e      	pop	{r1, r2, r3, r4}
 8007a9e:	bc08      	pop	{r3}
 8007aa0:	b003      	add	sp, #12
 8007aa2:	4718      	bx	r3
 8007aa4:	2000004c 	.word	0x2000004c

08007aa8 <abort>:
 8007aa8:	2006      	movs	r0, #6
 8007aaa:	b510      	push	{r4, lr}
 8007aac:	f000 fa18 	bl	8007ee0 <raise>
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f7fb fd9c 	bl	80035ee <_exit>

08007ab6 <_malloc_usable_size_r>:
 8007ab6:	1f0b      	subs	r3, r1, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	1f18      	subs	r0, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da01      	bge.n	8007ac4 <_malloc_usable_size_r+0xe>
 8007ac0:	580b      	ldr	r3, [r1, r0]
 8007ac2:	18c0      	adds	r0, r0, r3
 8007ac4:	4770      	bx	lr

08007ac6 <__sfputc_r>:
 8007ac6:	6893      	ldr	r3, [r2, #8]
 8007ac8:	b510      	push	{r4, lr}
 8007aca:	3b01      	subs	r3, #1
 8007acc:	6093      	str	r3, [r2, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	da04      	bge.n	8007adc <__sfputc_r+0x16>
 8007ad2:	6994      	ldr	r4, [r2, #24]
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	db07      	blt.n	8007ae8 <__sfputc_r+0x22>
 8007ad8:	290a      	cmp	r1, #10
 8007ada:	d005      	beq.n	8007ae8 <__sfputc_r+0x22>
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	1c58      	adds	r0, r3, #1
 8007ae0:	6010      	str	r0, [r2, #0]
 8007ae2:	7019      	strb	r1, [r3, #0]
 8007ae4:	0008      	movs	r0, r1
 8007ae6:	bd10      	pop	{r4, pc}
 8007ae8:	f000 f930 	bl	8007d4c <__swbuf_r>
 8007aec:	0001      	movs	r1, r0
 8007aee:	e7f9      	b.n	8007ae4 <__sfputc_r+0x1e>

08007af0 <__sfputs_r>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	0006      	movs	r6, r0
 8007af4:	000f      	movs	r7, r1
 8007af6:	0014      	movs	r4, r2
 8007af8:	18d5      	adds	r5, r2, r3
 8007afa:	42ac      	cmp	r4, r5
 8007afc:	d101      	bne.n	8007b02 <__sfputs_r+0x12>
 8007afe:	2000      	movs	r0, #0
 8007b00:	e007      	b.n	8007b12 <__sfputs_r+0x22>
 8007b02:	7821      	ldrb	r1, [r4, #0]
 8007b04:	003a      	movs	r2, r7
 8007b06:	0030      	movs	r0, r6
 8007b08:	f7ff ffdd 	bl	8007ac6 <__sfputc_r>
 8007b0c:	3401      	adds	r4, #1
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	d1f3      	bne.n	8007afa <__sfputs_r+0xa>
 8007b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b14 <_vfiprintf_r>:
 8007b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b16:	b0a1      	sub	sp, #132	@ 0x84
 8007b18:	000f      	movs	r7, r1
 8007b1a:	0015      	movs	r5, r2
 8007b1c:	001e      	movs	r6, r3
 8007b1e:	9003      	str	r0, [sp, #12]
 8007b20:	2800      	cmp	r0, #0
 8007b22:	d004      	beq.n	8007b2e <_vfiprintf_r+0x1a>
 8007b24:	6a03      	ldr	r3, [r0, #32]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <_vfiprintf_r+0x1a>
 8007b2a:	f7fe f877 	bl	8005c1c <__sinit>
 8007b2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b30:	07db      	lsls	r3, r3, #31
 8007b32:	d405      	bmi.n	8007b40 <_vfiprintf_r+0x2c>
 8007b34:	89bb      	ldrh	r3, [r7, #12]
 8007b36:	059b      	lsls	r3, r3, #22
 8007b38:	d402      	bmi.n	8007b40 <_vfiprintf_r+0x2c>
 8007b3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007b3c:	f7fe f993 	bl	8005e66 <__retarget_lock_acquire_recursive>
 8007b40:	89bb      	ldrh	r3, [r7, #12]
 8007b42:	071b      	lsls	r3, r3, #28
 8007b44:	d502      	bpl.n	8007b4c <_vfiprintf_r+0x38>
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d113      	bne.n	8007b74 <_vfiprintf_r+0x60>
 8007b4c:	0039      	movs	r1, r7
 8007b4e:	9803      	ldr	r0, [sp, #12]
 8007b50:	f000 f93e 	bl	8007dd0 <__swsetup_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d00d      	beq.n	8007b74 <_vfiprintf_r+0x60>
 8007b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d503      	bpl.n	8007b66 <_vfiprintf_r+0x52>
 8007b5e:	2001      	movs	r0, #1
 8007b60:	4240      	negs	r0, r0
 8007b62:	b021      	add	sp, #132	@ 0x84
 8007b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b66:	89bb      	ldrh	r3, [r7, #12]
 8007b68:	059b      	lsls	r3, r3, #22
 8007b6a:	d4f8      	bmi.n	8007b5e <_vfiprintf_r+0x4a>
 8007b6c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007b6e:	f7fe f97b 	bl	8005e68 <__retarget_lock_release_recursive>
 8007b72:	e7f4      	b.n	8007b5e <_vfiprintf_r+0x4a>
 8007b74:	2300      	movs	r3, #0
 8007b76:	ac08      	add	r4, sp, #32
 8007b78:	6163      	str	r3, [r4, #20]
 8007b7a:	3320      	adds	r3, #32
 8007b7c:	7663      	strb	r3, [r4, #25]
 8007b7e:	3310      	adds	r3, #16
 8007b80:	76a3      	strb	r3, [r4, #26]
 8007b82:	9607      	str	r6, [sp, #28]
 8007b84:	002e      	movs	r6, r5
 8007b86:	7833      	ldrb	r3, [r6, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <_vfiprintf_r+0x7c>
 8007b8c:	2b25      	cmp	r3, #37	@ 0x25
 8007b8e:	d148      	bne.n	8007c22 <_vfiprintf_r+0x10e>
 8007b90:	1b73      	subs	r3, r6, r5
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	42ae      	cmp	r6, r5
 8007b96:	d00b      	beq.n	8007bb0 <_vfiprintf_r+0x9c>
 8007b98:	002a      	movs	r2, r5
 8007b9a:	0039      	movs	r1, r7
 8007b9c:	9803      	ldr	r0, [sp, #12]
 8007b9e:	f7ff ffa7 	bl	8007af0 <__sfputs_r>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d100      	bne.n	8007ba8 <_vfiprintf_r+0x94>
 8007ba6:	e0ae      	b.n	8007d06 <_vfiprintf_r+0x1f2>
 8007ba8:	6963      	ldr	r3, [r4, #20]
 8007baa:	9a05      	ldr	r2, [sp, #20]
 8007bac:	189b      	adds	r3, r3, r2
 8007bae:	6163      	str	r3, [r4, #20]
 8007bb0:	7833      	ldrb	r3, [r6, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d100      	bne.n	8007bb8 <_vfiprintf_r+0xa4>
 8007bb6:	e0a6      	b.n	8007d06 <_vfiprintf_r+0x1f2>
 8007bb8:	2201      	movs	r2, #1
 8007bba:	2300      	movs	r3, #0
 8007bbc:	4252      	negs	r2, r2
 8007bbe:	6062      	str	r2, [r4, #4]
 8007bc0:	a904      	add	r1, sp, #16
 8007bc2:	3254      	adds	r2, #84	@ 0x54
 8007bc4:	1852      	adds	r2, r2, r1
 8007bc6:	1c75      	adds	r5, r6, #1
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	60e3      	str	r3, [r4, #12]
 8007bcc:	60a3      	str	r3, [r4, #8]
 8007bce:	7013      	strb	r3, [r2, #0]
 8007bd0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007bd2:	4b59      	ldr	r3, [pc, #356]	@ (8007d38 <_vfiprintf_r+0x224>)
 8007bd4:	2205      	movs	r2, #5
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	7829      	ldrb	r1, [r5, #0]
 8007bda:	9305      	str	r3, [sp, #20]
 8007bdc:	f7fe f945 	bl	8005e6a <memchr>
 8007be0:	1c6e      	adds	r6, r5, #1
 8007be2:	2800      	cmp	r0, #0
 8007be4:	d11f      	bne.n	8007c26 <_vfiprintf_r+0x112>
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	06d3      	lsls	r3, r2, #27
 8007bea:	d504      	bpl.n	8007bf6 <_vfiprintf_r+0xe2>
 8007bec:	2353      	movs	r3, #83	@ 0x53
 8007bee:	a904      	add	r1, sp, #16
 8007bf0:	185b      	adds	r3, r3, r1
 8007bf2:	2120      	movs	r1, #32
 8007bf4:	7019      	strb	r1, [r3, #0]
 8007bf6:	0713      	lsls	r3, r2, #28
 8007bf8:	d504      	bpl.n	8007c04 <_vfiprintf_r+0xf0>
 8007bfa:	2353      	movs	r3, #83	@ 0x53
 8007bfc:	a904      	add	r1, sp, #16
 8007bfe:	185b      	adds	r3, r3, r1
 8007c00:	212b      	movs	r1, #43	@ 0x2b
 8007c02:	7019      	strb	r1, [r3, #0]
 8007c04:	782b      	ldrb	r3, [r5, #0]
 8007c06:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c08:	d016      	beq.n	8007c38 <_vfiprintf_r+0x124>
 8007c0a:	002e      	movs	r6, r5
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	200a      	movs	r0, #10
 8007c10:	68e3      	ldr	r3, [r4, #12]
 8007c12:	7832      	ldrb	r2, [r6, #0]
 8007c14:	1c75      	adds	r5, r6, #1
 8007c16:	3a30      	subs	r2, #48	@ 0x30
 8007c18:	2a09      	cmp	r2, #9
 8007c1a:	d950      	bls.n	8007cbe <_vfiprintf_r+0x1aa>
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d111      	bne.n	8007c44 <_vfiprintf_r+0x130>
 8007c20:	e017      	b.n	8007c52 <_vfiprintf_r+0x13e>
 8007c22:	3601      	adds	r6, #1
 8007c24:	e7af      	b.n	8007b86 <_vfiprintf_r+0x72>
 8007c26:	9b05      	ldr	r3, [sp, #20]
 8007c28:	6822      	ldr	r2, [r4, #0]
 8007c2a:	1ac0      	subs	r0, r0, r3
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	4083      	lsls	r3, r0
 8007c30:	4313      	orrs	r3, r2
 8007c32:	0035      	movs	r5, r6
 8007c34:	6023      	str	r3, [r4, #0]
 8007c36:	e7cc      	b.n	8007bd2 <_vfiprintf_r+0xbe>
 8007c38:	9b07      	ldr	r3, [sp, #28]
 8007c3a:	1d19      	adds	r1, r3, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	9107      	str	r1, [sp, #28]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	db01      	blt.n	8007c48 <_vfiprintf_r+0x134>
 8007c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c46:	e004      	b.n	8007c52 <_vfiprintf_r+0x13e>
 8007c48:	425b      	negs	r3, r3
 8007c4a:	60e3      	str	r3, [r4, #12]
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	7833      	ldrb	r3, [r6, #0]
 8007c54:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c56:	d10c      	bne.n	8007c72 <_vfiprintf_r+0x15e>
 8007c58:	7873      	ldrb	r3, [r6, #1]
 8007c5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c5c:	d134      	bne.n	8007cc8 <_vfiprintf_r+0x1b4>
 8007c5e:	9b07      	ldr	r3, [sp, #28]
 8007c60:	3602      	adds	r6, #2
 8007c62:	1d1a      	adds	r2, r3, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	9207      	str	r2, [sp, #28]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da01      	bge.n	8007c70 <_vfiprintf_r+0x15c>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	425b      	negs	r3, r3
 8007c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c72:	4d32      	ldr	r5, [pc, #200]	@ (8007d3c <_vfiprintf_r+0x228>)
 8007c74:	2203      	movs	r2, #3
 8007c76:	0028      	movs	r0, r5
 8007c78:	7831      	ldrb	r1, [r6, #0]
 8007c7a:	f7fe f8f6 	bl	8005e6a <memchr>
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d006      	beq.n	8007c90 <_vfiprintf_r+0x17c>
 8007c82:	2340      	movs	r3, #64	@ 0x40
 8007c84:	1b40      	subs	r0, r0, r5
 8007c86:	4083      	lsls	r3, r0
 8007c88:	6822      	ldr	r2, [r4, #0]
 8007c8a:	3601      	adds	r6, #1
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	6023      	str	r3, [r4, #0]
 8007c90:	7831      	ldrb	r1, [r6, #0]
 8007c92:	2206      	movs	r2, #6
 8007c94:	482a      	ldr	r0, [pc, #168]	@ (8007d40 <_vfiprintf_r+0x22c>)
 8007c96:	1c75      	adds	r5, r6, #1
 8007c98:	7621      	strb	r1, [r4, #24]
 8007c9a:	f7fe f8e6 	bl	8005e6a <memchr>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d040      	beq.n	8007d24 <_vfiprintf_r+0x210>
 8007ca2:	4b28      	ldr	r3, [pc, #160]	@ (8007d44 <_vfiprintf_r+0x230>)
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d122      	bne.n	8007cee <_vfiprintf_r+0x1da>
 8007ca8:	2207      	movs	r2, #7
 8007caa:	9b07      	ldr	r3, [sp, #28]
 8007cac:	3307      	adds	r3, #7
 8007cae:	4393      	bics	r3, r2
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	9307      	str	r3, [sp, #28]
 8007cb4:	6963      	ldr	r3, [r4, #20]
 8007cb6:	9a04      	ldr	r2, [sp, #16]
 8007cb8:	189b      	adds	r3, r3, r2
 8007cba:	6163      	str	r3, [r4, #20]
 8007cbc:	e762      	b.n	8007b84 <_vfiprintf_r+0x70>
 8007cbe:	4343      	muls	r3, r0
 8007cc0:	002e      	movs	r6, r5
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	e7a4      	b.n	8007c12 <_vfiprintf_r+0xfe>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	200a      	movs	r0, #10
 8007ccc:	0019      	movs	r1, r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	6063      	str	r3, [r4, #4]
 8007cd2:	7832      	ldrb	r2, [r6, #0]
 8007cd4:	1c75      	adds	r5, r6, #1
 8007cd6:	3a30      	subs	r2, #48	@ 0x30
 8007cd8:	2a09      	cmp	r2, #9
 8007cda:	d903      	bls.n	8007ce4 <_vfiprintf_r+0x1d0>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0c8      	beq.n	8007c72 <_vfiprintf_r+0x15e>
 8007ce0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ce2:	e7c6      	b.n	8007c72 <_vfiprintf_r+0x15e>
 8007ce4:	4341      	muls	r1, r0
 8007ce6:	002e      	movs	r6, r5
 8007ce8:	2301      	movs	r3, #1
 8007cea:	1889      	adds	r1, r1, r2
 8007cec:	e7f1      	b.n	8007cd2 <_vfiprintf_r+0x1be>
 8007cee:	aa07      	add	r2, sp, #28
 8007cf0:	9200      	str	r2, [sp, #0]
 8007cf2:	0021      	movs	r1, r4
 8007cf4:	003a      	movs	r2, r7
 8007cf6:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <_vfiprintf_r+0x234>)
 8007cf8:	9803      	ldr	r0, [sp, #12]
 8007cfa:	f7fd fb43 	bl	8005384 <_printf_float>
 8007cfe:	9004      	str	r0, [sp, #16]
 8007d00:	9b04      	ldr	r3, [sp, #16]
 8007d02:	3301      	adds	r3, #1
 8007d04:	d1d6      	bne.n	8007cb4 <_vfiprintf_r+0x1a0>
 8007d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d08:	07db      	lsls	r3, r3, #31
 8007d0a:	d405      	bmi.n	8007d18 <_vfiprintf_r+0x204>
 8007d0c:	89bb      	ldrh	r3, [r7, #12]
 8007d0e:	059b      	lsls	r3, r3, #22
 8007d10:	d402      	bmi.n	8007d18 <_vfiprintf_r+0x204>
 8007d12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007d14:	f7fe f8a8 	bl	8005e68 <__retarget_lock_release_recursive>
 8007d18:	89bb      	ldrh	r3, [r7, #12]
 8007d1a:	065b      	lsls	r3, r3, #25
 8007d1c:	d500      	bpl.n	8007d20 <_vfiprintf_r+0x20c>
 8007d1e:	e71e      	b.n	8007b5e <_vfiprintf_r+0x4a>
 8007d20:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d22:	e71e      	b.n	8007b62 <_vfiprintf_r+0x4e>
 8007d24:	aa07      	add	r2, sp, #28
 8007d26:	9200      	str	r2, [sp, #0]
 8007d28:	0021      	movs	r1, r4
 8007d2a:	003a      	movs	r2, r7
 8007d2c:	4b06      	ldr	r3, [pc, #24]	@ (8007d48 <_vfiprintf_r+0x234>)
 8007d2e:	9803      	ldr	r0, [sp, #12]
 8007d30:	f7fd fdd6 	bl	80058e0 <_printf_i>
 8007d34:	e7e3      	b.n	8007cfe <_vfiprintf_r+0x1ea>
 8007d36:	46c0      	nop			@ (mov r8, r8)
 8007d38:	080097e0 	.word	0x080097e0
 8007d3c:	080097e6 	.word	0x080097e6
 8007d40:	080097ea 	.word	0x080097ea
 8007d44:	08005385 	.word	0x08005385
 8007d48:	08007af1 	.word	0x08007af1

08007d4c <__swbuf_r>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	0006      	movs	r6, r0
 8007d50:	000d      	movs	r5, r1
 8007d52:	0014      	movs	r4, r2
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d004      	beq.n	8007d62 <__swbuf_r+0x16>
 8007d58:	6a03      	ldr	r3, [r0, #32]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <__swbuf_r+0x16>
 8007d5e:	f7fd ff5d 	bl	8005c1c <__sinit>
 8007d62:	69a3      	ldr	r3, [r4, #24]
 8007d64:	60a3      	str	r3, [r4, #8]
 8007d66:	89a3      	ldrh	r3, [r4, #12]
 8007d68:	071b      	lsls	r3, r3, #28
 8007d6a:	d502      	bpl.n	8007d72 <__swbuf_r+0x26>
 8007d6c:	6923      	ldr	r3, [r4, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <__swbuf_r+0x3a>
 8007d72:	0021      	movs	r1, r4
 8007d74:	0030      	movs	r0, r6
 8007d76:	f000 f82b 	bl	8007dd0 <__swsetup_r>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d003      	beq.n	8007d86 <__swbuf_r+0x3a>
 8007d7e:	2501      	movs	r5, #1
 8007d80:	426d      	negs	r5, r5
 8007d82:	0028      	movs	r0, r5
 8007d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	b2ef      	uxtb	r7, r5
 8007d8c:	1ac0      	subs	r0, r0, r3
 8007d8e:	6963      	ldr	r3, [r4, #20]
 8007d90:	b2ed      	uxtb	r5, r5
 8007d92:	4283      	cmp	r3, r0
 8007d94:	dc05      	bgt.n	8007da2 <__swbuf_r+0x56>
 8007d96:	0021      	movs	r1, r4
 8007d98:	0030      	movs	r0, r6
 8007d9a:	f7ff fd81 	bl	80078a0 <_fflush_r>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	d1ed      	bne.n	8007d7e <__swbuf_r+0x32>
 8007da2:	68a3      	ldr	r3, [r4, #8]
 8007da4:	3001      	adds	r0, #1
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	6823      	ldr	r3, [r4, #0]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	6022      	str	r2, [r4, #0]
 8007db0:	701f      	strb	r7, [r3, #0]
 8007db2:	6963      	ldr	r3, [r4, #20]
 8007db4:	4283      	cmp	r3, r0
 8007db6:	d004      	beq.n	8007dc2 <__swbuf_r+0x76>
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	07db      	lsls	r3, r3, #31
 8007dbc:	d5e1      	bpl.n	8007d82 <__swbuf_r+0x36>
 8007dbe:	2d0a      	cmp	r5, #10
 8007dc0:	d1df      	bne.n	8007d82 <__swbuf_r+0x36>
 8007dc2:	0021      	movs	r1, r4
 8007dc4:	0030      	movs	r0, r6
 8007dc6:	f7ff fd6b 	bl	80078a0 <_fflush_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d0d9      	beq.n	8007d82 <__swbuf_r+0x36>
 8007dce:	e7d6      	b.n	8007d7e <__swbuf_r+0x32>

08007dd0 <__swsetup_r>:
 8007dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8007e88 <__swsetup_r+0xb8>)
 8007dd2:	b570      	push	{r4, r5, r6, lr}
 8007dd4:	0005      	movs	r5, r0
 8007dd6:	6818      	ldr	r0, [r3, #0]
 8007dd8:	000c      	movs	r4, r1
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d004      	beq.n	8007de8 <__swsetup_r+0x18>
 8007dde:	6a03      	ldr	r3, [r0, #32]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <__swsetup_r+0x18>
 8007de4:	f7fd ff1a 	bl	8005c1c <__sinit>
 8007de8:	230c      	movs	r3, #12
 8007dea:	5ee2      	ldrsh	r2, [r4, r3]
 8007dec:	0713      	lsls	r3, r2, #28
 8007dee:	d423      	bmi.n	8007e38 <__swsetup_r+0x68>
 8007df0:	06d3      	lsls	r3, r2, #27
 8007df2:	d407      	bmi.n	8007e04 <__swsetup_r+0x34>
 8007df4:	2309      	movs	r3, #9
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	2340      	movs	r3, #64	@ 0x40
 8007dfa:	2001      	movs	r0, #1
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	81a3      	strh	r3, [r4, #12]
 8007e00:	4240      	negs	r0, r0
 8007e02:	e03a      	b.n	8007e7a <__swsetup_r+0xaa>
 8007e04:	0752      	lsls	r2, r2, #29
 8007e06:	d513      	bpl.n	8007e30 <__swsetup_r+0x60>
 8007e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e0a:	2900      	cmp	r1, #0
 8007e0c:	d008      	beq.n	8007e20 <__swsetup_r+0x50>
 8007e0e:	0023      	movs	r3, r4
 8007e10:	3344      	adds	r3, #68	@ 0x44
 8007e12:	4299      	cmp	r1, r3
 8007e14:	d002      	beq.n	8007e1c <__swsetup_r+0x4c>
 8007e16:	0028      	movs	r0, r5
 8007e18:	f7fe feb4 	bl	8006b84 <_free_r>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e20:	2224      	movs	r2, #36	@ 0x24
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	4393      	bics	r3, r2
 8007e26:	81a3      	strh	r3, [r4, #12]
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6063      	str	r3, [r4, #4]
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	6023      	str	r3, [r4, #0]
 8007e30:	2308      	movs	r3, #8
 8007e32:	89a2      	ldrh	r2, [r4, #12]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	81a3      	strh	r3, [r4, #12]
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10b      	bne.n	8007e56 <__swsetup_r+0x86>
 8007e3e:	21a0      	movs	r1, #160	@ 0xa0
 8007e40:	2280      	movs	r2, #128	@ 0x80
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	0089      	lsls	r1, r1, #2
 8007e46:	0092      	lsls	r2, r2, #2
 8007e48:	400b      	ands	r3, r1
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d003      	beq.n	8007e56 <__swsetup_r+0x86>
 8007e4e:	0021      	movs	r1, r4
 8007e50:	0028      	movs	r0, r5
 8007e52:	f000 f88f 	bl	8007f74 <__smakebuf_r>
 8007e56:	230c      	movs	r3, #12
 8007e58:	5ee2      	ldrsh	r2, [r4, r3]
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	0013      	movs	r3, r2
 8007e5e:	400b      	ands	r3, r1
 8007e60:	420a      	tst	r2, r1
 8007e62:	d00b      	beq.n	8007e7c <__swsetup_r+0xac>
 8007e64:	2300      	movs	r3, #0
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	6963      	ldr	r3, [r4, #20]
 8007e6a:	425b      	negs	r3, r3
 8007e6c:	61a3      	str	r3, [r4, #24]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	6923      	ldr	r3, [r4, #16]
 8007e72:	4283      	cmp	r3, r0
 8007e74:	d101      	bne.n	8007e7a <__swsetup_r+0xaa>
 8007e76:	0613      	lsls	r3, r2, #24
 8007e78:	d4be      	bmi.n	8007df8 <__swsetup_r+0x28>
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	0791      	lsls	r1, r2, #30
 8007e7e:	d400      	bmi.n	8007e82 <__swsetup_r+0xb2>
 8007e80:	6963      	ldr	r3, [r4, #20]
 8007e82:	60a3      	str	r3, [r4, #8]
 8007e84:	e7f3      	b.n	8007e6e <__swsetup_r+0x9e>
 8007e86:	46c0      	nop			@ (mov r8, r8)
 8007e88:	2000004c 	.word	0x2000004c

08007e8c <_raise_r>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	0004      	movs	r4, r0
 8007e90:	000d      	movs	r5, r1
 8007e92:	291f      	cmp	r1, #31
 8007e94:	d904      	bls.n	8007ea0 <_raise_r+0x14>
 8007e96:	2316      	movs	r3, #22
 8007e98:	6003      	str	r3, [r0, #0]
 8007e9a:	2001      	movs	r0, #1
 8007e9c:	4240      	negs	r0, r0
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <_raise_r+0x24>
 8007ea6:	008a      	lsls	r2, r1, #2
 8007ea8:	189b      	adds	r3, r3, r2
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	2a00      	cmp	r2, #0
 8007eae:	d108      	bne.n	8007ec2 <_raise_r+0x36>
 8007eb0:	0020      	movs	r0, r4
 8007eb2:	f000 f831 	bl	8007f18 <_getpid_r>
 8007eb6:	002a      	movs	r2, r5
 8007eb8:	0001      	movs	r1, r0
 8007eba:	0020      	movs	r0, r4
 8007ebc:	f000 f81a 	bl	8007ef4 <_kill_r>
 8007ec0:	e7ed      	b.n	8007e9e <_raise_r+0x12>
 8007ec2:	2a01      	cmp	r2, #1
 8007ec4:	d009      	beq.n	8007eda <_raise_r+0x4e>
 8007ec6:	1c51      	adds	r1, r2, #1
 8007ec8:	d103      	bne.n	8007ed2 <_raise_r+0x46>
 8007eca:	2316      	movs	r3, #22
 8007ecc:	6003      	str	r3, [r0, #0]
 8007ece:	2001      	movs	r0, #1
 8007ed0:	e7e5      	b.n	8007e9e <_raise_r+0x12>
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	0028      	movs	r0, r5
 8007ed6:	6019      	str	r1, [r3, #0]
 8007ed8:	4790      	blx	r2
 8007eda:	2000      	movs	r0, #0
 8007edc:	e7df      	b.n	8007e9e <_raise_r+0x12>
	...

08007ee0 <raise>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	4b03      	ldr	r3, [pc, #12]	@ (8007ef0 <raise+0x10>)
 8007ee4:	0001      	movs	r1, r0
 8007ee6:	6818      	ldr	r0, [r3, #0]
 8007ee8:	f7ff ffd0 	bl	8007e8c <_raise_r>
 8007eec:	bd10      	pop	{r4, pc}
 8007eee:	46c0      	nop			@ (mov r8, r8)
 8007ef0:	2000004c 	.word	0x2000004c

08007ef4 <_kill_r>:
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	b570      	push	{r4, r5, r6, lr}
 8007ef8:	4d06      	ldr	r5, [pc, #24]	@ (8007f14 <_kill_r+0x20>)
 8007efa:	0004      	movs	r4, r0
 8007efc:	0008      	movs	r0, r1
 8007efe:	0011      	movs	r1, r2
 8007f00:	602b      	str	r3, [r5, #0]
 8007f02:	f7fb fb64 	bl	80035ce <_kill>
 8007f06:	1c43      	adds	r3, r0, #1
 8007f08:	d103      	bne.n	8007f12 <_kill_r+0x1e>
 8007f0a:	682b      	ldr	r3, [r5, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d000      	beq.n	8007f12 <_kill_r+0x1e>
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	bd70      	pop	{r4, r5, r6, pc}
 8007f14:	20000818 	.word	0x20000818

08007f18 <_getpid_r>:
 8007f18:	b510      	push	{r4, lr}
 8007f1a:	f7fb fb52 	bl	80035c2 <_getpid>
 8007f1e:	bd10      	pop	{r4, pc}

08007f20 <__swhatbuf_r>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	000e      	movs	r6, r1
 8007f24:	001d      	movs	r5, r3
 8007f26:	230e      	movs	r3, #14
 8007f28:	5ec9      	ldrsh	r1, [r1, r3]
 8007f2a:	0014      	movs	r4, r2
 8007f2c:	b096      	sub	sp, #88	@ 0x58
 8007f2e:	2900      	cmp	r1, #0
 8007f30:	da0c      	bge.n	8007f4c <__swhatbuf_r+0x2c>
 8007f32:	89b2      	ldrh	r2, [r6, #12]
 8007f34:	2380      	movs	r3, #128	@ 0x80
 8007f36:	0011      	movs	r1, r2
 8007f38:	4019      	ands	r1, r3
 8007f3a:	421a      	tst	r2, r3
 8007f3c:	d114      	bne.n	8007f68 <__swhatbuf_r+0x48>
 8007f3e:	2380      	movs	r3, #128	@ 0x80
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	2000      	movs	r0, #0
 8007f44:	6029      	str	r1, [r5, #0]
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	b016      	add	sp, #88	@ 0x58
 8007f4a:	bd70      	pop	{r4, r5, r6, pc}
 8007f4c:	466a      	mov	r2, sp
 8007f4e:	f000 f853 	bl	8007ff8 <_fstat_r>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	dbed      	blt.n	8007f32 <__swhatbuf_r+0x12>
 8007f56:	23f0      	movs	r3, #240	@ 0xf0
 8007f58:	9901      	ldr	r1, [sp, #4]
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	4019      	ands	r1, r3
 8007f5e:	4b04      	ldr	r3, [pc, #16]	@ (8007f70 <__swhatbuf_r+0x50>)
 8007f60:	18c9      	adds	r1, r1, r3
 8007f62:	424b      	negs	r3, r1
 8007f64:	4159      	adcs	r1, r3
 8007f66:	e7ea      	b.n	8007f3e <__swhatbuf_r+0x1e>
 8007f68:	2100      	movs	r1, #0
 8007f6a:	2340      	movs	r3, #64	@ 0x40
 8007f6c:	e7e9      	b.n	8007f42 <__swhatbuf_r+0x22>
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	ffffe000 	.word	0xffffe000

08007f74 <__smakebuf_r>:
 8007f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f76:	2602      	movs	r6, #2
 8007f78:	898b      	ldrh	r3, [r1, #12]
 8007f7a:	0005      	movs	r5, r0
 8007f7c:	000c      	movs	r4, r1
 8007f7e:	b085      	sub	sp, #20
 8007f80:	4233      	tst	r3, r6
 8007f82:	d007      	beq.n	8007f94 <__smakebuf_r+0x20>
 8007f84:	0023      	movs	r3, r4
 8007f86:	3347      	adds	r3, #71	@ 0x47
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	6123      	str	r3, [r4, #16]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	6163      	str	r3, [r4, #20]
 8007f90:	b005      	add	sp, #20
 8007f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f94:	ab03      	add	r3, sp, #12
 8007f96:	aa02      	add	r2, sp, #8
 8007f98:	f7ff ffc2 	bl	8007f20 <__swhatbuf_r>
 8007f9c:	9f02      	ldr	r7, [sp, #8]
 8007f9e:	9001      	str	r0, [sp, #4]
 8007fa0:	0039      	movs	r1, r7
 8007fa2:	0028      	movs	r0, r5
 8007fa4:	f7fe fe64 	bl	8006c70 <_malloc_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d108      	bne.n	8007fbe <__smakebuf_r+0x4a>
 8007fac:	220c      	movs	r2, #12
 8007fae:	5ea3      	ldrsh	r3, [r4, r2]
 8007fb0:	059a      	lsls	r2, r3, #22
 8007fb2:	d4ed      	bmi.n	8007f90 <__smakebuf_r+0x1c>
 8007fb4:	2203      	movs	r2, #3
 8007fb6:	4393      	bics	r3, r2
 8007fb8:	431e      	orrs	r6, r3
 8007fba:	81a6      	strh	r6, [r4, #12]
 8007fbc:	e7e2      	b.n	8007f84 <__smakebuf_r+0x10>
 8007fbe:	2380      	movs	r3, #128	@ 0x80
 8007fc0:	89a2      	ldrh	r2, [r4, #12]
 8007fc2:	6020      	str	r0, [r4, #0]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	81a3      	strh	r3, [r4, #12]
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	6120      	str	r0, [r4, #16]
 8007fcc:	6167      	str	r7, [r4, #20]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00c      	beq.n	8007fec <__smakebuf_r+0x78>
 8007fd2:	0028      	movs	r0, r5
 8007fd4:	230e      	movs	r3, #14
 8007fd6:	5ee1      	ldrsh	r1, [r4, r3]
 8007fd8:	f000 f820 	bl	800801c <_isatty_r>
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d005      	beq.n	8007fec <__smakebuf_r+0x78>
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	89a2      	ldrh	r2, [r4, #12]
 8007fe4:	439a      	bics	r2, r3
 8007fe6:	3b02      	subs	r3, #2
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	81a3      	strh	r3, [r4, #12]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	9a01      	ldr	r2, [sp, #4]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	e7cc      	b.n	8007f90 <__smakebuf_r+0x1c>
	...

08007ff8 <_fstat_r>:
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	b570      	push	{r4, r5, r6, lr}
 8007ffc:	4d06      	ldr	r5, [pc, #24]	@ (8008018 <_fstat_r+0x20>)
 8007ffe:	0004      	movs	r4, r0
 8008000:	0008      	movs	r0, r1
 8008002:	0011      	movs	r1, r2
 8008004:	602b      	str	r3, [r5, #0]
 8008006:	f7fb fb42 	bl	800368e <_fstat>
 800800a:	1c43      	adds	r3, r0, #1
 800800c:	d103      	bne.n	8008016 <_fstat_r+0x1e>
 800800e:	682b      	ldr	r3, [r5, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d000      	beq.n	8008016 <_fstat_r+0x1e>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	20000818 	.word	0x20000818

0800801c <_isatty_r>:
 800801c:	2300      	movs	r3, #0
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	4d06      	ldr	r5, [pc, #24]	@ (800803c <_isatty_r+0x20>)
 8008022:	0004      	movs	r4, r0
 8008024:	0008      	movs	r0, r1
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	f7fb fb3f 	bl	80036aa <_isatty>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d103      	bne.n	8008038 <_isatty_r+0x1c>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d000      	beq.n	8008038 <_isatty_r+0x1c>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	20000818 	.word	0x20000818

08008040 <_init>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	46c0      	nop			@ (mov r8, r8)
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr

0800804c <_fini>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr

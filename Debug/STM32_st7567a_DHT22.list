
STM32_st7567a_DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fa4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e0  08008068  08008068  00009068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009948  08009948  0000b208  2**0
                  CONTENTS
  4 .ARM          00000000  08009948  08009948  0000b208  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009948  08009948  0000b208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009948  08009948  0000a948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800994c  0800994c  0000a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08009950  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000208  08009b58  0000b208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000828  08009b58  0000b828  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a94e  00000000  00000000  0000b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e67  00000000  00000000  00015b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  000179e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000954  00000000  00000000  00018618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113b9  00000000  00000000  00018f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e854  00000000  00000000  0002a325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000655a4  00000000  00000000  00038b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009e11d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  0009e160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a1e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800804c 	.word	0x0800804c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	0800804c 	.word	0x0800804c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f935 	bl	80016ac <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f875 	bl	800153c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f927 	bl	80016ac <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f91d 	bl	80016ac <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f89f 	bl	80015c4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f895 	bl	80015c4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fmul>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0243      	lsls	r3, r0, #9
 80004b2:	0a5b      	lsrs	r3, r3, #9
 80004b4:	0045      	lsls	r5, r0, #1
 80004b6:	b5c0      	push	{r6, r7, lr}
 80004b8:	4699      	mov	r9, r3
 80004ba:	1c0f      	adds	r7, r1, #0
 80004bc:	0e2d      	lsrs	r5, r5, #24
 80004be:	0fc6      	lsrs	r6, r0, #31
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d100      	bne.n	80004c6 <__aeabi_fmul+0x1e>
 80004c4:	e088      	b.n	80005d8 <__aeabi_fmul+0x130>
 80004c6:	2dff      	cmp	r5, #255	@ 0xff
 80004c8:	d100      	bne.n	80004cc <__aeabi_fmul+0x24>
 80004ca:	e08d      	b.n	80005e8 <__aeabi_fmul+0x140>
 80004cc:	2280      	movs	r2, #128	@ 0x80
 80004ce:	00db      	lsls	r3, r3, #3
 80004d0:	04d2      	lsls	r2, r2, #19
 80004d2:	431a      	orrs	r2, r3
 80004d4:	2300      	movs	r3, #0
 80004d6:	4691      	mov	r9, r2
 80004d8:	4698      	mov	r8, r3
 80004da:	469a      	mov	sl, r3
 80004dc:	3d7f      	subs	r5, #127	@ 0x7f
 80004de:	027c      	lsls	r4, r7, #9
 80004e0:	007b      	lsls	r3, r7, #1
 80004e2:	0a64      	lsrs	r4, r4, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	0fff      	lsrs	r7, r7, #31
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d068      	beq.n	80005be <__aeabi_fmul+0x116>
 80004ec:	2bff      	cmp	r3, #255	@ 0xff
 80004ee:	d021      	beq.n	8000534 <__aeabi_fmul+0x8c>
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	00e4      	lsls	r4, r4, #3
 80004f4:	04d2      	lsls	r2, r2, #19
 80004f6:	4314      	orrs	r4, r2
 80004f8:	4642      	mov	r2, r8
 80004fa:	3b7f      	subs	r3, #127	@ 0x7f
 80004fc:	195b      	adds	r3, r3, r5
 80004fe:	2100      	movs	r1, #0
 8000500:	1c5d      	adds	r5, r3, #1
 8000502:	2a0a      	cmp	r2, #10
 8000504:	dc2e      	bgt.n	8000564 <__aeabi_fmul+0xbc>
 8000506:	407e      	eors	r6, r7
 8000508:	4642      	mov	r2, r8
 800050a:	2a02      	cmp	r2, #2
 800050c:	dc23      	bgt.n	8000556 <__aeabi_fmul+0xae>
 800050e:	3a01      	subs	r2, #1
 8000510:	2a01      	cmp	r2, #1
 8000512:	d900      	bls.n	8000516 <__aeabi_fmul+0x6e>
 8000514:	e0bd      	b.n	8000692 <__aeabi_fmul+0x1ea>
 8000516:	2902      	cmp	r1, #2
 8000518:	d06e      	beq.n	80005f8 <__aeabi_fmul+0x150>
 800051a:	2901      	cmp	r1, #1
 800051c:	d12c      	bne.n	8000578 <__aeabi_fmul+0xd0>
 800051e:	2000      	movs	r0, #0
 8000520:	2200      	movs	r2, #0
 8000522:	05c0      	lsls	r0, r0, #23
 8000524:	07f6      	lsls	r6, r6, #31
 8000526:	4310      	orrs	r0, r2
 8000528:	4330      	orrs	r0, r6
 800052a:	bce0      	pop	{r5, r6, r7}
 800052c:	46ba      	mov	sl, r7
 800052e:	46b1      	mov	r9, r6
 8000530:	46a8      	mov	r8, r5
 8000532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000534:	002b      	movs	r3, r5
 8000536:	33ff      	adds	r3, #255	@ 0xff
 8000538:	2c00      	cmp	r4, #0
 800053a:	d065      	beq.n	8000608 <__aeabi_fmul+0x160>
 800053c:	2203      	movs	r2, #3
 800053e:	4641      	mov	r1, r8
 8000540:	4311      	orrs	r1, r2
 8000542:	0032      	movs	r2, r6
 8000544:	3501      	adds	r5, #1
 8000546:	4688      	mov	r8, r1
 8000548:	407a      	eors	r2, r7
 800054a:	35ff      	adds	r5, #255	@ 0xff
 800054c:	290a      	cmp	r1, #10
 800054e:	dd00      	ble.n	8000552 <__aeabi_fmul+0xaa>
 8000550:	e0d8      	b.n	8000704 <__aeabi_fmul+0x25c>
 8000552:	0016      	movs	r6, r2
 8000554:	2103      	movs	r1, #3
 8000556:	4640      	mov	r0, r8
 8000558:	2201      	movs	r2, #1
 800055a:	4082      	lsls	r2, r0
 800055c:	20a6      	movs	r0, #166	@ 0xa6
 800055e:	00c0      	lsls	r0, r0, #3
 8000560:	4202      	tst	r2, r0
 8000562:	d020      	beq.n	80005a6 <__aeabi_fmul+0xfe>
 8000564:	4653      	mov	r3, sl
 8000566:	2b02      	cmp	r3, #2
 8000568:	d046      	beq.n	80005f8 <__aeabi_fmul+0x150>
 800056a:	2b03      	cmp	r3, #3
 800056c:	d100      	bne.n	8000570 <__aeabi_fmul+0xc8>
 800056e:	e0bb      	b.n	80006e8 <__aeabi_fmul+0x240>
 8000570:	4651      	mov	r1, sl
 8000572:	464c      	mov	r4, r9
 8000574:	2901      	cmp	r1, #1
 8000576:	d0d2      	beq.n	800051e <__aeabi_fmul+0x76>
 8000578:	002b      	movs	r3, r5
 800057a:	337f      	adds	r3, #127	@ 0x7f
 800057c:	2b00      	cmp	r3, #0
 800057e:	dd70      	ble.n	8000662 <__aeabi_fmul+0x1ba>
 8000580:	0762      	lsls	r2, r4, #29
 8000582:	d004      	beq.n	800058e <__aeabi_fmul+0xe6>
 8000584:	220f      	movs	r2, #15
 8000586:	4022      	ands	r2, r4
 8000588:	2a04      	cmp	r2, #4
 800058a:	d000      	beq.n	800058e <__aeabi_fmul+0xe6>
 800058c:	3404      	adds	r4, #4
 800058e:	0122      	lsls	r2, r4, #4
 8000590:	d503      	bpl.n	800059a <__aeabi_fmul+0xf2>
 8000592:	4b63      	ldr	r3, [pc, #396]	@ (8000720 <__aeabi_fmul+0x278>)
 8000594:	401c      	ands	r4, r3
 8000596:	002b      	movs	r3, r5
 8000598:	3380      	adds	r3, #128	@ 0x80
 800059a:	2bfe      	cmp	r3, #254	@ 0xfe
 800059c:	dc2c      	bgt.n	80005f8 <__aeabi_fmul+0x150>
 800059e:	01a2      	lsls	r2, r4, #6
 80005a0:	0a52      	lsrs	r2, r2, #9
 80005a2:	b2d8      	uxtb	r0, r3
 80005a4:	e7bd      	b.n	8000522 <__aeabi_fmul+0x7a>
 80005a6:	2090      	movs	r0, #144	@ 0x90
 80005a8:	0080      	lsls	r0, r0, #2
 80005aa:	4202      	tst	r2, r0
 80005ac:	d127      	bne.n	80005fe <__aeabi_fmul+0x156>
 80005ae:	38b9      	subs	r0, #185	@ 0xb9
 80005b0:	38ff      	subs	r0, #255	@ 0xff
 80005b2:	4210      	tst	r0, r2
 80005b4:	d06d      	beq.n	8000692 <__aeabi_fmul+0x1ea>
 80005b6:	003e      	movs	r6, r7
 80005b8:	46a1      	mov	r9, r4
 80005ba:	468a      	mov	sl, r1
 80005bc:	e7d2      	b.n	8000564 <__aeabi_fmul+0xbc>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d141      	bne.n	8000646 <__aeabi_fmul+0x19e>
 80005c2:	2301      	movs	r3, #1
 80005c4:	4642      	mov	r2, r8
 80005c6:	431a      	orrs	r2, r3
 80005c8:	4690      	mov	r8, r2
 80005ca:	002b      	movs	r3, r5
 80005cc:	4642      	mov	r2, r8
 80005ce:	2101      	movs	r1, #1
 80005d0:	1c5d      	adds	r5, r3, #1
 80005d2:	2a0a      	cmp	r2, #10
 80005d4:	dd97      	ble.n	8000506 <__aeabi_fmul+0x5e>
 80005d6:	e7c5      	b.n	8000564 <__aeabi_fmul+0xbc>
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d126      	bne.n	800062a <__aeabi_fmul+0x182>
 80005dc:	2304      	movs	r3, #4
 80005de:	4698      	mov	r8, r3
 80005e0:	3b03      	subs	r3, #3
 80005e2:	2500      	movs	r5, #0
 80005e4:	469a      	mov	sl, r3
 80005e6:	e77a      	b.n	80004de <__aeabi_fmul+0x36>
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d118      	bne.n	800061e <__aeabi_fmul+0x176>
 80005ec:	2308      	movs	r3, #8
 80005ee:	4698      	mov	r8, r3
 80005f0:	3b06      	subs	r3, #6
 80005f2:	25ff      	movs	r5, #255	@ 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e772      	b.n	80004de <__aeabi_fmul+0x36>
 80005f8:	20ff      	movs	r0, #255	@ 0xff
 80005fa:	2200      	movs	r2, #0
 80005fc:	e791      	b.n	8000522 <__aeabi_fmul+0x7a>
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	2600      	movs	r6, #0
 8000602:	20ff      	movs	r0, #255	@ 0xff
 8000604:	03d2      	lsls	r2, r2, #15
 8000606:	e78c      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000608:	4641      	mov	r1, r8
 800060a:	2202      	movs	r2, #2
 800060c:	3501      	adds	r5, #1
 800060e:	4311      	orrs	r1, r2
 8000610:	4688      	mov	r8, r1
 8000612:	35ff      	adds	r5, #255	@ 0xff
 8000614:	290a      	cmp	r1, #10
 8000616:	dca5      	bgt.n	8000564 <__aeabi_fmul+0xbc>
 8000618:	2102      	movs	r1, #2
 800061a:	407e      	eors	r6, r7
 800061c:	e774      	b.n	8000508 <__aeabi_fmul+0x60>
 800061e:	230c      	movs	r3, #12
 8000620:	4698      	mov	r8, r3
 8000622:	3b09      	subs	r3, #9
 8000624:	25ff      	movs	r5, #255	@ 0xff
 8000626:	469a      	mov	sl, r3
 8000628:	e759      	b.n	80004de <__aeabi_fmul+0x36>
 800062a:	0018      	movs	r0, r3
 800062c:	f002 f80c 	bl	8002648 <__clzsi2>
 8000630:	464a      	mov	r2, r9
 8000632:	1f43      	subs	r3, r0, #5
 8000634:	2576      	movs	r5, #118	@ 0x76
 8000636:	409a      	lsls	r2, r3
 8000638:	2300      	movs	r3, #0
 800063a:	426d      	negs	r5, r5
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	469a      	mov	sl, r3
 8000642:	1a2d      	subs	r5, r5, r0
 8000644:	e74b      	b.n	80004de <__aeabi_fmul+0x36>
 8000646:	0020      	movs	r0, r4
 8000648:	f001 fffe 	bl	8002648 <__clzsi2>
 800064c:	4642      	mov	r2, r8
 800064e:	1f43      	subs	r3, r0, #5
 8000650:	409c      	lsls	r4, r3
 8000652:	1a2b      	subs	r3, r5, r0
 8000654:	3b76      	subs	r3, #118	@ 0x76
 8000656:	2100      	movs	r1, #0
 8000658:	1c5d      	adds	r5, r3, #1
 800065a:	2a0a      	cmp	r2, #10
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fmul+0x1b8>
 800065e:	e752      	b.n	8000506 <__aeabi_fmul+0x5e>
 8000660:	e780      	b.n	8000564 <__aeabi_fmul+0xbc>
 8000662:	2201      	movs	r2, #1
 8000664:	1ad3      	subs	r3, r2, r3
 8000666:	2b1b      	cmp	r3, #27
 8000668:	dd00      	ble.n	800066c <__aeabi_fmul+0x1c4>
 800066a:	e758      	b.n	800051e <__aeabi_fmul+0x76>
 800066c:	359e      	adds	r5, #158	@ 0x9e
 800066e:	0022      	movs	r2, r4
 8000670:	40ac      	lsls	r4, r5
 8000672:	40da      	lsrs	r2, r3
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4322      	orrs	r2, r4
 800067a:	0753      	lsls	r3, r2, #29
 800067c:	d004      	beq.n	8000688 <__aeabi_fmul+0x1e0>
 800067e:	230f      	movs	r3, #15
 8000680:	4013      	ands	r3, r2
 8000682:	2b04      	cmp	r3, #4
 8000684:	d000      	beq.n	8000688 <__aeabi_fmul+0x1e0>
 8000686:	3204      	adds	r2, #4
 8000688:	0153      	lsls	r3, r2, #5
 800068a:	d537      	bpl.n	80006fc <__aeabi_fmul+0x254>
 800068c:	2001      	movs	r0, #1
 800068e:	2200      	movs	r2, #0
 8000690:	e747      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000692:	0c21      	lsrs	r1, r4, #16
 8000694:	464a      	mov	r2, r9
 8000696:	0424      	lsls	r4, r4, #16
 8000698:	0c24      	lsrs	r4, r4, #16
 800069a:	0027      	movs	r7, r4
 800069c:	0c10      	lsrs	r0, r2, #16
 800069e:	0412      	lsls	r2, r2, #16
 80006a0:	0c12      	lsrs	r2, r2, #16
 80006a2:	4344      	muls	r4, r0
 80006a4:	4357      	muls	r7, r2
 80006a6:	4348      	muls	r0, r1
 80006a8:	4351      	muls	r1, r2
 80006aa:	0c3a      	lsrs	r2, r7, #16
 80006ac:	1909      	adds	r1, r1, r4
 80006ae:	1852      	adds	r2, r2, r1
 80006b0:	4294      	cmp	r4, r2
 80006b2:	d903      	bls.n	80006bc <__aeabi_fmul+0x214>
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	0249      	lsls	r1, r1, #9
 80006b8:	468c      	mov	ip, r1
 80006ba:	4460      	add	r0, ip
 80006bc:	043f      	lsls	r7, r7, #16
 80006be:	0411      	lsls	r1, r2, #16
 80006c0:	0c3f      	lsrs	r7, r7, #16
 80006c2:	19c9      	adds	r1, r1, r7
 80006c4:	018c      	lsls	r4, r1, #6
 80006c6:	1e67      	subs	r7, r4, #1
 80006c8:	41bc      	sbcs	r4, r7
 80006ca:	0c12      	lsrs	r2, r2, #16
 80006cc:	0e89      	lsrs	r1, r1, #26
 80006ce:	1812      	adds	r2, r2, r0
 80006d0:	430c      	orrs	r4, r1
 80006d2:	0192      	lsls	r2, r2, #6
 80006d4:	4314      	orrs	r4, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	d50e      	bpl.n	80006f8 <__aeabi_fmul+0x250>
 80006da:	2301      	movs	r3, #1
 80006dc:	0862      	lsrs	r2, r4, #1
 80006de:	401c      	ands	r4, r3
 80006e0:	4314      	orrs	r4, r2
 80006e2:	e749      	b.n	8000578 <__aeabi_fmul+0xd0>
 80006e4:	003e      	movs	r6, r7
 80006e6:	46a1      	mov	r9, r4
 80006e8:	2280      	movs	r2, #128	@ 0x80
 80006ea:	464b      	mov	r3, r9
 80006ec:	03d2      	lsls	r2, r2, #15
 80006ee:	431a      	orrs	r2, r3
 80006f0:	0252      	lsls	r2, r2, #9
 80006f2:	20ff      	movs	r0, #255	@ 0xff
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	e714      	b.n	8000522 <__aeabi_fmul+0x7a>
 80006f8:	001d      	movs	r5, r3
 80006fa:	e73d      	b.n	8000578 <__aeabi_fmul+0xd0>
 80006fc:	0192      	lsls	r2, r2, #6
 80006fe:	2000      	movs	r0, #0
 8000700:	0a52      	lsrs	r2, r2, #9
 8000702:	e70e      	b.n	8000522 <__aeabi_fmul+0x7a>
 8000704:	290f      	cmp	r1, #15
 8000706:	d1ed      	bne.n	80006e4 <__aeabi_fmul+0x23c>
 8000708:	2280      	movs	r2, #128	@ 0x80
 800070a:	464b      	mov	r3, r9
 800070c:	03d2      	lsls	r2, r2, #15
 800070e:	4213      	tst	r3, r2
 8000710:	d0ea      	beq.n	80006e8 <__aeabi_fmul+0x240>
 8000712:	4214      	tst	r4, r2
 8000714:	d1e8      	bne.n	80006e8 <__aeabi_fmul+0x240>
 8000716:	003e      	movs	r6, r7
 8000718:	20ff      	movs	r0, #255	@ 0xff
 800071a:	4322      	orrs	r2, r4
 800071c:	e701      	b.n	8000522 <__aeabi_fmul+0x7a>
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	f7ffffff 	.word	0xf7ffffff

08000724 <__aeabi_i2f>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	2800      	cmp	r0, #0
 8000728:	d013      	beq.n	8000752 <__aeabi_i2f+0x2e>
 800072a:	17c3      	asrs	r3, r0, #31
 800072c:	18c5      	adds	r5, r0, r3
 800072e:	405d      	eors	r5, r3
 8000730:	0fc4      	lsrs	r4, r0, #31
 8000732:	0028      	movs	r0, r5
 8000734:	f001 ff88 	bl	8002648 <__clzsi2>
 8000738:	239e      	movs	r3, #158	@ 0x9e
 800073a:	0001      	movs	r1, r0
 800073c:	1a1b      	subs	r3, r3, r0
 800073e:	2b96      	cmp	r3, #150	@ 0x96
 8000740:	dc0f      	bgt.n	8000762 <__aeabi_i2f+0x3e>
 8000742:	2808      	cmp	r0, #8
 8000744:	d034      	beq.n	80007b0 <__aeabi_i2f+0x8c>
 8000746:	3908      	subs	r1, #8
 8000748:	408d      	lsls	r5, r1
 800074a:	026d      	lsls	r5, r5, #9
 800074c:	0a6d      	lsrs	r5, r5, #9
 800074e:	b2d8      	uxtb	r0, r3
 8000750:	e002      	b.n	8000758 <__aeabi_i2f+0x34>
 8000752:	2400      	movs	r4, #0
 8000754:	2000      	movs	r0, #0
 8000756:	2500      	movs	r5, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	4328      	orrs	r0, r5
 800075c:	07e4      	lsls	r4, r4, #31
 800075e:	4320      	orrs	r0, r4
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	2b99      	cmp	r3, #153	@ 0x99
 8000764:	dc16      	bgt.n	8000794 <__aeabi_i2f+0x70>
 8000766:	1f42      	subs	r2, r0, #5
 8000768:	2805      	cmp	r0, #5
 800076a:	d000      	beq.n	800076e <__aeabi_i2f+0x4a>
 800076c:	4095      	lsls	r5, r2
 800076e:	002a      	movs	r2, r5
 8000770:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <__aeabi_i2f+0x94>)
 8000772:	4002      	ands	r2, r0
 8000774:	076e      	lsls	r6, r5, #29
 8000776:	d009      	beq.n	800078c <__aeabi_i2f+0x68>
 8000778:	260f      	movs	r6, #15
 800077a:	4035      	ands	r5, r6
 800077c:	2d04      	cmp	r5, #4
 800077e:	d005      	beq.n	800078c <__aeabi_i2f+0x68>
 8000780:	3204      	adds	r2, #4
 8000782:	0155      	lsls	r5, r2, #5
 8000784:	d502      	bpl.n	800078c <__aeabi_i2f+0x68>
 8000786:	239f      	movs	r3, #159	@ 0x9f
 8000788:	4002      	ands	r2, r0
 800078a:	1a5b      	subs	r3, r3, r1
 800078c:	0192      	lsls	r2, r2, #6
 800078e:	0a55      	lsrs	r5, r2, #9
 8000790:	b2d8      	uxtb	r0, r3
 8000792:	e7e1      	b.n	8000758 <__aeabi_i2f+0x34>
 8000794:	2205      	movs	r2, #5
 8000796:	1a12      	subs	r2, r2, r0
 8000798:	0028      	movs	r0, r5
 800079a:	40d0      	lsrs	r0, r2
 800079c:	0002      	movs	r2, r0
 800079e:	0008      	movs	r0, r1
 80007a0:	301b      	adds	r0, #27
 80007a2:	4085      	lsls	r5, r0
 80007a4:	0028      	movs	r0, r5
 80007a6:	1e45      	subs	r5, r0, #1
 80007a8:	41a8      	sbcs	r0, r5
 80007aa:	4302      	orrs	r2, r0
 80007ac:	0015      	movs	r5, r2
 80007ae:	e7de      	b.n	800076e <__aeabi_i2f+0x4a>
 80007b0:	026d      	lsls	r5, r5, #9
 80007b2:	2096      	movs	r0, #150	@ 0x96
 80007b4:	0a6d      	lsrs	r5, r5, #9
 80007b6:	e7cf      	b.n	8000758 <__aeabi_i2f+0x34>
 80007b8:	fbffffff 	.word	0xfbffffff

080007bc <__aeabi_ui2f>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	1e04      	subs	r4, r0, #0
 80007c0:	d00e      	beq.n	80007e0 <__aeabi_ui2f+0x24>
 80007c2:	f001 ff41 	bl	8002648 <__clzsi2>
 80007c6:	239e      	movs	r3, #158	@ 0x9e
 80007c8:	0001      	movs	r1, r0
 80007ca:	1a1b      	subs	r3, r3, r0
 80007cc:	2b96      	cmp	r3, #150	@ 0x96
 80007ce:	dc0c      	bgt.n	80007ea <__aeabi_ui2f+0x2e>
 80007d0:	2808      	cmp	r0, #8
 80007d2:	d02f      	beq.n	8000834 <__aeabi_ui2f+0x78>
 80007d4:	3908      	subs	r1, #8
 80007d6:	408c      	lsls	r4, r1
 80007d8:	0264      	lsls	r4, r4, #9
 80007da:	0a64      	lsrs	r4, r4, #9
 80007dc:	b2d8      	uxtb	r0, r3
 80007de:	e001      	b.n	80007e4 <__aeabi_ui2f+0x28>
 80007e0:	2000      	movs	r0, #0
 80007e2:	2400      	movs	r4, #0
 80007e4:	05c0      	lsls	r0, r0, #23
 80007e6:	4320      	orrs	r0, r4
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	2b99      	cmp	r3, #153	@ 0x99
 80007ec:	dc16      	bgt.n	800081c <__aeabi_ui2f+0x60>
 80007ee:	1f42      	subs	r2, r0, #5
 80007f0:	2805      	cmp	r0, #5
 80007f2:	d000      	beq.n	80007f6 <__aeabi_ui2f+0x3a>
 80007f4:	4094      	lsls	r4, r2
 80007f6:	0022      	movs	r2, r4
 80007f8:	4810      	ldr	r0, [pc, #64]	@ (800083c <__aeabi_ui2f+0x80>)
 80007fa:	4002      	ands	r2, r0
 80007fc:	0765      	lsls	r5, r4, #29
 80007fe:	d009      	beq.n	8000814 <__aeabi_ui2f+0x58>
 8000800:	250f      	movs	r5, #15
 8000802:	402c      	ands	r4, r5
 8000804:	2c04      	cmp	r4, #4
 8000806:	d005      	beq.n	8000814 <__aeabi_ui2f+0x58>
 8000808:	3204      	adds	r2, #4
 800080a:	0154      	lsls	r4, r2, #5
 800080c:	d502      	bpl.n	8000814 <__aeabi_ui2f+0x58>
 800080e:	239f      	movs	r3, #159	@ 0x9f
 8000810:	4002      	ands	r2, r0
 8000812:	1a5b      	subs	r3, r3, r1
 8000814:	0192      	lsls	r2, r2, #6
 8000816:	0a54      	lsrs	r4, r2, #9
 8000818:	b2d8      	uxtb	r0, r3
 800081a:	e7e3      	b.n	80007e4 <__aeabi_ui2f+0x28>
 800081c:	0002      	movs	r2, r0
 800081e:	0020      	movs	r0, r4
 8000820:	321b      	adds	r2, #27
 8000822:	4090      	lsls	r0, r2
 8000824:	0002      	movs	r2, r0
 8000826:	1e50      	subs	r0, r2, #1
 8000828:	4182      	sbcs	r2, r0
 800082a:	2005      	movs	r0, #5
 800082c:	1a40      	subs	r0, r0, r1
 800082e:	40c4      	lsrs	r4, r0
 8000830:	4314      	orrs	r4, r2
 8000832:	e7e0      	b.n	80007f6 <__aeabi_ui2f+0x3a>
 8000834:	0264      	lsls	r4, r4, #9
 8000836:	2096      	movs	r0, #150	@ 0x96
 8000838:	0a64      	lsrs	r4, r4, #9
 800083a:	e7d3      	b.n	80007e4 <__aeabi_ui2f+0x28>
 800083c:	fbffffff 	.word	0xfbffffff

08000840 <__aeabi_dadd>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	4657      	mov	r7, sl
 8000844:	464e      	mov	r6, r9
 8000846:	4645      	mov	r5, r8
 8000848:	46de      	mov	lr, fp
 800084a:	b5e0      	push	{r5, r6, r7, lr}
 800084c:	b083      	sub	sp, #12
 800084e:	9000      	str	r0, [sp, #0]
 8000850:	9101      	str	r1, [sp, #4]
 8000852:	030c      	lsls	r4, r1, #12
 8000854:	004f      	lsls	r7, r1, #1
 8000856:	0fce      	lsrs	r6, r1, #31
 8000858:	0a61      	lsrs	r1, r4, #9
 800085a:	9c00      	ldr	r4, [sp, #0]
 800085c:	031d      	lsls	r5, r3, #12
 800085e:	0f64      	lsrs	r4, r4, #29
 8000860:	430c      	orrs	r4, r1
 8000862:	9900      	ldr	r1, [sp, #0]
 8000864:	9200      	str	r2, [sp, #0]
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	00c8      	lsls	r0, r1, #3
 800086a:	0059      	lsls	r1, r3, #1
 800086c:	0d4b      	lsrs	r3, r1, #21
 800086e:	4699      	mov	r9, r3
 8000870:	9a00      	ldr	r2, [sp, #0]
 8000872:	9b01      	ldr	r3, [sp, #4]
 8000874:	0a6d      	lsrs	r5, r5, #9
 8000876:	0fd9      	lsrs	r1, r3, #31
 8000878:	0f53      	lsrs	r3, r2, #29
 800087a:	432b      	orrs	r3, r5
 800087c:	469a      	mov	sl, r3
 800087e:	9b00      	ldr	r3, [sp, #0]
 8000880:	0d7f      	lsrs	r7, r7, #21
 8000882:	00da      	lsls	r2, r3, #3
 8000884:	4694      	mov	ip, r2
 8000886:	464a      	mov	r2, r9
 8000888:	46b0      	mov	r8, r6
 800088a:	1aba      	subs	r2, r7, r2
 800088c:	428e      	cmp	r6, r1
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x52>
 8000890:	e0b0      	b.n	80009f4 <__aeabi_dadd+0x1b4>
 8000892:	2a00      	cmp	r2, #0
 8000894:	dc00      	bgt.n	8000898 <__aeabi_dadd+0x58>
 8000896:	e078      	b.n	800098a <__aeabi_dadd+0x14a>
 8000898:	4649      	mov	r1, r9
 800089a:	2900      	cmp	r1, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_dadd+0x60>
 800089e:	e0e9      	b.n	8000a74 <__aeabi_dadd+0x234>
 80008a0:	49c9      	ldr	r1, [pc, #804]	@ (8000bc8 <__aeabi_dadd+0x388>)
 80008a2:	428f      	cmp	r7, r1
 80008a4:	d100      	bne.n	80008a8 <__aeabi_dadd+0x68>
 80008a6:	e195      	b.n	8000bd4 <__aeabi_dadd+0x394>
 80008a8:	2501      	movs	r5, #1
 80008aa:	2a38      	cmp	r2, #56	@ 0x38
 80008ac:	dc16      	bgt.n	80008dc <__aeabi_dadd+0x9c>
 80008ae:	2180      	movs	r1, #128	@ 0x80
 80008b0:	4653      	mov	r3, sl
 80008b2:	0409      	lsls	r1, r1, #16
 80008b4:	430b      	orrs	r3, r1
 80008b6:	469a      	mov	sl, r3
 80008b8:	2a1f      	cmp	r2, #31
 80008ba:	dd00      	ble.n	80008be <__aeabi_dadd+0x7e>
 80008bc:	e1e7      	b.n	8000c8e <__aeabi_dadd+0x44e>
 80008be:	2120      	movs	r1, #32
 80008c0:	4655      	mov	r5, sl
 80008c2:	1a8b      	subs	r3, r1, r2
 80008c4:	4661      	mov	r1, ip
 80008c6:	409d      	lsls	r5, r3
 80008c8:	40d1      	lsrs	r1, r2
 80008ca:	430d      	orrs	r5, r1
 80008cc:	4661      	mov	r1, ip
 80008ce:	4099      	lsls	r1, r3
 80008d0:	1e4b      	subs	r3, r1, #1
 80008d2:	4199      	sbcs	r1, r3
 80008d4:	4653      	mov	r3, sl
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	430d      	orrs	r5, r1
 80008da:	1ae4      	subs	r4, r4, r3
 80008dc:	1b45      	subs	r5, r0, r5
 80008de:	42a8      	cmp	r0, r5
 80008e0:	4180      	sbcs	r0, r0
 80008e2:	4240      	negs	r0, r0
 80008e4:	1a24      	subs	r4, r4, r0
 80008e6:	0223      	lsls	r3, r4, #8
 80008e8:	d400      	bmi.n	80008ec <__aeabi_dadd+0xac>
 80008ea:	e10f      	b.n	8000b0c <__aeabi_dadd+0x2cc>
 80008ec:	0264      	lsls	r4, r4, #9
 80008ee:	0a64      	lsrs	r4, r4, #9
 80008f0:	2c00      	cmp	r4, #0
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0xb6>
 80008f4:	e139      	b.n	8000b6a <__aeabi_dadd+0x32a>
 80008f6:	0020      	movs	r0, r4
 80008f8:	f001 fea6 	bl	8002648 <__clzsi2>
 80008fc:	0003      	movs	r3, r0
 80008fe:	3b08      	subs	r3, #8
 8000900:	2120      	movs	r1, #32
 8000902:	0028      	movs	r0, r5
 8000904:	1aca      	subs	r2, r1, r3
 8000906:	40d0      	lsrs	r0, r2
 8000908:	409c      	lsls	r4, r3
 800090a:	0002      	movs	r2, r0
 800090c:	409d      	lsls	r5, r3
 800090e:	4322      	orrs	r2, r4
 8000910:	429f      	cmp	r7, r3
 8000912:	dd00      	ble.n	8000916 <__aeabi_dadd+0xd6>
 8000914:	e173      	b.n	8000bfe <__aeabi_dadd+0x3be>
 8000916:	1bd8      	subs	r0, r3, r7
 8000918:	3001      	adds	r0, #1
 800091a:	1a09      	subs	r1, r1, r0
 800091c:	002c      	movs	r4, r5
 800091e:	408d      	lsls	r5, r1
 8000920:	40c4      	lsrs	r4, r0
 8000922:	1e6b      	subs	r3, r5, #1
 8000924:	419d      	sbcs	r5, r3
 8000926:	0013      	movs	r3, r2
 8000928:	40c2      	lsrs	r2, r0
 800092a:	408b      	lsls	r3, r1
 800092c:	4325      	orrs	r5, r4
 800092e:	2700      	movs	r7, #0
 8000930:	0014      	movs	r4, r2
 8000932:	431d      	orrs	r5, r3
 8000934:	076b      	lsls	r3, r5, #29
 8000936:	d009      	beq.n	800094c <__aeabi_dadd+0x10c>
 8000938:	230f      	movs	r3, #15
 800093a:	402b      	ands	r3, r5
 800093c:	2b04      	cmp	r3, #4
 800093e:	d005      	beq.n	800094c <__aeabi_dadd+0x10c>
 8000940:	1d2b      	adds	r3, r5, #4
 8000942:	42ab      	cmp	r3, r5
 8000944:	41ad      	sbcs	r5, r5
 8000946:	426d      	negs	r5, r5
 8000948:	1964      	adds	r4, r4, r5
 800094a:	001d      	movs	r5, r3
 800094c:	0223      	lsls	r3, r4, #8
 800094e:	d400      	bmi.n	8000952 <__aeabi_dadd+0x112>
 8000950:	e12d      	b.n	8000bae <__aeabi_dadd+0x36e>
 8000952:	4a9d      	ldr	r2, [pc, #628]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000954:	3701      	adds	r7, #1
 8000956:	4297      	cmp	r7, r2
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x11c>
 800095a:	e0d3      	b.n	8000b04 <__aeabi_dadd+0x2c4>
 800095c:	4646      	mov	r6, r8
 800095e:	499b      	ldr	r1, [pc, #620]	@ (8000bcc <__aeabi_dadd+0x38c>)
 8000960:	08ed      	lsrs	r5, r5, #3
 8000962:	4021      	ands	r1, r4
 8000964:	074a      	lsls	r2, r1, #29
 8000966:	432a      	orrs	r2, r5
 8000968:	057c      	lsls	r4, r7, #21
 800096a:	024d      	lsls	r5, r1, #9
 800096c:	0b2d      	lsrs	r5, r5, #12
 800096e:	0d64      	lsrs	r4, r4, #21
 8000970:	0524      	lsls	r4, r4, #20
 8000972:	432c      	orrs	r4, r5
 8000974:	07f6      	lsls	r6, r6, #31
 8000976:	4334      	orrs	r4, r6
 8000978:	0010      	movs	r0, r2
 800097a:	0021      	movs	r1, r4
 800097c:	b003      	add	sp, #12
 800097e:	bcf0      	pop	{r4, r5, r6, r7}
 8000980:	46bb      	mov	fp, r7
 8000982:	46b2      	mov	sl, r6
 8000984:	46a9      	mov	r9, r5
 8000986:	46a0      	mov	r8, r4
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098a:	2a00      	cmp	r2, #0
 800098c:	d100      	bne.n	8000990 <__aeabi_dadd+0x150>
 800098e:	e084      	b.n	8000a9a <__aeabi_dadd+0x25a>
 8000990:	464a      	mov	r2, r9
 8000992:	1bd2      	subs	r2, r2, r7
 8000994:	2f00      	cmp	r7, #0
 8000996:	d000      	beq.n	800099a <__aeabi_dadd+0x15a>
 8000998:	e16d      	b.n	8000c76 <__aeabi_dadd+0x436>
 800099a:	0025      	movs	r5, r4
 800099c:	4305      	orrs	r5, r0
 800099e:	d100      	bne.n	80009a2 <__aeabi_dadd+0x162>
 80009a0:	e127      	b.n	8000bf2 <__aeabi_dadd+0x3b2>
 80009a2:	1e56      	subs	r6, r2, #1
 80009a4:	2a01      	cmp	r2, #1
 80009a6:	d100      	bne.n	80009aa <__aeabi_dadd+0x16a>
 80009a8:	e23b      	b.n	8000e22 <__aeabi_dadd+0x5e2>
 80009aa:	4d87      	ldr	r5, [pc, #540]	@ (8000bc8 <__aeabi_dadd+0x388>)
 80009ac:	42aa      	cmp	r2, r5
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x172>
 80009b0:	e26a      	b.n	8000e88 <__aeabi_dadd+0x648>
 80009b2:	2501      	movs	r5, #1
 80009b4:	2e38      	cmp	r6, #56	@ 0x38
 80009b6:	dc12      	bgt.n	80009de <__aeabi_dadd+0x19e>
 80009b8:	0032      	movs	r2, r6
 80009ba:	2a1f      	cmp	r2, #31
 80009bc:	dd00      	ble.n	80009c0 <__aeabi_dadd+0x180>
 80009be:	e1f8      	b.n	8000db2 <__aeabi_dadd+0x572>
 80009c0:	2620      	movs	r6, #32
 80009c2:	0025      	movs	r5, r4
 80009c4:	1ab6      	subs	r6, r6, r2
 80009c6:	0007      	movs	r7, r0
 80009c8:	4653      	mov	r3, sl
 80009ca:	40b0      	lsls	r0, r6
 80009cc:	40d4      	lsrs	r4, r2
 80009ce:	40b5      	lsls	r5, r6
 80009d0:	40d7      	lsrs	r7, r2
 80009d2:	1e46      	subs	r6, r0, #1
 80009d4:	41b0      	sbcs	r0, r6
 80009d6:	1b1b      	subs	r3, r3, r4
 80009d8:	469a      	mov	sl, r3
 80009da:	433d      	orrs	r5, r7
 80009dc:	4305      	orrs	r5, r0
 80009de:	4662      	mov	r2, ip
 80009e0:	1b55      	subs	r5, r2, r5
 80009e2:	45ac      	cmp	ip, r5
 80009e4:	4192      	sbcs	r2, r2
 80009e6:	4653      	mov	r3, sl
 80009e8:	4252      	negs	r2, r2
 80009ea:	000e      	movs	r6, r1
 80009ec:	464f      	mov	r7, r9
 80009ee:	4688      	mov	r8, r1
 80009f0:	1a9c      	subs	r4, r3, r2
 80009f2:	e778      	b.n	80008e6 <__aeabi_dadd+0xa6>
 80009f4:	2a00      	cmp	r2, #0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_dadd+0x1ba>
 80009f8:	e08e      	b.n	8000b18 <__aeabi_dadd+0x2d8>
 80009fa:	4649      	mov	r1, r9
 80009fc:	2900      	cmp	r1, #0
 80009fe:	d175      	bne.n	8000aec <__aeabi_dadd+0x2ac>
 8000a00:	4661      	mov	r1, ip
 8000a02:	4653      	mov	r3, sl
 8000a04:	4319      	orrs	r1, r3
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dadd+0x1ca>
 8000a08:	e0f6      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000a0a:	1e51      	subs	r1, r2, #1
 8000a0c:	2a01      	cmp	r2, #1
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_dadd+0x1d2>
 8000a10:	e191      	b.n	8000d36 <__aeabi_dadd+0x4f6>
 8000a12:	4d6d      	ldr	r5, [pc, #436]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000a14:	42aa      	cmp	r2, r5
 8000a16:	d100      	bne.n	8000a1a <__aeabi_dadd+0x1da>
 8000a18:	e0dc      	b.n	8000bd4 <__aeabi_dadd+0x394>
 8000a1a:	2501      	movs	r5, #1
 8000a1c:	2938      	cmp	r1, #56	@ 0x38
 8000a1e:	dc14      	bgt.n	8000a4a <__aeabi_dadd+0x20a>
 8000a20:	000a      	movs	r2, r1
 8000a22:	2a1f      	cmp	r2, #31
 8000a24:	dd00      	ble.n	8000a28 <__aeabi_dadd+0x1e8>
 8000a26:	e1a2      	b.n	8000d6e <__aeabi_dadd+0x52e>
 8000a28:	2120      	movs	r1, #32
 8000a2a:	4653      	mov	r3, sl
 8000a2c:	1a89      	subs	r1, r1, r2
 8000a2e:	408b      	lsls	r3, r1
 8000a30:	001d      	movs	r5, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	40d3      	lsrs	r3, r2
 8000a36:	431d      	orrs	r5, r3
 8000a38:	4663      	mov	r3, ip
 8000a3a:	408b      	lsls	r3, r1
 8000a3c:	0019      	movs	r1, r3
 8000a3e:	1e4b      	subs	r3, r1, #1
 8000a40:	4199      	sbcs	r1, r3
 8000a42:	4653      	mov	r3, sl
 8000a44:	40d3      	lsrs	r3, r2
 8000a46:	430d      	orrs	r5, r1
 8000a48:	18e4      	adds	r4, r4, r3
 8000a4a:	182d      	adds	r5, r5, r0
 8000a4c:	4285      	cmp	r5, r0
 8000a4e:	4180      	sbcs	r0, r0
 8000a50:	4240      	negs	r0, r0
 8000a52:	1824      	adds	r4, r4, r0
 8000a54:	0223      	lsls	r3, r4, #8
 8000a56:	d559      	bpl.n	8000b0c <__aeabi_dadd+0x2cc>
 8000a58:	4b5b      	ldr	r3, [pc, #364]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000a5a:	3701      	adds	r7, #1
 8000a5c:	429f      	cmp	r7, r3
 8000a5e:	d051      	beq.n	8000b04 <__aeabi_dadd+0x2c4>
 8000a60:	2101      	movs	r1, #1
 8000a62:	4b5a      	ldr	r3, [pc, #360]	@ (8000bcc <__aeabi_dadd+0x38c>)
 8000a64:	086a      	lsrs	r2, r5, #1
 8000a66:	401c      	ands	r4, r3
 8000a68:	4029      	ands	r1, r5
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	07e5      	lsls	r5, r4, #31
 8000a6e:	4315      	orrs	r5, r2
 8000a70:	0864      	lsrs	r4, r4, #1
 8000a72:	e75f      	b.n	8000934 <__aeabi_dadd+0xf4>
 8000a74:	4661      	mov	r1, ip
 8000a76:	4653      	mov	r3, sl
 8000a78:	4319      	orrs	r1, r3
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x23e>
 8000a7c:	e0bc      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000a7e:	1e51      	subs	r1, r2, #1
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	d100      	bne.n	8000a86 <__aeabi_dadd+0x246>
 8000a84:	e164      	b.n	8000d50 <__aeabi_dadd+0x510>
 8000a86:	4d50      	ldr	r5, [pc, #320]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000a88:	42aa      	cmp	r2, r5
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x24e>
 8000a8c:	e16a      	b.n	8000d64 <__aeabi_dadd+0x524>
 8000a8e:	2501      	movs	r5, #1
 8000a90:	2938      	cmp	r1, #56	@ 0x38
 8000a92:	dd00      	ble.n	8000a96 <__aeabi_dadd+0x256>
 8000a94:	e722      	b.n	80008dc <__aeabi_dadd+0x9c>
 8000a96:	000a      	movs	r2, r1
 8000a98:	e70e      	b.n	80008b8 <__aeabi_dadd+0x78>
 8000a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd0 <__aeabi_dadd+0x390>)
 8000a9c:	1c7d      	adds	r5, r7, #1
 8000a9e:	4215      	tst	r5, r2
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dadd+0x264>
 8000aa2:	e0d0      	b.n	8000c46 <__aeabi_dadd+0x406>
 8000aa4:	0025      	movs	r5, r4
 8000aa6:	4662      	mov	r2, ip
 8000aa8:	4653      	mov	r3, sl
 8000aaa:	4305      	orrs	r5, r0
 8000aac:	431a      	orrs	r2, r3
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x274>
 8000ab2:	e137      	b.n	8000d24 <__aeabi_dadd+0x4e4>
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x27a>
 8000ab8:	e1a8      	b.n	8000e0c <__aeabi_dadd+0x5cc>
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x280>
 8000abe:	e16a      	b.n	8000d96 <__aeabi_dadd+0x556>
 8000ac0:	4663      	mov	r3, ip
 8000ac2:	1ac5      	subs	r5, r0, r3
 8000ac4:	4653      	mov	r3, sl
 8000ac6:	1ae2      	subs	r2, r4, r3
 8000ac8:	42a8      	cmp	r0, r5
 8000aca:	419b      	sbcs	r3, r3
 8000acc:	425b      	negs	r3, r3
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	021a      	lsls	r2, r3, #8
 8000ad2:	d400      	bmi.n	8000ad6 <__aeabi_dadd+0x296>
 8000ad4:	e203      	b.n	8000ede <__aeabi_dadd+0x69e>
 8000ad6:	4663      	mov	r3, ip
 8000ad8:	1a1d      	subs	r5, r3, r0
 8000ada:	45ac      	cmp	ip, r5
 8000adc:	4192      	sbcs	r2, r2
 8000ade:	4653      	mov	r3, sl
 8000ae0:	4252      	negs	r2, r2
 8000ae2:	1b1c      	subs	r4, r3, r4
 8000ae4:	000e      	movs	r6, r1
 8000ae6:	4688      	mov	r8, r1
 8000ae8:	1aa4      	subs	r4, r4, r2
 8000aea:	e723      	b.n	8000934 <__aeabi_dadd+0xf4>
 8000aec:	4936      	ldr	r1, [pc, #216]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000aee:	428f      	cmp	r7, r1
 8000af0:	d070      	beq.n	8000bd4 <__aeabi_dadd+0x394>
 8000af2:	2501      	movs	r5, #1
 8000af4:	2a38      	cmp	r2, #56	@ 0x38
 8000af6:	dca8      	bgt.n	8000a4a <__aeabi_dadd+0x20a>
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	4653      	mov	r3, sl
 8000afc:	0409      	lsls	r1, r1, #16
 8000afe:	430b      	orrs	r3, r1
 8000b00:	469a      	mov	sl, r3
 8000b02:	e78e      	b.n	8000a22 <__aeabi_dadd+0x1e2>
 8000b04:	003c      	movs	r4, r7
 8000b06:	2500      	movs	r5, #0
 8000b08:	2200      	movs	r2, #0
 8000b0a:	e731      	b.n	8000970 <__aeabi_dadd+0x130>
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	402b      	ands	r3, r5
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d000      	beq.n	8000b16 <__aeabi_dadd+0x2d6>
 8000b14:	e710      	b.n	8000938 <__aeabi_dadd+0xf8>
 8000b16:	e093      	b.n	8000c40 <__aeabi_dadd+0x400>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	d074      	beq.n	8000c06 <__aeabi_dadd+0x3c6>
 8000b1c:	464a      	mov	r2, r9
 8000b1e:	1bd2      	subs	r2, r2, r7
 8000b20:	2f00      	cmp	r7, #0
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x2e6>
 8000b24:	e0c7      	b.n	8000cb6 <__aeabi_dadd+0x476>
 8000b26:	4928      	ldr	r1, [pc, #160]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000b28:	4589      	cmp	r9, r1
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x2ee>
 8000b2c:	e185      	b.n	8000e3a <__aeabi_dadd+0x5fa>
 8000b2e:	2501      	movs	r5, #1
 8000b30:	2a38      	cmp	r2, #56	@ 0x38
 8000b32:	dc12      	bgt.n	8000b5a <__aeabi_dadd+0x31a>
 8000b34:	2180      	movs	r1, #128	@ 0x80
 8000b36:	0409      	lsls	r1, r1, #16
 8000b38:	430c      	orrs	r4, r1
 8000b3a:	2a1f      	cmp	r2, #31
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_dadd+0x300>
 8000b3e:	e1ab      	b.n	8000e98 <__aeabi_dadd+0x658>
 8000b40:	2120      	movs	r1, #32
 8000b42:	0025      	movs	r5, r4
 8000b44:	1a89      	subs	r1, r1, r2
 8000b46:	0007      	movs	r7, r0
 8000b48:	4088      	lsls	r0, r1
 8000b4a:	408d      	lsls	r5, r1
 8000b4c:	40d7      	lsrs	r7, r2
 8000b4e:	1e41      	subs	r1, r0, #1
 8000b50:	4188      	sbcs	r0, r1
 8000b52:	40d4      	lsrs	r4, r2
 8000b54:	433d      	orrs	r5, r7
 8000b56:	4305      	orrs	r5, r0
 8000b58:	44a2      	add	sl, r4
 8000b5a:	4465      	add	r5, ip
 8000b5c:	4565      	cmp	r5, ip
 8000b5e:	4192      	sbcs	r2, r2
 8000b60:	4252      	negs	r2, r2
 8000b62:	4452      	add	r2, sl
 8000b64:	0014      	movs	r4, r2
 8000b66:	464f      	mov	r7, r9
 8000b68:	e774      	b.n	8000a54 <__aeabi_dadd+0x214>
 8000b6a:	0028      	movs	r0, r5
 8000b6c:	f001 fd6c 	bl	8002648 <__clzsi2>
 8000b70:	0003      	movs	r3, r0
 8000b72:	3318      	adds	r3, #24
 8000b74:	2b1f      	cmp	r3, #31
 8000b76:	dc00      	bgt.n	8000b7a <__aeabi_dadd+0x33a>
 8000b78:	e6c2      	b.n	8000900 <__aeabi_dadd+0xc0>
 8000b7a:	002a      	movs	r2, r5
 8000b7c:	3808      	subs	r0, #8
 8000b7e:	4082      	lsls	r2, r0
 8000b80:	429f      	cmp	r7, r3
 8000b82:	dd00      	ble.n	8000b86 <__aeabi_dadd+0x346>
 8000b84:	e0a9      	b.n	8000cda <__aeabi_dadd+0x49a>
 8000b86:	1bdb      	subs	r3, r3, r7
 8000b88:	1c58      	adds	r0, r3, #1
 8000b8a:	281f      	cmp	r0, #31
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_dadd+0x350>
 8000b8e:	e1ac      	b.n	8000eea <__aeabi_dadd+0x6aa>
 8000b90:	0015      	movs	r5, r2
 8000b92:	3b1f      	subs	r3, #31
 8000b94:	40dd      	lsrs	r5, r3
 8000b96:	2820      	cmp	r0, #32
 8000b98:	d005      	beq.n	8000ba6 <__aeabi_dadd+0x366>
 8000b9a:	2340      	movs	r3, #64	@ 0x40
 8000b9c:	1a1b      	subs	r3, r3, r0
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	1e53      	subs	r3, r2, #1
 8000ba2:	419a      	sbcs	r2, r3
 8000ba4:	4315      	orrs	r5, r2
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	2700      	movs	r7, #0
 8000baa:	402b      	ands	r3, r5
 8000bac:	e7b0      	b.n	8000b10 <__aeabi_dadd+0x2d0>
 8000bae:	08ed      	lsrs	r5, r5, #3
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <__aeabi_dadd+0x388>)
 8000bb2:	0762      	lsls	r2, r4, #29
 8000bb4:	432a      	orrs	r2, r5
 8000bb6:	08e4      	lsrs	r4, r4, #3
 8000bb8:	429f      	cmp	r7, r3
 8000bba:	d00f      	beq.n	8000bdc <__aeabi_dadd+0x39c>
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	0b25      	lsrs	r5, r4, #12
 8000bc0:	057c      	lsls	r4, r7, #21
 8000bc2:	0d64      	lsrs	r4, r4, #21
 8000bc4:	e6d4      	b.n	8000970 <__aeabi_dadd+0x130>
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	000007ff 	.word	0x000007ff
 8000bcc:	ff7fffff 	.word	0xff7fffff
 8000bd0:	000007fe 	.word	0x000007fe
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0762      	lsls	r2, r4, #29
 8000bd8:	4302      	orrs	r2, r0
 8000bda:	08e4      	lsrs	r4, r4, #3
 8000bdc:	0013      	movs	r3, r2
 8000bde:	4323      	orrs	r3, r4
 8000be0:	d100      	bne.n	8000be4 <__aeabi_dadd+0x3a4>
 8000be2:	e186      	b.n	8000ef2 <__aeabi_dadd+0x6b2>
 8000be4:	2580      	movs	r5, #128	@ 0x80
 8000be6:	032d      	lsls	r5, r5, #12
 8000be8:	4325      	orrs	r5, r4
 8000bea:	032d      	lsls	r5, r5, #12
 8000bec:	4cc3      	ldr	r4, [pc, #780]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000bee:	0b2d      	lsrs	r5, r5, #12
 8000bf0:	e6be      	b.n	8000970 <__aeabi_dadd+0x130>
 8000bf2:	4660      	mov	r0, ip
 8000bf4:	4654      	mov	r4, sl
 8000bf6:	000e      	movs	r6, r1
 8000bf8:	0017      	movs	r7, r2
 8000bfa:	08c5      	lsrs	r5, r0, #3
 8000bfc:	e7d8      	b.n	8000bb0 <__aeabi_dadd+0x370>
 8000bfe:	4cc0      	ldr	r4, [pc, #768]	@ (8000f00 <__aeabi_dadd+0x6c0>)
 8000c00:	1aff      	subs	r7, r7, r3
 8000c02:	4014      	ands	r4, r2
 8000c04:	e696      	b.n	8000934 <__aeabi_dadd+0xf4>
 8000c06:	4abf      	ldr	r2, [pc, #764]	@ (8000f04 <__aeabi_dadd+0x6c4>)
 8000c08:	1c79      	adds	r1, r7, #1
 8000c0a:	4211      	tst	r1, r2
 8000c0c:	d16b      	bne.n	8000ce6 <__aeabi_dadd+0x4a6>
 8000c0e:	0022      	movs	r2, r4
 8000c10:	4302      	orrs	r2, r0
 8000c12:	2f00      	cmp	r7, #0
 8000c14:	d000      	beq.n	8000c18 <__aeabi_dadd+0x3d8>
 8000c16:	e0db      	b.n	8000dd0 <__aeabi_dadd+0x590>
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x3de>
 8000c1c:	e12d      	b.n	8000e7a <__aeabi_dadd+0x63a>
 8000c1e:	4662      	mov	r2, ip
 8000c20:	4653      	mov	r3, sl
 8000c22:	431a      	orrs	r2, r3
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x3e8>
 8000c26:	e0b6      	b.n	8000d96 <__aeabi_dadd+0x556>
 8000c28:	4663      	mov	r3, ip
 8000c2a:	18c5      	adds	r5, r0, r3
 8000c2c:	4285      	cmp	r5, r0
 8000c2e:	4180      	sbcs	r0, r0
 8000c30:	4454      	add	r4, sl
 8000c32:	4240      	negs	r0, r0
 8000c34:	1824      	adds	r4, r4, r0
 8000c36:	0223      	lsls	r3, r4, #8
 8000c38:	d502      	bpl.n	8000c40 <__aeabi_dadd+0x400>
 8000c3a:	000f      	movs	r7, r1
 8000c3c:	4bb0      	ldr	r3, [pc, #704]	@ (8000f00 <__aeabi_dadd+0x6c0>)
 8000c3e:	401c      	ands	r4, r3
 8000c40:	003a      	movs	r2, r7
 8000c42:	0028      	movs	r0, r5
 8000c44:	e7d8      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000c46:	4662      	mov	r2, ip
 8000c48:	1a85      	subs	r5, r0, r2
 8000c4a:	42a8      	cmp	r0, r5
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	4653      	mov	r3, sl
 8000c50:	4252      	negs	r2, r2
 8000c52:	4691      	mov	r9, r2
 8000c54:	1ae3      	subs	r3, r4, r3
 8000c56:	001a      	movs	r2, r3
 8000c58:	464b      	mov	r3, r9
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	4691      	mov	r9, r2
 8000c60:	021a      	lsls	r2, r3, #8
 8000c62:	d454      	bmi.n	8000d0e <__aeabi_dadd+0x4ce>
 8000c64:	464a      	mov	r2, r9
 8000c66:	464c      	mov	r4, r9
 8000c68:	432a      	orrs	r2, r5
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_dadd+0x42e>
 8000c6c:	e640      	b.n	80008f0 <__aeabi_dadd+0xb0>
 8000c6e:	2600      	movs	r6, #0
 8000c70:	2400      	movs	r4, #0
 8000c72:	2500      	movs	r5, #0
 8000c74:	e67c      	b.n	8000970 <__aeabi_dadd+0x130>
 8000c76:	4da1      	ldr	r5, [pc, #644]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000c78:	45a9      	cmp	r9, r5
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_dadd+0x43e>
 8000c7c:	e090      	b.n	8000da0 <__aeabi_dadd+0x560>
 8000c7e:	2501      	movs	r5, #1
 8000c80:	2a38      	cmp	r2, #56	@ 0x38
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_dadd+0x446>
 8000c84:	e6ab      	b.n	80009de <__aeabi_dadd+0x19e>
 8000c86:	2580      	movs	r5, #128	@ 0x80
 8000c88:	042d      	lsls	r5, r5, #16
 8000c8a:	432c      	orrs	r4, r5
 8000c8c:	e695      	b.n	80009ba <__aeabi_dadd+0x17a>
 8000c8e:	0011      	movs	r1, r2
 8000c90:	4655      	mov	r5, sl
 8000c92:	3920      	subs	r1, #32
 8000c94:	40cd      	lsrs	r5, r1
 8000c96:	46a9      	mov	r9, r5
 8000c98:	2a20      	cmp	r2, #32
 8000c9a:	d006      	beq.n	8000caa <__aeabi_dadd+0x46a>
 8000c9c:	2140      	movs	r1, #64	@ 0x40
 8000c9e:	4653      	mov	r3, sl
 8000ca0:	1a8a      	subs	r2, r1, r2
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	4662      	mov	r2, ip
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	4694      	mov	ip, r2
 8000caa:	4665      	mov	r5, ip
 8000cac:	1e6b      	subs	r3, r5, #1
 8000cae:	419d      	sbcs	r5, r3
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	431d      	orrs	r5, r3
 8000cb4:	e612      	b.n	80008dc <__aeabi_dadd+0x9c>
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	4301      	orrs	r1, r0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x47e>
 8000cbc:	e0c4      	b.n	8000e48 <__aeabi_dadd+0x608>
 8000cbe:	1e51      	subs	r1, r2, #1
 8000cc0:	2a01      	cmp	r2, #1
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x486>
 8000cc4:	e0fb      	b.n	8000ebe <__aeabi_dadd+0x67e>
 8000cc6:	4d8d      	ldr	r5, [pc, #564]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000cc8:	42aa      	cmp	r2, r5
 8000cca:	d100      	bne.n	8000cce <__aeabi_dadd+0x48e>
 8000ccc:	e0b5      	b.n	8000e3a <__aeabi_dadd+0x5fa>
 8000cce:	2501      	movs	r5, #1
 8000cd0:	2938      	cmp	r1, #56	@ 0x38
 8000cd2:	dd00      	ble.n	8000cd6 <__aeabi_dadd+0x496>
 8000cd4:	e741      	b.n	8000b5a <__aeabi_dadd+0x31a>
 8000cd6:	000a      	movs	r2, r1
 8000cd8:	e72f      	b.n	8000b3a <__aeabi_dadd+0x2fa>
 8000cda:	4c89      	ldr	r4, [pc, #548]	@ (8000f00 <__aeabi_dadd+0x6c0>)
 8000cdc:	1aff      	subs	r7, r7, r3
 8000cde:	4014      	ands	r4, r2
 8000ce0:	0762      	lsls	r2, r4, #29
 8000ce2:	08e4      	lsrs	r4, r4, #3
 8000ce4:	e76a      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000ce6:	4a85      	ldr	r2, [pc, #532]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000ce8:	4291      	cmp	r1, r2
 8000cea:	d100      	bne.n	8000cee <__aeabi_dadd+0x4ae>
 8000cec:	e0e3      	b.n	8000eb6 <__aeabi_dadd+0x676>
 8000cee:	4663      	mov	r3, ip
 8000cf0:	18c2      	adds	r2, r0, r3
 8000cf2:	4282      	cmp	r2, r0
 8000cf4:	4180      	sbcs	r0, r0
 8000cf6:	0023      	movs	r3, r4
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	4453      	add	r3, sl
 8000cfc:	181b      	adds	r3, r3, r0
 8000cfe:	07dd      	lsls	r5, r3, #31
 8000d00:	085c      	lsrs	r4, r3, #1
 8000d02:	2307      	movs	r3, #7
 8000d04:	0852      	lsrs	r2, r2, #1
 8000d06:	4315      	orrs	r5, r2
 8000d08:	000f      	movs	r7, r1
 8000d0a:	402b      	ands	r3, r5
 8000d0c:	e700      	b.n	8000b10 <__aeabi_dadd+0x2d0>
 8000d0e:	4663      	mov	r3, ip
 8000d10:	1a1d      	subs	r5, r3, r0
 8000d12:	45ac      	cmp	ip, r5
 8000d14:	4192      	sbcs	r2, r2
 8000d16:	4653      	mov	r3, sl
 8000d18:	4252      	negs	r2, r2
 8000d1a:	1b1c      	subs	r4, r3, r4
 8000d1c:	000e      	movs	r6, r1
 8000d1e:	4688      	mov	r8, r1
 8000d20:	1aa4      	subs	r4, r4, r2
 8000d22:	e5e5      	b.n	80008f0 <__aeabi_dadd+0xb0>
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d000      	beq.n	8000d2a <__aeabi_dadd+0x4ea>
 8000d28:	e091      	b.n	8000e4e <__aeabi_dadd+0x60e>
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d138      	bne.n	8000da0 <__aeabi_dadd+0x560>
 8000d2e:	2480      	movs	r4, #128	@ 0x80
 8000d30:	2600      	movs	r6, #0
 8000d32:	0324      	lsls	r4, r4, #12
 8000d34:	e756      	b.n	8000be4 <__aeabi_dadd+0x3a4>
 8000d36:	4663      	mov	r3, ip
 8000d38:	18c5      	adds	r5, r0, r3
 8000d3a:	4285      	cmp	r5, r0
 8000d3c:	4180      	sbcs	r0, r0
 8000d3e:	4454      	add	r4, sl
 8000d40:	4240      	negs	r0, r0
 8000d42:	1824      	adds	r4, r4, r0
 8000d44:	2701      	movs	r7, #1
 8000d46:	0223      	lsls	r3, r4, #8
 8000d48:	d400      	bmi.n	8000d4c <__aeabi_dadd+0x50c>
 8000d4a:	e6df      	b.n	8000b0c <__aeabi_dadd+0x2cc>
 8000d4c:	2702      	movs	r7, #2
 8000d4e:	e687      	b.n	8000a60 <__aeabi_dadd+0x220>
 8000d50:	4663      	mov	r3, ip
 8000d52:	1ac5      	subs	r5, r0, r3
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	4180      	sbcs	r0, r0
 8000d58:	4653      	mov	r3, sl
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	1ae4      	subs	r4, r4, r3
 8000d5e:	2701      	movs	r7, #1
 8000d60:	1a24      	subs	r4, r4, r0
 8000d62:	e5c0      	b.n	80008e6 <__aeabi_dadd+0xa6>
 8000d64:	0762      	lsls	r2, r4, #29
 8000d66:	08c0      	lsrs	r0, r0, #3
 8000d68:	4302      	orrs	r2, r0
 8000d6a:	08e4      	lsrs	r4, r4, #3
 8000d6c:	e736      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000d6e:	0011      	movs	r1, r2
 8000d70:	4653      	mov	r3, sl
 8000d72:	3920      	subs	r1, #32
 8000d74:	40cb      	lsrs	r3, r1
 8000d76:	4699      	mov	r9, r3
 8000d78:	2a20      	cmp	r2, #32
 8000d7a:	d006      	beq.n	8000d8a <__aeabi_dadd+0x54a>
 8000d7c:	2140      	movs	r1, #64	@ 0x40
 8000d7e:	4653      	mov	r3, sl
 8000d80:	1a8a      	subs	r2, r1, r2
 8000d82:	4093      	lsls	r3, r2
 8000d84:	4662      	mov	r2, ip
 8000d86:	431a      	orrs	r2, r3
 8000d88:	4694      	mov	ip, r2
 8000d8a:	4665      	mov	r5, ip
 8000d8c:	1e6b      	subs	r3, r5, #1
 8000d8e:	419d      	sbcs	r5, r3
 8000d90:	464b      	mov	r3, r9
 8000d92:	431d      	orrs	r5, r3
 8000d94:	e659      	b.n	8000a4a <__aeabi_dadd+0x20a>
 8000d96:	0762      	lsls	r2, r4, #29
 8000d98:	08c0      	lsrs	r0, r0, #3
 8000d9a:	4302      	orrs	r2, r0
 8000d9c:	08e4      	lsrs	r4, r4, #3
 8000d9e:	e70d      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000da0:	4653      	mov	r3, sl
 8000da2:	075a      	lsls	r2, r3, #29
 8000da4:	4663      	mov	r3, ip
 8000da6:	08d8      	lsrs	r0, r3, #3
 8000da8:	4653      	mov	r3, sl
 8000daa:	000e      	movs	r6, r1
 8000dac:	4302      	orrs	r2, r0
 8000dae:	08dc      	lsrs	r4, r3, #3
 8000db0:	e714      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000db2:	0015      	movs	r5, r2
 8000db4:	0026      	movs	r6, r4
 8000db6:	3d20      	subs	r5, #32
 8000db8:	40ee      	lsrs	r6, r5
 8000dba:	2a20      	cmp	r2, #32
 8000dbc:	d003      	beq.n	8000dc6 <__aeabi_dadd+0x586>
 8000dbe:	2540      	movs	r5, #64	@ 0x40
 8000dc0:	1aaa      	subs	r2, r5, r2
 8000dc2:	4094      	lsls	r4, r2
 8000dc4:	4320      	orrs	r0, r4
 8000dc6:	1e42      	subs	r2, r0, #1
 8000dc8:	4190      	sbcs	r0, r2
 8000dca:	0005      	movs	r5, r0
 8000dcc:	4335      	orrs	r5, r6
 8000dce:	e606      	b.n	80009de <__aeabi_dadd+0x19e>
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d07c      	beq.n	8000ece <__aeabi_dadd+0x68e>
 8000dd4:	4662      	mov	r2, ip
 8000dd6:	4653      	mov	r3, sl
 8000dd8:	08c0      	lsrs	r0, r0, #3
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x5a0>
 8000dde:	e6fa      	b.n	8000bd6 <__aeabi_dadd+0x396>
 8000de0:	0762      	lsls	r2, r4, #29
 8000de2:	4310      	orrs	r0, r2
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	08e4      	lsrs	r4, r4, #3
 8000de8:	0312      	lsls	r2, r2, #12
 8000dea:	4214      	tst	r4, r2
 8000dec:	d008      	beq.n	8000e00 <__aeabi_dadd+0x5c0>
 8000dee:	08d9      	lsrs	r1, r3, #3
 8000df0:	4211      	tst	r1, r2
 8000df2:	d105      	bne.n	8000e00 <__aeabi_dadd+0x5c0>
 8000df4:	4663      	mov	r3, ip
 8000df6:	08d8      	lsrs	r0, r3, #3
 8000df8:	4653      	mov	r3, sl
 8000dfa:	000c      	movs	r4, r1
 8000dfc:	075b      	lsls	r3, r3, #29
 8000dfe:	4318      	orrs	r0, r3
 8000e00:	0f42      	lsrs	r2, r0, #29
 8000e02:	00c0      	lsls	r0, r0, #3
 8000e04:	08c0      	lsrs	r0, r0, #3
 8000e06:	0752      	lsls	r2, r2, #29
 8000e08:	4302      	orrs	r2, r0
 8000e0a:	e6e7      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dadd+0x5d2>
 8000e10:	e72d      	b.n	8000c6e <__aeabi_dadd+0x42e>
 8000e12:	4663      	mov	r3, ip
 8000e14:	08d8      	lsrs	r0, r3, #3
 8000e16:	4653      	mov	r3, sl
 8000e18:	075a      	lsls	r2, r3, #29
 8000e1a:	000e      	movs	r6, r1
 8000e1c:	4302      	orrs	r2, r0
 8000e1e:	08dc      	lsrs	r4, r3, #3
 8000e20:	e6cc      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000e22:	4663      	mov	r3, ip
 8000e24:	1a1d      	subs	r5, r3, r0
 8000e26:	45ac      	cmp	ip, r5
 8000e28:	4192      	sbcs	r2, r2
 8000e2a:	4653      	mov	r3, sl
 8000e2c:	4252      	negs	r2, r2
 8000e2e:	1b1c      	subs	r4, r3, r4
 8000e30:	000e      	movs	r6, r1
 8000e32:	4688      	mov	r8, r1
 8000e34:	1aa4      	subs	r4, r4, r2
 8000e36:	3701      	adds	r7, #1
 8000e38:	e555      	b.n	80008e6 <__aeabi_dadd+0xa6>
 8000e3a:	4663      	mov	r3, ip
 8000e3c:	08d9      	lsrs	r1, r3, #3
 8000e3e:	4653      	mov	r3, sl
 8000e40:	075a      	lsls	r2, r3, #29
 8000e42:	430a      	orrs	r2, r1
 8000e44:	08dc      	lsrs	r4, r3, #3
 8000e46:	e6c9      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000e48:	4660      	mov	r0, ip
 8000e4a:	4654      	mov	r4, sl
 8000e4c:	e6d4      	b.n	8000bf8 <__aeabi_dadd+0x3b8>
 8000e4e:	08c0      	lsrs	r0, r0, #3
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	d100      	bne.n	8000e56 <__aeabi_dadd+0x616>
 8000e54:	e6bf      	b.n	8000bd6 <__aeabi_dadd+0x396>
 8000e56:	0762      	lsls	r2, r4, #29
 8000e58:	4310      	orrs	r0, r2
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	08e4      	lsrs	r4, r4, #3
 8000e5e:	0312      	lsls	r2, r2, #12
 8000e60:	4214      	tst	r4, r2
 8000e62:	d0cd      	beq.n	8000e00 <__aeabi_dadd+0x5c0>
 8000e64:	08dd      	lsrs	r5, r3, #3
 8000e66:	4215      	tst	r5, r2
 8000e68:	d1ca      	bne.n	8000e00 <__aeabi_dadd+0x5c0>
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	08d8      	lsrs	r0, r3, #3
 8000e6e:	4653      	mov	r3, sl
 8000e70:	075b      	lsls	r3, r3, #29
 8000e72:	000e      	movs	r6, r1
 8000e74:	002c      	movs	r4, r5
 8000e76:	4318      	orrs	r0, r3
 8000e78:	e7c2      	b.n	8000e00 <__aeabi_dadd+0x5c0>
 8000e7a:	4663      	mov	r3, ip
 8000e7c:	08d9      	lsrs	r1, r3, #3
 8000e7e:	4653      	mov	r3, sl
 8000e80:	075a      	lsls	r2, r3, #29
 8000e82:	430a      	orrs	r2, r1
 8000e84:	08dc      	lsrs	r4, r3, #3
 8000e86:	e699      	b.n	8000bbc <__aeabi_dadd+0x37c>
 8000e88:	4663      	mov	r3, ip
 8000e8a:	08d8      	lsrs	r0, r3, #3
 8000e8c:	4653      	mov	r3, sl
 8000e8e:	075a      	lsls	r2, r3, #29
 8000e90:	000e      	movs	r6, r1
 8000e92:	4302      	orrs	r2, r0
 8000e94:	08dc      	lsrs	r4, r3, #3
 8000e96:	e6a1      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0027      	movs	r7, r4
 8000e9c:	3920      	subs	r1, #32
 8000e9e:	40cf      	lsrs	r7, r1
 8000ea0:	2a20      	cmp	r2, #32
 8000ea2:	d003      	beq.n	8000eac <__aeabi_dadd+0x66c>
 8000ea4:	2140      	movs	r1, #64	@ 0x40
 8000ea6:	1a8a      	subs	r2, r1, r2
 8000ea8:	4094      	lsls	r4, r2
 8000eaa:	4320      	orrs	r0, r4
 8000eac:	1e42      	subs	r2, r0, #1
 8000eae:	4190      	sbcs	r0, r2
 8000eb0:	0005      	movs	r5, r0
 8000eb2:	433d      	orrs	r5, r7
 8000eb4:	e651      	b.n	8000b5a <__aeabi_dadd+0x31a>
 8000eb6:	000c      	movs	r4, r1
 8000eb8:	2500      	movs	r5, #0
 8000eba:	2200      	movs	r2, #0
 8000ebc:	e558      	b.n	8000970 <__aeabi_dadd+0x130>
 8000ebe:	4460      	add	r0, ip
 8000ec0:	4560      	cmp	r0, ip
 8000ec2:	4192      	sbcs	r2, r2
 8000ec4:	4454      	add	r4, sl
 8000ec6:	4252      	negs	r2, r2
 8000ec8:	0005      	movs	r5, r0
 8000eca:	18a4      	adds	r4, r4, r2
 8000ecc:	e73a      	b.n	8000d44 <__aeabi_dadd+0x504>
 8000ece:	4653      	mov	r3, sl
 8000ed0:	075a      	lsls	r2, r3, #29
 8000ed2:	4663      	mov	r3, ip
 8000ed4:	08d9      	lsrs	r1, r3, #3
 8000ed6:	4653      	mov	r3, sl
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	08dc      	lsrs	r4, r3, #3
 8000edc:	e67e      	b.n	8000bdc <__aeabi_dadd+0x39c>
 8000ede:	001a      	movs	r2, r3
 8000ee0:	001c      	movs	r4, r3
 8000ee2:	432a      	orrs	r2, r5
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_dadd+0x6a8>
 8000ee6:	e6ab      	b.n	8000c40 <__aeabi_dadd+0x400>
 8000ee8:	e6c1      	b.n	8000c6e <__aeabi_dadd+0x42e>
 8000eea:	2120      	movs	r1, #32
 8000eec:	2500      	movs	r5, #0
 8000eee:	1a09      	subs	r1, r1, r0
 8000ef0:	e519      	b.n	8000926 <__aeabi_dadd+0xe6>
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2500      	movs	r5, #0
 8000ef6:	4c01      	ldr	r4, [pc, #4]	@ (8000efc <__aeabi_dadd+0x6bc>)
 8000ef8:	e53a      	b.n	8000970 <__aeabi_dadd+0x130>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	ff7fffff 	.word	0xff7fffff
 8000f04:	000007fe 	.word	0x000007fe

08000f08 <__aeabi_ddiv>:
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	46de      	mov	lr, fp
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	4657      	mov	r7, sl
 8000f10:	464e      	mov	r6, r9
 8000f12:	b5e0      	push	{r5, r6, r7, lr}
 8000f14:	b087      	sub	sp, #28
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	030b      	lsls	r3, r1, #12
 8000f1c:	0b1b      	lsrs	r3, r3, #12
 8000f1e:	469b      	mov	fp, r3
 8000f20:	0fca      	lsrs	r2, r1, #31
 8000f22:	004b      	lsls	r3, r1, #1
 8000f24:	0004      	movs	r4, r0
 8000f26:	4680      	mov	r8, r0
 8000f28:	0d5b      	lsrs	r3, r3, #21
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_ddiv+0x28>
 8000f2e:	e16a      	b.n	8001206 <__aeabi_ddiv+0x2fe>
 8000f30:	4ad4      	ldr	r2, [pc, #848]	@ (8001284 <__aeabi_ddiv+0x37c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x30>
 8000f36:	e18c      	b.n	8001252 <__aeabi_ddiv+0x34a>
 8000f38:	4659      	mov	r1, fp
 8000f3a:	0f42      	lsrs	r2, r0, #29
 8000f3c:	00c9      	lsls	r1, r1, #3
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	2180      	movs	r1, #128	@ 0x80
 8000f42:	0409      	lsls	r1, r1, #16
 8000f44:	4311      	orrs	r1, r2
 8000f46:	00c2      	lsls	r2, r0, #3
 8000f48:	4690      	mov	r8, r2
 8000f4a:	4acf      	ldr	r2, [pc, #828]	@ (8001288 <__aeabi_ddiv+0x380>)
 8000f4c:	4689      	mov	r9, r1
 8000f4e:	4692      	mov	sl, r2
 8000f50:	449a      	add	sl, r3
 8000f52:	2300      	movs	r3, #0
 8000f54:	2400      	movs	r4, #0
 8000f56:	9303      	str	r3, [sp, #12]
 8000f58:	9e00      	ldr	r6, [sp, #0]
 8000f5a:	9f01      	ldr	r7, [sp, #4]
 8000f5c:	033b      	lsls	r3, r7, #12
 8000f5e:	0b1b      	lsrs	r3, r3, #12
 8000f60:	469b      	mov	fp, r3
 8000f62:	007b      	lsls	r3, r7, #1
 8000f64:	0030      	movs	r0, r6
 8000f66:	0d5b      	lsrs	r3, r3, #21
 8000f68:	0ffd      	lsrs	r5, r7, #31
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_ddiv+0x68>
 8000f6e:	e128      	b.n	80011c2 <__aeabi_ddiv+0x2ba>
 8000f70:	4ac4      	ldr	r2, [pc, #784]	@ (8001284 <__aeabi_ddiv+0x37c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d100      	bne.n	8000f78 <__aeabi_ddiv+0x70>
 8000f76:	e177      	b.n	8001268 <__aeabi_ddiv+0x360>
 8000f78:	4659      	mov	r1, fp
 8000f7a:	0f72      	lsrs	r2, r6, #29
 8000f7c:	00c9      	lsls	r1, r1, #3
 8000f7e:	430a      	orrs	r2, r1
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	0409      	lsls	r1, r1, #16
 8000f84:	4311      	orrs	r1, r2
 8000f86:	468b      	mov	fp, r1
 8000f88:	49bf      	ldr	r1, [pc, #764]	@ (8001288 <__aeabi_ddiv+0x380>)
 8000f8a:	00f2      	lsls	r2, r6, #3
 8000f8c:	468c      	mov	ip, r1
 8000f8e:	4651      	mov	r1, sl
 8000f90:	4463      	add	r3, ip
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	469a      	mov	sl, r3
 8000f96:	2300      	movs	r3, #0
 8000f98:	9e02      	ldr	r6, [sp, #8]
 8000f9a:	406e      	eors	r6, r5
 8000f9c:	2c0f      	cmp	r4, #15
 8000f9e:	d827      	bhi.n	8000ff0 <__aeabi_ddiv+0xe8>
 8000fa0:	49ba      	ldr	r1, [pc, #744]	@ (800128c <__aeabi_ddiv+0x384>)
 8000fa2:	00a4      	lsls	r4, r4, #2
 8000fa4:	5909      	ldr	r1, [r1, r4]
 8000fa6:	468f      	mov	pc, r1
 8000fa8:	46cb      	mov	fp, r9
 8000faa:	4642      	mov	r2, r8
 8000fac:	9e02      	ldr	r6, [sp, #8]
 8000fae:	9b03      	ldr	r3, [sp, #12]
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d016      	beq.n	8000fe2 <__aeabi_ddiv+0xda>
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d100      	bne.n	8000fba <__aeabi_ddiv+0xb2>
 8000fb8:	e2a6      	b.n	8001508 <__aeabi_ddiv+0x600>
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_ddiv+0xb8>
 8000fbe:	e0df      	b.n	8001180 <__aeabi_ddiv+0x278>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	2400      	movs	r4, #0
 8000fc6:	4690      	mov	r8, r2
 8000fc8:	051b      	lsls	r3, r3, #20
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	07f6      	lsls	r6, r6, #31
 8000fce:	4333      	orrs	r3, r6
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	b007      	add	sp, #28
 8000fd6:	bcf0      	pop	{r4, r5, r6, r7}
 8000fd8:	46bb      	mov	fp, r7
 8000fda:	46b2      	mov	sl, r6
 8000fdc:	46a9      	mov	r9, r5
 8000fde:	46a0      	mov	r8, r4
 8000fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	4ba6      	ldr	r3, [pc, #664]	@ (8001284 <__aeabi_ddiv+0x37c>)
 8000fea:	e7ed      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8000fec:	002e      	movs	r6, r5
 8000fee:	e7df      	b.n	8000fb0 <__aeabi_ddiv+0xa8>
 8000ff0:	45cb      	cmp	fp, r9
 8000ff2:	d200      	bcs.n	8000ff6 <__aeabi_ddiv+0xee>
 8000ff4:	e1d4      	b.n	80013a0 <__aeabi_ddiv+0x498>
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_ddiv+0xf2>
 8000ff8:	e1cf      	b.n	800139a <__aeabi_ddiv+0x492>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	425b      	negs	r3, r3
 8000ffe:	469c      	mov	ip, r3
 8001000:	4644      	mov	r4, r8
 8001002:	4648      	mov	r0, r9
 8001004:	2700      	movs	r7, #0
 8001006:	44e2      	add	sl, ip
 8001008:	465b      	mov	r3, fp
 800100a:	0e15      	lsrs	r5, r2, #24
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	431d      	orrs	r5, r3
 8001010:	0c19      	lsrs	r1, r3, #16
 8001012:	042b      	lsls	r3, r5, #16
 8001014:	0212      	lsls	r2, r2, #8
 8001016:	9500      	str	r5, [sp, #0]
 8001018:	0c1d      	lsrs	r5, r3, #16
 800101a:	4691      	mov	r9, r2
 800101c:	9102      	str	r1, [sp, #8]
 800101e:	9503      	str	r5, [sp, #12]
 8001020:	f7ff f914 	bl	800024c <__aeabi_uidivmod>
 8001024:	0002      	movs	r2, r0
 8001026:	436a      	muls	r2, r5
 8001028:	040b      	lsls	r3, r1, #16
 800102a:	0c21      	lsrs	r1, r4, #16
 800102c:	4680      	mov	r8, r0
 800102e:	4319      	orrs	r1, r3
 8001030:	428a      	cmp	r2, r1
 8001032:	d909      	bls.n	8001048 <__aeabi_ddiv+0x140>
 8001034:	9d00      	ldr	r5, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	46ac      	mov	ip, r5
 800103a:	425b      	negs	r3, r3
 800103c:	4461      	add	r1, ip
 800103e:	469c      	mov	ip, r3
 8001040:	44e0      	add	r8, ip
 8001042:	428d      	cmp	r5, r1
 8001044:	d800      	bhi.n	8001048 <__aeabi_ddiv+0x140>
 8001046:	e1fb      	b.n	8001440 <__aeabi_ddiv+0x538>
 8001048:	1a88      	subs	r0, r1, r2
 800104a:	9902      	ldr	r1, [sp, #8]
 800104c:	f7ff f8fe 	bl	800024c <__aeabi_uidivmod>
 8001050:	9a03      	ldr	r2, [sp, #12]
 8001052:	0424      	lsls	r4, r4, #16
 8001054:	4342      	muls	r2, r0
 8001056:	0409      	lsls	r1, r1, #16
 8001058:	0c24      	lsrs	r4, r4, #16
 800105a:	0003      	movs	r3, r0
 800105c:	430c      	orrs	r4, r1
 800105e:	42a2      	cmp	r2, r4
 8001060:	d906      	bls.n	8001070 <__aeabi_ddiv+0x168>
 8001062:	9900      	ldr	r1, [sp, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	468c      	mov	ip, r1
 8001068:	4464      	add	r4, ip
 800106a:	42a1      	cmp	r1, r4
 800106c:	d800      	bhi.n	8001070 <__aeabi_ddiv+0x168>
 800106e:	e1e1      	b.n	8001434 <__aeabi_ddiv+0x52c>
 8001070:	1aa0      	subs	r0, r4, r2
 8001072:	4642      	mov	r2, r8
 8001074:	0412      	lsls	r2, r2, #16
 8001076:	431a      	orrs	r2, r3
 8001078:	4693      	mov	fp, r2
 800107a:	464b      	mov	r3, r9
 800107c:	4659      	mov	r1, fp
 800107e:	0c1b      	lsrs	r3, r3, #16
 8001080:	001d      	movs	r5, r3
 8001082:	9304      	str	r3, [sp, #16]
 8001084:	040b      	lsls	r3, r1, #16
 8001086:	4649      	mov	r1, r9
 8001088:	0409      	lsls	r1, r1, #16
 800108a:	0c09      	lsrs	r1, r1, #16
 800108c:	000c      	movs	r4, r1
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	435c      	muls	r4, r3
 8001092:	0c12      	lsrs	r2, r2, #16
 8001094:	436b      	muls	r3, r5
 8001096:	4688      	mov	r8, r1
 8001098:	4351      	muls	r1, r2
 800109a:	436a      	muls	r2, r5
 800109c:	0c25      	lsrs	r5, r4, #16
 800109e:	46ac      	mov	ip, r5
 80010a0:	185b      	adds	r3, r3, r1
 80010a2:	4463      	add	r3, ip
 80010a4:	4299      	cmp	r1, r3
 80010a6:	d903      	bls.n	80010b0 <__aeabi_ddiv+0x1a8>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4462      	add	r2, ip
 80010b0:	0c19      	lsrs	r1, r3, #16
 80010b2:	0424      	lsls	r4, r4, #16
 80010b4:	041b      	lsls	r3, r3, #16
 80010b6:	0c24      	lsrs	r4, r4, #16
 80010b8:	188a      	adds	r2, r1, r2
 80010ba:	191c      	adds	r4, r3, r4
 80010bc:	4290      	cmp	r0, r2
 80010be:	d302      	bcc.n	80010c6 <__aeabi_ddiv+0x1be>
 80010c0:	d116      	bne.n	80010f0 <__aeabi_ddiv+0x1e8>
 80010c2:	42a7      	cmp	r7, r4
 80010c4:	d214      	bcs.n	80010f0 <__aeabi_ddiv+0x1e8>
 80010c6:	465b      	mov	r3, fp
 80010c8:	9d00      	ldr	r5, [sp, #0]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	444f      	add	r7, r9
 80010ce:	9305      	str	r3, [sp, #20]
 80010d0:	454f      	cmp	r7, r9
 80010d2:	419b      	sbcs	r3, r3
 80010d4:	46ac      	mov	ip, r5
 80010d6:	425b      	negs	r3, r3
 80010d8:	4463      	add	r3, ip
 80010da:	18c0      	adds	r0, r0, r3
 80010dc:	4285      	cmp	r5, r0
 80010de:	d300      	bcc.n	80010e2 <__aeabi_ddiv+0x1da>
 80010e0:	e1a1      	b.n	8001426 <__aeabi_ddiv+0x51e>
 80010e2:	4282      	cmp	r2, r0
 80010e4:	d900      	bls.n	80010e8 <__aeabi_ddiv+0x1e0>
 80010e6:	e1f6      	b.n	80014d6 <__aeabi_ddiv+0x5ce>
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x1e4>
 80010ea:	e1f1      	b.n	80014d0 <__aeabi_ddiv+0x5c8>
 80010ec:	9b05      	ldr	r3, [sp, #20]
 80010ee:	469b      	mov	fp, r3
 80010f0:	1b3c      	subs	r4, r7, r4
 80010f2:	42a7      	cmp	r7, r4
 80010f4:	41bf      	sbcs	r7, r7
 80010f6:	9d00      	ldr	r5, [sp, #0]
 80010f8:	1a80      	subs	r0, r0, r2
 80010fa:	427f      	negs	r7, r7
 80010fc:	1bc0      	subs	r0, r0, r7
 80010fe:	4285      	cmp	r5, r0
 8001100:	d100      	bne.n	8001104 <__aeabi_ddiv+0x1fc>
 8001102:	e1d0      	b.n	80014a6 <__aeabi_ddiv+0x59e>
 8001104:	9902      	ldr	r1, [sp, #8]
 8001106:	f7ff f8a1 	bl	800024c <__aeabi_uidivmod>
 800110a:	9a03      	ldr	r2, [sp, #12]
 800110c:	040b      	lsls	r3, r1, #16
 800110e:	4342      	muls	r2, r0
 8001110:	0c21      	lsrs	r1, r4, #16
 8001112:	0007      	movs	r7, r0
 8001114:	4319      	orrs	r1, r3
 8001116:	428a      	cmp	r2, r1
 8001118:	d900      	bls.n	800111c <__aeabi_ddiv+0x214>
 800111a:	e178      	b.n	800140e <__aeabi_ddiv+0x506>
 800111c:	1a88      	subs	r0, r1, r2
 800111e:	9902      	ldr	r1, [sp, #8]
 8001120:	f7ff f894 	bl	800024c <__aeabi_uidivmod>
 8001124:	9a03      	ldr	r2, [sp, #12]
 8001126:	0424      	lsls	r4, r4, #16
 8001128:	4342      	muls	r2, r0
 800112a:	0409      	lsls	r1, r1, #16
 800112c:	0c24      	lsrs	r4, r4, #16
 800112e:	0003      	movs	r3, r0
 8001130:	430c      	orrs	r4, r1
 8001132:	42a2      	cmp	r2, r4
 8001134:	d900      	bls.n	8001138 <__aeabi_ddiv+0x230>
 8001136:	e15d      	b.n	80013f4 <__aeabi_ddiv+0x4ec>
 8001138:	4641      	mov	r1, r8
 800113a:	1aa4      	subs	r4, r4, r2
 800113c:	043a      	lsls	r2, r7, #16
 800113e:	431a      	orrs	r2, r3
 8001140:	9d04      	ldr	r5, [sp, #16]
 8001142:	0413      	lsls	r3, r2, #16
 8001144:	0c1b      	lsrs	r3, r3, #16
 8001146:	4359      	muls	r1, r3
 8001148:	4647      	mov	r7, r8
 800114a:	436b      	muls	r3, r5
 800114c:	469c      	mov	ip, r3
 800114e:	0c10      	lsrs	r0, r2, #16
 8001150:	4347      	muls	r7, r0
 8001152:	0c0b      	lsrs	r3, r1, #16
 8001154:	44bc      	add	ip, r7
 8001156:	4463      	add	r3, ip
 8001158:	4368      	muls	r0, r5
 800115a:	429f      	cmp	r7, r3
 800115c:	d903      	bls.n	8001166 <__aeabi_ddiv+0x25e>
 800115e:	2580      	movs	r5, #128	@ 0x80
 8001160:	026d      	lsls	r5, r5, #9
 8001162:	46ac      	mov	ip, r5
 8001164:	4460      	add	r0, ip
 8001166:	0c1f      	lsrs	r7, r3, #16
 8001168:	0409      	lsls	r1, r1, #16
 800116a:	041b      	lsls	r3, r3, #16
 800116c:	0c09      	lsrs	r1, r1, #16
 800116e:	183f      	adds	r7, r7, r0
 8001170:	185b      	adds	r3, r3, r1
 8001172:	42bc      	cmp	r4, r7
 8001174:	d200      	bcs.n	8001178 <__aeabi_ddiv+0x270>
 8001176:	e102      	b.n	800137e <__aeabi_ddiv+0x476>
 8001178:	d100      	bne.n	800117c <__aeabi_ddiv+0x274>
 800117a:	e0fd      	b.n	8001378 <__aeabi_ddiv+0x470>
 800117c:	2301      	movs	r3, #1
 800117e:	431a      	orrs	r2, r3
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <__aeabi_ddiv+0x388>)
 8001182:	4453      	add	r3, sl
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc00      	bgt.n	800118a <__aeabi_ddiv+0x282>
 8001188:	e0ae      	b.n	80012e8 <__aeabi_ddiv+0x3e0>
 800118a:	0751      	lsls	r1, r2, #29
 800118c:	d000      	beq.n	8001190 <__aeabi_ddiv+0x288>
 800118e:	e198      	b.n	80014c2 <__aeabi_ddiv+0x5ba>
 8001190:	4659      	mov	r1, fp
 8001192:	01c9      	lsls	r1, r1, #7
 8001194:	d506      	bpl.n	80011a4 <__aeabi_ddiv+0x29c>
 8001196:	4659      	mov	r1, fp
 8001198:	4b3e      	ldr	r3, [pc, #248]	@ (8001294 <__aeabi_ddiv+0x38c>)
 800119a:	4019      	ands	r1, r3
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	468b      	mov	fp, r1
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	4453      	add	r3, sl
 80011a4:	493c      	ldr	r1, [pc, #240]	@ (8001298 <__aeabi_ddiv+0x390>)
 80011a6:	428b      	cmp	r3, r1
 80011a8:	dd00      	ble.n	80011ac <__aeabi_ddiv+0x2a4>
 80011aa:	e71a      	b.n	8000fe2 <__aeabi_ddiv+0xda>
 80011ac:	4659      	mov	r1, fp
 80011ae:	08d2      	lsrs	r2, r2, #3
 80011b0:	0749      	lsls	r1, r1, #29
 80011b2:	4311      	orrs	r1, r2
 80011b4:	465a      	mov	r2, fp
 80011b6:	055b      	lsls	r3, r3, #21
 80011b8:	0254      	lsls	r4, r2, #9
 80011ba:	4688      	mov	r8, r1
 80011bc:	0b24      	lsrs	r4, r4, #12
 80011be:	0d5b      	lsrs	r3, r3, #21
 80011c0:	e702      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 80011c2:	465a      	mov	r2, fp
 80011c4:	9b00      	ldr	r3, [sp, #0]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x2c4>
 80011ca:	e07e      	b.n	80012ca <__aeabi_ddiv+0x3c2>
 80011cc:	465b      	mov	r3, fp
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <__aeabi_ddiv+0x2cc>
 80011d2:	e100      	b.n	80013d6 <__aeabi_ddiv+0x4ce>
 80011d4:	4658      	mov	r0, fp
 80011d6:	f001 fa37 	bl	8002648 <__clzsi2>
 80011da:	0002      	movs	r2, r0
 80011dc:	0003      	movs	r3, r0
 80011de:	3a0b      	subs	r2, #11
 80011e0:	271d      	movs	r7, #29
 80011e2:	9e00      	ldr	r6, [sp, #0]
 80011e4:	1aba      	subs	r2, r7, r2
 80011e6:	0019      	movs	r1, r3
 80011e8:	4658      	mov	r0, fp
 80011ea:	40d6      	lsrs	r6, r2
 80011ec:	3908      	subs	r1, #8
 80011ee:	4088      	lsls	r0, r1
 80011f0:	0032      	movs	r2, r6
 80011f2:	4302      	orrs	r2, r0
 80011f4:	4693      	mov	fp, r2
 80011f6:	9a00      	ldr	r2, [sp, #0]
 80011f8:	408a      	lsls	r2, r1
 80011fa:	4928      	ldr	r1, [pc, #160]	@ (800129c <__aeabi_ddiv+0x394>)
 80011fc:	4453      	add	r3, sl
 80011fe:	468a      	mov	sl, r1
 8001200:	449a      	add	sl, r3
 8001202:	2300      	movs	r3, #0
 8001204:	e6c8      	b.n	8000f98 <__aeabi_ddiv+0x90>
 8001206:	465b      	mov	r3, fp
 8001208:	4303      	orrs	r3, r0
 800120a:	4699      	mov	r9, r3
 800120c:	d056      	beq.n	80012bc <__aeabi_ddiv+0x3b4>
 800120e:	465b      	mov	r3, fp
 8001210:	2b00      	cmp	r3, #0
 8001212:	d100      	bne.n	8001216 <__aeabi_ddiv+0x30e>
 8001214:	e0cd      	b.n	80013b2 <__aeabi_ddiv+0x4aa>
 8001216:	4658      	mov	r0, fp
 8001218:	f001 fa16 	bl	8002648 <__clzsi2>
 800121c:	230b      	movs	r3, #11
 800121e:	425b      	negs	r3, r3
 8001220:	469c      	mov	ip, r3
 8001222:	0002      	movs	r2, r0
 8001224:	4484      	add	ip, r0
 8001226:	4666      	mov	r6, ip
 8001228:	231d      	movs	r3, #29
 800122a:	1b9b      	subs	r3, r3, r6
 800122c:	0026      	movs	r6, r4
 800122e:	0011      	movs	r1, r2
 8001230:	4658      	mov	r0, fp
 8001232:	40de      	lsrs	r6, r3
 8001234:	3908      	subs	r1, #8
 8001236:	4088      	lsls	r0, r1
 8001238:	0033      	movs	r3, r6
 800123a:	4303      	orrs	r3, r0
 800123c:	4699      	mov	r9, r3
 800123e:	0023      	movs	r3, r4
 8001240:	408b      	lsls	r3, r1
 8001242:	4698      	mov	r8, r3
 8001244:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <__aeabi_ddiv+0x398>)
 8001246:	2400      	movs	r4, #0
 8001248:	1a9b      	subs	r3, r3, r2
 800124a:	469a      	mov	sl, r3
 800124c:	2300      	movs	r3, #0
 800124e:	9303      	str	r3, [sp, #12]
 8001250:	e682      	b.n	8000f58 <__aeabi_ddiv+0x50>
 8001252:	465a      	mov	r2, fp
 8001254:	4302      	orrs	r2, r0
 8001256:	4691      	mov	r9, r2
 8001258:	d12a      	bne.n	80012b0 <__aeabi_ddiv+0x3a8>
 800125a:	2200      	movs	r2, #0
 800125c:	469a      	mov	sl, r3
 800125e:	2302      	movs	r3, #2
 8001260:	4690      	mov	r8, r2
 8001262:	2408      	movs	r4, #8
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	e677      	b.n	8000f58 <__aeabi_ddiv+0x50>
 8001268:	465a      	mov	r2, fp
 800126a:	9b00      	ldr	r3, [sp, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <__aeabi_ddiv+0x39c>)
 8001270:	469c      	mov	ip, r3
 8001272:	44e2      	add	sl, ip
 8001274:	2a00      	cmp	r2, #0
 8001276:	d117      	bne.n	80012a8 <__aeabi_ddiv+0x3a0>
 8001278:	2302      	movs	r3, #2
 800127a:	431c      	orrs	r4, r3
 800127c:	2300      	movs	r3, #0
 800127e:	469b      	mov	fp, r3
 8001280:	3302      	adds	r3, #2
 8001282:	e689      	b.n	8000f98 <__aeabi_ddiv+0x90>
 8001284:	000007ff 	.word	0x000007ff
 8001288:	fffffc01 	.word	0xfffffc01
 800128c:	0800809c 	.word	0x0800809c
 8001290:	000003ff 	.word	0x000003ff
 8001294:	feffffff 	.word	0xfeffffff
 8001298:	000007fe 	.word	0x000007fe
 800129c:	000003f3 	.word	0x000003f3
 80012a0:	fffffc0d 	.word	0xfffffc0d
 80012a4:	fffff801 	.word	0xfffff801
 80012a8:	2303      	movs	r3, #3
 80012aa:	0032      	movs	r2, r6
 80012ac:	431c      	orrs	r4, r3
 80012ae:	e673      	b.n	8000f98 <__aeabi_ddiv+0x90>
 80012b0:	469a      	mov	sl, r3
 80012b2:	2303      	movs	r3, #3
 80012b4:	46d9      	mov	r9, fp
 80012b6:	240c      	movs	r4, #12
 80012b8:	9303      	str	r3, [sp, #12]
 80012ba:	e64d      	b.n	8000f58 <__aeabi_ddiv+0x50>
 80012bc:	2300      	movs	r3, #0
 80012be:	4698      	mov	r8, r3
 80012c0:	469a      	mov	sl, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	2404      	movs	r4, #4
 80012c6:	9303      	str	r3, [sp, #12]
 80012c8:	e646      	b.n	8000f58 <__aeabi_ddiv+0x50>
 80012ca:	2301      	movs	r3, #1
 80012cc:	431c      	orrs	r4, r3
 80012ce:	2300      	movs	r3, #0
 80012d0:	469b      	mov	fp, r3
 80012d2:	3301      	adds	r3, #1
 80012d4:	e660      	b.n	8000f98 <__aeabi_ddiv+0x90>
 80012d6:	2300      	movs	r3, #0
 80012d8:	2480      	movs	r4, #128	@ 0x80
 80012da:	4698      	mov	r8, r3
 80012dc:	2600      	movs	r6, #0
 80012de:	4b92      	ldr	r3, [pc, #584]	@ (8001528 <__aeabi_ddiv+0x620>)
 80012e0:	0324      	lsls	r4, r4, #12
 80012e2:	e671      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 80012e4:	2201      	movs	r2, #1
 80012e6:	4252      	negs	r2, r2
 80012e8:	2101      	movs	r1, #1
 80012ea:	1ac9      	subs	r1, r1, r3
 80012ec:	2938      	cmp	r1, #56	@ 0x38
 80012ee:	dd00      	ble.n	80012f2 <__aeabi_ddiv+0x3ea>
 80012f0:	e666      	b.n	8000fc0 <__aeabi_ddiv+0xb8>
 80012f2:	291f      	cmp	r1, #31
 80012f4:	dc00      	bgt.n	80012f8 <__aeabi_ddiv+0x3f0>
 80012f6:	e0ab      	b.n	8001450 <__aeabi_ddiv+0x548>
 80012f8:	201f      	movs	r0, #31
 80012fa:	4240      	negs	r0, r0
 80012fc:	1ac3      	subs	r3, r0, r3
 80012fe:	4658      	mov	r0, fp
 8001300:	40d8      	lsrs	r0, r3
 8001302:	0003      	movs	r3, r0
 8001304:	2920      	cmp	r1, #32
 8001306:	d004      	beq.n	8001312 <__aeabi_ddiv+0x40a>
 8001308:	4658      	mov	r0, fp
 800130a:	4988      	ldr	r1, [pc, #544]	@ (800152c <__aeabi_ddiv+0x624>)
 800130c:	4451      	add	r1, sl
 800130e:	4088      	lsls	r0, r1
 8001310:	4302      	orrs	r2, r0
 8001312:	1e51      	subs	r1, r2, #1
 8001314:	418a      	sbcs	r2, r1
 8001316:	431a      	orrs	r2, r3
 8001318:	2307      	movs	r3, #7
 800131a:	0019      	movs	r1, r3
 800131c:	2400      	movs	r4, #0
 800131e:	4011      	ands	r1, r2
 8001320:	4213      	tst	r3, r2
 8001322:	d00c      	beq.n	800133e <__aeabi_ddiv+0x436>
 8001324:	230f      	movs	r3, #15
 8001326:	4013      	ands	r3, r2
 8001328:	2b04      	cmp	r3, #4
 800132a:	d100      	bne.n	800132e <__aeabi_ddiv+0x426>
 800132c:	e0f9      	b.n	8001522 <__aeabi_ddiv+0x61a>
 800132e:	1d11      	adds	r1, r2, #4
 8001330:	4291      	cmp	r1, r2
 8001332:	419b      	sbcs	r3, r3
 8001334:	000a      	movs	r2, r1
 8001336:	425b      	negs	r3, r3
 8001338:	0759      	lsls	r1, r3, #29
 800133a:	025b      	lsls	r3, r3, #9
 800133c:	0b1c      	lsrs	r4, r3, #12
 800133e:	08d2      	lsrs	r2, r2, #3
 8001340:	430a      	orrs	r2, r1
 8001342:	4690      	mov	r8, r2
 8001344:	2300      	movs	r3, #0
 8001346:	e63f      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001348:	2480      	movs	r4, #128	@ 0x80
 800134a:	464b      	mov	r3, r9
 800134c:	0324      	lsls	r4, r4, #12
 800134e:	4223      	tst	r3, r4
 8001350:	d009      	beq.n	8001366 <__aeabi_ddiv+0x45e>
 8001352:	465b      	mov	r3, fp
 8001354:	4223      	tst	r3, r4
 8001356:	d106      	bne.n	8001366 <__aeabi_ddiv+0x45e>
 8001358:	431c      	orrs	r4, r3
 800135a:	0324      	lsls	r4, r4, #12
 800135c:	002e      	movs	r6, r5
 800135e:	4690      	mov	r8, r2
 8001360:	4b71      	ldr	r3, [pc, #452]	@ (8001528 <__aeabi_ddiv+0x620>)
 8001362:	0b24      	lsrs	r4, r4, #12
 8001364:	e630      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001366:	2480      	movs	r4, #128	@ 0x80
 8001368:	464b      	mov	r3, r9
 800136a:	0324      	lsls	r4, r4, #12
 800136c:	431c      	orrs	r4, r3
 800136e:	0324      	lsls	r4, r4, #12
 8001370:	9e02      	ldr	r6, [sp, #8]
 8001372:	4b6d      	ldr	r3, [pc, #436]	@ (8001528 <__aeabi_ddiv+0x620>)
 8001374:	0b24      	lsrs	r4, r4, #12
 8001376:	e627      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001378:	2b00      	cmp	r3, #0
 800137a:	d100      	bne.n	800137e <__aeabi_ddiv+0x476>
 800137c:	e700      	b.n	8001180 <__aeabi_ddiv+0x278>
 800137e:	9800      	ldr	r0, [sp, #0]
 8001380:	1e51      	subs	r1, r2, #1
 8001382:	4684      	mov	ip, r0
 8001384:	4464      	add	r4, ip
 8001386:	4284      	cmp	r4, r0
 8001388:	d200      	bcs.n	800138c <__aeabi_ddiv+0x484>
 800138a:	e084      	b.n	8001496 <__aeabi_ddiv+0x58e>
 800138c:	42bc      	cmp	r4, r7
 800138e:	d200      	bcs.n	8001392 <__aeabi_ddiv+0x48a>
 8001390:	e0ae      	b.n	80014f0 <__aeabi_ddiv+0x5e8>
 8001392:	d100      	bne.n	8001396 <__aeabi_ddiv+0x48e>
 8001394:	e0c1      	b.n	800151a <__aeabi_ddiv+0x612>
 8001396:	000a      	movs	r2, r1
 8001398:	e6f0      	b.n	800117c <__aeabi_ddiv+0x274>
 800139a:	4542      	cmp	r2, r8
 800139c:	d900      	bls.n	80013a0 <__aeabi_ddiv+0x498>
 800139e:	e62c      	b.n	8000ffa <__aeabi_ddiv+0xf2>
 80013a0:	464b      	mov	r3, r9
 80013a2:	07dc      	lsls	r4, r3, #31
 80013a4:	0858      	lsrs	r0, r3, #1
 80013a6:	4643      	mov	r3, r8
 80013a8:	085b      	lsrs	r3, r3, #1
 80013aa:	431c      	orrs	r4, r3
 80013ac:	4643      	mov	r3, r8
 80013ae:	07df      	lsls	r7, r3, #31
 80013b0:	e62a      	b.n	8001008 <__aeabi_ddiv+0x100>
 80013b2:	f001 f949 	bl	8002648 <__clzsi2>
 80013b6:	2315      	movs	r3, #21
 80013b8:	469c      	mov	ip, r3
 80013ba:	4484      	add	ip, r0
 80013bc:	0002      	movs	r2, r0
 80013be:	4663      	mov	r3, ip
 80013c0:	3220      	adds	r2, #32
 80013c2:	2b1c      	cmp	r3, #28
 80013c4:	dc00      	bgt.n	80013c8 <__aeabi_ddiv+0x4c0>
 80013c6:	e72e      	b.n	8001226 <__aeabi_ddiv+0x31e>
 80013c8:	0023      	movs	r3, r4
 80013ca:	3808      	subs	r0, #8
 80013cc:	4083      	lsls	r3, r0
 80013ce:	4699      	mov	r9, r3
 80013d0:	2300      	movs	r3, #0
 80013d2:	4698      	mov	r8, r3
 80013d4:	e736      	b.n	8001244 <__aeabi_ddiv+0x33c>
 80013d6:	f001 f937 	bl	8002648 <__clzsi2>
 80013da:	0002      	movs	r2, r0
 80013dc:	0003      	movs	r3, r0
 80013de:	3215      	adds	r2, #21
 80013e0:	3320      	adds	r3, #32
 80013e2:	2a1c      	cmp	r2, #28
 80013e4:	dc00      	bgt.n	80013e8 <__aeabi_ddiv+0x4e0>
 80013e6:	e6fb      	b.n	80011e0 <__aeabi_ddiv+0x2d8>
 80013e8:	9900      	ldr	r1, [sp, #0]
 80013ea:	3808      	subs	r0, #8
 80013ec:	4081      	lsls	r1, r0
 80013ee:	2200      	movs	r2, #0
 80013f0:	468b      	mov	fp, r1
 80013f2:	e702      	b.n	80011fa <__aeabi_ddiv+0x2f2>
 80013f4:	9900      	ldr	r1, [sp, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	468c      	mov	ip, r1
 80013fa:	4464      	add	r4, ip
 80013fc:	42a1      	cmp	r1, r4
 80013fe:	d900      	bls.n	8001402 <__aeabi_ddiv+0x4fa>
 8001400:	e69a      	b.n	8001138 <__aeabi_ddiv+0x230>
 8001402:	42a2      	cmp	r2, r4
 8001404:	d800      	bhi.n	8001408 <__aeabi_ddiv+0x500>
 8001406:	e697      	b.n	8001138 <__aeabi_ddiv+0x230>
 8001408:	1e83      	subs	r3, r0, #2
 800140a:	4464      	add	r4, ip
 800140c:	e694      	b.n	8001138 <__aeabi_ddiv+0x230>
 800140e:	46ac      	mov	ip, r5
 8001410:	4461      	add	r1, ip
 8001412:	3f01      	subs	r7, #1
 8001414:	428d      	cmp	r5, r1
 8001416:	d900      	bls.n	800141a <__aeabi_ddiv+0x512>
 8001418:	e680      	b.n	800111c <__aeabi_ddiv+0x214>
 800141a:	428a      	cmp	r2, r1
 800141c:	d800      	bhi.n	8001420 <__aeabi_ddiv+0x518>
 800141e:	e67d      	b.n	800111c <__aeabi_ddiv+0x214>
 8001420:	1e87      	subs	r7, r0, #2
 8001422:	4461      	add	r1, ip
 8001424:	e67a      	b.n	800111c <__aeabi_ddiv+0x214>
 8001426:	4285      	cmp	r5, r0
 8001428:	d000      	beq.n	800142c <__aeabi_ddiv+0x524>
 800142a:	e65f      	b.n	80010ec <__aeabi_ddiv+0x1e4>
 800142c:	45b9      	cmp	r9, r7
 800142e:	d900      	bls.n	8001432 <__aeabi_ddiv+0x52a>
 8001430:	e65c      	b.n	80010ec <__aeabi_ddiv+0x1e4>
 8001432:	e656      	b.n	80010e2 <__aeabi_ddiv+0x1da>
 8001434:	42a2      	cmp	r2, r4
 8001436:	d800      	bhi.n	800143a <__aeabi_ddiv+0x532>
 8001438:	e61a      	b.n	8001070 <__aeabi_ddiv+0x168>
 800143a:	1e83      	subs	r3, r0, #2
 800143c:	4464      	add	r4, ip
 800143e:	e617      	b.n	8001070 <__aeabi_ddiv+0x168>
 8001440:	428a      	cmp	r2, r1
 8001442:	d800      	bhi.n	8001446 <__aeabi_ddiv+0x53e>
 8001444:	e600      	b.n	8001048 <__aeabi_ddiv+0x140>
 8001446:	46ac      	mov	ip, r5
 8001448:	1e83      	subs	r3, r0, #2
 800144a:	4698      	mov	r8, r3
 800144c:	4461      	add	r1, ip
 800144e:	e5fb      	b.n	8001048 <__aeabi_ddiv+0x140>
 8001450:	4837      	ldr	r0, [pc, #220]	@ (8001530 <__aeabi_ddiv+0x628>)
 8001452:	0014      	movs	r4, r2
 8001454:	4450      	add	r0, sl
 8001456:	4082      	lsls	r2, r0
 8001458:	465b      	mov	r3, fp
 800145a:	0017      	movs	r7, r2
 800145c:	4083      	lsls	r3, r0
 800145e:	40cc      	lsrs	r4, r1
 8001460:	1e7a      	subs	r2, r7, #1
 8001462:	4197      	sbcs	r7, r2
 8001464:	4323      	orrs	r3, r4
 8001466:	433b      	orrs	r3, r7
 8001468:	001a      	movs	r2, r3
 800146a:	465b      	mov	r3, fp
 800146c:	40cb      	lsrs	r3, r1
 800146e:	0751      	lsls	r1, r2, #29
 8001470:	d009      	beq.n	8001486 <__aeabi_ddiv+0x57e>
 8001472:	210f      	movs	r1, #15
 8001474:	4011      	ands	r1, r2
 8001476:	2904      	cmp	r1, #4
 8001478:	d005      	beq.n	8001486 <__aeabi_ddiv+0x57e>
 800147a:	1d11      	adds	r1, r2, #4
 800147c:	4291      	cmp	r1, r2
 800147e:	4192      	sbcs	r2, r2
 8001480:	4252      	negs	r2, r2
 8001482:	189b      	adds	r3, r3, r2
 8001484:	000a      	movs	r2, r1
 8001486:	0219      	lsls	r1, r3, #8
 8001488:	d400      	bmi.n	800148c <__aeabi_ddiv+0x584>
 800148a:	e755      	b.n	8001338 <__aeabi_ddiv+0x430>
 800148c:	2200      	movs	r2, #0
 800148e:	2301      	movs	r3, #1
 8001490:	2400      	movs	r4, #0
 8001492:	4690      	mov	r8, r2
 8001494:	e598      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 8001496:	000a      	movs	r2, r1
 8001498:	42bc      	cmp	r4, r7
 800149a:	d000      	beq.n	800149e <__aeabi_ddiv+0x596>
 800149c:	e66e      	b.n	800117c <__aeabi_ddiv+0x274>
 800149e:	454b      	cmp	r3, r9
 80014a0:	d000      	beq.n	80014a4 <__aeabi_ddiv+0x59c>
 80014a2:	e66b      	b.n	800117c <__aeabi_ddiv+0x274>
 80014a4:	e66c      	b.n	8001180 <__aeabi_ddiv+0x278>
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <__aeabi_ddiv+0x62c>)
 80014a8:	4a23      	ldr	r2, [pc, #140]	@ (8001538 <__aeabi_ddiv+0x630>)
 80014aa:	4453      	add	r3, sl
 80014ac:	4592      	cmp	sl, r2
 80014ae:	da00      	bge.n	80014b2 <__aeabi_ddiv+0x5aa>
 80014b0:	e718      	b.n	80012e4 <__aeabi_ddiv+0x3dc>
 80014b2:	2101      	movs	r1, #1
 80014b4:	4249      	negs	r1, r1
 80014b6:	1d0a      	adds	r2, r1, #4
 80014b8:	428a      	cmp	r2, r1
 80014ba:	4189      	sbcs	r1, r1
 80014bc:	4249      	negs	r1, r1
 80014be:	448b      	add	fp, r1
 80014c0:	e666      	b.n	8001190 <__aeabi_ddiv+0x288>
 80014c2:	210f      	movs	r1, #15
 80014c4:	4011      	ands	r1, r2
 80014c6:	2904      	cmp	r1, #4
 80014c8:	d100      	bne.n	80014cc <__aeabi_ddiv+0x5c4>
 80014ca:	e661      	b.n	8001190 <__aeabi_ddiv+0x288>
 80014cc:	0011      	movs	r1, r2
 80014ce:	e7f2      	b.n	80014b6 <__aeabi_ddiv+0x5ae>
 80014d0:	42bc      	cmp	r4, r7
 80014d2:	d800      	bhi.n	80014d6 <__aeabi_ddiv+0x5ce>
 80014d4:	e60a      	b.n	80010ec <__aeabi_ddiv+0x1e4>
 80014d6:	2302      	movs	r3, #2
 80014d8:	425b      	negs	r3, r3
 80014da:	469c      	mov	ip, r3
 80014dc:	9900      	ldr	r1, [sp, #0]
 80014de:	444f      	add	r7, r9
 80014e0:	454f      	cmp	r7, r9
 80014e2:	419b      	sbcs	r3, r3
 80014e4:	44e3      	add	fp, ip
 80014e6:	468c      	mov	ip, r1
 80014e8:	425b      	negs	r3, r3
 80014ea:	4463      	add	r3, ip
 80014ec:	18c0      	adds	r0, r0, r3
 80014ee:	e5ff      	b.n	80010f0 <__aeabi_ddiv+0x1e8>
 80014f0:	4649      	mov	r1, r9
 80014f2:	9d00      	ldr	r5, [sp, #0]
 80014f4:	0048      	lsls	r0, r1, #1
 80014f6:	4548      	cmp	r0, r9
 80014f8:	4189      	sbcs	r1, r1
 80014fa:	46ac      	mov	ip, r5
 80014fc:	4249      	negs	r1, r1
 80014fe:	4461      	add	r1, ip
 8001500:	4681      	mov	r9, r0
 8001502:	3a02      	subs	r2, #2
 8001504:	1864      	adds	r4, r4, r1
 8001506:	e7c7      	b.n	8001498 <__aeabi_ddiv+0x590>
 8001508:	2480      	movs	r4, #128	@ 0x80
 800150a:	465b      	mov	r3, fp
 800150c:	0324      	lsls	r4, r4, #12
 800150e:	431c      	orrs	r4, r3
 8001510:	0324      	lsls	r4, r4, #12
 8001512:	4690      	mov	r8, r2
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <__aeabi_ddiv+0x620>)
 8001516:	0b24      	lsrs	r4, r4, #12
 8001518:	e556      	b.n	8000fc8 <__aeabi_ddiv+0xc0>
 800151a:	4599      	cmp	r9, r3
 800151c:	d3e8      	bcc.n	80014f0 <__aeabi_ddiv+0x5e8>
 800151e:	000a      	movs	r2, r1
 8001520:	e7bd      	b.n	800149e <__aeabi_ddiv+0x596>
 8001522:	2300      	movs	r3, #0
 8001524:	e708      	b.n	8001338 <__aeabi_ddiv+0x430>
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	000007ff 	.word	0x000007ff
 800152c:	0000043e 	.word	0x0000043e
 8001530:	0000041e 	.word	0x0000041e
 8001534:	000003ff 	.word	0x000003ff
 8001538:	fffffc02 	.word	0xfffffc02

0800153c <__eqdf2>:
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	4657      	mov	r7, sl
 8001540:	46de      	mov	lr, fp
 8001542:	464e      	mov	r6, r9
 8001544:	4645      	mov	r5, r8
 8001546:	b5e0      	push	{r5, r6, r7, lr}
 8001548:	000d      	movs	r5, r1
 800154a:	0004      	movs	r4, r0
 800154c:	0fe8      	lsrs	r0, r5, #31
 800154e:	4683      	mov	fp, r0
 8001550:	0309      	lsls	r1, r1, #12
 8001552:	0fd8      	lsrs	r0, r3, #31
 8001554:	0b09      	lsrs	r1, r1, #12
 8001556:	4682      	mov	sl, r0
 8001558:	4819      	ldr	r0, [pc, #100]	@ (80015c0 <__eqdf2+0x84>)
 800155a:	468c      	mov	ip, r1
 800155c:	031f      	lsls	r7, r3, #12
 800155e:	0069      	lsls	r1, r5, #1
 8001560:	005e      	lsls	r6, r3, #1
 8001562:	0d49      	lsrs	r1, r1, #21
 8001564:	0b3f      	lsrs	r7, r7, #12
 8001566:	0d76      	lsrs	r6, r6, #21
 8001568:	4281      	cmp	r1, r0
 800156a:	d018      	beq.n	800159e <__eqdf2+0x62>
 800156c:	4286      	cmp	r6, r0
 800156e:	d00f      	beq.n	8001590 <__eqdf2+0x54>
 8001570:	2001      	movs	r0, #1
 8001572:	42b1      	cmp	r1, r6
 8001574:	d10d      	bne.n	8001592 <__eqdf2+0x56>
 8001576:	45bc      	cmp	ip, r7
 8001578:	d10b      	bne.n	8001592 <__eqdf2+0x56>
 800157a:	4294      	cmp	r4, r2
 800157c:	d109      	bne.n	8001592 <__eqdf2+0x56>
 800157e:	45d3      	cmp	fp, sl
 8001580:	d01c      	beq.n	80015bc <__eqdf2+0x80>
 8001582:	2900      	cmp	r1, #0
 8001584:	d105      	bne.n	8001592 <__eqdf2+0x56>
 8001586:	4660      	mov	r0, ip
 8001588:	4320      	orrs	r0, r4
 800158a:	1e43      	subs	r3, r0, #1
 800158c:	4198      	sbcs	r0, r3
 800158e:	e000      	b.n	8001592 <__eqdf2+0x56>
 8001590:	2001      	movs	r0, #1
 8001592:	bcf0      	pop	{r4, r5, r6, r7}
 8001594:	46bb      	mov	fp, r7
 8001596:	46b2      	mov	sl, r6
 8001598:	46a9      	mov	r9, r5
 800159a:	46a0      	mov	r8, r4
 800159c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159e:	2001      	movs	r0, #1
 80015a0:	428e      	cmp	r6, r1
 80015a2:	d1f6      	bne.n	8001592 <__eqdf2+0x56>
 80015a4:	4661      	mov	r1, ip
 80015a6:	4339      	orrs	r1, r7
 80015a8:	000f      	movs	r7, r1
 80015aa:	4317      	orrs	r7, r2
 80015ac:	4327      	orrs	r7, r4
 80015ae:	d1f0      	bne.n	8001592 <__eqdf2+0x56>
 80015b0:	465b      	mov	r3, fp
 80015b2:	4652      	mov	r2, sl
 80015b4:	1a98      	subs	r0, r3, r2
 80015b6:	1e43      	subs	r3, r0, #1
 80015b8:	4198      	sbcs	r0, r3
 80015ba:	e7ea      	b.n	8001592 <__eqdf2+0x56>
 80015bc:	2000      	movs	r0, #0
 80015be:	e7e8      	b.n	8001592 <__eqdf2+0x56>
 80015c0:	000007ff 	.word	0x000007ff

080015c4 <__gedf2>:
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	4657      	mov	r7, sl
 80015c8:	464e      	mov	r6, r9
 80015ca:	4645      	mov	r5, r8
 80015cc:	46de      	mov	lr, fp
 80015ce:	b5e0      	push	{r5, r6, r7, lr}
 80015d0:	000d      	movs	r5, r1
 80015d2:	030f      	lsls	r7, r1, #12
 80015d4:	0b39      	lsrs	r1, r7, #12
 80015d6:	b083      	sub	sp, #12
 80015d8:	0004      	movs	r4, r0
 80015da:	4680      	mov	r8, r0
 80015dc:	9101      	str	r1, [sp, #4]
 80015de:	0058      	lsls	r0, r3, #1
 80015e0:	0fe9      	lsrs	r1, r5, #31
 80015e2:	4f31      	ldr	r7, [pc, #196]	@ (80016a8 <__gedf2+0xe4>)
 80015e4:	0d40      	lsrs	r0, r0, #21
 80015e6:	468c      	mov	ip, r1
 80015e8:	006e      	lsls	r6, r5, #1
 80015ea:	0319      	lsls	r1, r3, #12
 80015ec:	4682      	mov	sl, r0
 80015ee:	4691      	mov	r9, r2
 80015f0:	0d76      	lsrs	r6, r6, #21
 80015f2:	0b09      	lsrs	r1, r1, #12
 80015f4:	0fd8      	lsrs	r0, r3, #31
 80015f6:	42be      	cmp	r6, r7
 80015f8:	d01f      	beq.n	800163a <__gedf2+0x76>
 80015fa:	45ba      	cmp	sl, r7
 80015fc:	d00f      	beq.n	800161e <__gedf2+0x5a>
 80015fe:	2e00      	cmp	r6, #0
 8001600:	d12f      	bne.n	8001662 <__gedf2+0x9e>
 8001602:	4655      	mov	r5, sl
 8001604:	9e01      	ldr	r6, [sp, #4]
 8001606:	4334      	orrs	r4, r6
 8001608:	2d00      	cmp	r5, #0
 800160a:	d127      	bne.n	800165c <__gedf2+0x98>
 800160c:	430a      	orrs	r2, r1
 800160e:	d03a      	beq.n	8001686 <__gedf2+0xc2>
 8001610:	2c00      	cmp	r4, #0
 8001612:	d145      	bne.n	80016a0 <__gedf2+0xdc>
 8001614:	2800      	cmp	r0, #0
 8001616:	d11a      	bne.n	800164e <__gedf2+0x8a>
 8001618:	2001      	movs	r0, #1
 800161a:	4240      	negs	r0, r0
 800161c:	e017      	b.n	800164e <__gedf2+0x8a>
 800161e:	4311      	orrs	r1, r2
 8001620:	d13b      	bne.n	800169a <__gedf2+0xd6>
 8001622:	2e00      	cmp	r6, #0
 8001624:	d102      	bne.n	800162c <__gedf2+0x68>
 8001626:	9f01      	ldr	r7, [sp, #4]
 8001628:	4327      	orrs	r7, r4
 800162a:	d0f3      	beq.n	8001614 <__gedf2+0x50>
 800162c:	4584      	cmp	ip, r0
 800162e:	d109      	bne.n	8001644 <__gedf2+0x80>
 8001630:	4663      	mov	r3, ip
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <__gedf2+0x54>
 8001636:	4660      	mov	r0, ip
 8001638:	e009      	b.n	800164e <__gedf2+0x8a>
 800163a:	9f01      	ldr	r7, [sp, #4]
 800163c:	4327      	orrs	r7, r4
 800163e:	d12c      	bne.n	800169a <__gedf2+0xd6>
 8001640:	45b2      	cmp	sl, r6
 8001642:	d024      	beq.n	800168e <__gedf2+0xca>
 8001644:	4663      	mov	r3, ip
 8001646:	2002      	movs	r0, #2
 8001648:	3b01      	subs	r3, #1
 800164a:	4018      	ands	r0, r3
 800164c:	3801      	subs	r0, #1
 800164e:	b003      	add	sp, #12
 8001650:	bcf0      	pop	{r4, r5, r6, r7}
 8001652:	46bb      	mov	fp, r7
 8001654:	46b2      	mov	sl, r6
 8001656:	46a9      	mov	r9, r5
 8001658:	46a0      	mov	r8, r4
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	2c00      	cmp	r4, #0
 800165e:	d0d9      	beq.n	8001614 <__gedf2+0x50>
 8001660:	e7e4      	b.n	800162c <__gedf2+0x68>
 8001662:	4654      	mov	r4, sl
 8001664:	2c00      	cmp	r4, #0
 8001666:	d0ed      	beq.n	8001644 <__gedf2+0x80>
 8001668:	4584      	cmp	ip, r0
 800166a:	d1eb      	bne.n	8001644 <__gedf2+0x80>
 800166c:	4556      	cmp	r6, sl
 800166e:	dce9      	bgt.n	8001644 <__gedf2+0x80>
 8001670:	dbde      	blt.n	8001630 <__gedf2+0x6c>
 8001672:	9b01      	ldr	r3, [sp, #4]
 8001674:	428b      	cmp	r3, r1
 8001676:	d8e5      	bhi.n	8001644 <__gedf2+0x80>
 8001678:	d1da      	bne.n	8001630 <__gedf2+0x6c>
 800167a:	45c8      	cmp	r8, r9
 800167c:	d8e2      	bhi.n	8001644 <__gedf2+0x80>
 800167e:	2000      	movs	r0, #0
 8001680:	45c8      	cmp	r8, r9
 8001682:	d2e4      	bcs.n	800164e <__gedf2+0x8a>
 8001684:	e7d4      	b.n	8001630 <__gedf2+0x6c>
 8001686:	2000      	movs	r0, #0
 8001688:	2c00      	cmp	r4, #0
 800168a:	d0e0      	beq.n	800164e <__gedf2+0x8a>
 800168c:	e7da      	b.n	8001644 <__gedf2+0x80>
 800168e:	4311      	orrs	r1, r2
 8001690:	d103      	bne.n	800169a <__gedf2+0xd6>
 8001692:	4584      	cmp	ip, r0
 8001694:	d1d6      	bne.n	8001644 <__gedf2+0x80>
 8001696:	2000      	movs	r0, #0
 8001698:	e7d9      	b.n	800164e <__gedf2+0x8a>
 800169a:	2002      	movs	r0, #2
 800169c:	4240      	negs	r0, r0
 800169e:	e7d6      	b.n	800164e <__gedf2+0x8a>
 80016a0:	4584      	cmp	ip, r0
 80016a2:	d0e6      	beq.n	8001672 <__gedf2+0xae>
 80016a4:	e7ce      	b.n	8001644 <__gedf2+0x80>
 80016a6:	46c0      	nop			@ (mov r8, r8)
 80016a8:	000007ff 	.word	0x000007ff

080016ac <__ledf2>:
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	4657      	mov	r7, sl
 80016b0:	464e      	mov	r6, r9
 80016b2:	4645      	mov	r5, r8
 80016b4:	46de      	mov	lr, fp
 80016b6:	b5e0      	push	{r5, r6, r7, lr}
 80016b8:	000d      	movs	r5, r1
 80016ba:	030f      	lsls	r7, r1, #12
 80016bc:	0004      	movs	r4, r0
 80016be:	4680      	mov	r8, r0
 80016c0:	0fe8      	lsrs	r0, r5, #31
 80016c2:	0b39      	lsrs	r1, r7, #12
 80016c4:	4684      	mov	ip, r0
 80016c6:	b083      	sub	sp, #12
 80016c8:	0058      	lsls	r0, r3, #1
 80016ca:	4f30      	ldr	r7, [pc, #192]	@ (800178c <__ledf2+0xe0>)
 80016cc:	0d40      	lsrs	r0, r0, #21
 80016ce:	9101      	str	r1, [sp, #4]
 80016d0:	031e      	lsls	r6, r3, #12
 80016d2:	0069      	lsls	r1, r5, #1
 80016d4:	4682      	mov	sl, r0
 80016d6:	4691      	mov	r9, r2
 80016d8:	0d49      	lsrs	r1, r1, #21
 80016da:	0b36      	lsrs	r6, r6, #12
 80016dc:	0fd8      	lsrs	r0, r3, #31
 80016de:	42b9      	cmp	r1, r7
 80016e0:	d020      	beq.n	8001724 <__ledf2+0x78>
 80016e2:	45ba      	cmp	sl, r7
 80016e4:	d00f      	beq.n	8001706 <__ledf2+0x5a>
 80016e6:	2900      	cmp	r1, #0
 80016e8:	d12b      	bne.n	8001742 <__ledf2+0x96>
 80016ea:	9901      	ldr	r1, [sp, #4]
 80016ec:	430c      	orrs	r4, r1
 80016ee:	4651      	mov	r1, sl
 80016f0:	2900      	cmp	r1, #0
 80016f2:	d137      	bne.n	8001764 <__ledf2+0xb8>
 80016f4:	4332      	orrs	r2, r6
 80016f6:	d038      	beq.n	800176a <__ledf2+0xbe>
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	d144      	bne.n	8001786 <__ledf2+0xda>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d119      	bne.n	8001734 <__ledf2+0x88>
 8001700:	2001      	movs	r0, #1
 8001702:	4240      	negs	r0, r0
 8001704:	e016      	b.n	8001734 <__ledf2+0x88>
 8001706:	4316      	orrs	r6, r2
 8001708:	d113      	bne.n	8001732 <__ledf2+0x86>
 800170a:	2900      	cmp	r1, #0
 800170c:	d102      	bne.n	8001714 <__ledf2+0x68>
 800170e:	9f01      	ldr	r7, [sp, #4]
 8001710:	4327      	orrs	r7, r4
 8001712:	d0f3      	beq.n	80016fc <__ledf2+0x50>
 8001714:	4584      	cmp	ip, r0
 8001716:	d020      	beq.n	800175a <__ledf2+0xae>
 8001718:	4663      	mov	r3, ip
 800171a:	2002      	movs	r0, #2
 800171c:	3b01      	subs	r3, #1
 800171e:	4018      	ands	r0, r3
 8001720:	3801      	subs	r0, #1
 8001722:	e007      	b.n	8001734 <__ledf2+0x88>
 8001724:	9f01      	ldr	r7, [sp, #4]
 8001726:	4327      	orrs	r7, r4
 8001728:	d103      	bne.n	8001732 <__ledf2+0x86>
 800172a:	458a      	cmp	sl, r1
 800172c:	d1f4      	bne.n	8001718 <__ledf2+0x6c>
 800172e:	4316      	orrs	r6, r2
 8001730:	d01f      	beq.n	8001772 <__ledf2+0xc6>
 8001732:	2002      	movs	r0, #2
 8001734:	b003      	add	sp, #12
 8001736:	bcf0      	pop	{r4, r5, r6, r7}
 8001738:	46bb      	mov	fp, r7
 800173a:	46b2      	mov	sl, r6
 800173c:	46a9      	mov	r9, r5
 800173e:	46a0      	mov	r8, r4
 8001740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001742:	4654      	mov	r4, sl
 8001744:	2c00      	cmp	r4, #0
 8001746:	d0e7      	beq.n	8001718 <__ledf2+0x6c>
 8001748:	4584      	cmp	ip, r0
 800174a:	d1e5      	bne.n	8001718 <__ledf2+0x6c>
 800174c:	4551      	cmp	r1, sl
 800174e:	dce3      	bgt.n	8001718 <__ledf2+0x6c>
 8001750:	db03      	blt.n	800175a <__ledf2+0xae>
 8001752:	9b01      	ldr	r3, [sp, #4]
 8001754:	42b3      	cmp	r3, r6
 8001756:	d8df      	bhi.n	8001718 <__ledf2+0x6c>
 8001758:	d00f      	beq.n	800177a <__ledf2+0xce>
 800175a:	4663      	mov	r3, ip
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0cf      	beq.n	8001700 <__ledf2+0x54>
 8001760:	4660      	mov	r0, ip
 8001762:	e7e7      	b.n	8001734 <__ledf2+0x88>
 8001764:	2c00      	cmp	r4, #0
 8001766:	d0c9      	beq.n	80016fc <__ledf2+0x50>
 8001768:	e7d4      	b.n	8001714 <__ledf2+0x68>
 800176a:	2000      	movs	r0, #0
 800176c:	2c00      	cmp	r4, #0
 800176e:	d0e1      	beq.n	8001734 <__ledf2+0x88>
 8001770:	e7d2      	b.n	8001718 <__ledf2+0x6c>
 8001772:	4584      	cmp	ip, r0
 8001774:	d1d0      	bne.n	8001718 <__ledf2+0x6c>
 8001776:	2000      	movs	r0, #0
 8001778:	e7dc      	b.n	8001734 <__ledf2+0x88>
 800177a:	45c8      	cmp	r8, r9
 800177c:	d8cc      	bhi.n	8001718 <__ledf2+0x6c>
 800177e:	2000      	movs	r0, #0
 8001780:	45c8      	cmp	r8, r9
 8001782:	d2d7      	bcs.n	8001734 <__ledf2+0x88>
 8001784:	e7e9      	b.n	800175a <__ledf2+0xae>
 8001786:	4584      	cmp	ip, r0
 8001788:	d0e3      	beq.n	8001752 <__ledf2+0xa6>
 800178a:	e7c5      	b.n	8001718 <__ledf2+0x6c>
 800178c:	000007ff 	.word	0x000007ff

08001790 <__aeabi_dmul>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	4657      	mov	r7, sl
 8001794:	46de      	mov	lr, fp
 8001796:	464e      	mov	r6, r9
 8001798:	4645      	mov	r5, r8
 800179a:	b5e0      	push	{r5, r6, r7, lr}
 800179c:	001f      	movs	r7, r3
 800179e:	030b      	lsls	r3, r1, #12
 80017a0:	0b1b      	lsrs	r3, r3, #12
 80017a2:	0016      	movs	r6, r2
 80017a4:	469a      	mov	sl, r3
 80017a6:	0fca      	lsrs	r2, r1, #31
 80017a8:	004b      	lsls	r3, r1, #1
 80017aa:	0004      	movs	r4, r0
 80017ac:	4693      	mov	fp, r2
 80017ae:	b087      	sub	sp, #28
 80017b0:	0d5b      	lsrs	r3, r3, #21
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x26>
 80017b4:	e0d5      	b.n	8001962 <__aeabi_dmul+0x1d2>
 80017b6:	4abb      	ldr	r2, [pc, #748]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d100      	bne.n	80017be <__aeabi_dmul+0x2e>
 80017bc:	e0f8      	b.n	80019b0 <__aeabi_dmul+0x220>
 80017be:	4651      	mov	r1, sl
 80017c0:	0f42      	lsrs	r2, r0, #29
 80017c2:	00c9      	lsls	r1, r1, #3
 80017c4:	430a      	orrs	r2, r1
 80017c6:	2180      	movs	r1, #128	@ 0x80
 80017c8:	0409      	lsls	r1, r1, #16
 80017ca:	4311      	orrs	r1, r2
 80017cc:	00c2      	lsls	r2, r0, #3
 80017ce:	4691      	mov	r9, r2
 80017d0:	4ab5      	ldr	r2, [pc, #724]	@ (8001aa8 <__aeabi_dmul+0x318>)
 80017d2:	468a      	mov	sl, r1
 80017d4:	189d      	adds	r5, r3, r2
 80017d6:	2300      	movs	r3, #0
 80017d8:	4698      	mov	r8, r3
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	033c      	lsls	r4, r7, #12
 80017de:	007b      	lsls	r3, r7, #1
 80017e0:	0ffa      	lsrs	r2, r7, #31
 80017e2:	0030      	movs	r0, r6
 80017e4:	0b24      	lsrs	r4, r4, #12
 80017e6:	0d5b      	lsrs	r3, r3, #21
 80017e8:	9200      	str	r2, [sp, #0]
 80017ea:	d100      	bne.n	80017ee <__aeabi_dmul+0x5e>
 80017ec:	e096      	b.n	800191c <__aeabi_dmul+0x18c>
 80017ee:	4aad      	ldr	r2, [pc, #692]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d031      	beq.n	8001858 <__aeabi_dmul+0xc8>
 80017f4:	0f72      	lsrs	r2, r6, #29
 80017f6:	00e4      	lsls	r4, r4, #3
 80017f8:	4322      	orrs	r2, r4
 80017fa:	2480      	movs	r4, #128	@ 0x80
 80017fc:	0424      	lsls	r4, r4, #16
 80017fe:	4314      	orrs	r4, r2
 8001800:	4aa9      	ldr	r2, [pc, #676]	@ (8001aa8 <__aeabi_dmul+0x318>)
 8001802:	00f0      	lsls	r0, r6, #3
 8001804:	4694      	mov	ip, r2
 8001806:	4463      	add	r3, ip
 8001808:	195b      	adds	r3, r3, r5
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	4642      	mov	r2, r8
 8001810:	2600      	movs	r6, #0
 8001812:	2a0a      	cmp	r2, #10
 8001814:	dc42      	bgt.n	800189c <__aeabi_dmul+0x10c>
 8001816:	465a      	mov	r2, fp
 8001818:	9900      	ldr	r1, [sp, #0]
 800181a:	404a      	eors	r2, r1
 800181c:	4693      	mov	fp, r2
 800181e:	4642      	mov	r2, r8
 8001820:	2a02      	cmp	r2, #2
 8001822:	dc32      	bgt.n	800188a <__aeabi_dmul+0xfa>
 8001824:	3a01      	subs	r2, #1
 8001826:	2a01      	cmp	r2, #1
 8001828:	d900      	bls.n	800182c <__aeabi_dmul+0x9c>
 800182a:	e149      	b.n	8001ac0 <__aeabi_dmul+0x330>
 800182c:	2e02      	cmp	r6, #2
 800182e:	d100      	bne.n	8001832 <__aeabi_dmul+0xa2>
 8001830:	e0ca      	b.n	80019c8 <__aeabi_dmul+0x238>
 8001832:	2e01      	cmp	r6, #1
 8001834:	d13d      	bne.n	80018b2 <__aeabi_dmul+0x122>
 8001836:	2300      	movs	r3, #0
 8001838:	2400      	movs	r4, #0
 800183a:	2200      	movs	r2, #0
 800183c:	0010      	movs	r0, r2
 800183e:	465a      	mov	r2, fp
 8001840:	051b      	lsls	r3, r3, #20
 8001842:	4323      	orrs	r3, r4
 8001844:	07d2      	lsls	r2, r2, #31
 8001846:	4313      	orrs	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	b007      	add	sp, #28
 800184c:	bcf0      	pop	{r4, r5, r6, r7}
 800184e:	46bb      	mov	fp, r7
 8001850:	46b2      	mov	sl, r6
 8001852:	46a9      	mov	r9, r5
 8001854:	46a0      	mov	r8, r4
 8001856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001858:	4b92      	ldr	r3, [pc, #584]	@ (8001aa4 <__aeabi_dmul+0x314>)
 800185a:	4326      	orrs	r6, r4
 800185c:	18eb      	adds	r3, r5, r3
 800185e:	2e00      	cmp	r6, #0
 8001860:	d100      	bne.n	8001864 <__aeabi_dmul+0xd4>
 8001862:	e0bb      	b.n	80019dc <__aeabi_dmul+0x24c>
 8001864:	2203      	movs	r2, #3
 8001866:	4641      	mov	r1, r8
 8001868:	4311      	orrs	r1, r2
 800186a:	465a      	mov	r2, fp
 800186c:	4688      	mov	r8, r1
 800186e:	9900      	ldr	r1, [sp, #0]
 8001870:	404a      	eors	r2, r1
 8001872:	2180      	movs	r1, #128	@ 0x80
 8001874:	0109      	lsls	r1, r1, #4
 8001876:	468c      	mov	ip, r1
 8001878:	0029      	movs	r1, r5
 800187a:	4461      	add	r1, ip
 800187c:	9101      	str	r1, [sp, #4]
 800187e:	4641      	mov	r1, r8
 8001880:	290a      	cmp	r1, #10
 8001882:	dd00      	ble.n	8001886 <__aeabi_dmul+0xf6>
 8001884:	e233      	b.n	8001cee <__aeabi_dmul+0x55e>
 8001886:	4693      	mov	fp, r2
 8001888:	2603      	movs	r6, #3
 800188a:	4642      	mov	r2, r8
 800188c:	2701      	movs	r7, #1
 800188e:	4097      	lsls	r7, r2
 8001890:	21a6      	movs	r1, #166	@ 0xa6
 8001892:	003a      	movs	r2, r7
 8001894:	00c9      	lsls	r1, r1, #3
 8001896:	400a      	ands	r2, r1
 8001898:	420f      	tst	r7, r1
 800189a:	d031      	beq.n	8001900 <__aeabi_dmul+0x170>
 800189c:	9e02      	ldr	r6, [sp, #8]
 800189e:	2e02      	cmp	r6, #2
 80018a0:	d100      	bne.n	80018a4 <__aeabi_dmul+0x114>
 80018a2:	e235      	b.n	8001d10 <__aeabi_dmul+0x580>
 80018a4:	2e03      	cmp	r6, #3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dmul+0x11a>
 80018a8:	e1d2      	b.n	8001c50 <__aeabi_dmul+0x4c0>
 80018aa:	4654      	mov	r4, sl
 80018ac:	4648      	mov	r0, r9
 80018ae:	2e01      	cmp	r6, #1
 80018b0:	d0c1      	beq.n	8001836 <__aeabi_dmul+0xa6>
 80018b2:	9a01      	ldr	r2, [sp, #4]
 80018b4:	4b7d      	ldr	r3, [pc, #500]	@ (8001aac <__aeabi_dmul+0x31c>)
 80018b6:	4694      	mov	ip, r2
 80018b8:	4463      	add	r3, ip
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc00      	bgt.n	80018c0 <__aeabi_dmul+0x130>
 80018be:	e0c0      	b.n	8001a42 <__aeabi_dmul+0x2b2>
 80018c0:	0742      	lsls	r2, r0, #29
 80018c2:	d009      	beq.n	80018d8 <__aeabi_dmul+0x148>
 80018c4:	220f      	movs	r2, #15
 80018c6:	4002      	ands	r2, r0
 80018c8:	2a04      	cmp	r2, #4
 80018ca:	d005      	beq.n	80018d8 <__aeabi_dmul+0x148>
 80018cc:	1d02      	adds	r2, r0, #4
 80018ce:	4282      	cmp	r2, r0
 80018d0:	4180      	sbcs	r0, r0
 80018d2:	4240      	negs	r0, r0
 80018d4:	1824      	adds	r4, r4, r0
 80018d6:	0010      	movs	r0, r2
 80018d8:	01e2      	lsls	r2, r4, #7
 80018da:	d506      	bpl.n	80018ea <__aeabi_dmul+0x15a>
 80018dc:	4b74      	ldr	r3, [pc, #464]	@ (8001ab0 <__aeabi_dmul+0x320>)
 80018de:	9a01      	ldr	r2, [sp, #4]
 80018e0:	401c      	ands	r4, r3
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	4694      	mov	ip, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4463      	add	r3, ip
 80018ea:	4a72      	ldr	r2, [pc, #456]	@ (8001ab4 <__aeabi_dmul+0x324>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	dc6b      	bgt.n	80019c8 <__aeabi_dmul+0x238>
 80018f0:	0762      	lsls	r2, r4, #29
 80018f2:	08c0      	lsrs	r0, r0, #3
 80018f4:	0264      	lsls	r4, r4, #9
 80018f6:	055b      	lsls	r3, r3, #21
 80018f8:	4302      	orrs	r2, r0
 80018fa:	0b24      	lsrs	r4, r4, #12
 80018fc:	0d5b      	lsrs	r3, r3, #21
 80018fe:	e79d      	b.n	800183c <__aeabi_dmul+0xac>
 8001900:	2190      	movs	r1, #144	@ 0x90
 8001902:	0089      	lsls	r1, r1, #2
 8001904:	420f      	tst	r7, r1
 8001906:	d163      	bne.n	80019d0 <__aeabi_dmul+0x240>
 8001908:	2288      	movs	r2, #136	@ 0x88
 800190a:	423a      	tst	r2, r7
 800190c:	d100      	bne.n	8001910 <__aeabi_dmul+0x180>
 800190e:	e0d7      	b.n	8001ac0 <__aeabi_dmul+0x330>
 8001910:	9b00      	ldr	r3, [sp, #0]
 8001912:	46a2      	mov	sl, r4
 8001914:	469b      	mov	fp, r3
 8001916:	4681      	mov	r9, r0
 8001918:	9602      	str	r6, [sp, #8]
 800191a:	e7bf      	b.n	800189c <__aeabi_dmul+0x10c>
 800191c:	0023      	movs	r3, r4
 800191e:	4333      	orrs	r3, r6
 8001920:	d100      	bne.n	8001924 <__aeabi_dmul+0x194>
 8001922:	e07f      	b.n	8001a24 <__aeabi_dmul+0x294>
 8001924:	2c00      	cmp	r4, #0
 8001926:	d100      	bne.n	800192a <__aeabi_dmul+0x19a>
 8001928:	e1ad      	b.n	8001c86 <__aeabi_dmul+0x4f6>
 800192a:	0020      	movs	r0, r4
 800192c:	f000 fe8c 	bl	8002648 <__clzsi2>
 8001930:	0002      	movs	r2, r0
 8001932:	0003      	movs	r3, r0
 8001934:	3a0b      	subs	r2, #11
 8001936:	201d      	movs	r0, #29
 8001938:	0019      	movs	r1, r3
 800193a:	1a82      	subs	r2, r0, r2
 800193c:	0030      	movs	r0, r6
 800193e:	3908      	subs	r1, #8
 8001940:	40d0      	lsrs	r0, r2
 8001942:	408c      	lsls	r4, r1
 8001944:	4304      	orrs	r4, r0
 8001946:	0030      	movs	r0, r6
 8001948:	4088      	lsls	r0, r1
 800194a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab8 <__aeabi_dmul+0x328>)
 800194c:	1aeb      	subs	r3, r5, r3
 800194e:	4694      	mov	ip, r2
 8001950:	4463      	add	r3, ip
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	9201      	str	r2, [sp, #4]
 8001956:	4642      	mov	r2, r8
 8001958:	2600      	movs	r6, #0
 800195a:	2a0a      	cmp	r2, #10
 800195c:	dc00      	bgt.n	8001960 <__aeabi_dmul+0x1d0>
 800195e:	e75a      	b.n	8001816 <__aeabi_dmul+0x86>
 8001960:	e79c      	b.n	800189c <__aeabi_dmul+0x10c>
 8001962:	4653      	mov	r3, sl
 8001964:	4303      	orrs	r3, r0
 8001966:	4699      	mov	r9, r3
 8001968:	d054      	beq.n	8001a14 <__aeabi_dmul+0x284>
 800196a:	4653      	mov	r3, sl
 800196c:	2b00      	cmp	r3, #0
 800196e:	d100      	bne.n	8001972 <__aeabi_dmul+0x1e2>
 8001970:	e177      	b.n	8001c62 <__aeabi_dmul+0x4d2>
 8001972:	4650      	mov	r0, sl
 8001974:	f000 fe68 	bl	8002648 <__clzsi2>
 8001978:	230b      	movs	r3, #11
 800197a:	425b      	negs	r3, r3
 800197c:	469c      	mov	ip, r3
 800197e:	0002      	movs	r2, r0
 8001980:	4484      	add	ip, r0
 8001982:	0011      	movs	r1, r2
 8001984:	4650      	mov	r0, sl
 8001986:	3908      	subs	r1, #8
 8001988:	4088      	lsls	r0, r1
 800198a:	231d      	movs	r3, #29
 800198c:	4680      	mov	r8, r0
 800198e:	4660      	mov	r0, ip
 8001990:	1a1b      	subs	r3, r3, r0
 8001992:	0020      	movs	r0, r4
 8001994:	40d8      	lsrs	r0, r3
 8001996:	0003      	movs	r3, r0
 8001998:	4640      	mov	r0, r8
 800199a:	4303      	orrs	r3, r0
 800199c:	469a      	mov	sl, r3
 800199e:	0023      	movs	r3, r4
 80019a0:	408b      	lsls	r3, r1
 80019a2:	4699      	mov	r9, r3
 80019a4:	2300      	movs	r3, #0
 80019a6:	4d44      	ldr	r5, [pc, #272]	@ (8001ab8 <__aeabi_dmul+0x328>)
 80019a8:	4698      	mov	r8, r3
 80019aa:	1aad      	subs	r5, r5, r2
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	e715      	b.n	80017dc <__aeabi_dmul+0x4c>
 80019b0:	4652      	mov	r2, sl
 80019b2:	4302      	orrs	r2, r0
 80019b4:	4691      	mov	r9, r2
 80019b6:	d126      	bne.n	8001a06 <__aeabi_dmul+0x276>
 80019b8:	2200      	movs	r2, #0
 80019ba:	001d      	movs	r5, r3
 80019bc:	2302      	movs	r3, #2
 80019be:	4692      	mov	sl, r2
 80019c0:	3208      	adds	r2, #8
 80019c2:	4690      	mov	r8, r2
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	e709      	b.n	80017dc <__aeabi_dmul+0x4c>
 80019c8:	2400      	movs	r4, #0
 80019ca:	2200      	movs	r2, #0
 80019cc:	4b35      	ldr	r3, [pc, #212]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80019ce:	e735      	b.n	800183c <__aeabi_dmul+0xac>
 80019d0:	2300      	movs	r3, #0
 80019d2:	2480      	movs	r4, #128	@ 0x80
 80019d4:	469b      	mov	fp, r3
 80019d6:	0324      	lsls	r4, r4, #12
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <__aeabi_dmul+0x314>)
 80019da:	e72f      	b.n	800183c <__aeabi_dmul+0xac>
 80019dc:	2202      	movs	r2, #2
 80019de:	4641      	mov	r1, r8
 80019e0:	4311      	orrs	r1, r2
 80019e2:	2280      	movs	r2, #128	@ 0x80
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	4694      	mov	ip, r2
 80019e8:	002a      	movs	r2, r5
 80019ea:	4462      	add	r2, ip
 80019ec:	4688      	mov	r8, r1
 80019ee:	9201      	str	r2, [sp, #4]
 80019f0:	290a      	cmp	r1, #10
 80019f2:	dd00      	ble.n	80019f6 <__aeabi_dmul+0x266>
 80019f4:	e752      	b.n	800189c <__aeabi_dmul+0x10c>
 80019f6:	465a      	mov	r2, fp
 80019f8:	2000      	movs	r0, #0
 80019fa:	9900      	ldr	r1, [sp, #0]
 80019fc:	0004      	movs	r4, r0
 80019fe:	404a      	eors	r2, r1
 8001a00:	4693      	mov	fp, r2
 8001a02:	2602      	movs	r6, #2
 8001a04:	e70b      	b.n	800181e <__aeabi_dmul+0x8e>
 8001a06:	220c      	movs	r2, #12
 8001a08:	001d      	movs	r5, r3
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	4681      	mov	r9, r0
 8001a0e:	4690      	mov	r8, r2
 8001a10:	9302      	str	r3, [sp, #8]
 8001a12:	e6e3      	b.n	80017dc <__aeabi_dmul+0x4c>
 8001a14:	2300      	movs	r3, #0
 8001a16:	469a      	mov	sl, r3
 8001a18:	3304      	adds	r3, #4
 8001a1a:	4698      	mov	r8, r3
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	2500      	movs	r5, #0
 8001a20:	9302      	str	r3, [sp, #8]
 8001a22:	e6db      	b.n	80017dc <__aeabi_dmul+0x4c>
 8001a24:	4642      	mov	r2, r8
 8001a26:	3301      	adds	r3, #1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	002b      	movs	r3, r5
 8001a2c:	4690      	mov	r8, r2
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	9201      	str	r2, [sp, #4]
 8001a32:	4642      	mov	r2, r8
 8001a34:	2400      	movs	r4, #0
 8001a36:	2000      	movs	r0, #0
 8001a38:	2601      	movs	r6, #1
 8001a3a:	2a0a      	cmp	r2, #10
 8001a3c:	dc00      	bgt.n	8001a40 <__aeabi_dmul+0x2b0>
 8001a3e:	e6ea      	b.n	8001816 <__aeabi_dmul+0x86>
 8001a40:	e72c      	b.n	800189c <__aeabi_dmul+0x10c>
 8001a42:	2201      	movs	r2, #1
 8001a44:	1ad2      	subs	r2, r2, r3
 8001a46:	2a38      	cmp	r2, #56	@ 0x38
 8001a48:	dd00      	ble.n	8001a4c <__aeabi_dmul+0x2bc>
 8001a4a:	e6f4      	b.n	8001836 <__aeabi_dmul+0xa6>
 8001a4c:	2a1f      	cmp	r2, #31
 8001a4e:	dc00      	bgt.n	8001a52 <__aeabi_dmul+0x2c2>
 8001a50:	e12a      	b.n	8001ca8 <__aeabi_dmul+0x518>
 8001a52:	211f      	movs	r1, #31
 8001a54:	4249      	negs	r1, r1
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	0021      	movs	r1, r4
 8001a5a:	40d9      	lsrs	r1, r3
 8001a5c:	000b      	movs	r3, r1
 8001a5e:	2a20      	cmp	r2, #32
 8001a60:	d005      	beq.n	8001a6e <__aeabi_dmul+0x2de>
 8001a62:	4a16      	ldr	r2, [pc, #88]	@ (8001abc <__aeabi_dmul+0x32c>)
 8001a64:	9d01      	ldr	r5, [sp, #4]
 8001a66:	4694      	mov	ip, r2
 8001a68:	4465      	add	r5, ip
 8001a6a:	40ac      	lsls	r4, r5
 8001a6c:	4320      	orrs	r0, r4
 8001a6e:	1e42      	subs	r2, r0, #1
 8001a70:	4190      	sbcs	r0, r2
 8001a72:	4318      	orrs	r0, r3
 8001a74:	2307      	movs	r3, #7
 8001a76:	0019      	movs	r1, r3
 8001a78:	2400      	movs	r4, #0
 8001a7a:	4001      	ands	r1, r0
 8001a7c:	4203      	tst	r3, r0
 8001a7e:	d00c      	beq.n	8001a9a <__aeabi_dmul+0x30a>
 8001a80:	230f      	movs	r3, #15
 8001a82:	4003      	ands	r3, r0
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dmul+0x2fa>
 8001a88:	e140      	b.n	8001d0c <__aeabi_dmul+0x57c>
 8001a8a:	1d03      	adds	r3, r0, #4
 8001a8c:	4283      	cmp	r3, r0
 8001a8e:	41a4      	sbcs	r4, r4
 8001a90:	0018      	movs	r0, r3
 8001a92:	4264      	negs	r4, r4
 8001a94:	0761      	lsls	r1, r4, #29
 8001a96:	0264      	lsls	r4, r4, #9
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	08c2      	lsrs	r2, r0, #3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	e6cc      	b.n	800183c <__aeabi_dmul+0xac>
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	000007ff 	.word	0x000007ff
 8001aa8:	fffffc01 	.word	0xfffffc01
 8001aac:	000003ff 	.word	0x000003ff
 8001ab0:	feffffff 	.word	0xfeffffff
 8001ab4:	000007fe 	.word	0x000007fe
 8001ab8:	fffffc0d 	.word	0xfffffc0d
 8001abc:	0000043e 	.word	0x0000043e
 8001ac0:	4649      	mov	r1, r9
 8001ac2:	464a      	mov	r2, r9
 8001ac4:	0409      	lsls	r1, r1, #16
 8001ac6:	0c09      	lsrs	r1, r1, #16
 8001ac8:	000d      	movs	r5, r1
 8001aca:	0c16      	lsrs	r6, r2, #16
 8001acc:	0c02      	lsrs	r2, r0, #16
 8001ace:	0400      	lsls	r0, r0, #16
 8001ad0:	0c00      	lsrs	r0, r0, #16
 8001ad2:	4345      	muls	r5, r0
 8001ad4:	46ac      	mov	ip, r5
 8001ad6:	0005      	movs	r5, r0
 8001ad8:	4375      	muls	r5, r6
 8001ada:	46a8      	mov	r8, r5
 8001adc:	0015      	movs	r5, r2
 8001ade:	000f      	movs	r7, r1
 8001ae0:	4375      	muls	r5, r6
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	9502      	str	r5, [sp, #8]
 8001ae6:	002a      	movs	r2, r5
 8001ae8:	9d00      	ldr	r5, [sp, #0]
 8001aea:	436f      	muls	r7, r5
 8001aec:	4665      	mov	r5, ip
 8001aee:	0c2d      	lsrs	r5, r5, #16
 8001af0:	46a9      	mov	r9, r5
 8001af2:	4447      	add	r7, r8
 8001af4:	444f      	add	r7, r9
 8001af6:	45b8      	cmp	r8, r7
 8001af8:	d905      	bls.n	8001b06 <__aeabi_dmul+0x376>
 8001afa:	0015      	movs	r5, r2
 8001afc:	2280      	movs	r2, #128	@ 0x80
 8001afe:	0252      	lsls	r2, r2, #9
 8001b00:	4690      	mov	r8, r2
 8001b02:	4445      	add	r5, r8
 8001b04:	9502      	str	r5, [sp, #8]
 8001b06:	0c3d      	lsrs	r5, r7, #16
 8001b08:	9503      	str	r5, [sp, #12]
 8001b0a:	4665      	mov	r5, ip
 8001b0c:	042d      	lsls	r5, r5, #16
 8001b0e:	043f      	lsls	r7, r7, #16
 8001b10:	0c2d      	lsrs	r5, r5, #16
 8001b12:	46ac      	mov	ip, r5
 8001b14:	003d      	movs	r5, r7
 8001b16:	4465      	add	r5, ip
 8001b18:	9504      	str	r5, [sp, #16]
 8001b1a:	0c25      	lsrs	r5, r4, #16
 8001b1c:	0424      	lsls	r4, r4, #16
 8001b1e:	0c24      	lsrs	r4, r4, #16
 8001b20:	46ac      	mov	ip, r5
 8001b22:	0025      	movs	r5, r4
 8001b24:	4375      	muls	r5, r6
 8001b26:	46a8      	mov	r8, r5
 8001b28:	4665      	mov	r5, ip
 8001b2a:	000f      	movs	r7, r1
 8001b2c:	4369      	muls	r1, r5
 8001b2e:	4441      	add	r1, r8
 8001b30:	4689      	mov	r9, r1
 8001b32:	4367      	muls	r7, r4
 8001b34:	0c39      	lsrs	r1, r7, #16
 8001b36:	4449      	add	r1, r9
 8001b38:	436e      	muls	r6, r5
 8001b3a:	4588      	cmp	r8, r1
 8001b3c:	d903      	bls.n	8001b46 <__aeabi_dmul+0x3b6>
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	0252      	lsls	r2, r2, #9
 8001b42:	4690      	mov	r8, r2
 8001b44:	4446      	add	r6, r8
 8001b46:	0c0d      	lsrs	r5, r1, #16
 8001b48:	46a8      	mov	r8, r5
 8001b4a:	0035      	movs	r5, r6
 8001b4c:	4445      	add	r5, r8
 8001b4e:	9505      	str	r5, [sp, #20]
 8001b50:	9d03      	ldr	r5, [sp, #12]
 8001b52:	043f      	lsls	r7, r7, #16
 8001b54:	46a8      	mov	r8, r5
 8001b56:	0c3f      	lsrs	r7, r7, #16
 8001b58:	0409      	lsls	r1, r1, #16
 8001b5a:	19c9      	adds	r1, r1, r7
 8001b5c:	4488      	add	r8, r1
 8001b5e:	4645      	mov	r5, r8
 8001b60:	9503      	str	r5, [sp, #12]
 8001b62:	4655      	mov	r5, sl
 8001b64:	042e      	lsls	r6, r5, #16
 8001b66:	0c36      	lsrs	r6, r6, #16
 8001b68:	0c2f      	lsrs	r7, r5, #16
 8001b6a:	0035      	movs	r5, r6
 8001b6c:	4345      	muls	r5, r0
 8001b6e:	4378      	muls	r0, r7
 8001b70:	4681      	mov	r9, r0
 8001b72:	0038      	movs	r0, r7
 8001b74:	46a8      	mov	r8, r5
 8001b76:	0c2d      	lsrs	r5, r5, #16
 8001b78:	46aa      	mov	sl, r5
 8001b7a:	9a00      	ldr	r2, [sp, #0]
 8001b7c:	4350      	muls	r0, r2
 8001b7e:	4372      	muls	r2, r6
 8001b80:	444a      	add	r2, r9
 8001b82:	4452      	add	r2, sl
 8001b84:	4591      	cmp	r9, r2
 8001b86:	d903      	bls.n	8001b90 <__aeabi_dmul+0x400>
 8001b88:	2580      	movs	r5, #128	@ 0x80
 8001b8a:	026d      	lsls	r5, r5, #9
 8001b8c:	46a9      	mov	r9, r5
 8001b8e:	4448      	add	r0, r9
 8001b90:	0c15      	lsrs	r5, r2, #16
 8001b92:	46a9      	mov	r9, r5
 8001b94:	4645      	mov	r5, r8
 8001b96:	042d      	lsls	r5, r5, #16
 8001b98:	0c2d      	lsrs	r5, r5, #16
 8001b9a:	46a8      	mov	r8, r5
 8001b9c:	4665      	mov	r5, ip
 8001b9e:	437d      	muls	r5, r7
 8001ba0:	0412      	lsls	r2, r2, #16
 8001ba2:	4448      	add	r0, r9
 8001ba4:	4490      	add	r8, r2
 8001ba6:	46a9      	mov	r9, r5
 8001ba8:	0032      	movs	r2, r6
 8001baa:	4665      	mov	r5, ip
 8001bac:	4362      	muls	r2, r4
 8001bae:	436e      	muls	r6, r5
 8001bb0:	437c      	muls	r4, r7
 8001bb2:	0c17      	lsrs	r7, r2, #16
 8001bb4:	1936      	adds	r6, r6, r4
 8001bb6:	19bf      	adds	r7, r7, r6
 8001bb8:	42bc      	cmp	r4, r7
 8001bba:	d903      	bls.n	8001bc4 <__aeabi_dmul+0x434>
 8001bbc:	2480      	movs	r4, #128	@ 0x80
 8001bbe:	0264      	lsls	r4, r4, #9
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	44e1      	add	r9, ip
 8001bc4:	9c02      	ldr	r4, [sp, #8]
 8001bc6:	9e03      	ldr	r6, [sp, #12]
 8001bc8:	46a4      	mov	ip, r4
 8001bca:	9d05      	ldr	r5, [sp, #20]
 8001bcc:	4466      	add	r6, ip
 8001bce:	428e      	cmp	r6, r1
 8001bd0:	4189      	sbcs	r1, r1
 8001bd2:	46ac      	mov	ip, r5
 8001bd4:	0412      	lsls	r2, r2, #16
 8001bd6:	043c      	lsls	r4, r7, #16
 8001bd8:	0c12      	lsrs	r2, r2, #16
 8001bda:	18a2      	adds	r2, r4, r2
 8001bdc:	4462      	add	r2, ip
 8001bde:	4249      	negs	r1, r1
 8001be0:	1854      	adds	r4, r2, r1
 8001be2:	4446      	add	r6, r8
 8001be4:	46a4      	mov	ip, r4
 8001be6:	4546      	cmp	r6, r8
 8001be8:	41a4      	sbcs	r4, r4
 8001bea:	4682      	mov	sl, r0
 8001bec:	4264      	negs	r4, r4
 8001bee:	46a0      	mov	r8, r4
 8001bf0:	42aa      	cmp	r2, r5
 8001bf2:	4192      	sbcs	r2, r2
 8001bf4:	458c      	cmp	ip, r1
 8001bf6:	4189      	sbcs	r1, r1
 8001bf8:	44e2      	add	sl, ip
 8001bfa:	44d0      	add	r8, sl
 8001bfc:	4249      	negs	r1, r1
 8001bfe:	4252      	negs	r2, r2
 8001c00:	430a      	orrs	r2, r1
 8001c02:	45a0      	cmp	r8, r4
 8001c04:	41a4      	sbcs	r4, r4
 8001c06:	4582      	cmp	sl, r0
 8001c08:	4189      	sbcs	r1, r1
 8001c0a:	4264      	negs	r4, r4
 8001c0c:	4249      	negs	r1, r1
 8001c0e:	430c      	orrs	r4, r1
 8001c10:	4641      	mov	r1, r8
 8001c12:	0c3f      	lsrs	r7, r7, #16
 8001c14:	19d2      	adds	r2, r2, r7
 8001c16:	1912      	adds	r2, r2, r4
 8001c18:	0dcc      	lsrs	r4, r1, #23
 8001c1a:	9904      	ldr	r1, [sp, #16]
 8001c1c:	0270      	lsls	r0, r6, #9
 8001c1e:	4308      	orrs	r0, r1
 8001c20:	1e41      	subs	r1, r0, #1
 8001c22:	4188      	sbcs	r0, r1
 8001c24:	4641      	mov	r1, r8
 8001c26:	444a      	add	r2, r9
 8001c28:	0df6      	lsrs	r6, r6, #23
 8001c2a:	0252      	lsls	r2, r2, #9
 8001c2c:	4330      	orrs	r0, r6
 8001c2e:	0249      	lsls	r1, r1, #9
 8001c30:	4314      	orrs	r4, r2
 8001c32:	4308      	orrs	r0, r1
 8001c34:	01d2      	lsls	r2, r2, #7
 8001c36:	d535      	bpl.n	8001ca4 <__aeabi_dmul+0x514>
 8001c38:	2201      	movs	r2, #1
 8001c3a:	0843      	lsrs	r3, r0, #1
 8001c3c:	4002      	ands	r2, r0
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	07e0      	lsls	r0, r4, #31
 8001c42:	4318      	orrs	r0, r3
 8001c44:	0864      	lsrs	r4, r4, #1
 8001c46:	e634      	b.n	80018b2 <__aeabi_dmul+0x122>
 8001c48:	9b00      	ldr	r3, [sp, #0]
 8001c4a:	46a2      	mov	sl, r4
 8001c4c:	469b      	mov	fp, r3
 8001c4e:	4681      	mov	r9, r0
 8001c50:	2480      	movs	r4, #128	@ 0x80
 8001c52:	4653      	mov	r3, sl
 8001c54:	0324      	lsls	r4, r4, #12
 8001c56:	431c      	orrs	r4, r3
 8001c58:	0324      	lsls	r4, r4, #12
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <__aeabi_dmul+0x588>)
 8001c5e:	0b24      	lsrs	r4, r4, #12
 8001c60:	e5ec      	b.n	800183c <__aeabi_dmul+0xac>
 8001c62:	f000 fcf1 	bl	8002648 <__clzsi2>
 8001c66:	2315      	movs	r3, #21
 8001c68:	469c      	mov	ip, r3
 8001c6a:	4484      	add	ip, r0
 8001c6c:	0002      	movs	r2, r0
 8001c6e:	4663      	mov	r3, ip
 8001c70:	3220      	adds	r2, #32
 8001c72:	2b1c      	cmp	r3, #28
 8001c74:	dc00      	bgt.n	8001c78 <__aeabi_dmul+0x4e8>
 8001c76:	e684      	b.n	8001982 <__aeabi_dmul+0x1f2>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	4699      	mov	r9, r3
 8001c7c:	0023      	movs	r3, r4
 8001c7e:	3808      	subs	r0, #8
 8001c80:	4083      	lsls	r3, r0
 8001c82:	469a      	mov	sl, r3
 8001c84:	e68e      	b.n	80019a4 <__aeabi_dmul+0x214>
 8001c86:	f000 fcdf 	bl	8002648 <__clzsi2>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	3215      	adds	r2, #21
 8001c90:	3320      	adds	r3, #32
 8001c92:	2a1c      	cmp	r2, #28
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dmul+0x508>
 8001c96:	e64e      	b.n	8001936 <__aeabi_dmul+0x1a6>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	0034      	movs	r4, r6
 8001c9c:	3a08      	subs	r2, #8
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	4094      	lsls	r4, r2
 8001ca2:	e652      	b.n	800194a <__aeabi_dmul+0x1ba>
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	e604      	b.n	80018b2 <__aeabi_dmul+0x122>
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <__aeabi_dmul+0x58c>)
 8001caa:	0021      	movs	r1, r4
 8001cac:	469c      	mov	ip, r3
 8001cae:	0003      	movs	r3, r0
 8001cb0:	9d01      	ldr	r5, [sp, #4]
 8001cb2:	40d3      	lsrs	r3, r2
 8001cb4:	4465      	add	r5, ip
 8001cb6:	40a9      	lsls	r1, r5
 8001cb8:	4319      	orrs	r1, r3
 8001cba:	0003      	movs	r3, r0
 8001cbc:	40ab      	lsls	r3, r5
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	4183      	sbcs	r3, r0
 8001cc2:	4319      	orrs	r1, r3
 8001cc4:	0008      	movs	r0, r1
 8001cc6:	40d4      	lsrs	r4, r2
 8001cc8:	074b      	lsls	r3, r1, #29
 8001cca:	d009      	beq.n	8001ce0 <__aeabi_dmul+0x550>
 8001ccc:	230f      	movs	r3, #15
 8001cce:	400b      	ands	r3, r1
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d005      	beq.n	8001ce0 <__aeabi_dmul+0x550>
 8001cd4:	1d0b      	adds	r3, r1, #4
 8001cd6:	428b      	cmp	r3, r1
 8001cd8:	4180      	sbcs	r0, r0
 8001cda:	4240      	negs	r0, r0
 8001cdc:	1824      	adds	r4, r4, r0
 8001cde:	0018      	movs	r0, r3
 8001ce0:	0223      	lsls	r3, r4, #8
 8001ce2:	d400      	bmi.n	8001ce6 <__aeabi_dmul+0x556>
 8001ce4:	e6d6      	b.n	8001a94 <__aeabi_dmul+0x304>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	2400      	movs	r4, #0
 8001cea:	2200      	movs	r2, #0
 8001cec:	e5a6      	b.n	800183c <__aeabi_dmul+0xac>
 8001cee:	290f      	cmp	r1, #15
 8001cf0:	d1aa      	bne.n	8001c48 <__aeabi_dmul+0x4b8>
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	4652      	mov	r2, sl
 8001cf6:	031b      	lsls	r3, r3, #12
 8001cf8:	421a      	tst	r2, r3
 8001cfa:	d0a9      	beq.n	8001c50 <__aeabi_dmul+0x4c0>
 8001cfc:	421c      	tst	r4, r3
 8001cfe:	d1a7      	bne.n	8001c50 <__aeabi_dmul+0x4c0>
 8001d00:	431c      	orrs	r4, r3
 8001d02:	9b00      	ldr	r3, [sp, #0]
 8001d04:	0002      	movs	r2, r0
 8001d06:	469b      	mov	fp, r3
 8001d08:	4b03      	ldr	r3, [pc, #12]	@ (8001d18 <__aeabi_dmul+0x588>)
 8001d0a:	e597      	b.n	800183c <__aeabi_dmul+0xac>
 8001d0c:	2400      	movs	r4, #0
 8001d0e:	e6c1      	b.n	8001a94 <__aeabi_dmul+0x304>
 8001d10:	2400      	movs	r4, #0
 8001d12:	4b01      	ldr	r3, [pc, #4]	@ (8001d18 <__aeabi_dmul+0x588>)
 8001d14:	0022      	movs	r2, r4
 8001d16:	e591      	b.n	800183c <__aeabi_dmul+0xac>
 8001d18:	000007ff 	.word	0x000007ff
 8001d1c:	0000041e 	.word	0x0000041e

08001d20 <__aeabi_dsub>:
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	464e      	mov	r6, r9
 8001d24:	4645      	mov	r5, r8
 8001d26:	46de      	mov	lr, fp
 8001d28:	4657      	mov	r7, sl
 8001d2a:	b5e0      	push	{r5, r6, r7, lr}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	9000      	str	r0, [sp, #0]
 8001d30:	9101      	str	r1, [sp, #4]
 8001d32:	030c      	lsls	r4, r1, #12
 8001d34:	004f      	lsls	r7, r1, #1
 8001d36:	0fce      	lsrs	r6, r1, #31
 8001d38:	0a61      	lsrs	r1, r4, #9
 8001d3a:	9c00      	ldr	r4, [sp, #0]
 8001d3c:	46b0      	mov	r8, r6
 8001d3e:	0f64      	lsrs	r4, r4, #29
 8001d40:	430c      	orrs	r4, r1
 8001d42:	9900      	ldr	r1, [sp, #0]
 8001d44:	0d7f      	lsrs	r7, r7, #21
 8001d46:	00c8      	lsls	r0, r1, #3
 8001d48:	0011      	movs	r1, r2
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	031b      	lsls	r3, r3, #12
 8001d4e:	469c      	mov	ip, r3
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	9201      	str	r2, [sp, #4]
 8001d54:	0051      	lsls	r1, r2, #1
 8001d56:	0d4b      	lsrs	r3, r1, #21
 8001d58:	4699      	mov	r9, r3
 8001d5a:	9b01      	ldr	r3, [sp, #4]
 8001d5c:	9d00      	ldr	r5, [sp, #0]
 8001d5e:	0fd9      	lsrs	r1, r3, #31
 8001d60:	4663      	mov	r3, ip
 8001d62:	0f6a      	lsrs	r2, r5, #29
 8001d64:	0a5b      	lsrs	r3, r3, #9
 8001d66:	4313      	orrs	r3, r2
 8001d68:	00ea      	lsls	r2, r5, #3
 8001d6a:	4694      	mov	ip, r2
 8001d6c:	4693      	mov	fp, r2
 8001d6e:	4ac1      	ldr	r2, [pc, #772]	@ (8002074 <__aeabi_dsub+0x354>)
 8001d70:	9003      	str	r0, [sp, #12]
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	4591      	cmp	r9, r2
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x5a>
 8001d78:	e0cd      	b.n	8001f16 <__aeabi_dsub+0x1f6>
 8001d7a:	2501      	movs	r5, #1
 8001d7c:	4069      	eors	r1, r5
 8001d7e:	464d      	mov	r5, r9
 8001d80:	1b7d      	subs	r5, r7, r5
 8001d82:	46aa      	mov	sl, r5
 8001d84:	428e      	cmp	r6, r1
 8001d86:	d100      	bne.n	8001d8a <__aeabi_dsub+0x6a>
 8001d88:	e080      	b.n	8001e8c <__aeabi_dsub+0x16c>
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	dc00      	bgt.n	8001d90 <__aeabi_dsub+0x70>
 8001d8e:	e335      	b.n	80023fc <__aeabi_dsub+0x6dc>
 8001d90:	4649      	mov	r1, r9
 8001d92:	2900      	cmp	r1, #0
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x78>
 8001d96:	e0df      	b.n	8001f58 <__aeabi_dsub+0x238>
 8001d98:	4297      	cmp	r7, r2
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x7e>
 8001d9c:	e194      	b.n	80020c8 <__aeabi_dsub+0x3a8>
 8001d9e:	4652      	mov	r2, sl
 8001da0:	2501      	movs	r5, #1
 8001da2:	2a38      	cmp	r2, #56	@ 0x38
 8001da4:	dc19      	bgt.n	8001dda <__aeabi_dsub+0xba>
 8001da6:	2280      	movs	r2, #128	@ 0x80
 8001da8:	9b02      	ldr	r3, [sp, #8]
 8001daa:	0412      	lsls	r2, r2, #16
 8001dac:	4313      	orrs	r3, r2
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	4652      	mov	r2, sl
 8001db2:	2a1f      	cmp	r2, #31
 8001db4:	dd00      	ble.n	8001db8 <__aeabi_dsub+0x98>
 8001db6:	e1e3      	b.n	8002180 <__aeabi_dsub+0x460>
 8001db8:	4653      	mov	r3, sl
 8001dba:	2220      	movs	r2, #32
 8001dbc:	4661      	mov	r1, ip
 8001dbe:	9d02      	ldr	r5, [sp, #8]
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	4095      	lsls	r5, r2
 8001dc4:	40d9      	lsrs	r1, r3
 8001dc6:	430d      	orrs	r5, r1
 8001dc8:	4661      	mov	r1, ip
 8001dca:	4091      	lsls	r1, r2
 8001dcc:	000a      	movs	r2, r1
 8001dce:	1e51      	subs	r1, r2, #1
 8001dd0:	418a      	sbcs	r2, r1
 8001dd2:	4315      	orrs	r5, r2
 8001dd4:	9a02      	ldr	r2, [sp, #8]
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	1aa4      	subs	r4, r4, r2
 8001dda:	1b45      	subs	r5, r0, r5
 8001ddc:	42a8      	cmp	r0, r5
 8001dde:	4180      	sbcs	r0, r0
 8001de0:	4240      	negs	r0, r0
 8001de2:	1a24      	subs	r4, r4, r0
 8001de4:	0223      	lsls	r3, r4, #8
 8001de6:	d400      	bmi.n	8001dea <__aeabi_dsub+0xca>
 8001de8:	e13d      	b.n	8002066 <__aeabi_dsub+0x346>
 8001dea:	0264      	lsls	r4, r4, #9
 8001dec:	0a64      	lsrs	r4, r4, #9
 8001dee:	2c00      	cmp	r4, #0
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0xd4>
 8001df2:	e147      	b.n	8002084 <__aeabi_dsub+0x364>
 8001df4:	0020      	movs	r0, r4
 8001df6:	f000 fc27 	bl	8002648 <__clzsi2>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	3b08      	subs	r3, #8
 8001dfe:	2120      	movs	r1, #32
 8001e00:	0028      	movs	r0, r5
 8001e02:	1aca      	subs	r2, r1, r3
 8001e04:	40d0      	lsrs	r0, r2
 8001e06:	409c      	lsls	r4, r3
 8001e08:	0002      	movs	r2, r0
 8001e0a:	409d      	lsls	r5, r3
 8001e0c:	4322      	orrs	r2, r4
 8001e0e:	429f      	cmp	r7, r3
 8001e10:	dd00      	ble.n	8001e14 <__aeabi_dsub+0xf4>
 8001e12:	e177      	b.n	8002104 <__aeabi_dsub+0x3e4>
 8001e14:	1bd8      	subs	r0, r3, r7
 8001e16:	3001      	adds	r0, #1
 8001e18:	1a09      	subs	r1, r1, r0
 8001e1a:	002c      	movs	r4, r5
 8001e1c:	408d      	lsls	r5, r1
 8001e1e:	40c4      	lsrs	r4, r0
 8001e20:	1e6b      	subs	r3, r5, #1
 8001e22:	419d      	sbcs	r5, r3
 8001e24:	0013      	movs	r3, r2
 8001e26:	40c2      	lsrs	r2, r0
 8001e28:	408b      	lsls	r3, r1
 8001e2a:	4325      	orrs	r5, r4
 8001e2c:	2700      	movs	r7, #0
 8001e2e:	0014      	movs	r4, r2
 8001e30:	431d      	orrs	r5, r3
 8001e32:	076b      	lsls	r3, r5, #29
 8001e34:	d009      	beq.n	8001e4a <__aeabi_dsub+0x12a>
 8001e36:	230f      	movs	r3, #15
 8001e38:	402b      	ands	r3, r5
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d005      	beq.n	8001e4a <__aeabi_dsub+0x12a>
 8001e3e:	1d2b      	adds	r3, r5, #4
 8001e40:	42ab      	cmp	r3, r5
 8001e42:	41ad      	sbcs	r5, r5
 8001e44:	426d      	negs	r5, r5
 8001e46:	1964      	adds	r4, r4, r5
 8001e48:	001d      	movs	r5, r3
 8001e4a:	0223      	lsls	r3, r4, #8
 8001e4c:	d400      	bmi.n	8001e50 <__aeabi_dsub+0x130>
 8001e4e:	e140      	b.n	80020d2 <__aeabi_dsub+0x3b2>
 8001e50:	4a88      	ldr	r2, [pc, #544]	@ (8002074 <__aeabi_dsub+0x354>)
 8001e52:	3701      	adds	r7, #1
 8001e54:	4297      	cmp	r7, r2
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x13a>
 8001e58:	e101      	b.n	800205e <__aeabi_dsub+0x33e>
 8001e5a:	2601      	movs	r6, #1
 8001e5c:	4643      	mov	r3, r8
 8001e5e:	4986      	ldr	r1, [pc, #536]	@ (8002078 <__aeabi_dsub+0x358>)
 8001e60:	08ed      	lsrs	r5, r5, #3
 8001e62:	4021      	ands	r1, r4
 8001e64:	074a      	lsls	r2, r1, #29
 8001e66:	432a      	orrs	r2, r5
 8001e68:	057c      	lsls	r4, r7, #21
 8001e6a:	024d      	lsls	r5, r1, #9
 8001e6c:	0b2d      	lsrs	r5, r5, #12
 8001e6e:	0d64      	lsrs	r4, r4, #21
 8001e70:	401e      	ands	r6, r3
 8001e72:	0524      	lsls	r4, r4, #20
 8001e74:	432c      	orrs	r4, r5
 8001e76:	07f6      	lsls	r6, r6, #31
 8001e78:	4334      	orrs	r4, r6
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	0021      	movs	r1, r4
 8001e7e:	b005      	add	sp, #20
 8001e80:	bcf0      	pop	{r4, r5, r6, r7}
 8001e82:	46bb      	mov	fp, r7
 8001e84:	46b2      	mov	sl, r6
 8001e86:	46a9      	mov	r9, r5
 8001e88:	46a0      	mov	r8, r4
 8001e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	dc00      	bgt.n	8001e92 <__aeabi_dsub+0x172>
 8001e90:	e2d0      	b.n	8002434 <__aeabi_dsub+0x714>
 8001e92:	4649      	mov	r1, r9
 8001e94:	2900      	cmp	r1, #0
 8001e96:	d000      	beq.n	8001e9a <__aeabi_dsub+0x17a>
 8001e98:	e0d4      	b.n	8002044 <__aeabi_dsub+0x324>
 8001e9a:	4661      	mov	r1, ip
 8001e9c:	9b02      	ldr	r3, [sp, #8]
 8001e9e:	4319      	orrs	r1, r3
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x184>
 8001ea2:	e12b      	b.n	80020fc <__aeabi_dsub+0x3dc>
 8001ea4:	1e69      	subs	r1, r5, #1
 8001ea6:	2d01      	cmp	r5, #1
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x18c>
 8001eaa:	e1d9      	b.n	8002260 <__aeabi_dsub+0x540>
 8001eac:	4295      	cmp	r5, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x192>
 8001eb0:	e10a      	b.n	80020c8 <__aeabi_dsub+0x3a8>
 8001eb2:	2501      	movs	r5, #1
 8001eb4:	2938      	cmp	r1, #56	@ 0x38
 8001eb6:	dc17      	bgt.n	8001ee8 <__aeabi_dsub+0x1c8>
 8001eb8:	468a      	mov	sl, r1
 8001eba:	4653      	mov	r3, sl
 8001ebc:	2b1f      	cmp	r3, #31
 8001ebe:	dd00      	ble.n	8001ec2 <__aeabi_dsub+0x1a2>
 8001ec0:	e1e7      	b.n	8002292 <__aeabi_dsub+0x572>
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	1ad2      	subs	r2, r2, r3
 8001ec6:	9b02      	ldr	r3, [sp, #8]
 8001ec8:	4661      	mov	r1, ip
 8001eca:	4093      	lsls	r3, r2
 8001ecc:	001d      	movs	r5, r3
 8001ece:	4653      	mov	r3, sl
 8001ed0:	40d9      	lsrs	r1, r3
 8001ed2:	4663      	mov	r3, ip
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	430d      	orrs	r5, r1
 8001eda:	1e51      	subs	r1, r2, #1
 8001edc:	418a      	sbcs	r2, r1
 8001ede:	4653      	mov	r3, sl
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	9a02      	ldr	r2, [sp, #8]
 8001ee4:	40da      	lsrs	r2, r3
 8001ee6:	18a4      	adds	r4, r4, r2
 8001ee8:	182d      	adds	r5, r5, r0
 8001eea:	4285      	cmp	r5, r0
 8001eec:	4180      	sbcs	r0, r0
 8001eee:	4240      	negs	r0, r0
 8001ef0:	1824      	adds	r4, r4, r0
 8001ef2:	0223      	lsls	r3, r4, #8
 8001ef4:	d400      	bmi.n	8001ef8 <__aeabi_dsub+0x1d8>
 8001ef6:	e0b6      	b.n	8002066 <__aeabi_dsub+0x346>
 8001ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8002074 <__aeabi_dsub+0x354>)
 8001efa:	3701      	adds	r7, #1
 8001efc:	429f      	cmp	r7, r3
 8001efe:	d100      	bne.n	8001f02 <__aeabi_dsub+0x1e2>
 8001f00:	e0ad      	b.n	800205e <__aeabi_dsub+0x33e>
 8001f02:	2101      	movs	r1, #1
 8001f04:	4b5c      	ldr	r3, [pc, #368]	@ (8002078 <__aeabi_dsub+0x358>)
 8001f06:	086a      	lsrs	r2, r5, #1
 8001f08:	401c      	ands	r4, r3
 8001f0a:	4029      	ands	r1, r5
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	07e5      	lsls	r5, r4, #31
 8001f10:	4315      	orrs	r5, r2
 8001f12:	0864      	lsrs	r4, r4, #1
 8001f14:	e78d      	b.n	8001e32 <__aeabi_dsub+0x112>
 8001f16:	4a59      	ldr	r2, [pc, #356]	@ (800207c <__aeabi_dsub+0x35c>)
 8001f18:	9b02      	ldr	r3, [sp, #8]
 8001f1a:	4692      	mov	sl, r2
 8001f1c:	4662      	mov	r2, ip
 8001f1e:	44ba      	add	sl, r7
 8001f20:	431a      	orrs	r2, r3
 8001f22:	d02c      	beq.n	8001f7e <__aeabi_dsub+0x25e>
 8001f24:	428e      	cmp	r6, r1
 8001f26:	d02e      	beq.n	8001f86 <__aeabi_dsub+0x266>
 8001f28:	4652      	mov	r2, sl
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d060      	beq.n	8001ff0 <__aeabi_dsub+0x2d0>
 8001f2e:	2f00      	cmp	r7, #0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x214>
 8001f32:	e0db      	b.n	80020ec <__aeabi_dsub+0x3cc>
 8001f34:	4663      	mov	r3, ip
 8001f36:	000e      	movs	r6, r1
 8001f38:	9c02      	ldr	r4, [sp, #8]
 8001f3a:	08d8      	lsrs	r0, r3, #3
 8001f3c:	0762      	lsls	r2, r4, #29
 8001f3e:	4302      	orrs	r2, r0
 8001f40:	08e4      	lsrs	r4, r4, #3
 8001f42:	0013      	movs	r3, r2
 8001f44:	4323      	orrs	r3, r4
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dsub+0x22a>
 8001f48:	e254      	b.n	80023f4 <__aeabi_dsub+0x6d4>
 8001f4a:	2580      	movs	r5, #128	@ 0x80
 8001f4c:	032d      	lsls	r5, r5, #12
 8001f4e:	4325      	orrs	r5, r4
 8001f50:	032d      	lsls	r5, r5, #12
 8001f52:	4c48      	ldr	r4, [pc, #288]	@ (8002074 <__aeabi_dsub+0x354>)
 8001f54:	0b2d      	lsrs	r5, r5, #12
 8001f56:	e78c      	b.n	8001e72 <__aeabi_dsub+0x152>
 8001f58:	4661      	mov	r1, ip
 8001f5a:	9b02      	ldr	r3, [sp, #8]
 8001f5c:	4319      	orrs	r1, r3
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x242>
 8001f60:	e0cc      	b.n	80020fc <__aeabi_dsub+0x3dc>
 8001f62:	0029      	movs	r1, r5
 8001f64:	3901      	subs	r1, #1
 8001f66:	2d01      	cmp	r5, #1
 8001f68:	d100      	bne.n	8001f6c <__aeabi_dsub+0x24c>
 8001f6a:	e188      	b.n	800227e <__aeabi_dsub+0x55e>
 8001f6c:	4295      	cmp	r5, r2
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x252>
 8001f70:	e0aa      	b.n	80020c8 <__aeabi_dsub+0x3a8>
 8001f72:	2501      	movs	r5, #1
 8001f74:	2938      	cmp	r1, #56	@ 0x38
 8001f76:	dd00      	ble.n	8001f7a <__aeabi_dsub+0x25a>
 8001f78:	e72f      	b.n	8001dda <__aeabi_dsub+0xba>
 8001f7a:	468a      	mov	sl, r1
 8001f7c:	e718      	b.n	8001db0 <__aeabi_dsub+0x90>
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4051      	eors	r1, r2
 8001f82:	428e      	cmp	r6, r1
 8001f84:	d1d0      	bne.n	8001f28 <__aeabi_dsub+0x208>
 8001f86:	4653      	mov	r3, sl
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x26e>
 8001f8c:	e0be      	b.n	800210c <__aeabi_dsub+0x3ec>
 8001f8e:	2f00      	cmp	r7, #0
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x274>
 8001f92:	e138      	b.n	8002206 <__aeabi_dsub+0x4e6>
 8001f94:	46ca      	mov	sl, r9
 8001f96:	0022      	movs	r2, r4
 8001f98:	4302      	orrs	r2, r0
 8001f9a:	d100      	bne.n	8001f9e <__aeabi_dsub+0x27e>
 8001f9c:	e1e2      	b.n	8002364 <__aeabi_dsub+0x644>
 8001f9e:	4653      	mov	r3, sl
 8001fa0:	1e59      	subs	r1, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dsub+0x288>
 8001fa6:	e20d      	b.n	80023c4 <__aeabi_dsub+0x6a4>
 8001fa8:	4a32      	ldr	r2, [pc, #200]	@ (8002074 <__aeabi_dsub+0x354>)
 8001faa:	4592      	cmp	sl, r2
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x290>
 8001fae:	e1d2      	b.n	8002356 <__aeabi_dsub+0x636>
 8001fb0:	2701      	movs	r7, #1
 8001fb2:	2938      	cmp	r1, #56	@ 0x38
 8001fb4:	dc13      	bgt.n	8001fde <__aeabi_dsub+0x2be>
 8001fb6:	291f      	cmp	r1, #31
 8001fb8:	dd00      	ble.n	8001fbc <__aeabi_dsub+0x29c>
 8001fba:	e1ee      	b.n	800239a <__aeabi_dsub+0x67a>
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	9b02      	ldr	r3, [sp, #8]
 8001fc0:	1a52      	subs	r2, r2, r1
 8001fc2:	0025      	movs	r5, r4
 8001fc4:	0007      	movs	r7, r0
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	40cc      	lsrs	r4, r1
 8001fca:	4090      	lsls	r0, r2
 8001fcc:	4095      	lsls	r5, r2
 8001fce:	40cf      	lsrs	r7, r1
 8001fd0:	44a2      	add	sl, r4
 8001fd2:	1e42      	subs	r2, r0, #1
 8001fd4:	4190      	sbcs	r0, r2
 8001fd6:	4653      	mov	r3, sl
 8001fd8:	432f      	orrs	r7, r5
 8001fda:	4307      	orrs	r7, r0
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	003d      	movs	r5, r7
 8001fe0:	4465      	add	r5, ip
 8001fe2:	4565      	cmp	r5, ip
 8001fe4:	4192      	sbcs	r2, r2
 8001fe6:	9b02      	ldr	r3, [sp, #8]
 8001fe8:	4252      	negs	r2, r2
 8001fea:	464f      	mov	r7, r9
 8001fec:	18d4      	adds	r4, r2, r3
 8001fee:	e780      	b.n	8001ef2 <__aeabi_dsub+0x1d2>
 8001ff0:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <__aeabi_dsub+0x360>)
 8001ff2:	1c7d      	adds	r5, r7, #1
 8001ff4:	4215      	tst	r5, r2
 8001ff6:	d000      	beq.n	8001ffa <__aeabi_dsub+0x2da>
 8001ff8:	e0aa      	b.n	8002150 <__aeabi_dsub+0x430>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0025      	movs	r5, r4
 8001ffe:	9b02      	ldr	r3, [sp, #8]
 8002000:	4305      	orrs	r5, r0
 8002002:	431a      	orrs	r2, r3
 8002004:	2f00      	cmp	r7, #0
 8002006:	d000      	beq.n	800200a <__aeabi_dsub+0x2ea>
 8002008:	e0f5      	b.n	80021f6 <__aeabi_dsub+0x4d6>
 800200a:	2d00      	cmp	r5, #0
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x2f0>
 800200e:	e16b      	b.n	80022e8 <__aeabi_dsub+0x5c8>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x2f6>
 8002014:	e152      	b.n	80022bc <__aeabi_dsub+0x59c>
 8002016:	4663      	mov	r3, ip
 8002018:	1ac5      	subs	r5, r0, r3
 800201a:	9b02      	ldr	r3, [sp, #8]
 800201c:	1ae2      	subs	r2, r4, r3
 800201e:	42a8      	cmp	r0, r5
 8002020:	419b      	sbcs	r3, r3
 8002022:	425b      	negs	r3, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	021a      	lsls	r2, r3, #8
 8002028:	d400      	bmi.n	800202c <__aeabi_dsub+0x30c>
 800202a:	e1d5      	b.n	80023d8 <__aeabi_dsub+0x6b8>
 800202c:	4663      	mov	r3, ip
 800202e:	1a1d      	subs	r5, r3, r0
 8002030:	45ac      	cmp	ip, r5
 8002032:	4192      	sbcs	r2, r2
 8002034:	2601      	movs	r6, #1
 8002036:	9b02      	ldr	r3, [sp, #8]
 8002038:	4252      	negs	r2, r2
 800203a:	1b1c      	subs	r4, r3, r4
 800203c:	4688      	mov	r8, r1
 800203e:	1aa4      	subs	r4, r4, r2
 8002040:	400e      	ands	r6, r1
 8002042:	e6f6      	b.n	8001e32 <__aeabi_dsub+0x112>
 8002044:	4297      	cmp	r7, r2
 8002046:	d03f      	beq.n	80020c8 <__aeabi_dsub+0x3a8>
 8002048:	4652      	mov	r2, sl
 800204a:	2501      	movs	r5, #1
 800204c:	2a38      	cmp	r2, #56	@ 0x38
 800204e:	dd00      	ble.n	8002052 <__aeabi_dsub+0x332>
 8002050:	e74a      	b.n	8001ee8 <__aeabi_dsub+0x1c8>
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	9b02      	ldr	r3, [sp, #8]
 8002056:	0412      	lsls	r2, r2, #16
 8002058:	4313      	orrs	r3, r2
 800205a:	9302      	str	r3, [sp, #8]
 800205c:	e72d      	b.n	8001eba <__aeabi_dsub+0x19a>
 800205e:	003c      	movs	r4, r7
 8002060:	2500      	movs	r5, #0
 8002062:	2200      	movs	r2, #0
 8002064:	e705      	b.n	8001e72 <__aeabi_dsub+0x152>
 8002066:	2307      	movs	r3, #7
 8002068:	402b      	ands	r3, r5
 800206a:	2b00      	cmp	r3, #0
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x350>
 800206e:	e6e2      	b.n	8001e36 <__aeabi_dsub+0x116>
 8002070:	e06b      	b.n	800214a <__aeabi_dsub+0x42a>
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	000007ff 	.word	0x000007ff
 8002078:	ff7fffff 	.word	0xff7fffff
 800207c:	fffff801 	.word	0xfffff801
 8002080:	000007fe 	.word	0x000007fe
 8002084:	0028      	movs	r0, r5
 8002086:	f000 fadf 	bl	8002648 <__clzsi2>
 800208a:	0003      	movs	r3, r0
 800208c:	3318      	adds	r3, #24
 800208e:	2b1f      	cmp	r3, #31
 8002090:	dc00      	bgt.n	8002094 <__aeabi_dsub+0x374>
 8002092:	e6b4      	b.n	8001dfe <__aeabi_dsub+0xde>
 8002094:	002a      	movs	r2, r5
 8002096:	3808      	subs	r0, #8
 8002098:	4082      	lsls	r2, r0
 800209a:	429f      	cmp	r7, r3
 800209c:	dd00      	ble.n	80020a0 <__aeabi_dsub+0x380>
 800209e:	e0b9      	b.n	8002214 <__aeabi_dsub+0x4f4>
 80020a0:	1bdb      	subs	r3, r3, r7
 80020a2:	1c58      	adds	r0, r3, #1
 80020a4:	281f      	cmp	r0, #31
 80020a6:	dc00      	bgt.n	80020aa <__aeabi_dsub+0x38a>
 80020a8:	e1a0      	b.n	80023ec <__aeabi_dsub+0x6cc>
 80020aa:	0015      	movs	r5, r2
 80020ac:	3b1f      	subs	r3, #31
 80020ae:	40dd      	lsrs	r5, r3
 80020b0:	2820      	cmp	r0, #32
 80020b2:	d005      	beq.n	80020c0 <__aeabi_dsub+0x3a0>
 80020b4:	2340      	movs	r3, #64	@ 0x40
 80020b6:	1a1b      	subs	r3, r3, r0
 80020b8:	409a      	lsls	r2, r3
 80020ba:	1e53      	subs	r3, r2, #1
 80020bc:	419a      	sbcs	r2, r3
 80020be:	4315      	orrs	r5, r2
 80020c0:	2307      	movs	r3, #7
 80020c2:	2700      	movs	r7, #0
 80020c4:	402b      	ands	r3, r5
 80020c6:	e7d0      	b.n	800206a <__aeabi_dsub+0x34a>
 80020c8:	08c0      	lsrs	r0, r0, #3
 80020ca:	0762      	lsls	r2, r4, #29
 80020cc:	4302      	orrs	r2, r0
 80020ce:	08e4      	lsrs	r4, r4, #3
 80020d0:	e737      	b.n	8001f42 <__aeabi_dsub+0x222>
 80020d2:	08ea      	lsrs	r2, r5, #3
 80020d4:	0763      	lsls	r3, r4, #29
 80020d6:	431a      	orrs	r2, r3
 80020d8:	4bd3      	ldr	r3, [pc, #844]	@ (8002428 <__aeabi_dsub+0x708>)
 80020da:	08e4      	lsrs	r4, r4, #3
 80020dc:	429f      	cmp	r7, r3
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x3c2>
 80020e0:	e72f      	b.n	8001f42 <__aeabi_dsub+0x222>
 80020e2:	0324      	lsls	r4, r4, #12
 80020e4:	0b25      	lsrs	r5, r4, #12
 80020e6:	057c      	lsls	r4, r7, #21
 80020e8:	0d64      	lsrs	r4, r4, #21
 80020ea:	e6c2      	b.n	8001e72 <__aeabi_dsub+0x152>
 80020ec:	46ca      	mov	sl, r9
 80020ee:	0022      	movs	r2, r4
 80020f0:	4302      	orrs	r2, r0
 80020f2:	d158      	bne.n	80021a6 <__aeabi_dsub+0x486>
 80020f4:	4663      	mov	r3, ip
 80020f6:	000e      	movs	r6, r1
 80020f8:	9c02      	ldr	r4, [sp, #8]
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	9b03      	ldr	r3, [sp, #12]
 80020fe:	4657      	mov	r7, sl
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	e7e7      	b.n	80020d4 <__aeabi_dsub+0x3b4>
 8002104:	4cc9      	ldr	r4, [pc, #804]	@ (800242c <__aeabi_dsub+0x70c>)
 8002106:	1aff      	subs	r7, r7, r3
 8002108:	4014      	ands	r4, r2
 800210a:	e692      	b.n	8001e32 <__aeabi_dsub+0x112>
 800210c:	4dc8      	ldr	r5, [pc, #800]	@ (8002430 <__aeabi_dsub+0x710>)
 800210e:	1c7a      	adds	r2, r7, #1
 8002110:	422a      	tst	r2, r5
 8002112:	d000      	beq.n	8002116 <__aeabi_dsub+0x3f6>
 8002114:	e084      	b.n	8002220 <__aeabi_dsub+0x500>
 8002116:	0022      	movs	r2, r4
 8002118:	4302      	orrs	r2, r0
 800211a:	2f00      	cmp	r7, #0
 800211c:	d000      	beq.n	8002120 <__aeabi_dsub+0x400>
 800211e:	e0ef      	b.n	8002300 <__aeabi_dsub+0x5e0>
 8002120:	2a00      	cmp	r2, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_dsub+0x406>
 8002124:	e0e5      	b.n	80022f2 <__aeabi_dsub+0x5d2>
 8002126:	4662      	mov	r2, ip
 8002128:	9902      	ldr	r1, [sp, #8]
 800212a:	430a      	orrs	r2, r1
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x410>
 800212e:	e0c5      	b.n	80022bc <__aeabi_dsub+0x59c>
 8002130:	4663      	mov	r3, ip
 8002132:	18c5      	adds	r5, r0, r3
 8002134:	468c      	mov	ip, r1
 8002136:	4285      	cmp	r5, r0
 8002138:	4180      	sbcs	r0, r0
 800213a:	4464      	add	r4, ip
 800213c:	4240      	negs	r0, r0
 800213e:	1824      	adds	r4, r4, r0
 8002140:	0223      	lsls	r3, r4, #8
 8002142:	d502      	bpl.n	800214a <__aeabi_dsub+0x42a>
 8002144:	4bb9      	ldr	r3, [pc, #740]	@ (800242c <__aeabi_dsub+0x70c>)
 8002146:	3701      	adds	r7, #1
 8002148:	401c      	ands	r4, r3
 800214a:	46ba      	mov	sl, r7
 800214c:	9503      	str	r5, [sp, #12]
 800214e:	e7d5      	b.n	80020fc <__aeabi_dsub+0x3dc>
 8002150:	4662      	mov	r2, ip
 8002152:	1a85      	subs	r5, r0, r2
 8002154:	42a8      	cmp	r0, r5
 8002156:	4192      	sbcs	r2, r2
 8002158:	4252      	negs	r2, r2
 800215a:	4691      	mov	r9, r2
 800215c:	9b02      	ldr	r3, [sp, #8]
 800215e:	1ae3      	subs	r3, r4, r3
 8002160:	001a      	movs	r2, r3
 8002162:	464b      	mov	r3, r9
 8002164:	1ad2      	subs	r2, r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	4691      	mov	r9, r2
 800216a:	021a      	lsls	r2, r3, #8
 800216c:	d46c      	bmi.n	8002248 <__aeabi_dsub+0x528>
 800216e:	464a      	mov	r2, r9
 8002170:	464c      	mov	r4, r9
 8002172:	432a      	orrs	r2, r5
 8002174:	d000      	beq.n	8002178 <__aeabi_dsub+0x458>
 8002176:	e63a      	b.n	8001dee <__aeabi_dsub+0xce>
 8002178:	2600      	movs	r6, #0
 800217a:	2400      	movs	r4, #0
 800217c:	2500      	movs	r5, #0
 800217e:	e678      	b.n	8001e72 <__aeabi_dsub+0x152>
 8002180:	9902      	ldr	r1, [sp, #8]
 8002182:	4653      	mov	r3, sl
 8002184:	000d      	movs	r5, r1
 8002186:	3a20      	subs	r2, #32
 8002188:	40d5      	lsrs	r5, r2
 800218a:	2b20      	cmp	r3, #32
 800218c:	d006      	beq.n	800219c <__aeabi_dsub+0x47c>
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	1ad2      	subs	r2, r2, r3
 8002192:	000b      	movs	r3, r1
 8002194:	4093      	lsls	r3, r2
 8002196:	4662      	mov	r2, ip
 8002198:	431a      	orrs	r2, r3
 800219a:	4693      	mov	fp, r2
 800219c:	465b      	mov	r3, fp
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	4193      	sbcs	r3, r2
 80021a2:	431d      	orrs	r5, r3
 80021a4:	e619      	b.n	8001dda <__aeabi_dsub+0xba>
 80021a6:	4653      	mov	r3, sl
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d100      	bne.n	80021b0 <__aeabi_dsub+0x490>
 80021ae:	e0c6      	b.n	800233e <__aeabi_dsub+0x61e>
 80021b0:	4e9d      	ldr	r6, [pc, #628]	@ (8002428 <__aeabi_dsub+0x708>)
 80021b2:	45b2      	cmp	sl, r6
 80021b4:	d100      	bne.n	80021b8 <__aeabi_dsub+0x498>
 80021b6:	e6bd      	b.n	8001f34 <__aeabi_dsub+0x214>
 80021b8:	4688      	mov	r8, r1
 80021ba:	000e      	movs	r6, r1
 80021bc:	2501      	movs	r5, #1
 80021be:	2a38      	cmp	r2, #56	@ 0x38
 80021c0:	dc10      	bgt.n	80021e4 <__aeabi_dsub+0x4c4>
 80021c2:	2a1f      	cmp	r2, #31
 80021c4:	dc7f      	bgt.n	80022c6 <__aeabi_dsub+0x5a6>
 80021c6:	2120      	movs	r1, #32
 80021c8:	0025      	movs	r5, r4
 80021ca:	1a89      	subs	r1, r1, r2
 80021cc:	0007      	movs	r7, r0
 80021ce:	4088      	lsls	r0, r1
 80021d0:	408d      	lsls	r5, r1
 80021d2:	40d7      	lsrs	r7, r2
 80021d4:	40d4      	lsrs	r4, r2
 80021d6:	1e41      	subs	r1, r0, #1
 80021d8:	4188      	sbcs	r0, r1
 80021da:	9b02      	ldr	r3, [sp, #8]
 80021dc:	433d      	orrs	r5, r7
 80021de:	1b1b      	subs	r3, r3, r4
 80021e0:	4305      	orrs	r5, r0
 80021e2:	9302      	str	r3, [sp, #8]
 80021e4:	4662      	mov	r2, ip
 80021e6:	1b55      	subs	r5, r2, r5
 80021e8:	45ac      	cmp	ip, r5
 80021ea:	4192      	sbcs	r2, r2
 80021ec:	9b02      	ldr	r3, [sp, #8]
 80021ee:	4252      	negs	r2, r2
 80021f0:	464f      	mov	r7, r9
 80021f2:	1a9c      	subs	r4, r3, r2
 80021f4:	e5f6      	b.n	8001de4 <__aeabi_dsub+0xc4>
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x4dc>
 80021fa:	e0b7      	b.n	800236c <__aeabi_dsub+0x64c>
 80021fc:	2a00      	cmp	r2, #0
 80021fe:	d100      	bne.n	8002202 <__aeabi_dsub+0x4e2>
 8002200:	e0f0      	b.n	80023e4 <__aeabi_dsub+0x6c4>
 8002202:	2601      	movs	r6, #1
 8002204:	400e      	ands	r6, r1
 8002206:	4663      	mov	r3, ip
 8002208:	9802      	ldr	r0, [sp, #8]
 800220a:	08d9      	lsrs	r1, r3, #3
 800220c:	0742      	lsls	r2, r0, #29
 800220e:	430a      	orrs	r2, r1
 8002210:	08c4      	lsrs	r4, r0, #3
 8002212:	e696      	b.n	8001f42 <__aeabi_dsub+0x222>
 8002214:	4c85      	ldr	r4, [pc, #532]	@ (800242c <__aeabi_dsub+0x70c>)
 8002216:	1aff      	subs	r7, r7, r3
 8002218:	4014      	ands	r4, r2
 800221a:	0762      	lsls	r2, r4, #29
 800221c:	08e4      	lsrs	r4, r4, #3
 800221e:	e760      	b.n	80020e2 <__aeabi_dsub+0x3c2>
 8002220:	4981      	ldr	r1, [pc, #516]	@ (8002428 <__aeabi_dsub+0x708>)
 8002222:	428a      	cmp	r2, r1
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x508>
 8002226:	e0c9      	b.n	80023bc <__aeabi_dsub+0x69c>
 8002228:	4663      	mov	r3, ip
 800222a:	18c1      	adds	r1, r0, r3
 800222c:	4281      	cmp	r1, r0
 800222e:	4180      	sbcs	r0, r0
 8002230:	9b02      	ldr	r3, [sp, #8]
 8002232:	4240      	negs	r0, r0
 8002234:	18e3      	adds	r3, r4, r3
 8002236:	181b      	adds	r3, r3, r0
 8002238:	07dd      	lsls	r5, r3, #31
 800223a:	085c      	lsrs	r4, r3, #1
 800223c:	2307      	movs	r3, #7
 800223e:	0849      	lsrs	r1, r1, #1
 8002240:	430d      	orrs	r5, r1
 8002242:	0017      	movs	r7, r2
 8002244:	402b      	ands	r3, r5
 8002246:	e710      	b.n	800206a <__aeabi_dsub+0x34a>
 8002248:	4663      	mov	r3, ip
 800224a:	1a1d      	subs	r5, r3, r0
 800224c:	45ac      	cmp	ip, r5
 800224e:	4192      	sbcs	r2, r2
 8002250:	2601      	movs	r6, #1
 8002252:	9b02      	ldr	r3, [sp, #8]
 8002254:	4252      	negs	r2, r2
 8002256:	1b1c      	subs	r4, r3, r4
 8002258:	4688      	mov	r8, r1
 800225a:	1aa4      	subs	r4, r4, r2
 800225c:	400e      	ands	r6, r1
 800225e:	e5c6      	b.n	8001dee <__aeabi_dsub+0xce>
 8002260:	4663      	mov	r3, ip
 8002262:	18c5      	adds	r5, r0, r3
 8002264:	9b02      	ldr	r3, [sp, #8]
 8002266:	4285      	cmp	r5, r0
 8002268:	4180      	sbcs	r0, r0
 800226a:	469c      	mov	ip, r3
 800226c:	4240      	negs	r0, r0
 800226e:	4464      	add	r4, ip
 8002270:	1824      	adds	r4, r4, r0
 8002272:	2701      	movs	r7, #1
 8002274:	0223      	lsls	r3, r4, #8
 8002276:	d400      	bmi.n	800227a <__aeabi_dsub+0x55a>
 8002278:	e6f5      	b.n	8002066 <__aeabi_dsub+0x346>
 800227a:	2702      	movs	r7, #2
 800227c:	e641      	b.n	8001f02 <__aeabi_dsub+0x1e2>
 800227e:	4663      	mov	r3, ip
 8002280:	1ac5      	subs	r5, r0, r3
 8002282:	42a8      	cmp	r0, r5
 8002284:	4180      	sbcs	r0, r0
 8002286:	9b02      	ldr	r3, [sp, #8]
 8002288:	4240      	negs	r0, r0
 800228a:	1ae4      	subs	r4, r4, r3
 800228c:	2701      	movs	r7, #1
 800228e:	1a24      	subs	r4, r4, r0
 8002290:	e5a8      	b.n	8001de4 <__aeabi_dsub+0xc4>
 8002292:	9d02      	ldr	r5, [sp, #8]
 8002294:	4652      	mov	r2, sl
 8002296:	002b      	movs	r3, r5
 8002298:	3a20      	subs	r2, #32
 800229a:	40d3      	lsrs	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	4653      	mov	r3, sl
 80022a0:	2b20      	cmp	r3, #32
 80022a2:	d006      	beq.n	80022b2 <__aeabi_dsub+0x592>
 80022a4:	2240      	movs	r2, #64	@ 0x40
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	002b      	movs	r3, r5
 80022aa:	4093      	lsls	r3, r2
 80022ac:	4662      	mov	r2, ip
 80022ae:	431a      	orrs	r2, r3
 80022b0:	4693      	mov	fp, r2
 80022b2:	465d      	mov	r5, fp
 80022b4:	1e6b      	subs	r3, r5, #1
 80022b6:	419d      	sbcs	r5, r3
 80022b8:	430d      	orrs	r5, r1
 80022ba:	e615      	b.n	8001ee8 <__aeabi_dsub+0x1c8>
 80022bc:	0762      	lsls	r2, r4, #29
 80022be:	08c0      	lsrs	r0, r0, #3
 80022c0:	4302      	orrs	r2, r0
 80022c2:	08e4      	lsrs	r4, r4, #3
 80022c4:	e70d      	b.n	80020e2 <__aeabi_dsub+0x3c2>
 80022c6:	0011      	movs	r1, r2
 80022c8:	0027      	movs	r7, r4
 80022ca:	3920      	subs	r1, #32
 80022cc:	40cf      	lsrs	r7, r1
 80022ce:	2a20      	cmp	r2, #32
 80022d0:	d005      	beq.n	80022de <__aeabi_dsub+0x5be>
 80022d2:	2140      	movs	r1, #64	@ 0x40
 80022d4:	1a8a      	subs	r2, r1, r2
 80022d6:	4094      	lsls	r4, r2
 80022d8:	0025      	movs	r5, r4
 80022da:	4305      	orrs	r5, r0
 80022dc:	9503      	str	r5, [sp, #12]
 80022de:	9d03      	ldr	r5, [sp, #12]
 80022e0:	1e6a      	subs	r2, r5, #1
 80022e2:	4195      	sbcs	r5, r2
 80022e4:	433d      	orrs	r5, r7
 80022e6:	e77d      	b.n	80021e4 <__aeabi_dsub+0x4c4>
 80022e8:	2a00      	cmp	r2, #0
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x5ce>
 80022ec:	e744      	b.n	8002178 <__aeabi_dsub+0x458>
 80022ee:	2601      	movs	r6, #1
 80022f0:	400e      	ands	r6, r1
 80022f2:	4663      	mov	r3, ip
 80022f4:	08d9      	lsrs	r1, r3, #3
 80022f6:	9b02      	ldr	r3, [sp, #8]
 80022f8:	075a      	lsls	r2, r3, #29
 80022fa:	430a      	orrs	r2, r1
 80022fc:	08dc      	lsrs	r4, r3, #3
 80022fe:	e6f0      	b.n	80020e2 <__aeabi_dsub+0x3c2>
 8002300:	2a00      	cmp	r2, #0
 8002302:	d028      	beq.n	8002356 <__aeabi_dsub+0x636>
 8002304:	4662      	mov	r2, ip
 8002306:	9f02      	ldr	r7, [sp, #8]
 8002308:	08c0      	lsrs	r0, r0, #3
 800230a:	433a      	orrs	r2, r7
 800230c:	d100      	bne.n	8002310 <__aeabi_dsub+0x5f0>
 800230e:	e6dc      	b.n	80020ca <__aeabi_dsub+0x3aa>
 8002310:	0762      	lsls	r2, r4, #29
 8002312:	4310      	orrs	r0, r2
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	08e4      	lsrs	r4, r4, #3
 8002318:	0312      	lsls	r2, r2, #12
 800231a:	4214      	tst	r4, r2
 800231c:	d009      	beq.n	8002332 <__aeabi_dsub+0x612>
 800231e:	08fd      	lsrs	r5, r7, #3
 8002320:	4215      	tst	r5, r2
 8002322:	d106      	bne.n	8002332 <__aeabi_dsub+0x612>
 8002324:	4663      	mov	r3, ip
 8002326:	2601      	movs	r6, #1
 8002328:	002c      	movs	r4, r5
 800232a:	08d8      	lsrs	r0, r3, #3
 800232c:	077b      	lsls	r3, r7, #29
 800232e:	4318      	orrs	r0, r3
 8002330:	400e      	ands	r6, r1
 8002332:	0f42      	lsrs	r2, r0, #29
 8002334:	00c0      	lsls	r0, r0, #3
 8002336:	08c0      	lsrs	r0, r0, #3
 8002338:	0752      	lsls	r2, r2, #29
 800233a:	4302      	orrs	r2, r0
 800233c:	e601      	b.n	8001f42 <__aeabi_dsub+0x222>
 800233e:	4663      	mov	r3, ip
 8002340:	1a1d      	subs	r5, r3, r0
 8002342:	45ac      	cmp	ip, r5
 8002344:	4192      	sbcs	r2, r2
 8002346:	9b02      	ldr	r3, [sp, #8]
 8002348:	4252      	negs	r2, r2
 800234a:	1b1c      	subs	r4, r3, r4
 800234c:	000e      	movs	r6, r1
 800234e:	4688      	mov	r8, r1
 8002350:	2701      	movs	r7, #1
 8002352:	1aa4      	subs	r4, r4, r2
 8002354:	e546      	b.n	8001de4 <__aeabi_dsub+0xc4>
 8002356:	4663      	mov	r3, ip
 8002358:	08d9      	lsrs	r1, r3, #3
 800235a:	9b02      	ldr	r3, [sp, #8]
 800235c:	075a      	lsls	r2, r3, #29
 800235e:	430a      	orrs	r2, r1
 8002360:	08dc      	lsrs	r4, r3, #3
 8002362:	e5ee      	b.n	8001f42 <__aeabi_dsub+0x222>
 8002364:	4663      	mov	r3, ip
 8002366:	9c02      	ldr	r4, [sp, #8]
 8002368:	9303      	str	r3, [sp, #12]
 800236a:	e6c7      	b.n	80020fc <__aeabi_dsub+0x3dc>
 800236c:	08c0      	lsrs	r0, r0, #3
 800236e:	2a00      	cmp	r2, #0
 8002370:	d100      	bne.n	8002374 <__aeabi_dsub+0x654>
 8002372:	e6aa      	b.n	80020ca <__aeabi_dsub+0x3aa>
 8002374:	0762      	lsls	r2, r4, #29
 8002376:	4310      	orrs	r0, r2
 8002378:	2280      	movs	r2, #128	@ 0x80
 800237a:	08e4      	lsrs	r4, r4, #3
 800237c:	0312      	lsls	r2, r2, #12
 800237e:	4214      	tst	r4, r2
 8002380:	d0d7      	beq.n	8002332 <__aeabi_dsub+0x612>
 8002382:	9f02      	ldr	r7, [sp, #8]
 8002384:	08fd      	lsrs	r5, r7, #3
 8002386:	4215      	tst	r5, r2
 8002388:	d1d3      	bne.n	8002332 <__aeabi_dsub+0x612>
 800238a:	4663      	mov	r3, ip
 800238c:	2601      	movs	r6, #1
 800238e:	08d8      	lsrs	r0, r3, #3
 8002390:	077b      	lsls	r3, r7, #29
 8002392:	002c      	movs	r4, r5
 8002394:	4318      	orrs	r0, r3
 8002396:	400e      	ands	r6, r1
 8002398:	e7cb      	b.n	8002332 <__aeabi_dsub+0x612>
 800239a:	000a      	movs	r2, r1
 800239c:	0027      	movs	r7, r4
 800239e:	3a20      	subs	r2, #32
 80023a0:	40d7      	lsrs	r7, r2
 80023a2:	2920      	cmp	r1, #32
 80023a4:	d005      	beq.n	80023b2 <__aeabi_dsub+0x692>
 80023a6:	2240      	movs	r2, #64	@ 0x40
 80023a8:	1a52      	subs	r2, r2, r1
 80023aa:	4094      	lsls	r4, r2
 80023ac:	0025      	movs	r5, r4
 80023ae:	4305      	orrs	r5, r0
 80023b0:	9503      	str	r5, [sp, #12]
 80023b2:	9d03      	ldr	r5, [sp, #12]
 80023b4:	1e6a      	subs	r2, r5, #1
 80023b6:	4195      	sbcs	r5, r2
 80023b8:	432f      	orrs	r7, r5
 80023ba:	e610      	b.n	8001fde <__aeabi_dsub+0x2be>
 80023bc:	0014      	movs	r4, r2
 80023be:	2500      	movs	r5, #0
 80023c0:	2200      	movs	r2, #0
 80023c2:	e556      	b.n	8001e72 <__aeabi_dsub+0x152>
 80023c4:	9b02      	ldr	r3, [sp, #8]
 80023c6:	4460      	add	r0, ip
 80023c8:	4699      	mov	r9, r3
 80023ca:	4560      	cmp	r0, ip
 80023cc:	4192      	sbcs	r2, r2
 80023ce:	444c      	add	r4, r9
 80023d0:	4252      	negs	r2, r2
 80023d2:	0005      	movs	r5, r0
 80023d4:	18a4      	adds	r4, r4, r2
 80023d6:	e74c      	b.n	8002272 <__aeabi_dsub+0x552>
 80023d8:	001a      	movs	r2, r3
 80023da:	001c      	movs	r4, r3
 80023dc:	432a      	orrs	r2, r5
 80023de:	d000      	beq.n	80023e2 <__aeabi_dsub+0x6c2>
 80023e0:	e6b3      	b.n	800214a <__aeabi_dsub+0x42a>
 80023e2:	e6c9      	b.n	8002178 <__aeabi_dsub+0x458>
 80023e4:	2480      	movs	r4, #128	@ 0x80
 80023e6:	2600      	movs	r6, #0
 80023e8:	0324      	lsls	r4, r4, #12
 80023ea:	e5ae      	b.n	8001f4a <__aeabi_dsub+0x22a>
 80023ec:	2120      	movs	r1, #32
 80023ee:	2500      	movs	r5, #0
 80023f0:	1a09      	subs	r1, r1, r0
 80023f2:	e517      	b.n	8001e24 <__aeabi_dsub+0x104>
 80023f4:	2200      	movs	r2, #0
 80023f6:	2500      	movs	r5, #0
 80023f8:	4c0b      	ldr	r4, [pc, #44]	@ (8002428 <__aeabi_dsub+0x708>)
 80023fa:	e53a      	b.n	8001e72 <__aeabi_dsub+0x152>
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	d100      	bne.n	8002402 <__aeabi_dsub+0x6e2>
 8002400:	e5f6      	b.n	8001ff0 <__aeabi_dsub+0x2d0>
 8002402:	464b      	mov	r3, r9
 8002404:	1bda      	subs	r2, r3, r7
 8002406:	4692      	mov	sl, r2
 8002408:	2f00      	cmp	r7, #0
 800240a:	d100      	bne.n	800240e <__aeabi_dsub+0x6ee>
 800240c:	e66f      	b.n	80020ee <__aeabi_dsub+0x3ce>
 800240e:	2a38      	cmp	r2, #56	@ 0x38
 8002410:	dc05      	bgt.n	800241e <__aeabi_dsub+0x6fe>
 8002412:	2680      	movs	r6, #128	@ 0x80
 8002414:	0436      	lsls	r6, r6, #16
 8002416:	4334      	orrs	r4, r6
 8002418:	4688      	mov	r8, r1
 800241a:	000e      	movs	r6, r1
 800241c:	e6d1      	b.n	80021c2 <__aeabi_dsub+0x4a2>
 800241e:	4688      	mov	r8, r1
 8002420:	000e      	movs	r6, r1
 8002422:	2501      	movs	r5, #1
 8002424:	e6de      	b.n	80021e4 <__aeabi_dsub+0x4c4>
 8002426:	46c0      	nop			@ (mov r8, r8)
 8002428:	000007ff 	.word	0x000007ff
 800242c:	ff7fffff 	.word	0xff7fffff
 8002430:	000007fe 	.word	0x000007fe
 8002434:	2d00      	cmp	r5, #0
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x71a>
 8002438:	e668      	b.n	800210c <__aeabi_dsub+0x3ec>
 800243a:	464b      	mov	r3, r9
 800243c:	1bd9      	subs	r1, r3, r7
 800243e:	2f00      	cmp	r7, #0
 8002440:	d101      	bne.n	8002446 <__aeabi_dsub+0x726>
 8002442:	468a      	mov	sl, r1
 8002444:	e5a7      	b.n	8001f96 <__aeabi_dsub+0x276>
 8002446:	2701      	movs	r7, #1
 8002448:	2938      	cmp	r1, #56	@ 0x38
 800244a:	dd00      	ble.n	800244e <__aeabi_dsub+0x72e>
 800244c:	e5c7      	b.n	8001fde <__aeabi_dsub+0x2be>
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	0412      	lsls	r2, r2, #16
 8002452:	4314      	orrs	r4, r2
 8002454:	e5af      	b.n	8001fb6 <__aeabi_dsub+0x296>
 8002456:	46c0      	nop			@ (mov r8, r8)

08002458 <__aeabi_dcmpun>:
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	46c6      	mov	lr, r8
 800245c:	031e      	lsls	r6, r3, #12
 800245e:	0b36      	lsrs	r6, r6, #12
 8002460:	46b0      	mov	r8, r6
 8002462:	4e0d      	ldr	r6, [pc, #52]	@ (8002498 <__aeabi_dcmpun+0x40>)
 8002464:	030c      	lsls	r4, r1, #12
 8002466:	004d      	lsls	r5, r1, #1
 8002468:	005f      	lsls	r7, r3, #1
 800246a:	b500      	push	{lr}
 800246c:	0b24      	lsrs	r4, r4, #12
 800246e:	0d6d      	lsrs	r5, r5, #21
 8002470:	0d7f      	lsrs	r7, r7, #21
 8002472:	42b5      	cmp	r5, r6
 8002474:	d00b      	beq.n	800248e <__aeabi_dcmpun+0x36>
 8002476:	4908      	ldr	r1, [pc, #32]	@ (8002498 <__aeabi_dcmpun+0x40>)
 8002478:	2000      	movs	r0, #0
 800247a:	428f      	cmp	r7, r1
 800247c:	d104      	bne.n	8002488 <__aeabi_dcmpun+0x30>
 800247e:	4646      	mov	r6, r8
 8002480:	4316      	orrs	r6, r2
 8002482:	0030      	movs	r0, r6
 8002484:	1e43      	subs	r3, r0, #1
 8002486:	4198      	sbcs	r0, r3
 8002488:	bc80      	pop	{r7}
 800248a:	46b8      	mov	r8, r7
 800248c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248e:	4304      	orrs	r4, r0
 8002490:	2001      	movs	r0, #1
 8002492:	2c00      	cmp	r4, #0
 8002494:	d1f8      	bne.n	8002488 <__aeabi_dcmpun+0x30>
 8002496:	e7ee      	b.n	8002476 <__aeabi_dcmpun+0x1e>
 8002498:	000007ff 	.word	0x000007ff

0800249c <__aeabi_d2iz>:
 800249c:	000b      	movs	r3, r1
 800249e:	0002      	movs	r2, r0
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	4d16      	ldr	r5, [pc, #88]	@ (80024fc <__aeabi_d2iz+0x60>)
 80024a4:	030c      	lsls	r4, r1, #12
 80024a6:	b082      	sub	sp, #8
 80024a8:	0049      	lsls	r1, r1, #1
 80024aa:	2000      	movs	r0, #0
 80024ac:	9200      	str	r2, [sp, #0]
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	0b24      	lsrs	r4, r4, #12
 80024b2:	0d49      	lsrs	r1, r1, #21
 80024b4:	0fde      	lsrs	r6, r3, #31
 80024b6:	42a9      	cmp	r1, r5
 80024b8:	dd04      	ble.n	80024c4 <__aeabi_d2iz+0x28>
 80024ba:	4811      	ldr	r0, [pc, #68]	@ (8002500 <__aeabi_d2iz+0x64>)
 80024bc:	4281      	cmp	r1, r0
 80024be:	dd03      	ble.n	80024c8 <__aeabi_d2iz+0x2c>
 80024c0:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <__aeabi_d2iz+0x68>)
 80024c2:	18f0      	adds	r0, r6, r3
 80024c4:	b002      	add	sp, #8
 80024c6:	bd70      	pop	{r4, r5, r6, pc}
 80024c8:	2080      	movs	r0, #128	@ 0x80
 80024ca:	0340      	lsls	r0, r0, #13
 80024cc:	4320      	orrs	r0, r4
 80024ce:	4c0e      	ldr	r4, [pc, #56]	@ (8002508 <__aeabi_d2iz+0x6c>)
 80024d0:	1a64      	subs	r4, r4, r1
 80024d2:	2c1f      	cmp	r4, #31
 80024d4:	dd08      	ble.n	80024e8 <__aeabi_d2iz+0x4c>
 80024d6:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <__aeabi_d2iz+0x70>)
 80024d8:	1a5b      	subs	r3, r3, r1
 80024da:	40d8      	lsrs	r0, r3
 80024dc:	0003      	movs	r3, r0
 80024de:	4258      	negs	r0, r3
 80024e0:	2e00      	cmp	r6, #0
 80024e2:	d1ef      	bne.n	80024c4 <__aeabi_d2iz+0x28>
 80024e4:	0018      	movs	r0, r3
 80024e6:	e7ed      	b.n	80024c4 <__aeabi_d2iz+0x28>
 80024e8:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <__aeabi_d2iz+0x74>)
 80024ea:	9a00      	ldr	r2, [sp, #0]
 80024ec:	469c      	mov	ip, r3
 80024ee:	0003      	movs	r3, r0
 80024f0:	4461      	add	r1, ip
 80024f2:	408b      	lsls	r3, r1
 80024f4:	40e2      	lsrs	r2, r4
 80024f6:	4313      	orrs	r3, r2
 80024f8:	e7f1      	b.n	80024de <__aeabi_d2iz+0x42>
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	000003fe 	.word	0x000003fe
 8002500:	0000041d 	.word	0x0000041d
 8002504:	7fffffff 	.word	0x7fffffff
 8002508:	00000433 	.word	0x00000433
 800250c:	00000413 	.word	0x00000413
 8002510:	fffffbed 	.word	0xfffffbed

08002514 <__aeabi_i2d>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	2800      	cmp	r0, #0
 8002518:	d016      	beq.n	8002548 <__aeabi_i2d+0x34>
 800251a:	17c3      	asrs	r3, r0, #31
 800251c:	18c5      	adds	r5, r0, r3
 800251e:	405d      	eors	r5, r3
 8002520:	0fc4      	lsrs	r4, r0, #31
 8002522:	0028      	movs	r0, r5
 8002524:	f000 f890 	bl	8002648 <__clzsi2>
 8002528:	4b10      	ldr	r3, [pc, #64]	@ (800256c <__aeabi_i2d+0x58>)
 800252a:	1a1b      	subs	r3, r3, r0
 800252c:	055b      	lsls	r3, r3, #21
 800252e:	0d5b      	lsrs	r3, r3, #21
 8002530:	280a      	cmp	r0, #10
 8002532:	dc14      	bgt.n	800255e <__aeabi_i2d+0x4a>
 8002534:	0002      	movs	r2, r0
 8002536:	002e      	movs	r6, r5
 8002538:	3215      	adds	r2, #21
 800253a:	4096      	lsls	r6, r2
 800253c:	220b      	movs	r2, #11
 800253e:	1a12      	subs	r2, r2, r0
 8002540:	40d5      	lsrs	r5, r2
 8002542:	032d      	lsls	r5, r5, #12
 8002544:	0b2d      	lsrs	r5, r5, #12
 8002546:	e003      	b.n	8002550 <__aeabi_i2d+0x3c>
 8002548:	2400      	movs	r4, #0
 800254a:	2300      	movs	r3, #0
 800254c:	2500      	movs	r5, #0
 800254e:	2600      	movs	r6, #0
 8002550:	051b      	lsls	r3, r3, #20
 8002552:	432b      	orrs	r3, r5
 8002554:	07e4      	lsls	r4, r4, #31
 8002556:	4323      	orrs	r3, r4
 8002558:	0030      	movs	r0, r6
 800255a:	0019      	movs	r1, r3
 800255c:	bd70      	pop	{r4, r5, r6, pc}
 800255e:	380b      	subs	r0, #11
 8002560:	4085      	lsls	r5, r0
 8002562:	032d      	lsls	r5, r5, #12
 8002564:	2600      	movs	r6, #0
 8002566:	0b2d      	lsrs	r5, r5, #12
 8002568:	e7f2      	b.n	8002550 <__aeabi_i2d+0x3c>
 800256a:	46c0      	nop			@ (mov r8, r8)
 800256c:	0000041e 	.word	0x0000041e

08002570 <__aeabi_ui2d>:
 8002570:	b510      	push	{r4, lr}
 8002572:	1e04      	subs	r4, r0, #0
 8002574:	d010      	beq.n	8002598 <__aeabi_ui2d+0x28>
 8002576:	f000 f867 	bl	8002648 <__clzsi2>
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <__aeabi_ui2d+0x44>)
 800257c:	1a1b      	subs	r3, r3, r0
 800257e:	055b      	lsls	r3, r3, #21
 8002580:	0d5b      	lsrs	r3, r3, #21
 8002582:	280a      	cmp	r0, #10
 8002584:	dc0f      	bgt.n	80025a6 <__aeabi_ui2d+0x36>
 8002586:	220b      	movs	r2, #11
 8002588:	0021      	movs	r1, r4
 800258a:	1a12      	subs	r2, r2, r0
 800258c:	40d1      	lsrs	r1, r2
 800258e:	3015      	adds	r0, #21
 8002590:	030a      	lsls	r2, r1, #12
 8002592:	4084      	lsls	r4, r0
 8002594:	0b12      	lsrs	r2, r2, #12
 8002596:	e001      	b.n	800259c <__aeabi_ui2d+0x2c>
 8002598:	2300      	movs	r3, #0
 800259a:	2200      	movs	r2, #0
 800259c:	051b      	lsls	r3, r3, #20
 800259e:	4313      	orrs	r3, r2
 80025a0:	0020      	movs	r0, r4
 80025a2:	0019      	movs	r1, r3
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	0022      	movs	r2, r4
 80025a8:	380b      	subs	r0, #11
 80025aa:	4082      	lsls	r2, r0
 80025ac:	0312      	lsls	r2, r2, #12
 80025ae:	2400      	movs	r4, #0
 80025b0:	0b12      	lsrs	r2, r2, #12
 80025b2:	e7f3      	b.n	800259c <__aeabi_ui2d+0x2c>
 80025b4:	0000041e 	.word	0x0000041e

080025b8 <__aeabi_f2d>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	0242      	lsls	r2, r0, #9
 80025bc:	0043      	lsls	r3, r0, #1
 80025be:	0fc4      	lsrs	r4, r0, #31
 80025c0:	20fe      	movs	r0, #254	@ 0xfe
 80025c2:	0e1b      	lsrs	r3, r3, #24
 80025c4:	1c59      	adds	r1, r3, #1
 80025c6:	0a55      	lsrs	r5, r2, #9
 80025c8:	4208      	tst	r0, r1
 80025ca:	d00c      	beq.n	80025e6 <__aeabi_f2d+0x2e>
 80025cc:	21e0      	movs	r1, #224	@ 0xe0
 80025ce:	0089      	lsls	r1, r1, #2
 80025d0:	468c      	mov	ip, r1
 80025d2:	076d      	lsls	r5, r5, #29
 80025d4:	0b12      	lsrs	r2, r2, #12
 80025d6:	4463      	add	r3, ip
 80025d8:	051b      	lsls	r3, r3, #20
 80025da:	4313      	orrs	r3, r2
 80025dc:	07e4      	lsls	r4, r4, #31
 80025de:	4323      	orrs	r3, r4
 80025e0:	0028      	movs	r0, r5
 80025e2:	0019      	movs	r1, r3
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d114      	bne.n	8002614 <__aeabi_f2d+0x5c>
 80025ea:	2d00      	cmp	r5, #0
 80025ec:	d01b      	beq.n	8002626 <__aeabi_f2d+0x6e>
 80025ee:	0028      	movs	r0, r5
 80025f0:	f000 f82a 	bl	8002648 <__clzsi2>
 80025f4:	280a      	cmp	r0, #10
 80025f6:	dc1c      	bgt.n	8002632 <__aeabi_f2d+0x7a>
 80025f8:	230b      	movs	r3, #11
 80025fa:	002a      	movs	r2, r5
 80025fc:	1a1b      	subs	r3, r3, r0
 80025fe:	40da      	lsrs	r2, r3
 8002600:	0003      	movs	r3, r0
 8002602:	3315      	adds	r3, #21
 8002604:	409d      	lsls	r5, r3
 8002606:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <__aeabi_f2d+0x88>)
 8002608:	0312      	lsls	r2, r2, #12
 800260a:	1a1b      	subs	r3, r3, r0
 800260c:	055b      	lsls	r3, r3, #21
 800260e:	0b12      	lsrs	r2, r2, #12
 8002610:	0d5b      	lsrs	r3, r3, #21
 8002612:	e7e1      	b.n	80025d8 <__aeabi_f2d+0x20>
 8002614:	2d00      	cmp	r5, #0
 8002616:	d009      	beq.n	800262c <__aeabi_f2d+0x74>
 8002618:	0b13      	lsrs	r3, r2, #12
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	0312      	lsls	r2, r2, #12
 800261e:	431a      	orrs	r2, r3
 8002620:	076d      	lsls	r5, r5, #29
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <__aeabi_f2d+0x8c>)
 8002624:	e7d8      	b.n	80025d8 <__aeabi_f2d+0x20>
 8002626:	2300      	movs	r3, #0
 8002628:	2200      	movs	r2, #0
 800262a:	e7d5      	b.n	80025d8 <__aeabi_f2d+0x20>
 800262c:	2200      	movs	r2, #0
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <__aeabi_f2d+0x8c>)
 8002630:	e7d2      	b.n	80025d8 <__aeabi_f2d+0x20>
 8002632:	0003      	movs	r3, r0
 8002634:	002a      	movs	r2, r5
 8002636:	3b0b      	subs	r3, #11
 8002638:	409a      	lsls	r2, r3
 800263a:	2500      	movs	r5, #0
 800263c:	e7e3      	b.n	8002606 <__aeabi_f2d+0x4e>
 800263e:	46c0      	nop			@ (mov r8, r8)
 8002640:	00000389 	.word	0x00000389
 8002644:	000007ff 	.word	0x000007ff

08002648 <__clzsi2>:
 8002648:	211c      	movs	r1, #28
 800264a:	2301      	movs	r3, #1
 800264c:	041b      	lsls	r3, r3, #16
 800264e:	4298      	cmp	r0, r3
 8002650:	d301      	bcc.n	8002656 <__clzsi2+0xe>
 8002652:	0c00      	lsrs	r0, r0, #16
 8002654:	3910      	subs	r1, #16
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	4298      	cmp	r0, r3
 800265a:	d301      	bcc.n	8002660 <__clzsi2+0x18>
 800265c:	0a00      	lsrs	r0, r0, #8
 800265e:	3908      	subs	r1, #8
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	4298      	cmp	r0, r3
 8002664:	d301      	bcc.n	800266a <__clzsi2+0x22>
 8002666:	0900      	lsrs	r0, r0, #4
 8002668:	3904      	subs	r1, #4
 800266a:	a202      	add	r2, pc, #8	@ (adr r2, 8002674 <__clzsi2+0x2c>)
 800266c:	5c10      	ldrb	r0, [r2, r0]
 800266e:	1840      	adds	r0, r0, r1
 8002670:	4770      	bx	lr
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	02020304 	.word	0x02020304
 8002678:	01010101 	.word	0x01010101
	...

08002684 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	240c      	movs	r4, #12
 800268e:	193b      	adds	r3, r7, r4
 8002690:	0018      	movs	r0, r3
 8002692:	2314      	movs	r3, #20
 8002694:	001a      	movs	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	f003 fb66 	bl	8005d68 <memset>

  //По умолчанию на линии высокий уровень
  lineUp();
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	889b      	ldrh	r3, [r3, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	0019      	movs	r1, r3
 80026a8:	f001 fb49 	bl	8003d3e <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	001a      	movs	r2, r3
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80026b6:	193b      	adds	r3, r7, r4
 80026b8:	2211      	movs	r2, #17
 80026ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	79db      	ldrb	r3, [r3, #7]
 80026c0:	001a      	movs	r2, r3
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	609a      	str	r2, [r3, #8]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	2203      	movs	r2, #3
 80026ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	193a      	adds	r2, r7, r4
 80026d2:	0011      	movs	r1, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	f001 f9a5 	bl	8003a24 <HAL_GPIO_Init>
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b009      	add	sp, #36	@ 0x24
 80026e0:	bd90      	pop	{r4, r7, pc}

080026e2 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b089      	sub	sp, #36	@ 0x24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	240c      	movs	r4, #12
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	0018      	movs	r0, r3
 80026f0:	2314      	movs	r3, #20
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f003 fb37 	bl	8005d68 <memset>

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	889b      	ldrh	r3, [r3, #4]
 80026fe:	001a      	movs	r2, r3
 8002700:	193b      	adds	r3, r7, r4
 8002702:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002704:	193b      	adds	r3, r7, r4
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	79db      	ldrb	r3, [r3, #7]
 800270e:	001a      	movs	r2, r3
 8002710:	193b      	adds	r3, r7, r4
 8002712:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	193a      	adds	r2, r7, r4
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f001 f981 	bl	8003a24 <HAL_GPIO_Init>
}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	46bd      	mov	sp, r7
 8002726:	b009      	add	sp, #36	@ 0x24
 8002728:	bd90      	pop	{r4, r7, pc}
	...

0800272c <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 8002736:	2314      	movs	r3, #20
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	4ac7      	ldr	r2, [pc, #796]	@ (8002a58 <DHT_getData+0x32c>)
 800273c:	ca03      	ldmia	r2!, {r0, r1}
 800273e:	c303      	stmia	r3!, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	799b      	ldrb	r3, [r3, #6]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d105      	bne.n	8002754 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8002748:	2326      	movs	r3, #38	@ 0x26
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	22fa      	movs	r2, #250	@ 0xfa
 800274e:	00d2      	lsls	r2, r2, #3
 8002750:	801a      	strh	r2, [r3, #0]
 8002752:	e004      	b.n	800275e <DHT_getData+0x32>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8002754:	2326      	movs	r3, #38	@ 0x26
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	22fa      	movs	r2, #250	@ 0xfa
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	801a      	strh	r2, [r3, #0]
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 800275e:	f001 f87f 	bl	8003860 <HAL_GetTick>
 8002762:	0002      	movs	r2, r0
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	2326      	movs	r3, #38	@ 0x26
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d211      	bcs.n	8002798 <DHT_getData+0x6c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <DHT_getData+0x6c>
		data.hum = sensor->lastHum;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	2114      	movs	r1, #20
 8002782:	187b      	adds	r3, r7, r1
 8002784:	601a      	str	r2, [r3, #0]
		data.temp = sensor->lastTemp;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	187b      	adds	r3, r7, r1
 800278c:	605a      	str	r2, [r3, #4]
		return data;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	187a      	adds	r2, r7, r1
 8002792:	ca03      	ldmia	r2!, {r0, r1}
 8002794:	c303      	stmia	r3!, {r0, r1}
 8002796:	e1a8      	b.n	8002aea <DHT_getData+0x3be>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8002798:	f001 f862 	bl	8003860 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff ff6c 	bl	8002684 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	889b      	ldrh	r3, [r3, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	0019      	movs	r1, r3
 80027b8:	f001 fac1 	bl	8003d3e <HAL_GPIO_WritePin>
	Delay(18);
 80027bc:	2012      	movs	r0, #18
 80027be:	f001 f859 	bl	8003874 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	889b      	ldrh	r3, [r3, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	0019      	movs	r1, r3
 80027ce:	f001 fab6 	bl	8003d3e <HAL_GPIO_WritePin>
	goToInput(sensor);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff84 	bl	80026e2 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027da:	b672      	cpsid	i
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 80027de:	2324      	movs	r3, #36	@ 0x24
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 80027e6:	e01a      	b.n	800281e <DHT_getData+0xf2>
		timeout++;
 80027e8:	2124      	movs	r1, #36	@ 0x24
 80027ea:	187b      	adds	r3, r7, r1
 80027ec:	881a      	ldrh	r2, [r3, #0]
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	3201      	adds	r2, #1
 80027f2:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	881b      	ldrh	r3, [r3, #0]
 80027f8:	4a98      	ldr	r2, [pc, #608]	@ (8002a5c <DHT_getData+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d90f      	bls.n	800281e <DHT_getData+0xf2>
  __ASM volatile ("cpsie i" : : : "memory");
 80027fe:	b662      	cpsie	i
}
 8002800:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	22c3      	movs	r2, #195	@ 0xc3
 8002806:	0612      	lsls	r2, r2, #24
 8002808:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	22c3      	movs	r2, #195	@ 0xc3
 800280e:	0612      	lsls	r2, r2, #24
 8002810:	60da      	str	r2, [r3, #12]

			return data;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2214      	movs	r2, #20
 8002816:	18ba      	adds	r2, r7, r2
 8002818:	ca03      	ldmia	r2!, {r0, r1}
 800281a:	c303      	stmia	r3!, {r0, r1}
 800281c:	e165      	b.n	8002aea <DHT_getData+0x3be>
	while(getLine()) {
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	889b      	ldrh	r3, [r3, #4]
 8002826:	0019      	movs	r1, r3
 8002828:	0010      	movs	r0, r2
 800282a:	f001 fa6b 	bl	8003d04 <HAL_GPIO_ReadPin>
 800282e:	0003      	movs	r3, r0
 8002830:	2b01      	cmp	r3, #1
 8002832:	d0d9      	beq.n	80027e8 <DHT_getData+0xbc>
		}
	}
	timeout = 0;
 8002834:	2324      	movs	r3, #36	@ 0x24
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2200      	movs	r2, #0
 800283a:	801a      	strh	r2, [r3, #0]
	//Ожидание подъёма
	while(!getLine()) {
 800283c:	e01a      	b.n	8002874 <DHT_getData+0x148>
		timeout++;
 800283e:	2124      	movs	r1, #36	@ 0x24
 8002840:	187b      	adds	r3, r7, r1
 8002842:	881a      	ldrh	r2, [r3, #0]
 8002844:	187b      	adds	r3, r7, r1
 8002846:	3201      	adds	r2, #1
 8002848:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 800284a:	187b      	adds	r3, r7, r1
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	4a83      	ldr	r2, [pc, #524]	@ (8002a5c <DHT_getData+0x330>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d90f      	bls.n	8002874 <DHT_getData+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
 8002854:	b662      	cpsie	i
}
 8002856:	46c0      	nop			@ (mov r8, r8)
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	22c3      	movs	r2, #195	@ 0xc3
 800285c:	0612      	lsls	r2, r2, #24
 800285e:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	22c3      	movs	r2, #195	@ 0xc3
 8002864:	0612      	lsls	r2, r2, #24
 8002866:	60da      	str	r2, [r3, #12]

			return data;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2214      	movs	r2, #20
 800286c:	18ba      	adds	r2, r7, r2
 800286e:	ca03      	ldmia	r2!, {r0, r1}
 8002870:	c303      	stmia	r3!, {r0, r1}
 8002872:	e13a      	b.n	8002aea <DHT_getData+0x3be>
	while(!getLine()) {
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	889b      	ldrh	r3, [r3, #4]
 800287c:	0019      	movs	r1, r3
 800287e:	0010      	movs	r0, r2
 8002880:	f001 fa40 	bl	8003d04 <HAL_GPIO_ReadPin>
 8002884:	0003      	movs	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d1d9      	bne.n	800283e <DHT_getData+0x112>
		}
	}
	timeout = 0;
 800288a:	2324      	movs	r3, #36	@ 0x24
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8002892:	e012      	b.n	80028ba <DHT_getData+0x18e>
		timeout++;
 8002894:	2124      	movs	r1, #36	@ 0x24
 8002896:	187b      	adds	r3, r7, r1
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	187b      	adds	r3, r7, r1
 800289c:	3201      	adds	r2, #1
 800289e:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) {
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a5c <DHT_getData+0x330>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d907      	bls.n	80028ba <DHT_getData+0x18e>
  __ASM volatile ("cpsie i" : : : "memory");
 80028aa:	b662      	cpsie	i
}
 80028ac:	46c0      	nop			@ (mov r8, r8)
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2214      	movs	r2, #20
 80028b2:	18ba      	adds	r2, r7, r2
 80028b4:	ca03      	ldmia	r2!, {r0, r1}
 80028b6:	c303      	stmia	r3!, {r0, r1}
 80028b8:	e117      	b.n	8002aea <DHT_getData+0x3be>
	while(getLine()) {
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	889b      	ldrh	r3, [r3, #4]
 80028c2:	0019      	movs	r1, r3
 80028c4:	0010      	movs	r0, r2
 80028c6:	f001 fa1d 	bl	8003d04 <HAL_GPIO_ReadPin>
 80028ca:	0003      	movs	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d0e1      	beq.n	8002894 <DHT_getData+0x168>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 80028d0:	230c      	movs	r3, #12
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	4a62      	ldr	r2, [pc, #392]	@ (8002a60 <DHT_getData+0x334>)
 80028d6:	6811      	ldr	r1, [r2, #0]
 80028d8:	6019      	str	r1, [r3, #0]
 80028da:	7912      	ldrb	r2, [r2, #4]
 80028dc:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 80028de:	2323      	movs	r3, #35	@ 0x23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	e06e      	b.n	80029c6 <DHT_getData+0x29a>
		for(uint8_t b = 7; b != 255; b--) {
 80028e8:	2322      	movs	r3, #34	@ 0x22
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	2207      	movs	r2, #7
 80028ee:	701a      	strb	r2, [r3, #0]
 80028f0:	e05e      	b.n	80029b0 <DHT_getData+0x284>
			uint16_t hT = 0, lT = 0;
 80028f2:	2320      	movs	r3, #32
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	231e      	movs	r3, #30
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2200      	movs	r2, #0
 8002900:	801a      	strh	r2, [r3, #0]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8002902:	e005      	b.n	8002910 <DHT_getData+0x1e4>
 8002904:	211e      	movs	r1, #30
 8002906:	187b      	adds	r3, r7, r1
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	187b      	adds	r3, r7, r1
 800290c:	3201      	adds	r2, #1
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	889b      	ldrh	r3, [r3, #4]
 8002918:	0019      	movs	r1, r3
 800291a:	0010      	movs	r0, r2
 800291c:	f001 f9f2 	bl	8003d04 <HAL_GPIO_ReadPin>
 8002920:	0003      	movs	r3, r0
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <DHT_getData+0x206>
 8002926:	231e      	movs	r3, #30
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a64 <DHT_getData+0x338>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d1e8      	bne.n	8002904 <DHT_getData+0x1d8>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8002932:	2324      	movs	r3, #36	@ 0x24
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2200      	movs	r2, #0
 8002938:	801a      	strh	r2, [r3, #0]
			while(getLine()&& hT != 65535) hT++;
 800293a:	e005      	b.n	8002948 <DHT_getData+0x21c>
 800293c:	2120      	movs	r1, #32
 800293e:	187b      	adds	r3, r7, r1
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	187b      	adds	r3, r7, r1
 8002944:	3201      	adds	r2, #1
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	889b      	ldrh	r3, [r3, #4]
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f001 f9d6 	bl	8003d04 <HAL_GPIO_ReadPin>
 8002958:	0003      	movs	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <DHT_getData+0x23e>
 800295e:	2320      	movs	r3, #32
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	4a3f      	ldr	r2, [pc, #252]	@ (8002a64 <DHT_getData+0x338>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d1e8      	bne.n	800293c <DHT_getData+0x210>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 800296a:	2320      	movs	r3, #32
 800296c:	18fa      	adds	r2, r7, r3
 800296e:	231e      	movs	r3, #30
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	8812      	ldrh	r2, [r2, #0]
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d914      	bls.n	80029a4 <DHT_getData+0x278>
 800297a:	2023      	movs	r0, #35	@ 0x23
 800297c:	183b      	adds	r3, r7, r0
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	240c      	movs	r4, #12
 8002982:	193a      	adds	r2, r7, r4
 8002984:	5cd3      	ldrb	r3, [r2, r3]
 8002986:	b25a      	sxtb	r2, r3
 8002988:	2322      	movs	r3, #34	@ 0x22
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	4099      	lsls	r1, r3
 8002992:	000b      	movs	r3, r1
 8002994:	b25b      	sxtb	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	b25a      	sxtb	r2, r3
 800299a:	183b      	adds	r3, r7, r0
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b2d1      	uxtb	r1, r2
 80029a0:	193a      	adds	r2, r7, r4
 80029a2:	54d1      	strb	r1, [r2, r3]
		for(uint8_t b = 7; b != 255; b--) {
 80029a4:	2122      	movs	r1, #34	@ 0x22
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	187b      	adds	r3, r7, r1
 80029ac:	3a01      	subs	r2, #1
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	2322      	movs	r3, #34	@ 0x22
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2bff      	cmp	r3, #255	@ 0xff
 80029b8:	d19b      	bne.n	80028f2 <DHT_getData+0x1c6>
	for(uint8_t a = 0; a < 5; a++) {
 80029ba:	2123      	movs	r1, #35	@ 0x23
 80029bc:	187b      	adds	r3, r7, r1
 80029be:	781a      	ldrb	r2, [r3, #0]
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	3201      	adds	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	2323      	movs	r3, #35	@ 0x23
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d98b      	bls.n	80028e8 <DHT_getData+0x1bc>
  __ASM volatile ("cpsie i" : : : "memory");
 80029d0:	b662      	cpsie	i
}
 80029d2:	46c0      	nop			@ (mov r8, r8)
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 80029d4:	240c      	movs	r4, #12
 80029d6:	193b      	adds	r3, r7, r4
 80029d8:	781a      	ldrb	r2, [r3, #0]
 80029da:	193b      	adds	r3, r7, r4
 80029dc:	785b      	ldrb	r3, [r3, #1]
 80029de:	18d3      	adds	r3, r2, r3
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	193b      	adds	r3, r7, r4
 80029e4:	789b      	ldrb	r3, [r3, #2]
 80029e6:	18d3      	adds	r3, r2, r3
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	193b      	adds	r3, r7, r4
 80029ec:	78db      	ldrb	r3, [r3, #3]
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	791b      	ldrb	r3, [r3, #4]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d16a      	bne.n	8002ad0 <DHT_getData+0x3a4>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	799b      	ldrb	r3, [r3, #6]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d150      	bne.n	8002aa4 <DHT_getData+0x378>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	193a      	adds	r2, r7, r4
 8002a0a:	7852      	ldrb	r2, [r2, #1]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fd fe88 	bl	8000724 <__aeabi_i2f>
 8002a14:	1c03      	adds	r3, r0, #0
 8002a16:	4914      	ldr	r1, [pc, #80]	@ (8002a68 <DHT_getData+0x33c>)
 8002a18:	1c18      	adds	r0, r3, #0
 8002a1a:	f7fd fd45 	bl	80004a8 <__aeabi_fmul>
 8002a1e:	1c03      	adds	r3, r0, #0
 8002a20:	1c1a      	adds	r2, r3, #0
 8002a22:	2514      	movs	r5, #20
 8002a24:	197b      	adds	r3, r7, r5
 8002a26:	601a      	str	r2, [r3, #0]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	789b      	ldrb	r3, [r3, #2]
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db1c      	blt.n	8002a6c <DHT_getData+0x340>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	789b      	ldrb	r3, [r3, #2]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	193a      	adds	r2, r7, r4
 8002a3a:	78d2      	ldrb	r2, [r2, #3]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd fe70 	bl	8000724 <__aeabi_i2f>
 8002a44:	1c03      	adds	r3, r0, #0
 8002a46:	4908      	ldr	r1, [pc, #32]	@ (8002a68 <DHT_getData+0x33c>)
 8002a48:	1c18      	adds	r0, r3, #0
 8002a4a:	f7fd fd2d 	bl	80004a8 <__aeabi_fmul>
 8002a4e:	1c03      	adds	r3, r0, #0
 8002a50:	1c1a      	adds	r2, r3, #0
 8002a52:	197b      	adds	r3, r7, r5
 8002a54:	605a      	str	r2, [r3, #4]
 8002a56:	e025      	b.n	8002aa4 <DHT_getData+0x378>
 8002a58:	08008068 	.word	0x08008068
 8002a5c:	00002710 	.word	0x00002710
 8002a60:	08008070 	.word	0x08008070
 8002a64:	0000ffff 	.word	0x0000ffff
 8002a68:	3dcccccd 	.word	0x3dcccccd
			}	else {
				rawData[2] &= ~(1<<7);
 8002a6c:	210c      	movs	r1, #12
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	789b      	ldrb	r3, [r3, #2]
 8002a72:	227f      	movs	r2, #127	@ 0x7f
 8002a74:	4013      	ands	r3, r2
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	709a      	strb	r2, [r3, #2]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	789b      	ldrb	r3, [r3, #2]
 8002a82:	021b      	lsls	r3, r3, #8
 8002a84:	18ba      	adds	r2, r7, r2
 8002a86:	78d2      	ldrb	r2, [r2, #3]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f7fd fe4a 	bl	8000724 <__aeabi_i2f>
 8002a90:	1c03      	adds	r3, r0, #0
 8002a92:	4918      	ldr	r1, [pc, #96]	@ (8002af4 <DHT_getData+0x3c8>)
 8002a94:	1c18      	adds	r0, r3, #0
 8002a96:	f7fd fd07 	bl	80004a8 <__aeabi_fmul>
 8002a9a:	1c03      	adds	r3, r0, #0
 8002a9c:	1c1a      	adds	r2, r3, #0
 8002a9e:	2314      	movs	r3, #20
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	605a      	str	r2, [r3, #4]
			}
		}
		if (sensor->type == DHT11) {
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	799b      	ldrb	r3, [r3, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <DHT_getData+0x3a4>
			data.hum = (float)rawData[0];
 8002aac:	240c      	movs	r4, #12
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7fd fe82 	bl	80007bc <__aeabi_ui2f>
 8002ab8:	1c02      	adds	r2, r0, #0
 8002aba:	2514      	movs	r5, #20
 8002abc:	197b      	adds	r3, r7, r5
 8002abe:	601a      	str	r2, [r3, #0]
			data.temp = (float)rawData[2];
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	789b      	ldrb	r3, [r3, #2]
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7fd fe79 	bl	80007bc <__aeabi_ui2f>
 8002aca:	1c02      	adds	r2, r0, #0
 8002acc:	197b      	adds	r3, r7, r5
 8002ace:	605a      	str	r2, [r3, #4]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8002ad0:	2114      	movs	r1, #20
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	187a      	adds	r2, r7, r1
 8002ae6:	ca03      	ldmia	r2!, {r0, r1}
 8002ae8:	c303      	stmia	r3!, {r0, r1}
}
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b00a      	add	sp, #40	@ 0x28
 8002af0:	bdb0      	pop	{r4, r5, r7, pc}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	bdcccccd 	.word	0xbdcccccd

08002af8 <lcd.0>:
  /* USER CODE BEGIN 2 */
  st7567a_Init();
  static DHT_sensor livingRoom = {GPIOA, GPIO_PIN_0, DHT22, GPIO_PULLUP};
  HAL_Delay(1000);

  void lcd(uint8_t x, uint8_t y, uint8_t font, char msg[]){
 8002af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	0004      	movs	r4, r0
 8002b00:	0008      	movs	r0, r1
 8002b02:	0011      	movs	r1, r2
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	250f      	movs	r5, #15
 8002b08:	197b      	adds	r3, r7, r5
 8002b0a:	1c22      	adds	r2, r4, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	240e      	movs	r4, #14
 8002b10:	193b      	adds	r3, r7, r4
 8002b12:	1c02      	adds	r2, r0, #0
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	260d      	movs	r6, #13
 8002b18:	19bb      	adds	r3, r7, r6
 8002b1a:	1c0a      	adds	r2, r1, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	4663      	mov	r3, ip
 8002b20:	607b      	str	r3, [r7, #4]
	  st7567a_SetCursor(x, y);
 8002b22:	193b      	adds	r3, r7, r4
 8002b24:	781a      	ldrb	r2, [r3, #0]
 8002b26:	197b      	adds	r3, r7, r5
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fb5d 	bl	80031ec <st7567a_SetCursor>
	  if		(font==1){st7567a_WriteString(msg, FontStyle_RetroVilleNC_9, PIXEL_ON);}
 8002b32:	19bb      	adds	r3, r7, r6
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d10c      	bne.n	8002b54 <lcd.0+0x5c>
 8002b3a:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <lcd.0+0x88>)
 8002b3c:	68b8      	ldr	r0, [r7, #8]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	9201      	str	r2, [sp, #4]
 8002b42:	466a      	mov	r2, sp
 8002b44:	68d9      	ldr	r1, [r3, #12]
 8002b46:	6011      	str	r1, [r2, #0]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f000 fc5f 	bl	8003410 <st7567a_WriteString>
	  else if	(font==2){st7567a_WriteString(msg, FontStyle_videotype_18, PIXEL_ON);}
  }
 8002b52:	e010      	b.n	8002b76 <lcd.0+0x7e>
	  else if	(font==2){st7567a_WriteString(msg, FontStyle_videotype_18, PIXEL_ON);}
 8002b54:	230d      	movs	r3, #13
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d10b      	bne.n	8002b76 <lcd.0+0x7e>
 8002b5e:	4b09      	ldr	r3, [pc, #36]	@ (8002b84 <lcd.0+0x8c>)
 8002b60:	68b8      	ldr	r0, [r7, #8]
 8002b62:	2201      	movs	r2, #1
 8002b64:	9201      	str	r2, [sp, #4]
 8002b66:	466a      	mov	r2, sp
 8002b68:	68d9      	ldr	r1, [r3, #12]
 8002b6a:	6011      	str	r1, [r2, #0]
 8002b6c:	6819      	ldr	r1, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f000 fc4d 	bl	8003410 <st7567a_WriteString>
  }
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b005      	add	sp, #20
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	20000010 	.word	0x20000010
 8002b84:	20000000 	.word	0x20000000

08002b88 <main>:
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b08f      	sub	sp, #60	@ 0x3c
 8002b8c:	af00      	add	r7, sp, #0
int main(void)
 8002b8e:	2340      	movs	r3, #64	@ 0x40
 8002b90:	2210      	movs	r2, #16
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	19db      	adds	r3, r3, r7
 8002b96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_Init();
 8002b98:	f000 fe08 	bl	80037ac <HAL_Init>
  SystemClock_Config();
 8002b9c:	f000 f880 	bl	8002ca0 <SystemClock_Config>
  MX_GPIO_Init();
 8002ba0:	f000 f95e 	bl	8002e60 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ba4:	f000 f8c6 	bl	8002d34 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002ba8:	f000 f902 	bl	8002db0 <MX_TIM1_Init>
  st7567a_Init();
 8002bac:	f000 fa2c 	bl	8003008 <st7567a_Init>
  HAL_Delay(1000);
 8002bb0:	23fa      	movs	r3, #250	@ 0xfa
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f000 fe5d 	bl	8003874 <HAL_Delay>
  uint8_t x = 21;
 8002bba:	2337      	movs	r3, #55	@ 0x37
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2215      	movs	r2, #21
 8002bc0:	701a      	strb	r2, [r3, #0]
  int8_t increment = 1;
 8002bc2:	2336      	movs	r3, #54	@ 0x36
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  st7567a_Fill(0);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f000 fa4a 	bl	8003064 <st7567a_Fill>
	  lcd(x, 3, 2, "35 years");
 8002bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c8c <main+0x104>)
 8002bd2:	2437      	movs	r4, #55	@ 0x37
 8002bd4:	193b      	adds	r3, r7, r4
 8002bd6:	7818      	ldrb	r0, [r3, #0]
 8002bd8:	2530      	movs	r5, #48	@ 0x30
 8002bda:	197b      	adds	r3, r7, r5
 8002bdc:	469c      	mov	ip, r3
 8002bde:	0013      	movs	r3, r2
 8002be0:	2202      	movs	r2, #2
 8002be2:	2103      	movs	r1, #3
 8002be4:	f7ff ff88 	bl	8002af8 <lcd.0>

	  char msg[40];
      DHT_data d = DHT_getData(&livingRoom);
 8002be8:	2628      	movs	r6, #40	@ 0x28
 8002bea:	19bb      	adds	r3, r7, r6
 8002bec:	4a28      	ldr	r2, [pc, #160]	@ (8002c90 <main+0x108>)
 8002bee:	0011      	movs	r1, r2
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fd9b 	bl	800272c <DHT_getData>
      sprintf(msg, " % 3.1f°C", d.temp);
 8002bf6:	19bb      	adds	r3, r7, r6
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	1c18      	adds	r0, r3, #0
 8002bfc:	f7ff fcdc 	bl	80025b8 <__aeabi_f2d>
 8002c00:	0002      	movs	r2, r0
 8002c02:	000b      	movs	r3, r1
 8002c04:	4923      	ldr	r1, [pc, #140]	@ (8002c94 <main+0x10c>)
 8002c06:	0038      	movs	r0, r7
 8002c08:	f003 f842 	bl	8005c90 <siprintf>
      lcd(x, 23, 2, msg);
 8002c0c:	003a      	movs	r2, r7
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	7818      	ldrb	r0, [r3, #0]
 8002c12:	197b      	adds	r3, r7, r5
 8002c14:	469c      	mov	ip, r3
 8002c16:	0013      	movs	r3, r2
 8002c18:	2202      	movs	r2, #2
 8002c1a:	2117      	movs	r1, #23
 8002c1c:	f7ff ff6c 	bl	8002af8 <lcd.0>
      sprintf(msg, " % 3.1f%%", d.hum);
 8002c20:	19bb      	adds	r3, r7, r6
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	1c18      	adds	r0, r3, #0
 8002c26:	f7ff fcc7 	bl	80025b8 <__aeabi_f2d>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	000b      	movs	r3, r1
 8002c2e:	491a      	ldr	r1, [pc, #104]	@ (8002c98 <main+0x110>)
 8002c30:	0038      	movs	r0, r7
 8002c32:	f003 f82d 	bl	8005c90 <siprintf>
      lcd(x, 43, 2, msg);
 8002c36:	003a      	movs	r2, r7
 8002c38:	193b      	adds	r3, r7, r4
 8002c3a:	7818      	ldrb	r0, [r3, #0]
 8002c3c:	197b      	adds	r3, r7, r5
 8002c3e:	469c      	mov	ip, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	2202      	movs	r2, #2
 8002c44:	212b      	movs	r1, #43	@ 0x2b
 8002c46:	f7ff ff57 	bl	8002af8 <lcd.0>

	  x += increment;
 8002c4a:	2036      	movs	r0, #54	@ 0x36
 8002c4c:	183b      	adds	r3, r7, r0
 8002c4e:	7819      	ldrb	r1, [r3, #0]
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	193a      	adds	r2, r7, r4
 8002c54:	7812      	ldrb	r2, [r2, #0]
 8002c56:	188a      	adds	r2, r1, r2
 8002c58:	701a      	strb	r2, [r3, #0]
	  if (x == 42) {increment = -1;} else if (x == 0) {increment = 1;}
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c60:	d103      	bne.n	8002c6a <main+0xe2>
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	22ff      	movs	r2, #255	@ 0xff
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e008      	b.n	8002c7c <main+0xf4>
 8002c6a:	2337      	movs	r3, #55	@ 0x37
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d103      	bne.n	8002c7c <main+0xf4>
 8002c74:	2336      	movs	r3, #54	@ 0x36
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
	  st7567a_Display();
 8002c7c:	f000 fa22 	bl	80030c4 <st7567a_Display>
	  HAL_Delay(10000);
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <main+0x114>)
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 fdf6 	bl	8003874 <HAL_Delay>
  {
 8002c88:	e79f      	b.n	8002bca <main+0x42>
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	08008078 	.word	0x08008078
 8002c90:	20000020 	.word	0x20000020
 8002c94:	08008084 	.word	0x08008084
 8002c98:	08008090 	.word	0x08008090
 8002c9c:	00002710 	.word	0x00002710

08002ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b091      	sub	sp, #68	@ 0x44
 8002ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ca6:	2410      	movs	r4, #16
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	0018      	movs	r0, r3
 8002cac:	2330      	movs	r3, #48	@ 0x30
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	f003 f859 	bl	8005d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cb6:	003b      	movs	r3, r7
 8002cb8:	0018      	movs	r0, r3
 8002cba:	2310      	movs	r3, #16
 8002cbc:	001a      	movs	r2, r3
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	f003 f852 	bl	8005d68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cc4:	0021      	movs	r1, r4
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2202      	movs	r2, #2
 8002cca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2201      	movs	r2, #1
 8002cd0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2202      	movs	r2, #2
 8002cdc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cde:	187b      	adds	r3, r7, r1
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002ce4:	187b      	adds	r3, r7, r1
 8002ce6:	2280      	movs	r2, #128	@ 0x80
 8002ce8:	0312      	lsls	r2, r2, #12
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f001 f83f 	bl	8003d78 <HAL_RCC_OscConfig>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8002cfe:	f000 f911 	bl	8002f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d02:	003b      	movs	r3, r7
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d08:	003b      	movs	r3, r7
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002d0e:	003b      	movs	r3, r7
 8002d10:	2280      	movs	r2, #128	@ 0x80
 8002d12:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d14:	003b      	movs	r3, r7
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d1a:	003b      	movs	r3, r7
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f001 fb44 	bl	80043ac <HAL_RCC_ClockConfig>
 8002d24:	1e03      	subs	r3, r0, #0
 8002d26:	d001      	beq.n	8002d2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d28:	f000 f8fc 	bl	8002f24 <Error_Handler>
  }
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b011      	add	sp, #68	@ 0x44
 8002d32:	bd90      	pop	{r4, r7, pc}

08002d34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dac <MX_SPI1_Init+0x78>)
 8002d3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d40:	2282      	movs	r2, #130	@ 0x82
 8002d42:	0052      	lsls	r2, r2, #1
 8002d44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d46:	4b18      	ldr	r3, [pc, #96]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d4e:	22e0      	movs	r2, #224	@ 0xe0
 8002d50:	00d2      	lsls	r2, r2, #3
 8002d52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d54:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d60:	4b11      	ldr	r3, [pc, #68]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d62:	2280      	movs	r2, #128	@ 0x80
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002d68:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002d80:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d82:	2207      	movs	r2, #7
 8002d84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d86:	4b08      	ldr	r3, [pc, #32]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d8e:	2208      	movs	r2, #8
 8002d90:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d92:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <MX_SPI1_Init+0x74>)
 8002d94:	0018      	movs	r0, r3
 8002d96:	f001 fc2d 	bl	80045f4 <HAL_SPI_Init>
 8002d9a:	1e03      	subs	r3, r0, #0
 8002d9c:	d001      	beq.n	8002da2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002d9e:	f000 f8c1 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002da2:	46c0      	nop			@ (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000224 	.word	0x20000224
 8002dac:	40013000 	.word	0x40013000

08002db0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db6:	2308      	movs	r3, #8
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	0018      	movs	r0, r3
 8002dbc:	2310      	movs	r3, #16
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f002 ffd1 	bl	8005d68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	0018      	movs	r0, r3
 8002dca:	2308      	movs	r3, #8
 8002dcc:	001a      	movs	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f002 ffca 	bl	8005d68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002dd6:	4a20      	ldr	r2, [pc, #128]	@ (8002e58 <MX_TIM1_Init+0xa8>)
 8002dd8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002ddc:	220f      	movs	r2, #15
 8002dde:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002de6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002de8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <MX_TIM1_Init+0xac>)
 8002dea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dec:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002df2:	4b18      	ldr	r3, [pc, #96]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df8:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002dfe:	4b15      	ldr	r3, [pc, #84]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f001 ff85 	bl	8004d10 <HAL_TIM_Base_Init>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8002e0a:	f000 f88b 	bl	8002f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e0e:	2108      	movs	r1, #8
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2280      	movs	r2, #128	@ 0x80
 8002e14:	0152      	lsls	r2, r2, #5
 8002e16:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e18:	187a      	adds	r2, r7, r1
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f001 ffc6 	bl	8004db0 <HAL_TIM_ConfigClockSource>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d001      	beq.n	8002e2c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002e28:	f000 f87c 	bl	8002f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e2c:	003b      	movs	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e32:	003b      	movs	r3, r7
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e38:	003a      	movs	r2, r7
 8002e3a:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_TIM1_Init+0xa4>)
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f002 f9a8 	bl	8005194 <HAL_TIMEx_MasterConfigSynchronization>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002e48:	f000 f86c 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002e4c:	46c0      	nop			@ (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b006      	add	sp, #24
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000288 	.word	0x20000288
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	0000ffff 	.word	0x0000ffff

08002e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e60:	b590      	push	{r4, r7, lr}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e66:	240c      	movs	r4, #12
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	2314      	movs	r3, #20
 8002e6e:	001a      	movs	r2, r3
 8002e70:	2100      	movs	r1, #0
 8002e72:	f002 ff79 	bl	8005d68 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e76:	4b2a      	ldr	r3, [pc, #168]	@ (8002f20 <MX_GPIO_Init+0xc0>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	4b29      	ldr	r3, [pc, #164]	@ (8002f20 <MX_GPIO_Init+0xc0>)
 8002e7c:	2180      	movs	r1, #128	@ 0x80
 8002e7e:	03c9      	lsls	r1, r1, #15
 8002e80:	430a      	orrs	r2, r1
 8002e82:	615a      	str	r2, [r3, #20]
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <MX_GPIO_Init+0xc0>)
 8002e86:	695a      	ldr	r2, [r3, #20]
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	03db      	lsls	r3, r3, #15
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <MX_GPIO_Init+0xc0>)
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <MX_GPIO_Init+0xc0>)
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	0289      	lsls	r1, r1, #10
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	615a      	str	r2, [r3, #20]
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <MX_GPIO_Init+0xc0>)
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	2380      	movs	r3, #128	@ 0x80
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT22_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8002eae:	2390      	movs	r3, #144	@ 0x90
 8002eb0:	05db      	lsls	r3, r3, #23
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2141      	movs	r1, #65	@ 0x41
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 ff41 	bl	8003d3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8002ebc:	2390      	movs	r3, #144	@ 0x90
 8002ebe:	05db      	lsls	r3, r3, #23
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	2118      	movs	r1, #24
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 ff3a 	bl	8003d3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT22_Pin */
  GPIO_InitStruct.Pin = DHT22_Pin;
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed0:	193b      	adds	r3, r7, r4
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	2201      	movs	r2, #1
 8002eda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2200      	movs	r2, #0
 8002ee0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DHT22_GPIO_Port, &GPIO_InitStruct);
 8002ee2:	193a      	adds	r2, r7, r4
 8002ee4:	2390      	movs	r3, #144	@ 0x90
 8002ee6:	05db      	lsls	r3, r3, #23
 8002ee8:	0011      	movs	r1, r2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 fd9a 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin|LCD_DC_Pin;
 8002ef0:	0021      	movs	r1, r4
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	2258      	movs	r2, #88	@ 0x58
 8002ef6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	2201      	movs	r2, #1
 8002efc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	187b      	adds	r3, r7, r1
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0a:	187a      	adds	r2, r7, r1
 8002f0c:	2390      	movs	r3, #144	@ 0x90
 8002f0e:	05db      	lsls	r3, r3, #23
 8002f10:	0011      	movs	r1, r2
 8002f12:	0018      	movs	r0, r3
 8002f14:	f000 fd86 	bl	8003a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b009      	add	sp, #36	@ 0x24
 8002f1e:	bd90      	pop	{r4, r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f28:	b672      	cpsid	i
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	e7fd      	b.n	8002f2c <Error_Handler+0x8>

08002f30 <st7567a_Reset>:

static uint8_t ST7567A_buffer[ST7567A_BUFFER_SIZE];
static ST7567A_pos_t ST7567A;

// ----------------------------------------------------------------------------
void st7567a_Reset(void) {
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7567A_RST_GPIO_Port, ST7567A_RST_Pin, GPIO_PIN_RESET);			// reset low
 8002f34:	2390      	movs	r3, #144	@ 0x90
 8002f36:	05db      	lsls	r3, r3, #23
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 fefe 	bl	8003d3e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002f42:	2005      	movs	r0, #5
 8002f44:	f000 fc96 	bl	8003874 <HAL_Delay>
	HAL_GPIO_WritePin(ST7567A_RST_GPIO_Port, ST7567A_RST_Pin, GPIO_PIN_SET);				// reset high
 8002f48:	2390      	movs	r3, #144	@ 0x90
 8002f4a:	05db      	lsls	r3, r3, #23
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2110      	movs	r1, #16
 8002f50:	0018      	movs	r0, r3
 8002f52:	f000 fef4 	bl	8003d3e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002f56:	2005      	movs	r0, #5
 8002f58:	f000 fc8c 	bl	8003874 <HAL_Delay>
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <st7567a_WriteCommand>:

void st7567a_WriteCommand(uint8_t byte) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_RESET);				// chip select
 8002f70:	2390      	movs	r3, #144	@ 0x90
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	2200      	movs	r2, #0
 8002f76:	2108      	movs	r1, #8
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fee0 	bl	8003d3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ST7567A_DC_GPIO_Port, ST7567A_DC_Pin, GPIO_PIN_RESET);				// byte is command
 8002f7e:	2390      	movs	r3, #144	@ 0x90
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	2200      	movs	r2, #0
 8002f84:	2140      	movs	r1, #64	@ 0x40
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fed9 	bl	8003d3e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7567A_SPI_PORT, &byte, 1, ST7567A_TIMEOUT);
 8002f8c:	1df9      	adds	r1, r7, #7
 8002f8e:	4808      	ldr	r0, [pc, #32]	@ (8002fb0 <st7567a_WriteCommand+0x4c>)
 8002f90:	2364      	movs	r3, #100	@ 0x64
 8002f92:	2201      	movs	r2, #1
 8002f94:	f001 fbe6 	bl	8004764 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_SET);					// chip unselect
 8002f98:	2390      	movs	r3, #144	@ 0x90
 8002f9a:	05db      	lsls	r3, r3, #23
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2108      	movs	r1, #8
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fecc 	bl	8003d3e <HAL_GPIO_WritePin>
}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	b002      	add	sp, #8
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	46c0      	nop			@ (mov r8, r8)
 8002fb0:	20000224 	.word	0x20000224

08002fb4 <st7567a_WriteData>:

void st7567a_WriteData(uint8_t* buffer, uint8_t size) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	000a      	movs	r2, r1
 8002fbe:	1cfb      	adds	r3, r7, #3
 8002fc0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_RESET);				// chip select
 8002fc2:	2390      	movs	r3, #144	@ 0x90
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2108      	movs	r1, #8
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f000 feb7 	bl	8003d3e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ST7567A_DC_GPIO_Port, ST7567A_DC_Pin, GPIO_PIN_SET);					// byte is display data
 8002fd0:	2390      	movs	r3, #144	@ 0x90
 8002fd2:	05db      	lsls	r3, r3, #23
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	2140      	movs	r1, #64	@ 0x40
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 feb0 	bl	8003d3e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7567A_SPI_PORT, buffer, size, ST7567A_TIMEOUT);
 8002fde:	1cfb      	adds	r3, r7, #3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4807      	ldr	r0, [pc, #28]	@ (8003004 <st7567a_WriteData+0x50>)
 8002fe8:	2364      	movs	r3, #100	@ 0x64
 8002fea:	f001 fbbb 	bl	8004764 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ST7567A_CS_GPIO_Port, ST7567A_CS_Pin, GPIO_PIN_SET);					// chip unselect
 8002fee:	2390      	movs	r3, #144	@ 0x90
 8002ff0:	05db      	lsls	r3, r3, #23
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	f000 fea1 	bl	8003d3e <HAL_GPIO_WritePin>
}
 8002ffc:	46c0      	nop			@ (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000224 	.word	0x20000224

08003008 <st7567a_Init>:

// ----------------------------------------------------------------------------
void st7567a_Init(void) {
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	st7567a_Reset();
 800300c:	f7ff ff90 	bl	8002f30 <st7567a_Reset>

	st7567a_WriteCommand(ST7567A_BIAS9);
 8003010:	20a2      	movs	r0, #162	@ 0xa2
 8003012:	f7ff ffa7 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_SEG_NORMAL);
 8003016:	20a0      	movs	r0, #160	@ 0xa0
 8003018:	f7ff ffa4 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_COM_REVERSE);
 800301c:	20c8      	movs	r0, #200	@ 0xc8
 800301e:	f7ff ffa1 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_SET_RR | 0x4);		// regulation ratio 5.0
 8003022:	2024      	movs	r0, #36	@ 0x24
 8003024:	f7ff ff9e 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_SET_EV_CMD);
 8003028:	2081      	movs	r0, #129	@ 0x81
 800302a:	f7ff ff9b 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(38);											// set EV=38
 800302e:	2026      	movs	r0, #38	@ 0x26
 8003030:	f7ff ff98 	bl	8002f64 <st7567a_WriteCommand>

	st7567a_WriteCommand(ST7567A_POWER_CONTROL | ST7567A_PWR_BOOSTER_ON);
 8003034:	202c      	movs	r0, #44	@ 0x2c
 8003036:	f7ff ff95 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_POWER_CONTROL | ST7567A_PWR_BOOSTER_ON | ST7567A_PWR_REGULATOR_ON);
 800303a:	202e      	movs	r0, #46	@ 0x2e
 800303c:	f7ff ff92 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_POWER_CONTROL | ST7567A_PWR_BOOSTER_ON | ST7567A_PWR_REGULATOR_ON | ST7567A_PWR_FOLLOWER_ON);
 8003040:	202f      	movs	r0, #47	@ 0x2f
 8003042:	f7ff ff8f 	bl	8002f64 <st7567a_WriteCommand>

	st7567a_Fill(PIXEL_OFF);
 8003046:	2000      	movs	r0, #0
 8003048:	f000 f80c 	bl	8003064 <st7567a_Fill>
	st7567a_Display();
 800304c:	f000 f83a 	bl	80030c4 <st7567a_Display>
	st7567a_WriteCommand(ST7567A_DISPLAY_DRAM);
 8003050:	20a4      	movs	r0, #164	@ 0xa4
 8003052:	f7ff ff87 	bl	8002f64 <st7567a_WriteCommand>
	st7567a_WriteCommand(ST7567A_DISPLAY_ON);
 8003056:	20af      	movs	r0, #175	@ 0xaf
 8003058:	f7ff ff84 	bl	8002f64 <st7567a_WriteCommand>
}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <st7567a_Fill>:

void st7567a_Fill(ST7567A_PixelState_t state) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	0002      	movs	r2, r0
 800306c:	1dfb      	adds	r3, r7, #7
 800306e:	701a      	strb	r2, [r3, #0]
	uint8_t val = (state == PIXEL_ON) ? 0xFF : 0x00;
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <st7567a_Fill+0x18>
 8003078:	22ff      	movs	r2, #255	@ 0xff
 800307a:	e000      	b.n	800307e <st7567a_Fill+0x1a>
 800307c:	2200      	movs	r2, #0
 800307e:	230d      	movs	r3, #13
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	701a      	strb	r2, [r3, #0]

	for(uint16_t i = 0; i < ST7567A_BUFFER_SIZE; ++i) {
 8003084:	230e      	movs	r3, #14
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2200      	movs	r2, #0
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	e00c      	b.n	80030a8 <st7567a_Fill+0x44>
		ST7567A_buffer[i] = val;
 800308e:	200e      	movs	r0, #14
 8003090:	183b      	adds	r3, r7, r0
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <st7567a_Fill+0x5c>)
 8003096:	210d      	movs	r1, #13
 8003098:	1879      	adds	r1, r7, r1
 800309a:	7809      	ldrb	r1, [r1, #0]
 800309c:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i < ST7567A_BUFFER_SIZE; ++i) {
 800309e:	183b      	adds	r3, r7, r0
 80030a0:	183a      	adds	r2, r7, r0
 80030a2:	8812      	ldrh	r2, [r2, #0]
 80030a4:	3201      	adds	r2, #1
 80030a6:	801a      	strh	r2, [r3, #0]
 80030a8:	230e      	movs	r3, #14
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	881a      	ldrh	r2, [r3, #0]
 80030ae:	2380      	movs	r3, #128	@ 0x80
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3eb      	bcc.n	800308e <st7567a_Fill+0x2a>
	}
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46c0      	nop			@ (mov r8, r8)
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	200002d0 	.word	0x200002d0

080030c4 <st7567a_Display>:

void st7567a_Display(void) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
	st7567a_WriteCommand(ST7567A_SET_START_LINE);
 80030ca:	2040      	movs	r0, #64	@ 0x40
 80030cc:	f7ff ff4a 	bl	8002f64 <st7567a_WriteCommand>

	for(uint8_t i = 0; i < ST7567A_HEIGHT/8; i++) {
 80030d0:	1dfb      	adds	r3, r7, #7
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e01a      	b.n	800310e <st7567a_Display+0x4a>
		st7567a_WriteCommand(ST7567A_PAGE_ADDR + i); 				// set DDRAM page
 80030d8:	1dfb      	adds	r3, r7, #7
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	3b50      	subs	r3, #80	@ 0x50
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	0018      	movs	r0, r3
 80030e2:	f7ff ff3f 	bl	8002f64 <st7567a_WriteCommand>
		st7567a_WriteCommand(ST7567A_COL_ADDR_H);						// set MSB column address
 80030e6:	2010      	movs	r0, #16
 80030e8:	f7ff ff3c 	bl	8002f64 <st7567a_WriteCommand>
		st7567a_WriteCommand(ST7567A_COL_ADDR_L);						// set LSB column address
 80030ec:	2000      	movs	r0, #0
 80030ee:	f7ff ff39 	bl	8002f64 <st7567a_WriteCommand>
		st7567a_WriteData(&ST7567A_buffer[ST7567A_WIDTH * i], ST7567A_WIDTH);
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	01da      	lsls	r2, r3, #7
 80030f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <st7567a_Display+0x60>)
 80030fa:	18d3      	adds	r3, r2, r3
 80030fc:	2180      	movs	r1, #128	@ 0x80
 80030fe:	0018      	movs	r0, r3
 8003100:	f7ff ff58 	bl	8002fb4 <st7567a_WriteData>
	for(uint8_t i = 0; i < ST7567A_HEIGHT/8; i++) {
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781a      	ldrb	r2, [r3, #0]
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	3201      	adds	r2, #1
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b07      	cmp	r3, #7
 8003114:	d9e0      	bls.n	80030d8 <st7567a_Display+0x14>
	}
	st7567a_WriteCommand(ST7567A_DISPLAY_ON);
 8003116:	20af      	movs	r0, #175	@ 0xaf
 8003118:	f7ff ff24 	bl	8002f64 <st7567a_WriteCommand>
}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200002d0 	.word	0x200002d0

08003128 <st7567a_DrawPixel>:
		st7567a_WriteCommand(ST7567A_DISPLAY_DRAM);
		st7567a_WriteCommand(ST7567A_DISPLAY_ON);
	}
}

void st7567a_DrawPixel(uint8_t x, uint8_t y, ST7567A_PixelState_t state) {
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	0004      	movs	r4, r0
 8003130:	0008      	movs	r0, r1
 8003132:	0011      	movs	r1, r2
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	1c22      	adds	r2, r4, #0
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	1dbb      	adds	r3, r7, #6
 800313c:	1c02      	adds	r2, r0, #0
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	1d7b      	adds	r3, r7, #5
 8003142:	1c0a      	adds	r2, r1, #0
 8003144:	701a      	strb	r2, [r3, #0]
	if(x >= ST7567A_WIDTH || y >= ST7567A_HEIGHT) {
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b25b      	sxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	db47      	blt.n	80031e0 <st7567a_DrawPixel+0xb8>
 8003150:	1dbb      	adds	r3, r7, #6
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b3f      	cmp	r3, #63	@ 0x3f
 8003156:	d843      	bhi.n	80031e0 <st7567a_DrawPixel+0xb8>
		return;
	}

	// Draw in the right color
	if(state == PIXEL_ON) {
 8003158:	1d7b      	adds	r3, r7, #5
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d11e      	bne.n	800319e <st7567a_DrawPixel+0x76>
		ST7567A_buffer[x + (y / 8) * ST7567A_WIDTH] |= 1 << (y % 8);
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	781a      	ldrb	r2, [r3, #0]
 8003164:	1dbb      	adds	r3, r7, #6
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	b2d8      	uxtb	r0, r3
 800316c:	0003      	movs	r3, r0
 800316e:	01db      	lsls	r3, r3, #7
 8003170:	18d3      	adds	r3, r2, r3
 8003172:	4a1d      	ldr	r2, [pc, #116]	@ (80031e8 <st7567a_DrawPixel+0xc0>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	b25a      	sxtb	r2, r3
 8003178:	1dbb      	adds	r3, r7, #6
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2107      	movs	r1, #7
 800317e:	400b      	ands	r3, r1
 8003180:	2101      	movs	r1, #1
 8003182:	4099      	lsls	r1, r3
 8003184:	000b      	movs	r3, r1
 8003186:	b25b      	sxtb	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b259      	sxtb	r1, r3
 800318c:	1dfb      	adds	r3, r7, #7
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	0003      	movs	r3, r0
 8003192:	01db      	lsls	r3, r3, #7
 8003194:	18d3      	adds	r3, r2, r3
 8003196:	b2c9      	uxtb	r1, r1
 8003198:	4a13      	ldr	r2, [pc, #76]	@ (80031e8 <st7567a_DrawPixel+0xc0>)
 800319a:	54d1      	strb	r1, [r2, r3]
 800319c:	e021      	b.n	80031e2 <st7567a_DrawPixel+0xba>
	} else {
		ST7567A_buffer[x + (y / 8) * ST7567A_WIDTH] &= ~(1 << (y % 8));
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	1dbb      	adds	r3, r7, #6
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	08db      	lsrs	r3, r3, #3
 80031a8:	b2d8      	uxtb	r0, r3
 80031aa:	0003      	movs	r3, r0
 80031ac:	01db      	lsls	r3, r3, #7
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	4a0d      	ldr	r2, [pc, #52]	@ (80031e8 <st7567a_DrawPixel+0xc0>)
 80031b2:	5cd3      	ldrb	r3, [r2, r3]
 80031b4:	b25b      	sxtb	r3, r3
 80031b6:	1dba      	adds	r2, r7, #6
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	2107      	movs	r1, #7
 80031bc:	400a      	ands	r2, r1
 80031be:	2101      	movs	r1, #1
 80031c0:	4091      	lsls	r1, r2
 80031c2:	000a      	movs	r2, r1
 80031c4:	b252      	sxtb	r2, r2
 80031c6:	43d2      	mvns	r2, r2
 80031c8:	b252      	sxtb	r2, r2
 80031ca:	4013      	ands	r3, r2
 80031cc:	b259      	sxtb	r1, r3
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	0003      	movs	r3, r0
 80031d4:	01db      	lsls	r3, r3, #7
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	b2c9      	uxtb	r1, r1
 80031da:	4a03      	ldr	r2, [pc, #12]	@ (80031e8 <st7567a_DrawPixel+0xc0>)
 80031dc:	54d1      	strb	r1, [r2, r3]
 80031de:	e000      	b.n	80031e2 <st7567a_DrawPixel+0xba>
		return;
 80031e0:	46c0      	nop			@ (mov r8, r8)
	}
}
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b003      	add	sp, #12
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	200002d0 	.word	0x200002d0

080031ec <st7567a_SetCursor>:
			ST7567A_buffer[x + (y / 8) * ST7567A_WIDTH] &= ~(val);
		}
	}
}

void st7567a_SetCursor(uint8_t x, uint8_t y) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	0002      	movs	r2, r0
 80031f4:	1dfb      	adds	r3, r7, #7
 80031f6:	701a      	strb	r2, [r3, #0]
 80031f8:	1dbb      	adds	r3, r7, #6
 80031fa:	1c0a      	adds	r2, r1, #0
 80031fc:	701a      	strb	r2, [r3, #0]
	ST7567A.curr_x = x;
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <st7567a_SetCursor+0x2c>)
 8003200:	1dfa      	adds	r2, r7, #7
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	701a      	strb	r2, [r3, #0]
	ST7567A.curr_y = y;
 8003206:	4b04      	ldr	r3, [pc, #16]	@ (8003218 <st7567a_SetCursor+0x2c>)
 8003208:	1dba      	adds	r2, r7, #6
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	705a      	strb	r2, [r3, #1]
}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b002      	add	sp, #8
 8003214:	bd80      	pop	{r7, pc}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	200006d0 	.word	0x200006d0

0800321c <st7567a_WriteChar>:

void st7567a_WriteChar(char ch, fontStyle_t font, ST7567A_PixelState_t state) {
 800321c:	b084      	sub	sp, #16
 800321e:	b5b0      	push	{r4, r5, r7, lr}
 8003220:	b088      	sub	sp, #32
 8003222:	af00      	add	r7, sp, #0
 8003224:	0004      	movs	r4, r0
 8003226:	2004      	movs	r0, #4
 8003228:	2530      	movs	r5, #48	@ 0x30
 800322a:	1940      	adds	r0, r0, r5
 800322c:	19c0      	adds	r0, r0, r7
 800322e:	6001      	str	r1, [r0, #0]
 8003230:	6042      	str	r2, [r0, #4]
 8003232:	6083      	str	r3, [r0, #8]
 8003234:	1dfb      	adds	r3, r7, #7
 8003236:	1c22      	adds	r2, r4, #0
 8003238:	701a      	strb	r2, [r3, #0]
	// check if char is available in the font
	if(ch < font.FirstAsciiCode) {
 800323a:	2304      	movs	r3, #4
 800323c:	195b      	adds	r3, r3, r5
 800323e:	19db      	adds	r3, r3, r7
 8003240:	785b      	ldrb	r3, [r3, #1]
 8003242:	1dfa      	adds	r2, r7, #7
 8003244:	7812      	ldrb	r2, [r2, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d203      	bcs.n	8003252 <st7567a_WriteChar+0x36>
		ch = 0;
 800324a:	1dfb      	adds	r3, r7, #7
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e009      	b.n	8003266 <st7567a_WriteChar+0x4a>
	}
	else {
		ch -= font.FirstAsciiCode;
 8003252:	2304      	movs	r3, #4
 8003254:	2230      	movs	r2, #48	@ 0x30
 8003256:	189b      	adds	r3, r3, r2
 8003258:	19db      	adds	r3, r3, r7
 800325a:	785a      	ldrb	r2, [r3, #1]
 800325c:	1dfb      	adds	r3, r7, #7
 800325e:	1df9      	adds	r1, r7, #7
 8003260:	7809      	ldrb	r1, [r1, #0]
 8003262:	1a8a      	subs	r2, r1, r2
 8003264:	701a      	strb	r2, [r3, #0]
	}

	// check remaining space on the current line
	if (ST7567A_WIDTH < (ST7567A.curr_x + font.GlyphWidth[(int)ch]) ||
 8003266:	4b69      	ldr	r3, [pc, #420]	@ (800340c <st7567a_WriteChar+0x1f0>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0019      	movs	r1, r3
 800326c:	2304      	movs	r3, #4
 800326e:	2030      	movs	r0, #48	@ 0x30
 8003270:	181b      	adds	r3, r3, r0
 8003272:	19db      	adds	r3, r3, r7
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	18d3      	adds	r3, r2, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	18cb      	adds	r3, r1, r3
 8003280:	2b80      	cmp	r3, #128	@ 0x80
 8003282:	dd00      	ble.n	8003286 <st7567a_WriteChar+0x6a>
 8003284:	e0ba      	b.n	80033fc <st7567a_WriteChar+0x1e0>
		ST7567A_HEIGHT < (ST7567A.curr_y + font.GlyphWidth[(int)ch])) {
 8003286:	4b61      	ldr	r3, [pc, #388]	@ (800340c <st7567a_WriteChar+0x1f0>)
 8003288:	785b      	ldrb	r3, [r3, #1]
 800328a:	0019      	movs	r1, r3
 800328c:	2304      	movs	r3, #4
 800328e:	181b      	adds	r3, r3, r0
 8003290:	19db      	adds	r3, r3, r7
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	1dfb      	adds	r3, r7, #7
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	18d3      	adds	r3, r2, r3
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	18cb      	adds	r3, r1, r3
	if (ST7567A_WIDTH < (ST7567A.curr_x + font.GlyphWidth[(int)ch]) ||
 800329e:	2b40      	cmp	r3, #64	@ 0x40
 80032a0:	dd00      	ble.n	80032a4 <st7567a_WriteChar+0x88>
 80032a2:	e0ab      	b.n	80033fc <st7567a_WriteChar+0x1e0>
		return;
	}

	uint32_t chr;

	for(uint32_t j = 0; j < font.GlyphHeight; ++j) {
 80032a4:	2300      	movs	r3, #0
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	e08f      	b.n	80033ca <st7567a_WriteChar+0x1ae>
		uint8_t width = font.GlyphWidth[(int)ch];
 80032aa:	2304      	movs	r3, #4
 80032ac:	2230      	movs	r2, #48	@ 0x30
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	1dfb      	adds	r3, r7, #7
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	18d2      	adds	r2, r2, r3
 80032ba:	231b      	movs	r3, #27
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	7812      	ldrb	r2, [r2, #0]
 80032c0:	701a      	strb	r2, [r3, #0]

		for(uint32_t w = 0; w < font.GlyphBytesWidth; ++w) {
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	e074      	b.n	80033b2 <st7567a_WriteChar+0x196>
			chr = font.GlyphBitmaps[(ch * font.GlyphHeight + j) * font.GlyphBytesWidth + w];
 80032c8:	2304      	movs	r3, #4
 80032ca:	2030      	movs	r0, #48	@ 0x30
 80032cc:	181b      	adds	r3, r3, r0
 80032ce:	19db      	adds	r3, r3, r7
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	1dfb      	adds	r3, r7, #7
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2104      	movs	r1, #4
 80032d8:	1809      	adds	r1, r1, r0
 80032da:	19c9      	adds	r1, r1, r7
 80032dc:	78c9      	ldrb	r1, [r1, #3]
 80032de:	434b      	muls	r3, r1
 80032e0:	0019      	movs	r1, r3
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	18cb      	adds	r3, r1, r3
 80032e6:	2104      	movs	r1, #4
 80032e8:	1809      	adds	r1, r1, r0
 80032ea:	19c9      	adds	r1, r1, r7
 80032ec:	7889      	ldrb	r1, [r1, #2]
 80032ee:	4359      	muls	r1, r3
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	18cb      	adds	r3, r1, r3
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]

			uint8_t w_range = width;
 80032fa:	2113      	movs	r1, #19
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	201b      	movs	r0, #27
 8003300:	183a      	adds	r2, r7, r0
 8003302:	7812      	ldrb	r2, [r2, #0]
 8003304:	701a      	strb	r2, [r3, #0]
			if(w_range >= 8) {
 8003306:	187b      	adds	r3, r7, r1
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b07      	cmp	r3, #7
 800330c:	d907      	bls.n	800331e <st7567a_WriteChar+0x102>
				w_range = 8;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2208      	movs	r2, #8
 8003312:	701a      	strb	r2, [r3, #0]
				width -= 8;
 8003314:	183b      	adds	r3, r7, r0
 8003316:	183a      	adds	r2, r7, r0
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	3a08      	subs	r2, #8
 800331c:	701a      	strb	r2, [r3, #0]
			}

			for(uint32_t i = 0; i < w_range; ++i) {
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e03d      	b.n	80033a0 <st7567a_WriteChar+0x184>
				if((chr << i) & 0x80)  {
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	409a      	lsls	r2, r3
 800332a:	0013      	movs	r3, r2
 800332c:	2280      	movs	r2, #128	@ 0x80
 800332e:	4013      	ands	r3, r2
 8003330:	d018      	beq.n	8003364 <st7567a_WriteChar+0x148>
					st7567a_DrawPixel(ST7567A.curr_x + i + w*8, ST7567A.curr_y + j, state);
 8003332:	4b36      	ldr	r3, [pc, #216]	@ (800340c <st7567a_WriteChar+0x1f0>)
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	b2db      	uxtb	r3, r3
 8003346:	18d3      	adds	r3, r2, r3
 8003348:	b2d8      	uxtb	r0, r3
 800334a:	4b30      	ldr	r3, [pc, #192]	@ (800340c <st7567a_WriteChar+0x1f0>)
 800334c:	785a      	ldrb	r2, [r3, #1]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	18d3      	adds	r3, r2, r3
 8003354:	b2d9      	uxtb	r1, r3
 8003356:	2344      	movs	r3, #68	@ 0x44
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	001a      	movs	r2, r3
 800335e:	f7ff fee3 	bl	8003128 <st7567a_DrawPixel>
 8003362:	e01a      	b.n	800339a <st7567a_WriteChar+0x17e>
				} else {
					st7567a_DrawPixel(ST7567A.curr_x + i + w*8, ST7567A.curr_y + j, !state);
 8003364:	4b29      	ldr	r3, [pc, #164]	@ (800340c <st7567a_WriteChar+0x1f0>)
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	18d3      	adds	r3, r2, r3
 800336e:	b2da      	uxtb	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	18d3      	adds	r3, r2, r3
 800337a:	b2d8      	uxtb	r0, r3
 800337c:	4b23      	ldr	r3, [pc, #140]	@ (800340c <st7567a_WriteChar+0x1f0>)
 800337e:	785a      	ldrb	r2, [r3, #1]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	b2d9      	uxtb	r1, r3
 8003388:	2344      	movs	r3, #68	@ 0x44
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	425a      	negs	r2, r3
 8003390:	4153      	adcs	r3, r2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	001a      	movs	r2, r3
 8003396:	f7ff fec7 	bl	8003128 <st7567a_DrawPixel>
			for(uint32_t i = 0; i < w_range; ++i) {
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3301      	adds	r3, #1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	2313      	movs	r3, #19
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3bb      	bcc.n	8003324 <st7567a_WriteChar+0x108>
		for(uint32_t w = 0; w < font.GlyphBytesWidth; ++w) {
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3301      	adds	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	2304      	movs	r3, #4
 80033b4:	2230      	movs	r2, #48	@ 0x30
 80033b6:	189b      	adds	r3, r3, r2
 80033b8:	19db      	adds	r3, r3, r7
 80033ba:	789b      	ldrb	r3, [r3, #2]
 80033bc:	001a      	movs	r2, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d381      	bcc.n	80032c8 <st7567a_WriteChar+0xac>
	for(uint32_t j = 0; j < font.GlyphHeight; ++j) {
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	3301      	adds	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	2304      	movs	r3, #4
 80033cc:	2130      	movs	r1, #48	@ 0x30
 80033ce:	185b      	adds	r3, r3, r1
 80033d0:	19db      	adds	r3, r3, r7
 80033d2:	78db      	ldrb	r3, [r3, #3]
 80033d4:	001a      	movs	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4293      	cmp	r3, r2
 80033da:	d200      	bcs.n	80033de <st7567a_WriteChar+0x1c2>
 80033dc:	e765      	b.n	80032aa <st7567a_WriteChar+0x8e>
				}
			}
		}
	}

	ST7567A.curr_x += font.GlyphWidth[(int)ch];
 80033de:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <st7567a_WriteChar+0x1f0>)
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	2304      	movs	r3, #4
 80033e4:	185b      	adds	r3, r3, r1
 80033e6:	19db      	adds	r3, r3, r7
 80033e8:	6899      	ldr	r1, [r3, #8]
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	18cb      	adds	r3, r1, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	18d3      	adds	r3, r2, r3
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <st7567a_WriteChar+0x1f0>)
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e000      	b.n	80033fe <st7567a_WriteChar+0x1e2>
		return;
 80033fc:	46c0      	nop			@ (mov r8, r8)

//	return ch + font.FirstAsciiCode;
}
 80033fe:	46bd      	mov	sp, r7
 8003400:	b008      	add	sp, #32
 8003402:	bcb0      	pop	{r4, r5, r7}
 8003404:	bc08      	pop	{r3}
 8003406:	b004      	add	sp, #16
 8003408:	4718      	bx	r3
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	200006d0 	.word	0x200006d0

08003410 <st7567a_WriteString>:

void st7567a_WriteString(const char *str, fontStyle_t font, ST7567A_PixelState_t state) {
 8003410:	b084      	sub	sp, #16
 8003412:	b590      	push	{r4, r7, lr}
 8003414:	b085      	sub	sp, #20
 8003416:	af02      	add	r7, sp, #8
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	2004      	movs	r0, #4
 800341c:	2410      	movs	r4, #16
 800341e:	1900      	adds	r0, r0, r4
 8003420:	2408      	movs	r4, #8
 8003422:	46a4      	mov	ip, r4
 8003424:	44bc      	add	ip, r7
 8003426:	4460      	add	r0, ip
 8003428:	6001      	str	r1, [r0, #0]
 800342a:	6042      	str	r2, [r0, #4]
 800342c:	6083      	str	r3, [r0, #8]
	while(*str) {
 800342e:	e018      	b.n	8003462 <st7567a_WriteString+0x52>
		st7567a_WriteChar(*str++, font, state);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	7818      	ldrb	r0, [r3, #0]
 8003438:	2304      	movs	r3, #4
 800343a:	2210      	movs	r2, #16
 800343c:	189b      	adds	r3, r3, r2
 800343e:	2208      	movs	r2, #8
 8003440:	4694      	mov	ip, r2
 8003442:	44bc      	add	ip, r7
 8003444:	4463      	add	r3, ip
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	2108      	movs	r1, #8
 800344a:	1852      	adds	r2, r2, r1
 800344c:	19d2      	adds	r2, r2, r7
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	9201      	str	r2, [sp, #4]
 8003452:	466a      	mov	r2, sp
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	6011      	str	r1, [r2, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f7ff fedd 	bl	800321c <st7567a_WriteChar>
	while(*str) {
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e2      	bne.n	8003430 <st7567a_WriteString+0x20>
	}
}
 800346a:	46c0      	nop			@ (mov r8, r8)
 800346c:	46c0      	nop			@ (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b003      	add	sp, #12
 8003472:	bc90      	pop	{r4, r7}
 8003474:	bc08      	pop	{r3}
 8003476:	b004      	add	sp, #16
 8003478:	4718      	bx	r3
	...

0800347c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_MspInit+0x44>)
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_MspInit+0x44>)
 8003488:	2101      	movs	r1, #1
 800348a:	430a      	orrs	r2, r1
 800348c:	619a      	str	r2, [r3, #24]
 800348e:	4b0c      	ldr	r3, [pc, #48]	@ (80034c0 <HAL_MspInit+0x44>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349a:	4b09      	ldr	r3, [pc, #36]	@ (80034c0 <HAL_MspInit+0x44>)
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	4b08      	ldr	r3, [pc, #32]	@ (80034c0 <HAL_MspInit+0x44>)
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	0549      	lsls	r1, r1, #21
 80034a4:	430a      	orrs	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_MspInit+0x44>)
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	055b      	lsls	r3, r3, #21
 80034b0:	4013      	ands	r3, r2
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b002      	add	sp, #8
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b08b      	sub	sp, #44	@ 0x2c
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034cc:	2414      	movs	r4, #20
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	0018      	movs	r0, r3
 80034d2:	2314      	movs	r3, #20
 80034d4:	001a      	movs	r2, r3
 80034d6:	2100      	movs	r1, #0
 80034d8:	f002 fc46 	bl	8005d68 <memset>
  if(hspi->Instance==SPI1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003554 <HAL_SPI_MspInit+0x90>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d132      	bne.n	800354c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003558 <HAL_SPI_MspInit+0x94>)
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_SPI_MspInit+0x94>)
 80034ec:	2180      	movs	r1, #128	@ 0x80
 80034ee:	0149      	lsls	r1, r1, #5
 80034f0:	430a      	orrs	r2, r1
 80034f2:	619a      	str	r2, [r3, #24]
 80034f4:	4b18      	ldr	r3, [pc, #96]	@ (8003558 <HAL_SPI_MspInit+0x94>)
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	015b      	lsls	r3, r3, #5
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_SPI_MspInit+0x94>)
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	4b14      	ldr	r3, [pc, #80]	@ (8003558 <HAL_SPI_MspInit+0x94>)
 8003508:	2180      	movs	r1, #128	@ 0x80
 800350a:	0289      	lsls	r1, r1, #10
 800350c:	430a      	orrs	r2, r1
 800350e:	615a      	str	r2, [r3, #20]
 8003510:	4b11      	ldr	r3, [pc, #68]	@ (8003558 <HAL_SPI_MspInit+0x94>)
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800351e:	0021      	movs	r1, r4
 8003520:	187b      	adds	r3, r7, r1
 8003522:	22a0      	movs	r2, #160	@ 0xa0
 8003524:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	187b      	adds	r3, r7, r1
 8003528:	2202      	movs	r2, #2
 800352a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	187b      	adds	r3, r7, r1
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003532:	187b      	adds	r3, r7, r1
 8003534:	2203      	movs	r2, #3
 8003536:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2200      	movs	r2, #0
 800353c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353e:	187a      	adds	r2, r7, r1
 8003540:	2390      	movs	r3, #144	@ 0x90
 8003542:	05db      	lsls	r3, r3, #23
 8003544:	0011      	movs	r1, r2
 8003546:	0018      	movs	r0, r3
 8003548:	f000 fa6c 	bl	8003a24 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800354c:	46c0      	nop			@ (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b00b      	add	sp, #44	@ 0x2c
 8003552:	bd90      	pop	{r4, r7, pc}
 8003554:	40013000 	.word	0x40013000
 8003558:	40021000 	.word	0x40021000

0800355c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <HAL_TIM_Base_MspInit+0x38>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10d      	bne.n	800358a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_TIM_Base_MspInit+0x3c>)
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_TIM_Base_MspInit+0x3c>)
 8003574:	2180      	movs	r1, #128	@ 0x80
 8003576:	0109      	lsls	r1, r1, #4
 8003578:	430a      	orrs	r2, r1
 800357a:	619a      	str	r2, [r3, #24]
 800357c:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_TIM_Base_MspInit+0x3c>)
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	2380      	movs	r3, #128	@ 0x80
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b004      	add	sp, #16
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40021000 	.word	0x40021000

0800359c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035a0:	46c0      	nop			@ (mov r8, r8)
 80035a2:	e7fd      	b.n	80035a0 <NMI_Handler+0x4>

080035a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035a8:	46c0      	nop			@ (mov r8, r8)
 80035aa:	e7fd      	b.n	80035a8 <HardFault_Handler+0x4>

080035ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ba:	46c0      	nop			@ (mov r8, r8)
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c4:	f000 f93a 	bl	800383c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c8:	46c0      	nop			@ (mov r8, r8)
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	af00      	add	r7, sp, #0
  return 1;
 80035d2:	2301      	movs	r3, #1
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_kill>:

int _kill(int pid, int sig)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e4:	f002 fc1a 	bl	8005e1c <__errno>
 80035e8:	0003      	movs	r3, r0
 80035ea:	2216      	movs	r2, #22
 80035ec:	601a      	str	r2, [r3, #0]
  return -1;
 80035ee:	2301      	movs	r3, #1
 80035f0:	425b      	negs	r3, r3
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b002      	add	sp, #8
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_exit>:

void _exit (int status)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003602:	2301      	movs	r3, #1
 8003604:	425a      	negs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0011      	movs	r1, r2
 800360a:	0018      	movs	r0, r3
 800360c:	f7ff ffe5 	bl	80035da <_kill>
  while (1) {}    /* Make sure we hang here */
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	e7fd      	b.n	8003610 <_exit+0x16>

08003614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	e00a      	b.n	800363c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003626:	e000      	b.n	800362a <_read+0x16>
 8003628:	bf00      	nop
 800362a:	0001      	movs	r1, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1c5a      	adds	r2, r3, #1
 8003630:	60ba      	str	r2, [r7, #8]
 8003632:	b2ca      	uxtb	r2, r1
 8003634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3301      	adds	r3, #1
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbf0      	blt.n	8003626 <_read+0x12>
  }

  return len;
 8003644:	687b      	ldr	r3, [r7, #4]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b006      	add	sp, #24
 800364c:	bd80      	pop	{r7, pc}

0800364e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	e009      	b.n	8003674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	60ba      	str	r2, [r7, #8]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	0018      	movs	r0, r3
 800366a:	e000      	b.n	800366e <_write+0x20>
 800366c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	3301      	adds	r3, #1
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	429a      	cmp	r2, r3
 800367a:	dbf1      	blt.n	8003660 <_write+0x12>
  }
  return len;
 800367c:	687b      	ldr	r3, [r7, #4]
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}

08003686 <_close>:

int _close(int file)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800368e:	2301      	movs	r3, #1
 8003690:	425b      	negs	r3, r3
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b002      	add	sp, #8
 8003698:	bd80      	pop	{r7, pc}

0800369a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	0192      	lsls	r2, r2, #6
 80036aa:	605a      	str	r2, [r3, #4]
  return 0;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	0018      	movs	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b002      	add	sp, #8
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_isatty>:

int _isatty(int file)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	0018      	movs	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	b004      	add	sp, #16
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e8:	4a14      	ldr	r2, [pc, #80]	@ (800373c <_sbrk+0x5c>)
 80036ea:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <_sbrk+0x60>)
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f4:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <_sbrk+0x64>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d102      	bne.n	8003702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036fc:	4b11      	ldr	r3, [pc, #68]	@ (8003744 <_sbrk+0x64>)
 80036fe:	4a12      	ldr	r2, [pc, #72]	@ (8003748 <_sbrk+0x68>)
 8003700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003702:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <_sbrk+0x64>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	18d3      	adds	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	429a      	cmp	r2, r3
 800370e:	d207      	bcs.n	8003720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003710:	f002 fb84 	bl	8005e1c <__errno>
 8003714:	0003      	movs	r3, r0
 8003716:	220c      	movs	r2, #12
 8003718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800371a:	2301      	movs	r3, #1
 800371c:	425b      	negs	r3, r3
 800371e:	e009      	b.n	8003734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <_sbrk+0x64>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003726:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	18d2      	adds	r2, r2, r3
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <_sbrk+0x64>)
 8003730:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003732:	68fb      	ldr	r3, [r7, #12]
}
 8003734:	0018      	movs	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	b006      	add	sp, #24
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20002000 	.word	0x20002000
 8003740:	00000400 	.word	0x00000400
 8003744:	200006d4 	.word	0x200006d4
 8003748:	20000828 	.word	0x20000828

0800374c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003758:	480d      	ldr	r0, [pc, #52]	@ (8003790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800375a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800375c:	f7ff fff6 	bl	800374c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003760:	480c      	ldr	r0, [pc, #48]	@ (8003794 <LoopForever+0x6>)
  ldr r1, =_edata
 8003762:	490d      	ldr	r1, [pc, #52]	@ (8003798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003764:	4a0d      	ldr	r2, [pc, #52]	@ (800379c <LoopForever+0xe>)
  movs r3, #0
 8003766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003768:	e002      	b.n	8003770 <LoopCopyDataInit>

0800376a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800376a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800376c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800376e:	3304      	adds	r3, #4

08003770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003774:	d3f9      	bcc.n	800376a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003776:	4a0a      	ldr	r2, [pc, #40]	@ (80037a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003778:	4c0a      	ldr	r4, [pc, #40]	@ (80037a4 <LoopForever+0x16>)
  movs r3, #0
 800377a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800377c:	e001      	b.n	8003782 <LoopFillZerobss>

0800377e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800377e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003780:	3204      	adds	r2, #4

08003782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003784:	d3fb      	bcc.n	800377e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003786:	f002 fb4f 	bl	8005e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800378a:	f7ff f9fd 	bl	8002b88 <main>

0800378e <LoopForever>:

LoopForever:
    b LoopForever
 800378e:	e7fe      	b.n	800378e <LoopForever>
  ldr   r0, =_estack
 8003790:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003798:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 800379c:	08009950 	.word	0x08009950
  ldr r2, =_sbss
 80037a0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80037a4:	20000828 	.word	0x20000828

080037a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037a8:	e7fe      	b.n	80037a8 <ADC1_IRQHandler>
	...

080037ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037b0:	4b07      	ldr	r3, [pc, #28]	@ (80037d0 <HAL_Init+0x24>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_Init+0x24>)
 80037b6:	2110      	movs	r1, #16
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80037bc:	2003      	movs	r0, #3
 80037be:	f000 f809 	bl	80037d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037c2:	f7ff fe5b 	bl	800347c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	40022000 	.word	0x40022000

080037d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d4:	b590      	push	{r4, r7, lr}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037dc:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <HAL_InitTick+0x5c>)
 80037de:	681c      	ldr	r4, [r3, #0]
 80037e0:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <HAL_InitTick+0x60>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	0019      	movs	r1, r3
 80037e6:	23fa      	movs	r3, #250	@ 0xfa
 80037e8:	0098      	lsls	r0, r3, #2
 80037ea:	f7fc fca9 	bl	8000140 <__udivsi3>
 80037ee:	0003      	movs	r3, r0
 80037f0:	0019      	movs	r1, r3
 80037f2:	0020      	movs	r0, r4
 80037f4:	f7fc fca4 	bl	8000140 <__udivsi3>
 80037f8:	0003      	movs	r3, r0
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 f905 	bl	8003a0a <HAL_SYSTICK_Config>
 8003800:	1e03      	subs	r3, r0, #0
 8003802:	d001      	beq.n	8003808 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e00f      	b.n	8003828 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b03      	cmp	r3, #3
 800380c:	d80b      	bhi.n	8003826 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	2301      	movs	r3, #1
 8003812:	425b      	negs	r3, r3
 8003814:	2200      	movs	r2, #0
 8003816:	0018      	movs	r0, r3
 8003818:	f000 f8e2 	bl	80039e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <HAL_InitTick+0x64>)
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	b003      	add	sp, #12
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	20000034 	.word	0x20000034
 8003834:	2000003c 	.word	0x2000003c
 8003838:	20000038 	.word	0x20000038

0800383c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003840:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <HAL_IncTick+0x1c>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	001a      	movs	r2, r3
 8003846:	4b05      	ldr	r3, [pc, #20]	@ (800385c <HAL_IncTick+0x20>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	18d2      	adds	r2, r2, r3
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <HAL_IncTick+0x20>)
 800384e:	601a      	str	r2, [r3, #0]
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	2000003c 	.word	0x2000003c
 800385c:	200006d8 	.word	0x200006d8

08003860 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  return uwTick;
 8003864:	4b02      	ldr	r3, [pc, #8]	@ (8003870 <HAL_GetTick+0x10>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	0018      	movs	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	46c0      	nop			@ (mov r8, r8)
 8003870:	200006d8 	.word	0x200006d8

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff fff0 	bl	8003860 <HAL_GetTick>
 8003880:	0003      	movs	r3, r0
 8003882:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	d005      	beq.n	800389a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388e:	4b0a      	ldr	r3, [pc, #40]	@ (80038b8 <HAL_Delay+0x44>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	001a      	movs	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	189b      	adds	r3, r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	f7ff ffe0 	bl	8003860 <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d8f7      	bhi.n	800389c <HAL_Delay+0x28>
  {
  }
}
 80038ac:	46c0      	nop			@ (mov r8, r8)
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			@ (mov r8, r8)
 80038b8:	2000003c 	.word	0x2000003c

080038bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	0002      	movs	r2, r0
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80038d0:	d828      	bhi.n	8003924 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003990 <__NVIC_SetPriority+0xd4>)
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	33c0      	adds	r3, #192	@ 0xc0
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	589b      	ldr	r3, [r3, r2]
 80038e2:	1dfa      	adds	r2, r7, #7
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	0011      	movs	r1, r2
 80038e8:	2203      	movs	r2, #3
 80038ea:	400a      	ands	r2, r1
 80038ec:	00d2      	lsls	r2, r2, #3
 80038ee:	21ff      	movs	r1, #255	@ 0xff
 80038f0:	4091      	lsls	r1, r2
 80038f2:	000a      	movs	r2, r1
 80038f4:	43d2      	mvns	r2, r2
 80038f6:	401a      	ands	r2, r3
 80038f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	22ff      	movs	r2, #255	@ 0xff
 8003900:	401a      	ands	r2, r3
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	2303      	movs	r3, #3
 800390a:	4003      	ands	r3, r0
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003910:	481f      	ldr	r0, [pc, #124]	@ (8003990 <__NVIC_SetPriority+0xd4>)
 8003912:	1dfb      	adds	r3, r7, #7
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	b25b      	sxtb	r3, r3
 8003918:	089b      	lsrs	r3, r3, #2
 800391a:	430a      	orrs	r2, r1
 800391c:	33c0      	adds	r3, #192	@ 0xc0
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003922:	e031      	b.n	8003988 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003924:	4a1b      	ldr	r2, [pc, #108]	@ (8003994 <__NVIC_SetPriority+0xd8>)
 8003926:	1dfb      	adds	r3, r7, #7
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	0019      	movs	r1, r3
 800392c:	230f      	movs	r3, #15
 800392e:	400b      	ands	r3, r1
 8003930:	3b08      	subs	r3, #8
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3306      	adds	r3, #6
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	18d3      	adds	r3, r2, r3
 800393a:	3304      	adds	r3, #4
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1dfa      	adds	r2, r7, #7
 8003940:	7812      	ldrb	r2, [r2, #0]
 8003942:	0011      	movs	r1, r2
 8003944:	2203      	movs	r2, #3
 8003946:	400a      	ands	r2, r1
 8003948:	00d2      	lsls	r2, r2, #3
 800394a:	21ff      	movs	r1, #255	@ 0xff
 800394c:	4091      	lsls	r1, r2
 800394e:	000a      	movs	r2, r1
 8003950:	43d2      	mvns	r2, r2
 8003952:	401a      	ands	r2, r3
 8003954:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	22ff      	movs	r2, #255	@ 0xff
 800395c:	401a      	ands	r2, r3
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	0018      	movs	r0, r3
 8003964:	2303      	movs	r3, #3
 8003966:	4003      	ands	r3, r0
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800396c:	4809      	ldr	r0, [pc, #36]	@ (8003994 <__NVIC_SetPriority+0xd8>)
 800396e:	1dfb      	adds	r3, r7, #7
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	001c      	movs	r4, r3
 8003974:	230f      	movs	r3, #15
 8003976:	4023      	ands	r3, r4
 8003978:	3b08      	subs	r3, #8
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	430a      	orrs	r2, r1
 800397e:	3306      	adds	r3, #6
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	18c3      	adds	r3, r0, r3
 8003984:	3304      	adds	r3, #4
 8003986:	601a      	str	r2, [r3, #0]
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b003      	add	sp, #12
 800398e:	bd90      	pop	{r4, r7, pc}
 8003990:	e000e100 	.word	0xe000e100
 8003994:	e000ed00 	.word	0xe000ed00

08003998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	045b      	lsls	r3, r3, #17
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d301      	bcc.n	80039b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ac:	2301      	movs	r3, #1
 80039ae:	e010      	b.n	80039d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039b0:	4b0a      	ldr	r3, [pc, #40]	@ (80039dc <SysTick_Config+0x44>)
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	3a01      	subs	r2, #1
 80039b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039b8:	2301      	movs	r3, #1
 80039ba:	425b      	negs	r3, r3
 80039bc:	2103      	movs	r1, #3
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff ff7c 	bl	80038bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039c4:	4b05      	ldr	r3, [pc, #20]	@ (80039dc <SysTick_Config+0x44>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ca:	4b04      	ldr	r3, [pc, #16]	@ (80039dc <SysTick_Config+0x44>)
 80039cc:	2207      	movs	r2, #7
 80039ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b002      	add	sp, #8
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	e000e010 	.word	0xe000e010

080039e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	210f      	movs	r1, #15
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	1c02      	adds	r2, r0, #0
 80039f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	0011      	movs	r1, r2
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7ff ff5d 	bl	80038bc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b004      	add	sp, #16
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b082      	sub	sp, #8
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff ffbf 	bl	8003998 <SysTick_Config>
 8003a1a:	0003      	movs	r3, r0
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a32:	e14f      	b.n	8003cd4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4091      	lsls	r1, r2
 8003a3e:	000a      	movs	r2, r1
 8003a40:	4013      	ands	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d100      	bne.n	8003a4c <HAL_GPIO_Init+0x28>
 8003a4a:	e140      	b.n	8003cce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d005      	beq.n	8003a64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d130      	bne.n	8003ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	43da      	mvns	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	409a      	lsls	r2, r3
 8003a86:	0013      	movs	r3, r2
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2203      	movs	r2, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d017      	beq.n	8003b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	0013      	movs	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d123      	bne.n	8003b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	58d3      	ldr	r3, [r2, r3]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2207      	movs	r2, #7
 8003b20:	4013      	ands	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2107      	movs	r1, #7
 8003b3a:	400b      	ands	r3, r1
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	6939      	ldr	r1, [r7, #16]
 8003b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2203      	movs	r2, #3
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	43da      	mvns	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2203      	movs	r2, #3
 8003b74:	401a      	ands	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	0013      	movs	r3, r2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	23c0      	movs	r3, #192	@ 0xc0
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	4013      	ands	r3, r2
 8003b94:	d100      	bne.n	8003b98 <HAL_GPIO_Init+0x174>
 8003b96:	e09a      	b.n	8003cce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b98:	4b54      	ldr	r3, [pc, #336]	@ (8003cec <HAL_GPIO_Init+0x2c8>)
 8003b9a:	699a      	ldr	r2, [r3, #24]
 8003b9c:	4b53      	ldr	r3, [pc, #332]	@ (8003cec <HAL_GPIO_Init+0x2c8>)
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
 8003ba4:	4b51      	ldr	r3, [pc, #324]	@ (8003cec <HAL_GPIO_Init+0x2c8>)
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	4013      	ands	r3, r2
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8003cf0 <HAL_GPIO_Init+0x2cc>)
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	3302      	adds	r3, #2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	589b      	ldr	r3, [r3, r2]
 8003bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	0013      	movs	r3, r2
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	2390      	movs	r3, #144	@ 0x90
 8003bd8:	05db      	lsls	r3, r3, #23
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d013      	beq.n	8003c06 <HAL_GPIO_Init+0x1e2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a44      	ldr	r2, [pc, #272]	@ (8003cf4 <HAL_GPIO_Init+0x2d0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d00d      	beq.n	8003c02 <HAL_GPIO_Init+0x1de>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a43      	ldr	r2, [pc, #268]	@ (8003cf8 <HAL_GPIO_Init+0x2d4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d007      	beq.n	8003bfe <HAL_GPIO_Init+0x1da>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a42      	ldr	r2, [pc, #264]	@ (8003cfc <HAL_GPIO_Init+0x2d8>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_GPIO_Init+0x1d6>
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003bfa:	2305      	movs	r3, #5
 8003bfc:	e004      	b.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e002      	b.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_GPIO_Init+0x1e4>
 8003c06:	2300      	movs	r3, #0
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	2103      	movs	r1, #3
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	0092      	lsls	r2, r2, #2
 8003c10:	4093      	lsls	r3, r2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c18:	4935      	ldr	r1, [pc, #212]	@ (8003cf0 <HAL_GPIO_Init+0x2cc>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	089b      	lsrs	r3, r3, #2
 8003c1e:	3302      	adds	r3, #2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c26:	4b36      	ldr	r3, [pc, #216]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	035b      	lsls	r3, r3, #13
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c50:	4b2b      	ldr	r3, [pc, #172]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	43da      	mvns	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	2380      	movs	r3, #128	@ 0x80
 8003c66:	039b      	lsls	r3, r3, #14
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003c7a:	4b21      	ldr	r3, [pc, #132]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	43da      	mvns	r2, r3
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	2380      	movs	r3, #128	@ 0x80
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	4013      	ands	r3, r2
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c9e:	4b18      	ldr	r3, [pc, #96]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	43da      	mvns	r2, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	2380      	movs	r3, #128	@ 0x80
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <HAL_GPIO_Init+0x2dc>)
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	40da      	lsrs	r2, r3
 8003cdc:	1e13      	subs	r3, r2, #0
 8003cde:	d000      	beq.n	8003ce2 <HAL_GPIO_Init+0x2be>
 8003ce0:	e6a8      	b.n	8003a34 <HAL_GPIO_Init+0x10>
  } 
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46c0      	nop			@ (mov r8, r8)
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	48000400 	.word	0x48000400
 8003cf8:	48000800 	.word	0x48000800
 8003cfc:	48000c00 	.word	0x48000c00
 8003d00:	40010400 	.word	0x40010400

08003d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	000a      	movs	r2, r1
 8003d0e:	1cbb      	adds	r3, r7, #2
 8003d10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	1cba      	adds	r2, r7, #2
 8003d18:	8812      	ldrh	r2, [r2, #0]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d1e:	230f      	movs	r3, #15
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	2201      	movs	r2, #1
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	e003      	b.n	8003d30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d28:	230f      	movs	r3, #15
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d30:	230f      	movs	r3, #15
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
  }
 8003d36:	0018      	movs	r0, r3
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b004      	add	sp, #16
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	0008      	movs	r0, r1
 8003d48:	0011      	movs	r1, r2
 8003d4a:	1cbb      	adds	r3, r7, #2
 8003d4c:	1c02      	adds	r2, r0, #0
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	1c7b      	adds	r3, r7, #1
 8003d52:	1c0a      	adds	r2, r1, #0
 8003d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d56:	1c7b      	adds	r3, r7, #1
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d004      	beq.n	8003d68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d5e:	1cbb      	adds	r3, r7, #2
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d66:	e003      	b.n	8003d70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d68:	1cbb      	adds	r3, r7, #2
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e301      	b.n	800438e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4013      	ands	r3, r2
 8003d92:	d100      	bne.n	8003d96 <HAL_RCC_OscConfig+0x1e>
 8003d94:	e08d      	b.n	8003eb2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d96:	4bc3      	ldr	r3, [pc, #780]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d00e      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003da2:	4bc0      	ldr	r3, [pc, #768]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	220c      	movs	r2, #12
 8003da8:	4013      	ands	r3, r2
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d116      	bne.n	8003ddc <HAL_RCC_OscConfig+0x64>
 8003dae:	4bbd      	ldr	r3, [pc, #756]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	025b      	lsls	r3, r3, #9
 8003db6:	401a      	ands	r2, r3
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	025b      	lsls	r3, r3, #9
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4bb8      	ldr	r3, [pc, #736]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d100      	bne.n	8003dce <HAL_RCC_OscConfig+0x56>
 8003dcc:	e070      	b.n	8003eb0 <HAL_RCC_OscConfig+0x138>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d000      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x60>
 8003dd6:	e06b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e2d8      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x7c>
 8003de4:	4baf      	ldr	r3, [pc, #700]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4bae      	ldr	r3, [pc, #696]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	2180      	movs	r1, #128	@ 0x80
 8003dec:	0249      	lsls	r1, r1, #9
 8003dee:	430a      	orrs	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e02f      	b.n	8003e54 <HAL_RCC_OscConfig+0xdc>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCC_OscConfig+0x9e>
 8003dfc:	4ba9      	ldr	r3, [pc, #676]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4ba8      	ldr	r3, [pc, #672]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e02:	49a9      	ldr	r1, [pc, #676]	@ (80040a8 <HAL_RCC_OscConfig+0x330>)
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	4ba6      	ldr	r3, [pc, #664]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4ba5      	ldr	r3, [pc, #660]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	49a7      	ldr	r1, [pc, #668]	@ (80040ac <HAL_RCC_OscConfig+0x334>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e01e      	b.n	8003e54 <HAL_RCC_OscConfig+0xdc>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d10e      	bne.n	8003e3c <HAL_RCC_OscConfig+0xc4>
 8003e1e:	4ba1      	ldr	r3, [pc, #644]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	4ba0      	ldr	r3, [pc, #640]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e24:	2180      	movs	r1, #128	@ 0x80
 8003e26:	02c9      	lsls	r1, r1, #11
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	4b9d      	ldr	r3, [pc, #628]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b9c      	ldr	r3, [pc, #624]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	2180      	movs	r1, #128	@ 0x80
 8003e34:	0249      	lsls	r1, r1, #9
 8003e36:	430a      	orrs	r2, r1
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0xdc>
 8003e3c:	4b99      	ldr	r3, [pc, #612]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b98      	ldr	r3, [pc, #608]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e42:	4999      	ldr	r1, [pc, #612]	@ (80040a8 <HAL_RCC_OscConfig+0x330>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	4b96      	ldr	r3, [pc, #600]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b95      	ldr	r3, [pc, #596]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e4e:	4997      	ldr	r1, [pc, #604]	@ (80040ac <HAL_RCC_OscConfig+0x334>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d014      	beq.n	8003e86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7ff fd00 	bl	8003860 <HAL_GetTick>
 8003e60:	0003      	movs	r3, r0
 8003e62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e66:	f7ff fcfb 	bl	8003860 <HAL_GetTick>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b64      	cmp	r3, #100	@ 0x64
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e28a      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e78:	4b8a      	ldr	r3, [pc, #552]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	4013      	ands	r3, r2
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCC_OscConfig+0xee>
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e86:	f7ff fceb 	bl	8003860 <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7ff fce6 	bl	8003860 <HAL_GetTick>
 8003e94:	0002      	movs	r2, r0
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	@ 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e275      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea2:	4b80      	ldr	r3, [pc, #512]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x118>
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d100      	bne.n	8003ebe <HAL_RCC_OscConfig+0x146>
 8003ebc:	e069      	b.n	8003f92 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ebe:	4b79      	ldr	r3, [pc, #484]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ec8:	4b76      	ldr	r3, [pc, #472]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	220c      	movs	r2, #12
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d11c      	bne.n	8003f0e <HAL_RCC_OscConfig+0x196>
 8003ed4:	4b73      	ldr	r3, [pc, #460]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	2380      	movs	r3, #128	@ 0x80
 8003eda:	025b      	lsls	r3, r3, #9
 8003edc:	4013      	ands	r3, r2
 8003ede:	d116      	bne.n	8003f0e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee0:	4b70      	ldr	r3, [pc, #448]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2202      	movs	r2, #2
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e24b      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	4b6b      	ldr	r3, [pc, #428]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	22f8      	movs	r2, #248	@ 0xf8
 8003efc:	4393      	bics	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	00da      	lsls	r2, r3, #3
 8003f06:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0c:	e041      	b.n	8003f92 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d024      	beq.n	8003f60 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f16:	4b63      	ldr	r3, [pc, #396]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4b62      	ldr	r3, [pc, #392]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f22:	f7ff fc9d 	bl	8003860 <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2c:	f7ff fc98 	bl	8003860 <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e227      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3e:	4b59      	ldr	r3, [pc, #356]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	d0f1      	beq.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f48:	4b56      	ldr	r3, [pc, #344]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	22f8      	movs	r2, #248	@ 0xf8
 8003f4e:	4393      	bics	r3, r2
 8003f50:	0019      	movs	r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	00da      	lsls	r2, r3, #3
 8003f58:	4b52      	ldr	r3, [pc, #328]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e018      	b.n	8003f92 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f60:	4b50      	ldr	r3, [pc, #320]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f66:	2101      	movs	r1, #1
 8003f68:	438a      	bics	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7ff fc78 	bl	8003860 <HAL_GetTick>
 8003f70:	0003      	movs	r3, r0
 8003f72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f76:	f7ff fc73 	bl	8003860 <HAL_GetTick>
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e202      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f88:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d1f1      	bne.n	8003f76 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2208      	movs	r2, #8
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d036      	beq.n	800400a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d019      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003faa:	2101      	movs	r1, #1
 8003fac:	430a      	orrs	r2, r1
 8003fae:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb0:	f7ff fc56 	bl	8003860 <HAL_GetTick>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fba:	f7ff fc51 	bl	8003860 <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1e0      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fcc:	4b35      	ldr	r3, [pc, #212]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d0f1      	beq.n	8003fba <HAL_RCC_OscConfig+0x242>
 8003fd6:	e018      	b.n	800400a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd8:	4b32      	ldr	r3, [pc, #200]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003fda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fdc:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe4:	f7ff fc3c 	bl	8003860 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fee:	f7ff fc37 	bl	8003860 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e1c6      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d1f1      	bne.n	8003fee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2204      	movs	r2, #4
 8004010:	4013      	ands	r3, r2
 8004012:	d100      	bne.n	8004016 <HAL_RCC_OscConfig+0x29e>
 8004014:	e0b4      	b.n	8004180 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	201f      	movs	r0, #31
 8004018:	183b      	adds	r3, r7, r0
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b21      	ldr	r3, [pc, #132]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	2380      	movs	r3, #128	@ 0x80
 8004024:	055b      	lsls	r3, r3, #21
 8004026:	4013      	ands	r3, r2
 8004028:	d110      	bne.n	800404c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	0549      	lsls	r1, r1, #21
 8004034:	430a      	orrs	r2, r1
 8004036:	61da      	str	r2, [r3, #28]
 8004038:	4b1a      	ldr	r3, [pc, #104]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	2380      	movs	r3, #128	@ 0x80
 800403e:	055b      	lsls	r3, r3, #21
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004046:	183b      	adds	r3, r7, r0
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	4b18      	ldr	r3, [pc, #96]	@ (80040b0 <HAL_RCC_OscConfig+0x338>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	2380      	movs	r3, #128	@ 0x80
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4013      	ands	r3, r2
 8004056:	d11a      	bne.n	800408e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004058:	4b15      	ldr	r3, [pc, #84]	@ (80040b0 <HAL_RCC_OscConfig+0x338>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b14      	ldr	r3, [pc, #80]	@ (80040b0 <HAL_RCC_OscConfig+0x338>)
 800405e:	2180      	movs	r1, #128	@ 0x80
 8004060:	0049      	lsls	r1, r1, #1
 8004062:	430a      	orrs	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004066:	f7ff fbfb 	bl	8003860 <HAL_GetTick>
 800406a:	0003      	movs	r3, r0
 800406c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7ff fbf6 	bl	8003860 <HAL_GetTick>
 8004074:	0002      	movs	r2, r0
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b64      	cmp	r3, #100	@ 0x64
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e185      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_OscConfig+0x338>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	2380      	movs	r3, #128	@ 0x80
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4013      	ands	r3, r2
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10e      	bne.n	80040b4 <HAL_RCC_OscConfig+0x33c>
 8004096:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	4b02      	ldr	r3, [pc, #8]	@ (80040a4 <HAL_RCC_OscConfig+0x32c>)
 800409c:	2101      	movs	r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	621a      	str	r2, [r3, #32]
 80040a2:	e035      	b.n	8004110 <HAL_RCC_OscConfig+0x398>
 80040a4:	40021000 	.word	0x40021000
 80040a8:	fffeffff 	.word	0xfffeffff
 80040ac:	fffbffff 	.word	0xfffbffff
 80040b0:	40007000 	.word	0x40007000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x35e>
 80040bc:	4bb6      	ldr	r3, [pc, #728]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040be:	6a1a      	ldr	r2, [r3, #32]
 80040c0:	4bb5      	ldr	r3, [pc, #724]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040c2:	2101      	movs	r1, #1
 80040c4:	438a      	bics	r2, r1
 80040c6:	621a      	str	r2, [r3, #32]
 80040c8:	4bb3      	ldr	r3, [pc, #716]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	4bb2      	ldr	r3, [pc, #712]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040ce:	2104      	movs	r1, #4
 80040d0:	438a      	bics	r2, r1
 80040d2:	621a      	str	r2, [r3, #32]
 80040d4:	e01c      	b.n	8004110 <HAL_RCC_OscConfig+0x398>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x380>
 80040de:	4bae      	ldr	r3, [pc, #696]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040e0:	6a1a      	ldr	r2, [r3, #32]
 80040e2:	4bad      	ldr	r3, [pc, #692]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040e4:	2104      	movs	r1, #4
 80040e6:	430a      	orrs	r2, r1
 80040e8:	621a      	str	r2, [r3, #32]
 80040ea:	4bab      	ldr	r3, [pc, #684]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	4baa      	ldr	r3, [pc, #680]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040f0:	2101      	movs	r1, #1
 80040f2:	430a      	orrs	r2, r1
 80040f4:	621a      	str	r2, [r3, #32]
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0x398>
 80040f8:	4ba7      	ldr	r3, [pc, #668]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040fa:	6a1a      	ldr	r2, [r3, #32]
 80040fc:	4ba6      	ldr	r3, [pc, #664]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80040fe:	2101      	movs	r1, #1
 8004100:	438a      	bics	r2, r1
 8004102:	621a      	str	r2, [r3, #32]
 8004104:	4ba4      	ldr	r3, [pc, #656]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	4ba3      	ldr	r3, [pc, #652]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800410a:	2104      	movs	r1, #4
 800410c:	438a      	bics	r2, r1
 800410e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d014      	beq.n	8004142 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7ff fba2 	bl	8003860 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	e009      	b.n	8004136 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7ff fb9d 	bl	8003860 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	4a9b      	ldr	r2, [pc, #620]	@ (800439c <HAL_RCC_OscConfig+0x624>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e12b      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004136:	4b98      	ldr	r3, [pc, #608]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	2202      	movs	r2, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d0f0      	beq.n	8004122 <HAL_RCC_OscConfig+0x3aa>
 8004140:	e013      	b.n	800416a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7ff fb8d 	bl	8003860 <HAL_GetTick>
 8004146:	0003      	movs	r3, r0
 8004148:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414a:	e009      	b.n	8004160 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7ff fb88 	bl	8003860 <HAL_GetTick>
 8004150:	0002      	movs	r2, r0
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	4a91      	ldr	r2, [pc, #580]	@ (800439c <HAL_RCC_OscConfig+0x624>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e116      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004160:	4b8d      	ldr	r3, [pc, #564]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	2202      	movs	r2, #2
 8004166:	4013      	ands	r3, r2
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800416a:	231f      	movs	r3, #31
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b88      	ldr	r3, [pc, #544]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	4b87      	ldr	r3, [pc, #540]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800417a:	4989      	ldr	r1, [pc, #548]	@ (80043a0 <HAL_RCC_OscConfig+0x628>)
 800417c:	400a      	ands	r2, r1
 800417e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2210      	movs	r2, #16
 8004186:	4013      	ands	r3, r2
 8004188:	d063      	beq.n	8004252 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d12a      	bne.n	80041e8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004192:	4b81      	ldr	r3, [pc, #516]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004196:	4b80      	ldr	r3, [pc, #512]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004198:	2104      	movs	r1, #4
 800419a:	430a      	orrs	r2, r1
 800419c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800419e:	4b7e      	ldr	r3, [pc, #504]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a2:	4b7d      	ldr	r3, [pc, #500]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041a4:	2101      	movs	r1, #1
 80041a6:	430a      	orrs	r2, r1
 80041a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7ff fb59 	bl	8003860 <HAL_GetTick>
 80041ae:	0003      	movs	r3, r0
 80041b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041b4:	f7ff fb54 	bl	8003860 <HAL_GetTick>
 80041b8:	0002      	movs	r2, r0
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0e3      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041c6:	4b74      	ldr	r3, [pc, #464]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ca:	2202      	movs	r2, #2
 80041cc:	4013      	ands	r3, r2
 80041ce:	d0f1      	beq.n	80041b4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041d0:	4b71      	ldr	r3, [pc, #452]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	22f8      	movs	r2, #248	@ 0xf8
 80041d6:	4393      	bics	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	00da      	lsls	r2, r3, #3
 80041e0:	4b6d      	ldr	r3, [pc, #436]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041e2:	430a      	orrs	r2, r1
 80041e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80041e6:	e034      	b.n	8004252 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	3305      	adds	r3, #5
 80041ee:	d111      	bne.n	8004214 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80041f0:	4b69      	ldr	r3, [pc, #420]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f4:	4b68      	ldr	r3, [pc, #416]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041f6:	2104      	movs	r1, #4
 80041f8:	438a      	bics	r2, r1
 80041fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041fc:	4b66      	ldr	r3, [pc, #408]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80041fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004200:	22f8      	movs	r2, #248	@ 0xf8
 8004202:	4393      	bics	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	00da      	lsls	r2, r3, #3
 800420c:	4b62      	ldr	r3, [pc, #392]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800420e:	430a      	orrs	r2, r1
 8004210:	635a      	str	r2, [r3, #52]	@ 0x34
 8004212:	e01e      	b.n	8004252 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004214:	4b60      	ldr	r3, [pc, #384]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004216:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004218:	4b5f      	ldr	r3, [pc, #380]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800421a:	2104      	movs	r1, #4
 800421c:	430a      	orrs	r2, r1
 800421e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004220:	4b5d      	ldr	r3, [pc, #372]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004224:	4b5c      	ldr	r3, [pc, #368]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422c:	f7ff fb18 	bl	8003860 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004236:	f7ff fb13 	bl	8003860 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0a2      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004248:	4b53      	ldr	r3, [pc, #332]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800424a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800424c:	2202      	movs	r2, #2
 800424e:	4013      	ands	r3, r2
 8004250:	d1f1      	bne.n	8004236 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d100      	bne.n	800425c <HAL_RCC_OscConfig+0x4e4>
 800425a:	e097      	b.n	800438c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425c:	4b4e      	ldr	r3, [pc, #312]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	220c      	movs	r2, #12
 8004262:	4013      	ands	r3, r2
 8004264:	2b08      	cmp	r3, #8
 8004266:	d100      	bne.n	800426a <HAL_RCC_OscConfig+0x4f2>
 8004268:	e06b      	b.n	8004342 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d14c      	bne.n	800430c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004272:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b48      	ldr	r3, [pc, #288]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004278:	494a      	ldr	r1, [pc, #296]	@ (80043a4 <HAL_RCC_OscConfig+0x62c>)
 800427a:	400a      	ands	r2, r1
 800427c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427e:	f7ff faef 	bl	8003860 <HAL_GetTick>
 8004282:	0003      	movs	r3, r0
 8004284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004288:	f7ff faea 	bl	8003860 <HAL_GetTick>
 800428c:	0002      	movs	r2, r0
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e079      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429a:	4b3f      	ldr	r3, [pc, #252]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	049b      	lsls	r3, r3, #18
 80042a2:	4013      	ands	r3, r2
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	220f      	movs	r2, #15
 80042ac:	4393      	bics	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b4:	4b38      	ldr	r3, [pc, #224]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80042b6:	430a      	orrs	r2, r1
 80042b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042ba:	4b37      	ldr	r3, [pc, #220]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a3a      	ldr	r2, [pc, #232]	@ (80043a8 <HAL_RCC_OscConfig+0x630>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	0019      	movs	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	431a      	orrs	r2, r3
 80042ce:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042d4:	4b30      	ldr	r3, [pc, #192]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 80042da:	2180      	movs	r1, #128	@ 0x80
 80042dc:	0449      	lsls	r1, r1, #17
 80042de:	430a      	orrs	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e2:	f7ff fabd 	bl	8003860 <HAL_GetTick>
 80042e6:	0003      	movs	r3, r0
 80042e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ec:	f7ff fab8 	bl	8003860 <HAL_GetTick>
 80042f0:	0002      	movs	r2, r0
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e047      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80042fe:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	2380      	movs	r3, #128	@ 0x80
 8004304:	049b      	lsls	r3, r3, #18
 8004306:	4013      	ands	r3, r2
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x574>
 800430a:	e03f      	b.n	800438c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800430c:	4b22      	ldr	r3, [pc, #136]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b21      	ldr	r3, [pc, #132]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004312:	4924      	ldr	r1, [pc, #144]	@ (80043a4 <HAL_RCC_OscConfig+0x62c>)
 8004314:	400a      	ands	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7ff faa2 	bl	8003860 <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004322:	f7ff fa9d 	bl	8003860 <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e02c      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004334:	4b18      	ldr	r3, [pc, #96]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	2380      	movs	r3, #128	@ 0x80
 800433a:	049b      	lsls	r3, r3, #18
 800433c:	4013      	ands	r3, r2
 800433e:	d1f0      	bne.n	8004322 <HAL_RCC_OscConfig+0x5aa>
 8004340:	e024      	b.n	800438c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e01f      	b.n	800438e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800434e:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004354:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <HAL_RCC_OscConfig+0x620>)
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	025b      	lsls	r3, r3, #9
 8004360:	401a      	ands	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	429a      	cmp	r2, r3
 8004368:	d10e      	bne.n	8004388 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	220f      	movs	r2, #15
 800436e:	401a      	ands	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	23f0      	movs	r3, #240	@ 0xf0
 800437c:	039b      	lsls	r3, r3, #14
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b008      	add	sp, #32
 8004394:	bd80      	pop	{r7, pc}
 8004396:	46c0      	nop			@ (mov r8, r8)
 8004398:	40021000 	.word	0x40021000
 800439c:	00001388 	.word	0x00001388
 80043a0:	efffffff 	.word	0xefffffff
 80043a4:	feffffff 	.word	0xfeffffff
 80043a8:	ffc2ffff 	.word	0xffc2ffff

080043ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e0b3      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2201      	movs	r2, #1
 80043c6:	4013      	ands	r3, r2
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d911      	bls.n	80043f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b58      	ldr	r3, [pc, #352]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	4393      	bics	r3, r2
 80043d6:	0019      	movs	r1, r3
 80043d8:	4b55      	ldr	r3, [pc, #340]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	4b53      	ldr	r3, [pc, #332]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2201      	movs	r2, #1
 80043e6:	4013      	ands	r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d001      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e09a      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2202      	movs	r2, #2
 80043f8:	4013      	ands	r3, r2
 80043fa:	d015      	beq.n	8004428 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	d006      	beq.n	8004414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004406:	4b4b      	ldr	r3, [pc, #300]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 800440c:	21e0      	movs	r1, #224	@ 0xe0
 800440e:	00c9      	lsls	r1, r1, #3
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004414:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	22f0      	movs	r2, #240	@ 0xf0
 800441a:	4393      	bics	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	4b44      	ldr	r3, [pc, #272]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004424:	430a      	orrs	r2, r1
 8004426:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2201      	movs	r2, #1
 800442e:	4013      	ands	r3, r2
 8004430:	d040      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	4b3e      	ldr	r3, [pc, #248]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	2380      	movs	r3, #128	@ 0x80
 8004440:	029b      	lsls	r3, r3, #10
 8004442:	4013      	ands	r3, r2
 8004444:	d114      	bne.n	8004470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e06e      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004452:	4b38      	ldr	r3, [pc, #224]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	2380      	movs	r3, #128	@ 0x80
 8004458:	049b      	lsls	r3, r3, #18
 800445a:	4013      	ands	r3, r2
 800445c:	d108      	bne.n	8004470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e062      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004462:	4b34      	ldr	r3, [pc, #208]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2202      	movs	r2, #2
 8004468:	4013      	ands	r3, r2
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e05b      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004470:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2203      	movs	r2, #3
 8004476:	4393      	bics	r3, r2
 8004478:	0019      	movs	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	4b2d      	ldr	r3, [pc, #180]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004484:	f7ff f9ec 	bl	8003860 <HAL_GetTick>
 8004488:	0003      	movs	r3, r0
 800448a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448c:	e009      	b.n	80044a2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448e:	f7ff f9e7 	bl	8003860 <HAL_GetTick>
 8004492:	0002      	movs	r2, r0
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	4a27      	ldr	r2, [pc, #156]	@ (8004538 <HAL_RCC_ClockConfig+0x18c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e042      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b24      	ldr	r3, [pc, #144]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	220c      	movs	r2, #12
 80044a8:	401a      	ands	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1ec      	bne.n	800448e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b4:	4b1e      	ldr	r3, [pc, #120]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2201      	movs	r2, #1
 80044ba:	4013      	ands	r3, r2
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d211      	bcs.n	80044e6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	4393      	bics	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	4b18      	ldr	r3, [pc, #96]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d4:	4b16      	ldr	r3, [pc, #88]	@ (8004530 <HAL_RCC_ClockConfig+0x184>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2201      	movs	r2, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e020      	b.n	8004528 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2204      	movs	r2, #4
 80044ec:	4013      	ands	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044f0:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	4a11      	ldr	r2, [pc, #68]	@ (800453c <HAL_RCC_ClockConfig+0x190>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	0019      	movs	r1, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004504:	f000 f820 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 8004508:	0001      	movs	r1, r0
 800450a:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <HAL_RCC_ClockConfig+0x188>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	220f      	movs	r2, #15
 8004512:	4013      	ands	r3, r2
 8004514:	4a0a      	ldr	r2, [pc, #40]	@ (8004540 <HAL_RCC_ClockConfig+0x194>)
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	000a      	movs	r2, r1
 800451a:	40da      	lsrs	r2, r3
 800451c:	4b09      	ldr	r3, [pc, #36]	@ (8004544 <HAL_RCC_ClockConfig+0x198>)
 800451e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004520:	2003      	movs	r0, #3
 8004522:	f7ff f957 	bl	80037d4 <HAL_InitTick>
  
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b004      	add	sp, #16
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40022000 	.word	0x40022000
 8004534:	40021000 	.word	0x40021000
 8004538:	00001388 	.word	0x00001388
 800453c:	fffff8ff 	.word	0xfffff8ff
 8004540:	080095a8 	.word	0x080095a8
 8004544:	20000034 	.word	0x20000034

08004548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	2300      	movs	r3, #0
 800455c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004562:	4b20      	ldr	r3, [pc, #128]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	220c      	movs	r2, #12
 800456c:	4013      	ands	r3, r2
 800456e:	2b04      	cmp	r3, #4
 8004570:	d002      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x30>
 8004572:	2b08      	cmp	r3, #8
 8004574:	d003      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x36>
 8004576:	e02c      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004578:	4b1b      	ldr	r3, [pc, #108]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800457a:	613b      	str	r3, [r7, #16]
      break;
 800457c:	e02c      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	0c9b      	lsrs	r3, r3, #18
 8004582:	220f      	movs	r2, #15
 8004584:	4013      	ands	r3, r2
 8004586:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004588:	5cd3      	ldrb	r3, [r2, r3]
 800458a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800458c:	4b15      	ldr	r3, [pc, #84]	@ (80045e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004590:	220f      	movs	r2, #15
 8004592:	4013      	ands	r3, r2
 8004594:	4a16      	ldr	r2, [pc, #88]	@ (80045f0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	2380      	movs	r3, #128	@ 0x80
 800459e:	025b      	lsls	r3, r3, #9
 80045a0:	4013      	ands	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045a4:	68b9      	ldr	r1, [r7, #8]
 80045a6:	4810      	ldr	r0, [pc, #64]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045a8:	f7fb fdca 	bl	8000140 <__udivsi3>
 80045ac:	0003      	movs	r3, r0
 80045ae:	001a      	movs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4353      	muls	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e009      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	000a      	movs	r2, r1
 80045bc:	0152      	lsls	r2, r2, #5
 80045be:	1a52      	subs	r2, r2, r1
 80045c0:	0193      	lsls	r3, r2, #6
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	185b      	adds	r3, r3, r1
 80045c8:	021b      	lsls	r3, r3, #8
 80045ca:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	613b      	str	r3, [r7, #16]
      break;
 80045d0:	e002      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045d2:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045d4:	613b      	str	r3, [r7, #16]
      break;
 80045d6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80045d8:	693b      	ldr	r3, [r7, #16]
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	b006      	add	sp, #24
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	40021000 	.word	0x40021000
 80045e8:	007a1200 	.word	0x007a1200
 80045ec:	080095b8 	.word	0x080095b8
 80045f0:	080095c8 	.word	0x080095c8

080045f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e0a8      	b.n	8004758 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	2382      	movs	r3, #130	@ 0x82
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	429a      	cmp	r2, r3
 8004618:	d009      	beq.n	800462e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	61da      	str	r2, [r3, #28]
 8004620:	e005      	b.n	800462e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	225d      	movs	r2, #93	@ 0x5d
 8004638:	5c9b      	ldrb	r3, [r3, r2]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	225c      	movs	r2, #92	@ 0x5c
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	0018      	movs	r0, r3
 800464c:	f7fe ff3a 	bl	80034c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	225d      	movs	r2, #93	@ 0x5d
 8004654:	2102      	movs	r1, #2
 8004656:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2140      	movs	r1, #64	@ 0x40
 8004664:	438a      	bics	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	23e0      	movs	r3, #224	@ 0xe0
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	429a      	cmp	r2, r3
 8004672:	d902      	bls.n	800467a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e002      	b.n	8004680 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800467a:	2380      	movs	r3, #128	@ 0x80
 800467c:	015b      	lsls	r3, r3, #5
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68da      	ldr	r2, [r3, #12]
 8004684:	23f0      	movs	r3, #240	@ 0xf0
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	429a      	cmp	r2, r3
 800468a:	d008      	beq.n	800469e <HAL_SPI_Init+0xaa>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	23e0      	movs	r3, #224	@ 0xe0
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	429a      	cmp	r2, r3
 8004696:	d002      	beq.n	800469e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	2382      	movs	r3, #130	@ 0x82
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	401a      	ands	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6899      	ldr	r1, [r3, #8]
 80046ac:	2384      	movs	r3, #132	@ 0x84
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	400b      	ands	r3, r1
 80046b2:	431a      	orrs	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2102      	movs	r1, #2
 80046ba:	400b      	ands	r3, r1
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2101      	movs	r1, #1
 80046c4:	400b      	ands	r3, r1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6999      	ldr	r1, [r3, #24]
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	400b      	ands	r3, r1
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2138      	movs	r1, #56	@ 0x38
 80046da:	400b      	ands	r3, r1
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	2180      	movs	r1, #128	@ 0x80
 80046e4:	400b      	ands	r3, r1
 80046e6:	431a      	orrs	r2, r3
 80046e8:	0011      	movs	r1, r2
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ee:	2380      	movs	r3, #128	@ 0x80
 80046f0:	019b      	lsls	r3, r3, #6
 80046f2:	401a      	ands	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	0c1b      	lsrs	r3, r3, #16
 8004702:	2204      	movs	r2, #4
 8004704:	401a      	ands	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	2110      	movs	r1, #16
 800470c:	400b      	ands	r3, r1
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004714:	2108      	movs	r1, #8
 8004716:	400b      	ands	r3, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68d9      	ldr	r1, [r3, #12]
 800471e:	23f0      	movs	r3, #240	@ 0xf0
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	400b      	ands	r3, r1
 8004724:	431a      	orrs	r2, r3
 8004726:	0011      	movs	r1, r2
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	2380      	movs	r3, #128	@ 0x80
 800472c:	015b      	lsls	r3, r3, #5
 800472e:	401a      	ands	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4907      	ldr	r1, [pc, #28]	@ (8004760 <HAL_SPI_Init+0x16c>)
 8004744:	400a      	ands	r2, r1
 8004746:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	225d      	movs	r2, #93	@ 0x5d
 8004752:	2101      	movs	r1, #1
 8004754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b004      	add	sp, #16
 800475e:	bd80      	pop	{r7, pc}
 8004760:	fffff7ff 	.word	0xfffff7ff

08004764 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	1dbb      	adds	r3, r7, #6
 8004772:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004774:	231f      	movs	r3, #31
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	225c      	movs	r2, #92	@ 0x5c
 8004780:	5c9b      	ldrb	r3, [r3, r2]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_SPI_Transmit+0x26>
 8004786:	2302      	movs	r3, #2
 8004788:	e147      	b.n	8004a1a <HAL_SPI_Transmit+0x2b6>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	225c      	movs	r2, #92	@ 0x5c
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004792:	f7ff f865 	bl	8003860 <HAL_GetTick>
 8004796:	0003      	movs	r3, r0
 8004798:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800479a:	2316      	movs	r3, #22
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	1dba      	adds	r2, r7, #6
 80047a0:	8812      	ldrh	r2, [r2, #0]
 80047a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	225d      	movs	r2, #93	@ 0x5d
 80047a8:	5c9b      	ldrb	r3, [r3, r2]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d004      	beq.n	80047ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80047b0:	231f      	movs	r3, #31
 80047b2:	18fb      	adds	r3, r7, r3
 80047b4:	2202      	movs	r2, #2
 80047b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80047b8:	e128      	b.n	8004a0c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_SPI_Transmit+0x64>
 80047c0:	1dbb      	adds	r3, r7, #6
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80047c8:	231f      	movs	r3, #31
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2201      	movs	r2, #1
 80047ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80047d0:	e11c      	b.n	8004a0c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	225d      	movs	r2, #93	@ 0x5d
 80047d6:	2103      	movs	r1, #3
 80047d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	1dba      	adds	r2, r7, #6
 80047ea:	8812      	ldrh	r2, [r2, #0]
 80047ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1dba      	adds	r2, r7, #6
 80047f2:	8812      	ldrh	r2, [r2, #0]
 80047f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2244      	movs	r2, #68	@ 0x44
 8004800:	2100      	movs	r1, #0
 8004802:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2246      	movs	r2, #70	@ 0x46
 8004808:	2100      	movs	r1, #0
 800480a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	429a      	cmp	r2, r3
 8004822:	d110      	bne.n	8004846 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2140      	movs	r1, #64	@ 0x40
 8004830:	438a      	bics	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2180      	movs	r1, #128	@ 0x80
 8004840:	01c9      	lsls	r1, r1, #7
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2240      	movs	r2, #64	@ 0x40
 800484e:	4013      	ands	r3, r2
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d007      	beq.n	8004864 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2140      	movs	r1, #64	@ 0x40
 8004860:	430a      	orrs	r2, r1
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	23e0      	movs	r3, #224	@ 0xe0
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	429a      	cmp	r2, r3
 800486e:	d952      	bls.n	8004916 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <HAL_SPI_Transmit+0x11e>
 8004878:	2316      	movs	r3, #22
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d143      	bne.n	800490a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	881a      	ldrh	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800489c:	b29b      	uxth	r3, r3
 800489e:	3b01      	subs	r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048a6:	e030      	b.n	800490a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d112      	bne.n	80048dc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	881a      	ldrh	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80048da:	e016      	b.n	800490a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048dc:	f7fe ffc0 	bl	8003860 <HAL_GetTick>
 80048e0:	0002      	movs	r2, r0
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d802      	bhi.n	80048f2 <HAL_SPI_Transmit+0x18e>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	d102      	bne.n	80048f8 <HAL_SPI_Transmit+0x194>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d108      	bne.n	800490a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80048f8:	231f      	movs	r3, #31
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	2203      	movs	r2, #3
 80048fe:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	225d      	movs	r2, #93	@ 0x5d
 8004904:	2101      	movs	r1, #1
 8004906:	5499      	strb	r1, [r3, r2]
          goto error;
 8004908:	e080      	b.n	8004a0c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1c9      	bne.n	80048a8 <HAL_SPI_Transmit+0x144>
 8004914:	e053      	b.n	80049be <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <HAL_SPI_Transmit+0x1c4>
 800491e:	2316      	movs	r3, #22
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d145      	bne.n	80049b4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800494e:	e031      	b.n	80049b4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2202      	movs	r2, #2
 8004958:	4013      	ands	r3, r2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d113      	bne.n	8004986 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	7812      	ldrb	r2, [r2, #0]
 800496a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004984:	e016      	b.n	80049b4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004986:	f7fe ff6b 	bl	8003860 <HAL_GetTick>
 800498a:	0002      	movs	r2, r0
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	429a      	cmp	r2, r3
 8004994:	d802      	bhi.n	800499c <HAL_SPI_Transmit+0x238>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	3301      	adds	r3, #1
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Transmit+0x23e>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d108      	bne.n	80049b4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80049a2:	231f      	movs	r3, #31
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	2203      	movs	r2, #3
 80049a8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	225d      	movs	r2, #93	@ 0x5d
 80049ae:	2101      	movs	r1, #1
 80049b0:	5499      	strb	r1, [r3, r2]
          goto error;
 80049b2:	e02b      	b.n	8004a0c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c8      	bne.n	8004950 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 f95d 	bl	8004c84 <SPI_EndRxTxTransaction>
 80049ca:	1e03      	subs	r3, r0, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049dc:	2300      	movs	r3, #0
 80049de:	613b      	str	r3, [r7, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80049fa:	231f      	movs	r3, #31
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
 8004a02:	e003      	b.n	8004a0c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	225d      	movs	r2, #93	@ 0x5d
 8004a08:	2101      	movs	r1, #1
 8004a0a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	225c      	movs	r2, #92	@ 0x5c
 8004a10:	2100      	movs	r1, #0
 8004a12:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004a14:	231f      	movs	r3, #31
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	781b      	ldrb	r3, [r3, #0]
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b008      	add	sp, #32
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	1dfb      	adds	r3, r7, #7
 8004a32:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a34:	f7fe ff14 	bl	8003860 <HAL_GetTick>
 8004a38:	0002      	movs	r2, r0
 8004a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	18d3      	adds	r3, r2, r3
 8004a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a44:	f7fe ff0c 	bl	8003860 <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8004b38 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	015b      	lsls	r3, r3, #5
 8004a52:	0d1b      	lsrs	r3, r3, #20
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	4353      	muls	r3, r2
 8004a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a5a:	e058      	b.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	d055      	beq.n	8004b0e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a62:	f7fe fefd 	bl	8003860 <HAL_GetTick>
 8004a66:	0002      	movs	r2, r0
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d902      	bls.n	8004a78 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d142      	bne.n	8004afe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	21e0      	movs	r1, #224	@ 0xe0
 8004a84:	438a      	bics	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	2382      	movs	r3, #130	@ 0x82
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d113      	bne.n	8004abc <SPI_WaitFlagStateUntilTimeout+0x98>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	2380      	movs	r3, #128	@ 0x80
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d005      	beq.n	8004aac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	2380      	movs	r3, #128	@ 0x80
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d107      	bne.n	8004abc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2140      	movs	r1, #64	@ 0x40
 8004ab8:	438a      	bics	r2, r1
 8004aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ac0:	2380      	movs	r3, #128	@ 0x80
 8004ac2:	019b      	lsls	r3, r3, #6
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d110      	bne.n	8004aea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	491a      	ldr	r1, [pc, #104]	@ (8004b3c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2180      	movs	r1, #128	@ 0x80
 8004ae4:	0189      	lsls	r1, r1, #6
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	225d      	movs	r2, #93	@ 0x5d
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	225c      	movs	r2, #92	@ 0x5c
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e017      	b.n	8004b2e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	425a      	negs	r2, r3
 8004b1e:	4153      	adcs	r3, r2
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	001a      	movs	r2, r3
 8004b24:	1dfb      	adds	r3, r7, #7
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d197      	bne.n	8004a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	0018      	movs	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b008      	add	sp, #32
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	20000034 	.word	0x20000034
 8004b3c:	ffffdfff 	.word	0xffffdfff

08004b40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b4e:	2317      	movs	r3, #23
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b56:	f7fe fe83 	bl	8003860 <HAL_GetTick>
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	18d3      	adds	r3, r2, r3
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004b66:	f7fe fe7b 	bl	8003860 <HAL_GetTick>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	330c      	adds	r3, #12
 8004b74:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b76:	4b41      	ldr	r3, [pc, #260]	@ (8004c7c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	0013      	movs	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	00da      	lsls	r2, r3, #3
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	0d1b      	lsrs	r3, r3, #20
 8004b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b88:	4353      	muls	r3, r2
 8004b8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b8c:	e068      	b.n	8004c60 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	23c0      	movs	r3, #192	@ 0xc0
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d10a      	bne.n	8004bae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d107      	bne.n	8004bae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	2117      	movs	r1, #23
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	d055      	beq.n	8004c60 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bb4:	f7fe fe54 	bl	8003860 <HAL_GetTick>
 8004bb8:	0002      	movs	r2, r0
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d902      	bls.n	8004bca <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d142      	bne.n	8004c50 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	21e0      	movs	r1, #224	@ 0xe0
 8004bd6:	438a      	bics	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	2382      	movs	r3, #130	@ 0x82
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d113      	bne.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d005      	beq.n	8004bfe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	2380      	movs	r3, #128	@ 0x80
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d107      	bne.n	8004c0e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2140      	movs	r1, #64	@ 0x40
 8004c0a:	438a      	bics	r2, r1
 8004c0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c12:	2380      	movs	r3, #128	@ 0x80
 8004c14:	019b      	lsls	r3, r3, #6
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d110      	bne.n	8004c3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4916      	ldr	r1, [pc, #88]	@ (8004c80 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004c26:	400a      	ands	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2180      	movs	r1, #128	@ 0x80
 8004c36:	0189      	lsls	r1, r1, #6
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	225d      	movs	r2, #93	@ 0x5d
 8004c40:	2101      	movs	r1, #1
 8004c42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	225c      	movs	r2, #92	@ 0x5c
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e010      	b.n	8004c72 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d18e      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	0018      	movs	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b00a      	add	sp, #40	@ 0x28
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	20000034 	.word	0x20000034
 8004c80:	ffffdfff 	.word	0xffffdfff

08004c84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	23c0      	movs	r3, #192	@ 0xc0
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	0013      	movs	r3, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f7ff ff4e 	bl	8004b40 <SPI_WaitFifoStateUntilTimeout>
 8004ca4:	1e03      	subs	r3, r0, #0
 8004ca6:	d007      	beq.n	8004cb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cac:	2220      	movs	r2, #32
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e027      	b.n	8004d08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	0013      	movs	r3, r2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2180      	movs	r1, #128	@ 0x80
 8004cc6:	f7ff fead 	bl	8004a24 <SPI_WaitFlagStateUntilTimeout>
 8004cca:	1e03      	subs	r3, r0, #0
 8004ccc:	d007      	beq.n	8004cde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e014      	b.n	8004d08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	23c0      	movs	r3, #192	@ 0xc0
 8004ce2:	00d9      	lsls	r1, r3, #3
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	0013      	movs	r3, r2
 8004cec:	2200      	movs	r2, #0
 8004cee:	f7ff ff27 	bl	8004b40 <SPI_WaitFifoStateUntilTimeout>
 8004cf2:	1e03      	subs	r3, r0, #0
 8004cf4:	d007      	beq.n	8004d06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e000      	b.n	8004d08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b004      	add	sp, #16
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e042      	b.n	8004da8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	223d      	movs	r2, #61	@ 0x3d
 8004d26:	5c9b      	ldrb	r3, [r3, r2]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	223c      	movs	r2, #60	@ 0x3c
 8004d32:	2100      	movs	r1, #0
 8004d34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f7fe fc0f 	bl	800355c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	223d      	movs	r2, #61	@ 0x3d
 8004d42:	2102      	movs	r1, #2
 8004d44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	0019      	movs	r1, r3
 8004d50:	0010      	movs	r0, r2
 8004d52:	f000 f901 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2246      	movs	r2, #70	@ 0x46
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	223e      	movs	r2, #62	@ 0x3e
 8004d62:	2101      	movs	r1, #1
 8004d64:	5499      	strb	r1, [r3, r2]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	223f      	movs	r2, #63	@ 0x3f
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	5499      	strb	r1, [r3, r2]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2240      	movs	r2, #64	@ 0x40
 8004d72:	2101      	movs	r1, #1
 8004d74:	5499      	strb	r1, [r3, r2]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2241      	movs	r2, #65	@ 0x41
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2242      	movs	r2, #66	@ 0x42
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2243      	movs	r2, #67	@ 0x43
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	5499      	strb	r1, [r3, r2]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2244      	movs	r2, #68	@ 0x44
 8004d92:	2101      	movs	r1, #1
 8004d94:	5499      	strb	r1, [r3, r2]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2245      	movs	r2, #69	@ 0x45
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	223d      	movs	r2, #61	@ 0x3d
 8004da2:	2101      	movs	r1, #1
 8004da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b002      	add	sp, #8
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	230f      	movs	r3, #15
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	223c      	movs	r2, #60	@ 0x3c
 8004dc6:	5c9b      	ldrb	r3, [r3, r2]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d101      	bne.n	8004dd0 <HAL_TIM_ConfigClockSource+0x20>
 8004dcc:	2302      	movs	r3, #2
 8004dce:	e0bc      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x19a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	223c      	movs	r2, #60	@ 0x3c
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	223d      	movs	r2, #61	@ 0x3d
 8004ddc:	2102      	movs	r1, #2
 8004dde:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2277      	movs	r2, #119	@ 0x77
 8004dec:	4393      	bics	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4a58      	ldr	r2, [pc, #352]	@ (8004f54 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2280      	movs	r2, #128	@ 0x80
 8004e06:	0192      	lsls	r2, r2, #6
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d040      	beq.n	8004e8e <HAL_TIM_ConfigClockSource+0xde>
 8004e0c:	2280      	movs	r2, #128	@ 0x80
 8004e0e:	0192      	lsls	r2, r2, #6
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d900      	bls.n	8004e16 <HAL_TIM_ConfigClockSource+0x66>
 8004e14:	e088      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e16:	2280      	movs	r2, #128	@ 0x80
 8004e18:	0152      	lsls	r2, r2, #5
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d100      	bne.n	8004e20 <HAL_TIM_ConfigClockSource+0x70>
 8004e1e:	e088      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x182>
 8004e20:	2280      	movs	r2, #128	@ 0x80
 8004e22:	0152      	lsls	r2, r2, #5
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d900      	bls.n	8004e2a <HAL_TIM_ConfigClockSource+0x7a>
 8004e28:	e07e      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e2a:	2b70      	cmp	r3, #112	@ 0x70
 8004e2c:	d018      	beq.n	8004e60 <HAL_TIM_ConfigClockSource+0xb0>
 8004e2e:	d900      	bls.n	8004e32 <HAL_TIM_ConfigClockSource+0x82>
 8004e30:	e07a      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e32:	2b60      	cmp	r3, #96	@ 0x60
 8004e34:	d04f      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x126>
 8004e36:	d900      	bls.n	8004e3a <HAL_TIM_ConfigClockSource+0x8a>
 8004e38:	e076      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e3a:	2b50      	cmp	r3, #80	@ 0x50
 8004e3c:	d03b      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x106>
 8004e3e:	d900      	bls.n	8004e42 <HAL_TIM_ConfigClockSource+0x92>
 8004e40:	e072      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e42:	2b40      	cmp	r3, #64	@ 0x40
 8004e44:	d057      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x146>
 8004e46:	d900      	bls.n	8004e4a <HAL_TIM_ConfigClockSource+0x9a>
 8004e48:	e06e      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e4a:	2b30      	cmp	r3, #48	@ 0x30
 8004e4c:	d063      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x166>
 8004e4e:	d86b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d060      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x166>
 8004e54:	d868      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05d      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x166>
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d05b      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x166>
 8004e5e:	e063      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	f000 f970 	bl	8005154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2277      	movs	r2, #119	@ 0x77
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
      break;
 8004e8c:	e052      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e9e:	f000 f959 	bl	8005154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2180      	movs	r1, #128	@ 0x80
 8004eae:	01c9      	lsls	r1, r1, #7
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]
      break;
 8004eb4:	e03e      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	001a      	movs	r2, r3
 8004ec4:	f000 f8cc 	bl	8005060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2150      	movs	r1, #80	@ 0x50
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 f926 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e02e      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	f000 f8ea 	bl	80050bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2160      	movs	r1, #96	@ 0x60
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f000 f916 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e01e      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	001a      	movs	r2, r3
 8004f04:	f000 f8ac 	bl	8005060 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2140      	movs	r1, #64	@ 0x40
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f000 f906 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004f14:	e00e      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	0019      	movs	r1, r3
 8004f20:	0010      	movs	r0, r2
 8004f22:	f000 f8fd 	bl	8005120 <TIM_ITRx_SetConfig>
      break;
 8004f26:	e005      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004f28:	230f      	movs	r3, #15
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
      break;
 8004f30:	e000      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004f32:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	223d      	movs	r2, #61	@ 0x3d
 8004f38:	2101      	movs	r1, #1
 8004f3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	223c      	movs	r2, #60	@ 0x3c
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

  return status;
 8004f44:	230f      	movs	r3, #15
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b004      	add	sp, #16
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			@ (mov r8, r8)
 8004f54:	ffff00ff 	.word	0xffff00ff

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a36      	ldr	r2, [pc, #216]	@ (8005044 <TIM_Base_SetConfig+0xec>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0x20>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a35      	ldr	r2, [pc, #212]	@ (8005048 <TIM_Base_SetConfig+0xf0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d108      	bne.n	8004f8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2270      	movs	r2, #112	@ 0x70
 8004f7c:	4393      	bics	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005044 <TIM_Base_SetConfig+0xec>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	@ (8005048 <TIM_Base_SetConfig+0xf0>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00f      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	@ (800504c <TIM_Base_SetConfig+0xf4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00b      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8005050 <TIM_Base_SetConfig+0xf8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d007      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a29      	ldr	r2, [pc, #164]	@ (8005054 <TIM_Base_SetConfig+0xfc>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_Base_SetConfig+0x62>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a28      	ldr	r2, [pc, #160]	@ (8005058 <TIM_Base_SetConfig+0x100>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d108      	bne.n	8004fcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a27      	ldr	r2, [pc, #156]	@ (800505c <TIM_Base_SetConfig+0x104>)
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2280      	movs	r2, #128	@ 0x80
 8004fd0:	4393      	bics	r3, r2
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	@ (8005044 <TIM_Base_SetConfig+0xec>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00b      	beq.n	8005012 <TIM_Base_SetConfig+0xba>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a14      	ldr	r2, [pc, #80]	@ (8005050 <TIM_Base_SetConfig+0xf8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_Base_SetConfig+0xba>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a13      	ldr	r2, [pc, #76]	@ (8005054 <TIM_Base_SetConfig+0xfc>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_Base_SetConfig+0xba>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a12      	ldr	r2, [pc, #72]	@ (8005058 <TIM_Base_SetConfig+0x100>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d103      	bne.n	800501a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2201      	movs	r2, #1
 8005026:	4013      	ands	r3, r2
 8005028:	2b01      	cmp	r3, #1
 800502a:	d106      	bne.n	800503a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	2201      	movs	r2, #1
 8005032:	4393      	bics	r3, r2
 8005034:	001a      	movs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]
  }
}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	46bd      	mov	sp, r7
 800503e:	b004      	add	sp, #16
 8005040:	bd80      	pop	{r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40000400 	.word	0x40000400
 800504c:	40002000 	.word	0x40002000
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800
 800505c:	fffffcff 	.word	0xfffffcff

08005060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	2201      	movs	r2, #1
 8005078:	4393      	bics	r3, r2
 800507a:	001a      	movs	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	22f0      	movs	r2, #240	@ 0xf0
 800508a:	4393      	bics	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	220a      	movs	r2, #10
 800509c:	4393      	bics	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	46c0      	nop			@ (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b006      	add	sp, #24
 80050ba:	bd80      	pop	{r7, pc}

080050bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	2210      	movs	r2, #16
 80050d4:	4393      	bics	r3, r2
 80050d6:	001a      	movs	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4a0d      	ldr	r2, [pc, #52]	@ (800511c <TIM_TI2_ConfigInputStage+0x60>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	031b      	lsls	r3, r3, #12
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	22a0      	movs	r2, #160	@ 0xa0
 80050f8:	4393      	bics	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	621a      	str	r2, [r3, #32]
}
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b006      	add	sp, #24
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	ffff0fff 	.word	0xffff0fff

08005120 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2270      	movs	r2, #112	@ 0x70
 8005134:	4393      	bics	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	2207      	movs	r2, #7
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	609a      	str	r2, [r3, #8]
}
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	46bd      	mov	sp, r7
 800514e:	b004      	add	sp, #16
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4a09      	ldr	r2, [pc, #36]	@ (8005190 <TIM_ETR_SetConfig+0x3c>)
 800516c:	4013      	ands	r3, r2
 800516e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	021a      	lsls	r2, r3, #8
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	431a      	orrs	r2, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	609a      	str	r2, [r3, #8]
}
 8005188:	46c0      	nop			@ (mov r8, r8)
 800518a:	46bd      	mov	sp, r7
 800518c:	b006      	add	sp, #24
 800518e:	bd80      	pop	{r7, pc}
 8005190:	ffff00ff 	.word	0xffff00ff

08005194 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	223c      	movs	r2, #60	@ 0x3c
 80051a2:	5c9b      	ldrb	r3, [r3, r2]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e041      	b.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	223c      	movs	r2, #60	@ 0x3c
 80051b0:	2101      	movs	r1, #1
 80051b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	223d      	movs	r2, #61	@ 0x3d
 80051b8:	2102      	movs	r1, #2
 80051ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2270      	movs	r2, #112	@ 0x70
 80051d0:	4393      	bics	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a13      	ldr	r2, [pc, #76]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a11      	ldr	r2, [pc, #68]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a10      	ldr	r2, [pc, #64]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d10c      	bne.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2280      	movs	r2, #128	@ 0x80
 8005208:	4393      	bics	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	4313      	orrs	r3, r2
 8005214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	223d      	movs	r2, #61	@ 0x3d
 8005222:	2101      	movs	r1, #1
 8005224:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	223c      	movs	r2, #60	@ 0x3c
 800522a:	2100      	movs	r1, #0
 800522c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b004      	add	sp, #16
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40014000 	.word	0x40014000

08005244 <__cvt>:
 8005244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005246:	001f      	movs	r7, r3
 8005248:	2300      	movs	r3, #0
 800524a:	0016      	movs	r6, r2
 800524c:	b08b      	sub	sp, #44	@ 0x2c
 800524e:	429f      	cmp	r7, r3
 8005250:	da04      	bge.n	800525c <__cvt+0x18>
 8005252:	2180      	movs	r1, #128	@ 0x80
 8005254:	0609      	lsls	r1, r1, #24
 8005256:	187b      	adds	r3, r7, r1
 8005258:	001f      	movs	r7, r3
 800525a:	232d      	movs	r3, #45	@ 0x2d
 800525c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800525e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8005260:	7013      	strb	r3, [r2, #0]
 8005262:	2320      	movs	r3, #32
 8005264:	2203      	movs	r2, #3
 8005266:	439d      	bics	r5, r3
 8005268:	2d46      	cmp	r5, #70	@ 0x46
 800526a:	d007      	beq.n	800527c <__cvt+0x38>
 800526c:	002b      	movs	r3, r5
 800526e:	3b45      	subs	r3, #69	@ 0x45
 8005270:	4259      	negs	r1, r3
 8005272:	414b      	adcs	r3, r1
 8005274:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005276:	3a01      	subs	r2, #1
 8005278:	18cb      	adds	r3, r1, r3
 800527a:	9310      	str	r3, [sp, #64]	@ 0x40
 800527c:	ab09      	add	r3, sp, #36	@ 0x24
 800527e:	9304      	str	r3, [sp, #16]
 8005280:	ab08      	add	r3, sp, #32
 8005282:	9303      	str	r3, [sp, #12]
 8005284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005286:	9200      	str	r2, [sp, #0]
 8005288:	9302      	str	r3, [sp, #8]
 800528a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800528c:	0032      	movs	r2, r6
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	003b      	movs	r3, r7
 8005292:	f000 fe89 	bl	8005fa8 <_dtoa_r>
 8005296:	0004      	movs	r4, r0
 8005298:	2d47      	cmp	r5, #71	@ 0x47
 800529a:	d11b      	bne.n	80052d4 <__cvt+0x90>
 800529c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800529e:	07db      	lsls	r3, r3, #31
 80052a0:	d511      	bpl.n	80052c6 <__cvt+0x82>
 80052a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052a4:	18c3      	adds	r3, r0, r3
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2300      	movs	r3, #0
 80052ac:	0030      	movs	r0, r6
 80052ae:	0039      	movs	r1, r7
 80052b0:	f7fb f8cc 	bl	800044c <__aeabi_dcmpeq>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d001      	beq.n	80052bc <__cvt+0x78>
 80052b8:	9b07      	ldr	r3, [sp, #28]
 80052ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80052bc:	2230      	movs	r2, #48	@ 0x30
 80052be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052c0:	9907      	ldr	r1, [sp, #28]
 80052c2:	428b      	cmp	r3, r1
 80052c4:	d320      	bcc.n	8005308 <__cvt+0xc4>
 80052c6:	0020      	movs	r0, r4
 80052c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80052cc:	1b1b      	subs	r3, r3, r4
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	b00b      	add	sp, #44	@ 0x2c
 80052d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052d6:	18c3      	adds	r3, r0, r3
 80052d8:	9307      	str	r3, [sp, #28]
 80052da:	2d46      	cmp	r5, #70	@ 0x46
 80052dc:	d1e4      	bne.n	80052a8 <__cvt+0x64>
 80052de:	7803      	ldrb	r3, [r0, #0]
 80052e0:	2b30      	cmp	r3, #48	@ 0x30
 80052e2:	d10c      	bne.n	80052fe <__cvt+0xba>
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	0030      	movs	r0, r6
 80052ea:	0039      	movs	r1, r7
 80052ec:	f7fb f8ae 	bl	800044c <__aeabi_dcmpeq>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	d104      	bne.n	80052fe <__cvt+0xba>
 80052f4:	2301      	movs	r3, #1
 80052f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80052f8:	1a9b      	subs	r3, r3, r2
 80052fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005300:	9a07      	ldr	r2, [sp, #28]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	18d3      	adds	r3, r2, r3
 8005306:	e7ce      	b.n	80052a6 <__cvt+0x62>
 8005308:	1c59      	adds	r1, r3, #1
 800530a:	9109      	str	r1, [sp, #36]	@ 0x24
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e7d6      	b.n	80052be <__cvt+0x7a>

08005310 <__exponent>:
 8005310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005312:	232b      	movs	r3, #43	@ 0x2b
 8005314:	0005      	movs	r5, r0
 8005316:	000c      	movs	r4, r1
 8005318:	b085      	sub	sp, #20
 800531a:	7002      	strb	r2, [r0, #0]
 800531c:	2900      	cmp	r1, #0
 800531e:	da01      	bge.n	8005324 <__exponent+0x14>
 8005320:	424c      	negs	r4, r1
 8005322:	3302      	adds	r3, #2
 8005324:	706b      	strb	r3, [r5, #1]
 8005326:	2c09      	cmp	r4, #9
 8005328:	dd2c      	ble.n	8005384 <__exponent+0x74>
 800532a:	ab02      	add	r3, sp, #8
 800532c:	1dde      	adds	r6, r3, #7
 800532e:	0020      	movs	r0, r4
 8005330:	210a      	movs	r1, #10
 8005332:	f7fb f875 	bl	8000420 <__aeabi_idivmod>
 8005336:	0037      	movs	r7, r6
 8005338:	3130      	adds	r1, #48	@ 0x30
 800533a:	3e01      	subs	r6, #1
 800533c:	0020      	movs	r0, r4
 800533e:	7031      	strb	r1, [r6, #0]
 8005340:	210a      	movs	r1, #10
 8005342:	9401      	str	r4, [sp, #4]
 8005344:	f7fa ff86 	bl	8000254 <__divsi3>
 8005348:	9b01      	ldr	r3, [sp, #4]
 800534a:	0004      	movs	r4, r0
 800534c:	2b63      	cmp	r3, #99	@ 0x63
 800534e:	dcee      	bgt.n	800532e <__exponent+0x1e>
 8005350:	1eba      	subs	r2, r7, #2
 8005352:	1ca8      	adds	r0, r5, #2
 8005354:	0001      	movs	r1, r0
 8005356:	0013      	movs	r3, r2
 8005358:	3430      	adds	r4, #48	@ 0x30
 800535a:	7014      	strb	r4, [r2, #0]
 800535c:	ac02      	add	r4, sp, #8
 800535e:	3407      	adds	r4, #7
 8005360:	429c      	cmp	r4, r3
 8005362:	d80a      	bhi.n	800537a <__exponent+0x6a>
 8005364:	2300      	movs	r3, #0
 8005366:	42a2      	cmp	r2, r4
 8005368:	d803      	bhi.n	8005372 <__exponent+0x62>
 800536a:	3309      	adds	r3, #9
 800536c:	aa02      	add	r2, sp, #8
 800536e:	189b      	adds	r3, r3, r2
 8005370:	1bdb      	subs	r3, r3, r7
 8005372:	18c0      	adds	r0, r0, r3
 8005374:	1b40      	subs	r0, r0, r5
 8005376:	b005      	add	sp, #20
 8005378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537a:	781c      	ldrb	r4, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	700c      	strb	r4, [r1, #0]
 8005380:	3101      	adds	r1, #1
 8005382:	e7eb      	b.n	800535c <__exponent+0x4c>
 8005384:	2330      	movs	r3, #48	@ 0x30
 8005386:	18e4      	adds	r4, r4, r3
 8005388:	70ab      	strb	r3, [r5, #2]
 800538a:	1d28      	adds	r0, r5, #4
 800538c:	70ec      	strb	r4, [r5, #3]
 800538e:	e7f1      	b.n	8005374 <__exponent+0x64>

08005390 <_printf_float>:
 8005390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005392:	b097      	sub	sp, #92	@ 0x5c
 8005394:	000d      	movs	r5, r1
 8005396:	920a      	str	r2, [sp, #40]	@ 0x28
 8005398:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800539a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800539c:	9009      	str	r0, [sp, #36]	@ 0x24
 800539e:	f000 fceb 	bl	8005d78 <_localeconv_r>
 80053a2:	6803      	ldr	r3, [r0, #0]
 80053a4:	0018      	movs	r0, r3
 80053a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80053a8:	f7fa feae 	bl	8000108 <strlen>
 80053ac:	2300      	movs	r3, #0
 80053ae:	900f      	str	r0, [sp, #60]	@ 0x3c
 80053b0:	9314      	str	r3, [sp, #80]	@ 0x50
 80053b2:	7e2b      	ldrb	r3, [r5, #24]
 80053b4:	2207      	movs	r2, #7
 80053b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80053bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	05c9      	lsls	r1, r1, #23
 80053c2:	d545      	bpl.n	8005450 <_printf_float+0xc0>
 80053c4:	189b      	adds	r3, r3, r2
 80053c6:	4393      	bics	r3, r2
 80053c8:	001a      	movs	r2, r3
 80053ca:	3208      	adds	r2, #8
 80053cc:	6022      	str	r2, [r4, #0]
 80053ce:	2201      	movs	r2, #1
 80053d0:	681e      	ldr	r6, [r3, #0]
 80053d2:	685f      	ldr	r7, [r3, #4]
 80053d4:	007b      	lsls	r3, r7, #1
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80053da:	9610      	str	r6, [sp, #64]	@ 0x40
 80053dc:	64ae      	str	r6, [r5, #72]	@ 0x48
 80053de:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80053e0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80053e2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80053e4:	4ba7      	ldr	r3, [pc, #668]	@ (8005684 <_printf_float+0x2f4>)
 80053e6:	4252      	negs	r2, r2
 80053e8:	f7fd f836 	bl	8002458 <__aeabi_dcmpun>
 80053ec:	2800      	cmp	r0, #0
 80053ee:	d131      	bne.n	8005454 <_printf_float+0xc4>
 80053f0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80053f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80053f4:	2201      	movs	r2, #1
 80053f6:	4ba3      	ldr	r3, [pc, #652]	@ (8005684 <_printf_float+0x2f4>)
 80053f8:	4252      	negs	r2, r2
 80053fa:	f7fb f837 	bl	800046c <__aeabi_dcmple>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d128      	bne.n	8005454 <_printf_float+0xc4>
 8005402:	2200      	movs	r2, #0
 8005404:	2300      	movs	r3, #0
 8005406:	0030      	movs	r0, r6
 8005408:	0039      	movs	r1, r7
 800540a:	f7fb f825 	bl	8000458 <__aeabi_dcmplt>
 800540e:	2800      	cmp	r0, #0
 8005410:	d003      	beq.n	800541a <_printf_float+0x8a>
 8005412:	002b      	movs	r3, r5
 8005414:	222d      	movs	r2, #45	@ 0x2d
 8005416:	3343      	adds	r3, #67	@ 0x43
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800541c:	4f9a      	ldr	r7, [pc, #616]	@ (8005688 <_printf_float+0x2f8>)
 800541e:	2b47      	cmp	r3, #71	@ 0x47
 8005420:	d900      	bls.n	8005424 <_printf_float+0x94>
 8005422:	4f9a      	ldr	r7, [pc, #616]	@ (800568c <_printf_float+0x2fc>)
 8005424:	2303      	movs	r3, #3
 8005426:	2400      	movs	r4, #0
 8005428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800542a:	612b      	str	r3, [r5, #16]
 800542c:	3301      	adds	r3, #1
 800542e:	439a      	bics	r2, r3
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005434:	0029      	movs	r1, r5
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800543a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800543c:	aa15      	add	r2, sp, #84	@ 0x54
 800543e:	f000 f9e5 	bl	800580c <_printf_common>
 8005442:	3001      	adds	r0, #1
 8005444:	d000      	beq.n	8005448 <_printf_float+0xb8>
 8005446:	e09f      	b.n	8005588 <_printf_float+0x1f8>
 8005448:	2001      	movs	r0, #1
 800544a:	4240      	negs	r0, r0
 800544c:	b017      	add	sp, #92	@ 0x5c
 800544e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005450:	3307      	adds	r3, #7
 8005452:	e7b8      	b.n	80053c6 <_printf_float+0x36>
 8005454:	0032      	movs	r2, r6
 8005456:	003b      	movs	r3, r7
 8005458:	0030      	movs	r0, r6
 800545a:	0039      	movs	r1, r7
 800545c:	f7fc fffc 	bl	8002458 <__aeabi_dcmpun>
 8005460:	2800      	cmp	r0, #0
 8005462:	d00b      	beq.n	800547c <_printf_float+0xec>
 8005464:	2f00      	cmp	r7, #0
 8005466:	da03      	bge.n	8005470 <_printf_float+0xe0>
 8005468:	002b      	movs	r3, r5
 800546a:	222d      	movs	r2, #45	@ 0x2d
 800546c:	3343      	adds	r3, #67	@ 0x43
 800546e:	701a      	strb	r2, [r3, #0]
 8005470:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005472:	4f87      	ldr	r7, [pc, #540]	@ (8005690 <_printf_float+0x300>)
 8005474:	2b47      	cmp	r3, #71	@ 0x47
 8005476:	d9d5      	bls.n	8005424 <_printf_float+0x94>
 8005478:	4f86      	ldr	r7, [pc, #536]	@ (8005694 <_printf_float+0x304>)
 800547a:	e7d3      	b.n	8005424 <_printf_float+0x94>
 800547c:	2220      	movs	r2, #32
 800547e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005480:	686b      	ldr	r3, [r5, #4]
 8005482:	4394      	bics	r4, r2
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	d146      	bne.n	8005516 <_printf_float+0x186>
 8005488:	3307      	adds	r3, #7
 800548a:	606b      	str	r3, [r5, #4]
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4313      	orrs	r3, r2
 8005494:	2200      	movs	r2, #0
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	9206      	str	r2, [sp, #24]
 800549a:	aa14      	add	r2, sp, #80	@ 0x50
 800549c:	9205      	str	r2, [sp, #20]
 800549e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80054a0:	a90a      	add	r1, sp, #40	@ 0x28
 80054a2:	9204      	str	r2, [sp, #16]
 80054a4:	aa13      	add	r2, sp, #76	@ 0x4c
 80054a6:	9203      	str	r2, [sp, #12]
 80054a8:	2223      	movs	r2, #35	@ 0x23
 80054aa:	1852      	adds	r2, r2, r1
 80054ac:	9202      	str	r2, [sp, #8]
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	686b      	ldr	r3, [r5, #4]
 80054b2:	0032      	movs	r2, r6
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054b8:	003b      	movs	r3, r7
 80054ba:	f7ff fec3 	bl	8005244 <__cvt>
 80054be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80054c0:	0007      	movs	r7, r0
 80054c2:	2c47      	cmp	r4, #71	@ 0x47
 80054c4:	d12d      	bne.n	8005522 <_printf_float+0x192>
 80054c6:	1cd3      	adds	r3, r2, #3
 80054c8:	db02      	blt.n	80054d0 <_printf_float+0x140>
 80054ca:	686b      	ldr	r3, [r5, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	dd48      	ble.n	8005562 <_printf_float+0x1d2>
 80054d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80054d4:	3b02      	subs	r3, #2
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80054da:	0028      	movs	r0, r5
 80054dc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80054de:	3901      	subs	r1, #1
 80054e0:	3050      	adds	r0, #80	@ 0x50
 80054e2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80054e4:	f7ff ff14 	bl	8005310 <__exponent>
 80054e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80054ea:	0004      	movs	r4, r0
 80054ec:	1813      	adds	r3, r2, r0
 80054ee:	612b      	str	r3, [r5, #16]
 80054f0:	2a01      	cmp	r2, #1
 80054f2:	dc02      	bgt.n	80054fa <_printf_float+0x16a>
 80054f4:	682a      	ldr	r2, [r5, #0]
 80054f6:	07d2      	lsls	r2, r2, #31
 80054f8:	d501      	bpl.n	80054fe <_printf_float+0x16e>
 80054fa:	3301      	adds	r3, #1
 80054fc:	612b      	str	r3, [r5, #16]
 80054fe:	2323      	movs	r3, #35	@ 0x23
 8005500:	aa0a      	add	r2, sp, #40	@ 0x28
 8005502:	189b      	adds	r3, r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d100      	bne.n	800550c <_printf_float+0x17c>
 800550a:	e792      	b.n	8005432 <_printf_float+0xa2>
 800550c:	002b      	movs	r3, r5
 800550e:	222d      	movs	r2, #45	@ 0x2d
 8005510:	3343      	adds	r3, #67	@ 0x43
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e78d      	b.n	8005432 <_printf_float+0xa2>
 8005516:	2c47      	cmp	r4, #71	@ 0x47
 8005518:	d1b8      	bne.n	800548c <_printf_float+0xfc>
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1b6      	bne.n	800548c <_printf_float+0xfc>
 800551e:	3301      	adds	r3, #1
 8005520:	e7b3      	b.n	800548a <_printf_float+0xfa>
 8005522:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005524:	0011      	movs	r1, r2
 8005526:	2b65      	cmp	r3, #101	@ 0x65
 8005528:	d9d7      	bls.n	80054da <_printf_float+0x14a>
 800552a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800552c:	2b66      	cmp	r3, #102	@ 0x66
 800552e:	d11a      	bne.n	8005566 <_printf_float+0x1d6>
 8005530:	686b      	ldr	r3, [r5, #4]
 8005532:	2a00      	cmp	r2, #0
 8005534:	dd09      	ble.n	800554a <_printf_float+0x1ba>
 8005536:	612a      	str	r2, [r5, #16]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <_printf_float+0x1b2>
 800553c:	6829      	ldr	r1, [r5, #0]
 800553e:	07c9      	lsls	r1, r1, #31
 8005540:	d50b      	bpl.n	800555a <_printf_float+0x1ca>
 8005542:	3301      	adds	r3, #1
 8005544:	189b      	adds	r3, r3, r2
 8005546:	612b      	str	r3, [r5, #16]
 8005548:	e007      	b.n	800555a <_printf_float+0x1ca>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <_printf_float+0x1c6>
 800554e:	2201      	movs	r2, #1
 8005550:	6829      	ldr	r1, [r5, #0]
 8005552:	4211      	tst	r1, r2
 8005554:	d000      	beq.n	8005558 <_printf_float+0x1c8>
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	612a      	str	r2, [r5, #16]
 800555a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800555c:	2400      	movs	r4, #0
 800555e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8005560:	e7cd      	b.n	80054fe <_printf_float+0x16e>
 8005562:	2367      	movs	r3, #103	@ 0x67
 8005564:	930c      	str	r3, [sp, #48]	@ 0x30
 8005566:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8005568:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800556a:	4299      	cmp	r1, r3
 800556c:	db06      	blt.n	800557c <_printf_float+0x1ec>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	6129      	str	r1, [r5, #16]
 8005572:	07db      	lsls	r3, r3, #31
 8005574:	d5f1      	bpl.n	800555a <_printf_float+0x1ca>
 8005576:	3101      	adds	r1, #1
 8005578:	6129      	str	r1, [r5, #16]
 800557a:	e7ee      	b.n	800555a <_printf_float+0x1ca>
 800557c:	2201      	movs	r2, #1
 800557e:	2900      	cmp	r1, #0
 8005580:	dce0      	bgt.n	8005544 <_printf_float+0x1b4>
 8005582:	1892      	adds	r2, r2, r2
 8005584:	1a52      	subs	r2, r2, r1
 8005586:	e7dd      	b.n	8005544 <_printf_float+0x1b4>
 8005588:	682a      	ldr	r2, [r5, #0]
 800558a:	0553      	lsls	r3, r2, #21
 800558c:	d408      	bmi.n	80055a0 <_printf_float+0x210>
 800558e:	692b      	ldr	r3, [r5, #16]
 8005590:	003a      	movs	r2, r7
 8005592:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005594:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005596:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005598:	47a0      	blx	r4
 800559a:	3001      	adds	r0, #1
 800559c:	d129      	bne.n	80055f2 <_printf_float+0x262>
 800559e:	e753      	b.n	8005448 <_printf_float+0xb8>
 80055a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055a2:	2b65      	cmp	r3, #101	@ 0x65
 80055a4:	d800      	bhi.n	80055a8 <_printf_float+0x218>
 80055a6:	e0da      	b.n	800575e <_printf_float+0x3ce>
 80055a8:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80055aa:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80055ac:	2200      	movs	r2, #0
 80055ae:	2300      	movs	r3, #0
 80055b0:	f7fa ff4c 	bl	800044c <__aeabi_dcmpeq>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	d033      	beq.n	8005620 <_printf_float+0x290>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4a37      	ldr	r2, [pc, #220]	@ (8005698 <_printf_float+0x308>)
 80055bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80055c2:	47a0      	blx	r4
 80055c4:	3001      	adds	r0, #1
 80055c6:	d100      	bne.n	80055ca <_printf_float+0x23a>
 80055c8:	e73e      	b.n	8005448 <_printf_float+0xb8>
 80055ca:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80055cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80055ce:	42b3      	cmp	r3, r6
 80055d0:	db02      	blt.n	80055d8 <_printf_float+0x248>
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	07db      	lsls	r3, r3, #31
 80055d6:	d50c      	bpl.n	80055f2 <_printf_float+0x262>
 80055d8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80055da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80055dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80055e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80055e2:	47a0      	blx	r4
 80055e4:	2400      	movs	r4, #0
 80055e6:	3001      	adds	r0, #1
 80055e8:	d100      	bne.n	80055ec <_printf_float+0x25c>
 80055ea:	e72d      	b.n	8005448 <_printf_float+0xb8>
 80055ec:	1e73      	subs	r3, r6, #1
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	dc0a      	bgt.n	8005608 <_printf_float+0x278>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	079b      	lsls	r3, r3, #30
 80055f6:	d500      	bpl.n	80055fa <_printf_float+0x26a>
 80055f8:	e105      	b.n	8005806 <_printf_float+0x476>
 80055fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80055fc:	68e8      	ldr	r0, [r5, #12]
 80055fe:	4298      	cmp	r0, r3
 8005600:	db00      	blt.n	8005604 <_printf_float+0x274>
 8005602:	e723      	b.n	800544c <_printf_float+0xbc>
 8005604:	0018      	movs	r0, r3
 8005606:	e721      	b.n	800544c <_printf_float+0xbc>
 8005608:	002a      	movs	r2, r5
 800560a:	2301      	movs	r3, #1
 800560c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800560e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005610:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005612:	321a      	adds	r2, #26
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	d100      	bne.n	800561c <_printf_float+0x28c>
 800561a:	e715      	b.n	8005448 <_printf_float+0xb8>
 800561c:	3401      	adds	r4, #1
 800561e:	e7e5      	b.n	80055ec <_printf_float+0x25c>
 8005620:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005622:	2b00      	cmp	r3, #0
 8005624:	dc3a      	bgt.n	800569c <_printf_float+0x30c>
 8005626:	2301      	movs	r3, #1
 8005628:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <_printf_float+0x308>)
 800562a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800562c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800562e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005630:	47a0      	blx	r4
 8005632:	3001      	adds	r0, #1
 8005634:	d100      	bne.n	8005638 <_printf_float+0x2a8>
 8005636:	e707      	b.n	8005448 <_printf_float+0xb8>
 8005638:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800563a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800563c:	4333      	orrs	r3, r6
 800563e:	d102      	bne.n	8005646 <_printf_float+0x2b6>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	07db      	lsls	r3, r3, #31
 8005644:	d5d5      	bpl.n	80055f2 <_printf_float+0x262>
 8005646:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005648:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800564a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800564c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800564e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005650:	47a0      	blx	r4
 8005652:	2300      	movs	r3, #0
 8005654:	3001      	adds	r0, #1
 8005656:	d100      	bne.n	800565a <_printf_float+0x2ca>
 8005658:	e6f6      	b.n	8005448 <_printf_float+0xb8>
 800565a:	930c      	str	r3, [sp, #48]	@ 0x30
 800565c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800565e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005660:	425b      	negs	r3, r3
 8005662:	4293      	cmp	r3, r2
 8005664:	dc01      	bgt.n	800566a <_printf_float+0x2da>
 8005666:	0033      	movs	r3, r6
 8005668:	e792      	b.n	8005590 <_printf_float+0x200>
 800566a:	002a      	movs	r2, r5
 800566c:	2301      	movs	r3, #1
 800566e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005670:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005672:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005674:	321a      	adds	r2, #26
 8005676:	47a0      	blx	r4
 8005678:	3001      	adds	r0, #1
 800567a:	d100      	bne.n	800567e <_printf_float+0x2ee>
 800567c:	e6e4      	b.n	8005448 <_printf_float+0xb8>
 800567e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005680:	3301      	adds	r3, #1
 8005682:	e7ea      	b.n	800565a <_printf_float+0x2ca>
 8005684:	7fefffff 	.word	0x7fefffff
 8005688:	080095d8 	.word	0x080095d8
 800568c:	080095dc 	.word	0x080095dc
 8005690:	080095e0 	.word	0x080095e0
 8005694:	080095e4 	.word	0x080095e4
 8005698:	080095e8 	.word	0x080095e8
 800569c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800569e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80056a0:	930c      	str	r3, [sp, #48]	@ 0x30
 80056a2:	429e      	cmp	r6, r3
 80056a4:	dd00      	ble.n	80056a8 <_printf_float+0x318>
 80056a6:	001e      	movs	r6, r3
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	dc31      	bgt.n	8005710 <_printf_float+0x380>
 80056ac:	43f3      	mvns	r3, r6
 80056ae:	2400      	movs	r4, #0
 80056b0:	17db      	asrs	r3, r3, #31
 80056b2:	4033      	ands	r3, r6
 80056b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80056b6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80056b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80056ba:	1af3      	subs	r3, r6, r3
 80056bc:	42a3      	cmp	r3, r4
 80056be:	dc30      	bgt.n	8005722 <_printf_float+0x392>
 80056c0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056c4:	429a      	cmp	r2, r3
 80056c6:	dc38      	bgt.n	800573a <_printf_float+0x3aa>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	07db      	lsls	r3, r3, #31
 80056cc:	d435      	bmi.n	800573a <_printf_float+0x3aa>
 80056ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80056d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80056d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056d4:	1b9b      	subs	r3, r3, r6
 80056d6:	1b14      	subs	r4, r2, r4
 80056d8:	429c      	cmp	r4, r3
 80056da:	dd00      	ble.n	80056de <_printf_float+0x34e>
 80056dc:	001c      	movs	r4, r3
 80056de:	2c00      	cmp	r4, #0
 80056e0:	dc34      	bgt.n	800574c <_printf_float+0x3bc>
 80056e2:	43e3      	mvns	r3, r4
 80056e4:	2600      	movs	r6, #0
 80056e6:	17db      	asrs	r3, r3, #31
 80056e8:	401c      	ands	r4, r3
 80056ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80056ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	1b1b      	subs	r3, r3, r4
 80056f2:	42b3      	cmp	r3, r6
 80056f4:	dc00      	bgt.n	80056f8 <_printf_float+0x368>
 80056f6:	e77c      	b.n	80055f2 <_printf_float+0x262>
 80056f8:	002a      	movs	r2, r5
 80056fa:	2301      	movs	r3, #1
 80056fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005700:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005702:	321a      	adds	r2, #26
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	d100      	bne.n	800570c <_printf_float+0x37c>
 800570a:	e69d      	b.n	8005448 <_printf_float+0xb8>
 800570c:	3601      	adds	r6, #1
 800570e:	e7ec      	b.n	80056ea <_printf_float+0x35a>
 8005710:	0033      	movs	r3, r6
 8005712:	003a      	movs	r2, r7
 8005714:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005718:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800571a:	47a0      	blx	r4
 800571c:	3001      	adds	r0, #1
 800571e:	d1c5      	bne.n	80056ac <_printf_float+0x31c>
 8005720:	e692      	b.n	8005448 <_printf_float+0xb8>
 8005722:	002a      	movs	r2, r5
 8005724:	2301      	movs	r3, #1
 8005726:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005728:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800572a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800572c:	321a      	adds	r2, #26
 800572e:	47b0      	blx	r6
 8005730:	3001      	adds	r0, #1
 8005732:	d100      	bne.n	8005736 <_printf_float+0x3a6>
 8005734:	e688      	b.n	8005448 <_printf_float+0xb8>
 8005736:	3401      	adds	r4, #1
 8005738:	e7bd      	b.n	80056b6 <_printf_float+0x326>
 800573a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800573c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800573e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005742:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005744:	47a0      	blx	r4
 8005746:	3001      	adds	r0, #1
 8005748:	d1c1      	bne.n	80056ce <_printf_float+0x33e>
 800574a:	e67d      	b.n	8005448 <_printf_float+0xb8>
 800574c:	19ba      	adds	r2, r7, r6
 800574e:	0023      	movs	r3, r4
 8005750:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005754:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005756:	47b0      	blx	r6
 8005758:	3001      	adds	r0, #1
 800575a:	d1c2      	bne.n	80056e2 <_printf_float+0x352>
 800575c:	e674      	b.n	8005448 <_printf_float+0xb8>
 800575e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005760:	930c      	str	r3, [sp, #48]	@ 0x30
 8005762:	2b01      	cmp	r3, #1
 8005764:	dc02      	bgt.n	800576c <_printf_float+0x3dc>
 8005766:	2301      	movs	r3, #1
 8005768:	421a      	tst	r2, r3
 800576a:	d039      	beq.n	80057e0 <_printf_float+0x450>
 800576c:	2301      	movs	r3, #1
 800576e:	003a      	movs	r2, r7
 8005770:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005772:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005774:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005776:	47b0      	blx	r6
 8005778:	3001      	adds	r0, #1
 800577a:	d100      	bne.n	800577e <_printf_float+0x3ee>
 800577c:	e664      	b.n	8005448 <_printf_float+0xb8>
 800577e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005780:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005782:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005784:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005786:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005788:	47b0      	blx	r6
 800578a:	3001      	adds	r0, #1
 800578c:	d100      	bne.n	8005790 <_printf_float+0x400>
 800578e:	e65b      	b.n	8005448 <_printf_float+0xb8>
 8005790:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005792:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005794:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	3b01      	subs	r3, #1
 800579a:	930c      	str	r3, [sp, #48]	@ 0x30
 800579c:	2300      	movs	r3, #0
 800579e:	f7fa fe55 	bl	800044c <__aeabi_dcmpeq>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d11a      	bne.n	80057dc <_printf_float+0x44c>
 80057a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057a8:	1c7a      	adds	r2, r7, #1
 80057aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80057b0:	47b0      	blx	r6
 80057b2:	3001      	adds	r0, #1
 80057b4:	d10e      	bne.n	80057d4 <_printf_float+0x444>
 80057b6:	e647      	b.n	8005448 <_printf_float+0xb8>
 80057b8:	002a      	movs	r2, r5
 80057ba:	2301      	movs	r3, #1
 80057bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80057c2:	321a      	adds	r2, #26
 80057c4:	47b8      	blx	r7
 80057c6:	3001      	adds	r0, #1
 80057c8:	d100      	bne.n	80057cc <_printf_float+0x43c>
 80057ca:	e63d      	b.n	8005448 <_printf_float+0xb8>
 80057cc:	3601      	adds	r6, #1
 80057ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057d0:	429e      	cmp	r6, r3
 80057d2:	dbf1      	blt.n	80057b8 <_printf_float+0x428>
 80057d4:	002a      	movs	r2, r5
 80057d6:	0023      	movs	r3, r4
 80057d8:	3250      	adds	r2, #80	@ 0x50
 80057da:	e6da      	b.n	8005592 <_printf_float+0x202>
 80057dc:	2600      	movs	r6, #0
 80057de:	e7f6      	b.n	80057ce <_printf_float+0x43e>
 80057e0:	003a      	movs	r2, r7
 80057e2:	e7e2      	b.n	80057aa <_printf_float+0x41a>
 80057e4:	002a      	movs	r2, r5
 80057e6:	2301      	movs	r3, #1
 80057e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80057ee:	3219      	adds	r2, #25
 80057f0:	47b0      	blx	r6
 80057f2:	3001      	adds	r0, #1
 80057f4:	d100      	bne.n	80057f8 <_printf_float+0x468>
 80057f6:	e627      	b.n	8005448 <_printf_float+0xb8>
 80057f8:	3401      	adds	r4, #1
 80057fa:	68eb      	ldr	r3, [r5, #12]
 80057fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80057fe:	1a9b      	subs	r3, r3, r2
 8005800:	42a3      	cmp	r3, r4
 8005802:	dcef      	bgt.n	80057e4 <_printf_float+0x454>
 8005804:	e6f9      	b.n	80055fa <_printf_float+0x26a>
 8005806:	2400      	movs	r4, #0
 8005808:	e7f7      	b.n	80057fa <_printf_float+0x46a>
 800580a:	46c0      	nop			@ (mov r8, r8)

0800580c <_printf_common>:
 800580c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800580e:	0016      	movs	r6, r2
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	688a      	ldr	r2, [r1, #8]
 8005814:	690b      	ldr	r3, [r1, #16]
 8005816:	000c      	movs	r4, r1
 8005818:	9000      	str	r0, [sp, #0]
 800581a:	4293      	cmp	r3, r2
 800581c:	da00      	bge.n	8005820 <_printf_common+0x14>
 800581e:	0013      	movs	r3, r2
 8005820:	0022      	movs	r2, r4
 8005822:	6033      	str	r3, [r6, #0]
 8005824:	3243      	adds	r2, #67	@ 0x43
 8005826:	7812      	ldrb	r2, [r2, #0]
 8005828:	2a00      	cmp	r2, #0
 800582a:	d001      	beq.n	8005830 <_printf_common+0x24>
 800582c:	3301      	adds	r3, #1
 800582e:	6033      	str	r3, [r6, #0]
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	069b      	lsls	r3, r3, #26
 8005834:	d502      	bpl.n	800583c <_printf_common+0x30>
 8005836:	6833      	ldr	r3, [r6, #0]
 8005838:	3302      	adds	r3, #2
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	2306      	movs	r3, #6
 8005840:	0015      	movs	r5, r2
 8005842:	401d      	ands	r5, r3
 8005844:	421a      	tst	r2, r3
 8005846:	d027      	beq.n	8005898 <_printf_common+0x8c>
 8005848:	0023      	movs	r3, r4
 800584a:	3343      	adds	r3, #67	@ 0x43
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	4193      	sbcs	r3, r2
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	0692      	lsls	r2, r2, #26
 8005856:	d430      	bmi.n	80058ba <_printf_common+0xae>
 8005858:	0022      	movs	r2, r4
 800585a:	9901      	ldr	r1, [sp, #4]
 800585c:	9800      	ldr	r0, [sp, #0]
 800585e:	9d08      	ldr	r5, [sp, #32]
 8005860:	3243      	adds	r2, #67	@ 0x43
 8005862:	47a8      	blx	r5
 8005864:	3001      	adds	r0, #1
 8005866:	d025      	beq.n	80058b4 <_printf_common+0xa8>
 8005868:	2206      	movs	r2, #6
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	2500      	movs	r5, #0
 800586e:	4013      	ands	r3, r2
 8005870:	2b04      	cmp	r3, #4
 8005872:	d105      	bne.n	8005880 <_printf_common+0x74>
 8005874:	6833      	ldr	r3, [r6, #0]
 8005876:	68e5      	ldr	r5, [r4, #12]
 8005878:	1aed      	subs	r5, r5, r3
 800587a:	43eb      	mvns	r3, r5
 800587c:	17db      	asrs	r3, r3, #31
 800587e:	401d      	ands	r5, r3
 8005880:	68a3      	ldr	r3, [r4, #8]
 8005882:	6922      	ldr	r2, [r4, #16]
 8005884:	4293      	cmp	r3, r2
 8005886:	dd01      	ble.n	800588c <_printf_common+0x80>
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	18ed      	adds	r5, r5, r3
 800588c:	2600      	movs	r6, #0
 800588e:	42b5      	cmp	r5, r6
 8005890:	d120      	bne.n	80058d4 <_printf_common+0xc8>
 8005892:	2000      	movs	r0, #0
 8005894:	e010      	b.n	80058b8 <_printf_common+0xac>
 8005896:	3501      	adds	r5, #1
 8005898:	68e3      	ldr	r3, [r4, #12]
 800589a:	6832      	ldr	r2, [r6, #0]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	42ab      	cmp	r3, r5
 80058a0:	ddd2      	ble.n	8005848 <_printf_common+0x3c>
 80058a2:	0022      	movs	r2, r4
 80058a4:	2301      	movs	r3, #1
 80058a6:	9901      	ldr	r1, [sp, #4]
 80058a8:	9800      	ldr	r0, [sp, #0]
 80058aa:	9f08      	ldr	r7, [sp, #32]
 80058ac:	3219      	adds	r2, #25
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	d1f0      	bne.n	8005896 <_printf_common+0x8a>
 80058b4:	2001      	movs	r0, #1
 80058b6:	4240      	negs	r0, r0
 80058b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058ba:	2030      	movs	r0, #48	@ 0x30
 80058bc:	18e1      	adds	r1, r4, r3
 80058be:	3143      	adds	r1, #67	@ 0x43
 80058c0:	7008      	strb	r0, [r1, #0]
 80058c2:	0021      	movs	r1, r4
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	3145      	adds	r1, #69	@ 0x45
 80058c8:	7809      	ldrb	r1, [r1, #0]
 80058ca:	18a2      	adds	r2, r4, r2
 80058cc:	3243      	adds	r2, #67	@ 0x43
 80058ce:	3302      	adds	r3, #2
 80058d0:	7011      	strb	r1, [r2, #0]
 80058d2:	e7c1      	b.n	8005858 <_printf_common+0x4c>
 80058d4:	0022      	movs	r2, r4
 80058d6:	2301      	movs	r3, #1
 80058d8:	9901      	ldr	r1, [sp, #4]
 80058da:	9800      	ldr	r0, [sp, #0]
 80058dc:	9f08      	ldr	r7, [sp, #32]
 80058de:	321a      	adds	r2, #26
 80058e0:	47b8      	blx	r7
 80058e2:	3001      	adds	r0, #1
 80058e4:	d0e6      	beq.n	80058b4 <_printf_common+0xa8>
 80058e6:	3601      	adds	r6, #1
 80058e8:	e7d1      	b.n	800588e <_printf_common+0x82>
	...

080058ec <_printf_i>:
 80058ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ee:	b08b      	sub	sp, #44	@ 0x2c
 80058f0:	9206      	str	r2, [sp, #24]
 80058f2:	000a      	movs	r2, r1
 80058f4:	3243      	adds	r2, #67	@ 0x43
 80058f6:	9307      	str	r3, [sp, #28]
 80058f8:	9005      	str	r0, [sp, #20]
 80058fa:	9203      	str	r2, [sp, #12]
 80058fc:	7e0a      	ldrb	r2, [r1, #24]
 80058fe:	000c      	movs	r4, r1
 8005900:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005902:	2a78      	cmp	r2, #120	@ 0x78
 8005904:	d809      	bhi.n	800591a <_printf_i+0x2e>
 8005906:	2a62      	cmp	r2, #98	@ 0x62
 8005908:	d80b      	bhi.n	8005922 <_printf_i+0x36>
 800590a:	2a00      	cmp	r2, #0
 800590c:	d100      	bne.n	8005910 <_printf_i+0x24>
 800590e:	e0bc      	b.n	8005a8a <_printf_i+0x19e>
 8005910:	497b      	ldr	r1, [pc, #492]	@ (8005b00 <_printf_i+0x214>)
 8005912:	9104      	str	r1, [sp, #16]
 8005914:	2a58      	cmp	r2, #88	@ 0x58
 8005916:	d100      	bne.n	800591a <_printf_i+0x2e>
 8005918:	e090      	b.n	8005a3c <_printf_i+0x150>
 800591a:	0025      	movs	r5, r4
 800591c:	3542      	adds	r5, #66	@ 0x42
 800591e:	702a      	strb	r2, [r5, #0]
 8005920:	e022      	b.n	8005968 <_printf_i+0x7c>
 8005922:	0010      	movs	r0, r2
 8005924:	3863      	subs	r0, #99	@ 0x63
 8005926:	2815      	cmp	r0, #21
 8005928:	d8f7      	bhi.n	800591a <_printf_i+0x2e>
 800592a:	f7fa fbff 	bl	800012c <__gnu_thumb1_case_shi>
 800592e:	0016      	.short	0x0016
 8005930:	fff6001f 	.word	0xfff6001f
 8005934:	fff6fff6 	.word	0xfff6fff6
 8005938:	001ffff6 	.word	0x001ffff6
 800593c:	fff6fff6 	.word	0xfff6fff6
 8005940:	fff6fff6 	.word	0xfff6fff6
 8005944:	003600a1 	.word	0x003600a1
 8005948:	fff60080 	.word	0xfff60080
 800594c:	00b2fff6 	.word	0x00b2fff6
 8005950:	0036fff6 	.word	0x0036fff6
 8005954:	fff6fff6 	.word	0xfff6fff6
 8005958:	0084      	.short	0x0084
 800595a:	0025      	movs	r5, r4
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	3542      	adds	r5, #66	@ 0x42
 8005960:	1d11      	adds	r1, r2, #4
 8005962:	6019      	str	r1, [r3, #0]
 8005964:	6813      	ldr	r3, [r2, #0]
 8005966:	702b      	strb	r3, [r5, #0]
 8005968:	2301      	movs	r3, #1
 800596a:	e0a0      	b.n	8005aae <_printf_i+0x1c2>
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	6809      	ldr	r1, [r1, #0]
 8005970:	1d02      	adds	r2, r0, #4
 8005972:	060d      	lsls	r5, r1, #24
 8005974:	d50b      	bpl.n	800598e <_printf_i+0xa2>
 8005976:	6806      	ldr	r6, [r0, #0]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	2e00      	cmp	r6, #0
 800597c:	da03      	bge.n	8005986 <_printf_i+0x9a>
 800597e:	232d      	movs	r3, #45	@ 0x2d
 8005980:	9a03      	ldr	r2, [sp, #12]
 8005982:	4276      	negs	r6, r6
 8005984:	7013      	strb	r3, [r2, #0]
 8005986:	4b5e      	ldr	r3, [pc, #376]	@ (8005b00 <_printf_i+0x214>)
 8005988:	270a      	movs	r7, #10
 800598a:	9304      	str	r3, [sp, #16]
 800598c:	e018      	b.n	80059c0 <_printf_i+0xd4>
 800598e:	6806      	ldr	r6, [r0, #0]
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	0649      	lsls	r1, r1, #25
 8005994:	d5f1      	bpl.n	800597a <_printf_i+0x8e>
 8005996:	b236      	sxth	r6, r6
 8005998:	e7ef      	b.n	800597a <_printf_i+0x8e>
 800599a:	6808      	ldr	r0, [r1, #0]
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	c940      	ldmia	r1!, {r6}
 80059a0:	0605      	lsls	r5, r0, #24
 80059a2:	d402      	bmi.n	80059aa <_printf_i+0xbe>
 80059a4:	0640      	lsls	r0, r0, #25
 80059a6:	d500      	bpl.n	80059aa <_printf_i+0xbe>
 80059a8:	b2b6      	uxth	r6, r6
 80059aa:	6019      	str	r1, [r3, #0]
 80059ac:	4b54      	ldr	r3, [pc, #336]	@ (8005b00 <_printf_i+0x214>)
 80059ae:	270a      	movs	r7, #10
 80059b0:	9304      	str	r3, [sp, #16]
 80059b2:	2a6f      	cmp	r2, #111	@ 0x6f
 80059b4:	d100      	bne.n	80059b8 <_printf_i+0xcc>
 80059b6:	3f02      	subs	r7, #2
 80059b8:	0023      	movs	r3, r4
 80059ba:	2200      	movs	r2, #0
 80059bc:	3343      	adds	r3, #67	@ 0x43
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6863      	ldr	r3, [r4, #4]
 80059c2:	60a3      	str	r3, [r4, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db03      	blt.n	80059d0 <_printf_i+0xe4>
 80059c8:	2104      	movs	r1, #4
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	438a      	bics	r2, r1
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	2e00      	cmp	r6, #0
 80059d2:	d102      	bne.n	80059da <_printf_i+0xee>
 80059d4:	9d03      	ldr	r5, [sp, #12]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00c      	beq.n	80059f4 <_printf_i+0x108>
 80059da:	9d03      	ldr	r5, [sp, #12]
 80059dc:	0030      	movs	r0, r6
 80059de:	0039      	movs	r1, r7
 80059e0:	f7fa fc34 	bl	800024c <__aeabi_uidivmod>
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	3d01      	subs	r5, #1
 80059e8:	5c5b      	ldrb	r3, [r3, r1]
 80059ea:	702b      	strb	r3, [r5, #0]
 80059ec:	0033      	movs	r3, r6
 80059ee:	0006      	movs	r6, r0
 80059f0:	429f      	cmp	r7, r3
 80059f2:	d9f3      	bls.n	80059dc <_printf_i+0xf0>
 80059f4:	2f08      	cmp	r7, #8
 80059f6:	d109      	bne.n	8005a0c <_printf_i+0x120>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	07db      	lsls	r3, r3, #31
 80059fc:	d506      	bpl.n	8005a0c <_printf_i+0x120>
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	dc02      	bgt.n	8005a0c <_printf_i+0x120>
 8005a06:	2330      	movs	r3, #48	@ 0x30
 8005a08:	3d01      	subs	r5, #1
 8005a0a:	702b      	strb	r3, [r5, #0]
 8005a0c:	9b03      	ldr	r3, [sp, #12]
 8005a0e:	1b5b      	subs	r3, r3, r5
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	9b07      	ldr	r3, [sp, #28]
 8005a14:	0021      	movs	r1, r4
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	9805      	ldr	r0, [sp, #20]
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	aa09      	add	r2, sp, #36	@ 0x24
 8005a1e:	f7ff fef5 	bl	800580c <_printf_common>
 8005a22:	3001      	adds	r0, #1
 8005a24:	d148      	bne.n	8005ab8 <_printf_i+0x1cc>
 8005a26:	2001      	movs	r0, #1
 8005a28:	4240      	negs	r0, r0
 8005a2a:	b00b      	add	sp, #44	@ 0x2c
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2e:	2220      	movs	r2, #32
 8005a30:	6809      	ldr	r1, [r1, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	6022      	str	r2, [r4, #0]
 8005a36:	2278      	movs	r2, #120	@ 0x78
 8005a38:	4932      	ldr	r1, [pc, #200]	@ (8005b04 <_printf_i+0x218>)
 8005a3a:	9104      	str	r1, [sp, #16]
 8005a3c:	0021      	movs	r1, r4
 8005a3e:	3145      	adds	r1, #69	@ 0x45
 8005a40:	700a      	strb	r2, [r1, #0]
 8005a42:	6819      	ldr	r1, [r3, #0]
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	c940      	ldmia	r1!, {r6}
 8005a48:	0610      	lsls	r0, r2, #24
 8005a4a:	d402      	bmi.n	8005a52 <_printf_i+0x166>
 8005a4c:	0650      	lsls	r0, r2, #25
 8005a4e:	d500      	bpl.n	8005a52 <_printf_i+0x166>
 8005a50:	b2b6      	uxth	r6, r6
 8005a52:	6019      	str	r1, [r3, #0]
 8005a54:	07d3      	lsls	r3, r2, #31
 8005a56:	d502      	bpl.n	8005a5e <_printf_i+0x172>
 8005a58:	2320      	movs	r3, #32
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	2e00      	cmp	r6, #0
 8005a60:	d001      	beq.n	8005a66 <_printf_i+0x17a>
 8005a62:	2710      	movs	r7, #16
 8005a64:	e7a8      	b.n	80059b8 <_printf_i+0xcc>
 8005a66:	2220      	movs	r2, #32
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	6023      	str	r3, [r4, #0]
 8005a6e:	e7f8      	b.n	8005a62 <_printf_i+0x176>
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	680d      	ldr	r5, [r1, #0]
 8005a74:	1d10      	adds	r0, r2, #4
 8005a76:	6949      	ldr	r1, [r1, #20]
 8005a78:	6018      	str	r0, [r3, #0]
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	062e      	lsls	r6, r5, #24
 8005a7e:	d501      	bpl.n	8005a84 <_printf_i+0x198>
 8005a80:	6019      	str	r1, [r3, #0]
 8005a82:	e002      	b.n	8005a8a <_printf_i+0x19e>
 8005a84:	066d      	lsls	r5, r5, #25
 8005a86:	d5fb      	bpl.n	8005a80 <_printf_i+0x194>
 8005a88:	8019      	strh	r1, [r3, #0]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9d03      	ldr	r5, [sp, #12]
 8005a8e:	6123      	str	r3, [r4, #16]
 8005a90:	e7bf      	b.n	8005a12 <_printf_i+0x126>
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	1d11      	adds	r1, r2, #4
 8005a96:	6019      	str	r1, [r3, #0]
 8005a98:	6815      	ldr	r5, [r2, #0]
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	0028      	movs	r0, r5
 8005a9e:	6862      	ldr	r2, [r4, #4]
 8005aa0:	f000 f9e9 	bl	8005e76 <memchr>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d001      	beq.n	8005aac <_printf_i+0x1c0>
 8005aa8:	1b40      	subs	r0, r0, r5
 8005aaa:	6060      	str	r0, [r4, #4]
 8005aac:	6863      	ldr	r3, [r4, #4]
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9a03      	ldr	r2, [sp, #12]
 8005ab4:	7013      	strb	r3, [r2, #0]
 8005ab6:	e7ac      	b.n	8005a12 <_printf_i+0x126>
 8005ab8:	002a      	movs	r2, r5
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	9906      	ldr	r1, [sp, #24]
 8005abe:	9805      	ldr	r0, [sp, #20]
 8005ac0:	9d07      	ldr	r5, [sp, #28]
 8005ac2:	47a8      	blx	r5
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d0ae      	beq.n	8005a26 <_printf_i+0x13a>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	079b      	lsls	r3, r3, #30
 8005acc:	d415      	bmi.n	8005afa <_printf_i+0x20e>
 8005ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ad0:	68e0      	ldr	r0, [r4, #12]
 8005ad2:	4298      	cmp	r0, r3
 8005ad4:	daa9      	bge.n	8005a2a <_printf_i+0x13e>
 8005ad6:	0018      	movs	r0, r3
 8005ad8:	e7a7      	b.n	8005a2a <_printf_i+0x13e>
 8005ada:	0022      	movs	r2, r4
 8005adc:	2301      	movs	r3, #1
 8005ade:	9906      	ldr	r1, [sp, #24]
 8005ae0:	9805      	ldr	r0, [sp, #20]
 8005ae2:	9e07      	ldr	r6, [sp, #28]
 8005ae4:	3219      	adds	r2, #25
 8005ae6:	47b0      	blx	r6
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d09c      	beq.n	8005a26 <_printf_i+0x13a>
 8005aec:	3501      	adds	r5, #1
 8005aee:	68e3      	ldr	r3, [r4, #12]
 8005af0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005af2:	1a9b      	subs	r3, r3, r2
 8005af4:	42ab      	cmp	r3, r5
 8005af6:	dcf0      	bgt.n	8005ada <_printf_i+0x1ee>
 8005af8:	e7e9      	b.n	8005ace <_printf_i+0x1e2>
 8005afa:	2500      	movs	r5, #0
 8005afc:	e7f7      	b.n	8005aee <_printf_i+0x202>
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	080095ea 	.word	0x080095ea
 8005b04:	080095fb 	.word	0x080095fb

08005b08 <std>:
 8005b08:	2300      	movs	r3, #0
 8005b0a:	b510      	push	{r4, lr}
 8005b0c:	0004      	movs	r4, r0
 8005b0e:	6003      	str	r3, [r0, #0]
 8005b10:	6043      	str	r3, [r0, #4]
 8005b12:	6083      	str	r3, [r0, #8]
 8005b14:	8181      	strh	r1, [r0, #12]
 8005b16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b18:	81c2      	strh	r2, [r0, #14]
 8005b1a:	6103      	str	r3, [r0, #16]
 8005b1c:	6143      	str	r3, [r0, #20]
 8005b1e:	6183      	str	r3, [r0, #24]
 8005b20:	0019      	movs	r1, r3
 8005b22:	2208      	movs	r2, #8
 8005b24:	305c      	adds	r0, #92	@ 0x5c
 8005b26:	f000 f91f 	bl	8005d68 <memset>
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <std+0x50>)
 8005b2c:	6224      	str	r4, [r4, #32]
 8005b2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <std+0x54>)
 8005b32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b34:	4b0a      	ldr	r3, [pc, #40]	@ (8005b60 <std+0x58>)
 8005b36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b38:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <std+0x5c>)
 8005b3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b68 <std+0x60>)
 8005b3e:	429c      	cmp	r4, r3
 8005b40:	d005      	beq.n	8005b4e <std+0x46>
 8005b42:	4b0a      	ldr	r3, [pc, #40]	@ (8005b6c <std+0x64>)
 8005b44:	429c      	cmp	r4, r3
 8005b46:	d002      	beq.n	8005b4e <std+0x46>
 8005b48:	4b09      	ldr	r3, [pc, #36]	@ (8005b70 <std+0x68>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d103      	bne.n	8005b56 <std+0x4e>
 8005b4e:	0020      	movs	r0, r4
 8005b50:	3058      	adds	r0, #88	@ 0x58
 8005b52:	f000 f98d 	bl	8005e70 <__retarget_lock_init_recursive>
 8005b56:	bd10      	pop	{r4, pc}
 8005b58:	08005cd1 	.word	0x08005cd1
 8005b5c:	08005cf9 	.word	0x08005cf9
 8005b60:	08005d31 	.word	0x08005d31
 8005b64:	08005d5d 	.word	0x08005d5d
 8005b68:	200006dc 	.word	0x200006dc
 8005b6c:	20000744 	.word	0x20000744
 8005b70:	200007ac 	.word	0x200007ac

08005b74 <stdio_exit_handler>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	4a03      	ldr	r2, [pc, #12]	@ (8005b84 <stdio_exit_handler+0x10>)
 8005b78:	4903      	ldr	r1, [pc, #12]	@ (8005b88 <stdio_exit_handler+0x14>)
 8005b7a:	4804      	ldr	r0, [pc, #16]	@ (8005b8c <stdio_exit_handler+0x18>)
 8005b7c:	f000 f86c 	bl	8005c58 <_fwalk_sglue>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	46c0      	nop			@ (mov r8, r8)
 8005b84:	20000040 	.word	0x20000040
 8005b88:	080078ad 	.word	0x080078ad
 8005b8c:	20000050 	.word	0x20000050

08005b90 <cleanup_stdio>:
 8005b90:	6841      	ldr	r1, [r0, #4]
 8005b92:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <cleanup_stdio+0x30>)
 8005b94:	b510      	push	{r4, lr}
 8005b96:	0004      	movs	r4, r0
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d001      	beq.n	8005ba0 <cleanup_stdio+0x10>
 8005b9c:	f001 fe86 	bl	80078ac <_fflush_r>
 8005ba0:	68a1      	ldr	r1, [r4, #8]
 8005ba2:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <cleanup_stdio+0x34>)
 8005ba4:	4299      	cmp	r1, r3
 8005ba6:	d002      	beq.n	8005bae <cleanup_stdio+0x1e>
 8005ba8:	0020      	movs	r0, r4
 8005baa:	f001 fe7f 	bl	80078ac <_fflush_r>
 8005bae:	68e1      	ldr	r1, [r4, #12]
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <cleanup_stdio+0x38>)
 8005bb2:	4299      	cmp	r1, r3
 8005bb4:	d002      	beq.n	8005bbc <cleanup_stdio+0x2c>
 8005bb6:	0020      	movs	r0, r4
 8005bb8:	f001 fe78 	bl	80078ac <_fflush_r>
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	46c0      	nop			@ (mov r8, r8)
 8005bc0:	200006dc 	.word	0x200006dc
 8005bc4:	20000744 	.word	0x20000744
 8005bc8:	200007ac 	.word	0x200007ac

08005bcc <global_stdio_init.part.0>:
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <global_stdio_init.part.0+0x28>)
 8005bd0:	4a09      	ldr	r2, [pc, #36]	@ (8005bf8 <global_stdio_init.part.0+0x2c>)
 8005bd2:	2104      	movs	r1, #4
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	4809      	ldr	r0, [pc, #36]	@ (8005bfc <global_stdio_init.part.0+0x30>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f7ff ff95 	bl	8005b08 <std>
 8005bde:	2201      	movs	r2, #1
 8005be0:	2109      	movs	r1, #9
 8005be2:	4807      	ldr	r0, [pc, #28]	@ (8005c00 <global_stdio_init.part.0+0x34>)
 8005be4:	f7ff ff90 	bl	8005b08 <std>
 8005be8:	2202      	movs	r2, #2
 8005bea:	2112      	movs	r1, #18
 8005bec:	4805      	ldr	r0, [pc, #20]	@ (8005c04 <global_stdio_init.part.0+0x38>)
 8005bee:	f7ff ff8b 	bl	8005b08 <std>
 8005bf2:	bd10      	pop	{r4, pc}
 8005bf4:	20000814 	.word	0x20000814
 8005bf8:	08005b75 	.word	0x08005b75
 8005bfc:	200006dc 	.word	0x200006dc
 8005c00:	20000744 	.word	0x20000744
 8005c04:	200007ac 	.word	0x200007ac

08005c08 <__sfp_lock_acquire>:
 8005c08:	b510      	push	{r4, lr}
 8005c0a:	4802      	ldr	r0, [pc, #8]	@ (8005c14 <__sfp_lock_acquire+0xc>)
 8005c0c:	f000 f931 	bl	8005e72 <__retarget_lock_acquire_recursive>
 8005c10:	bd10      	pop	{r4, pc}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	2000081d 	.word	0x2000081d

08005c18 <__sfp_lock_release>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4802      	ldr	r0, [pc, #8]	@ (8005c24 <__sfp_lock_release+0xc>)
 8005c1c:	f000 f92a 	bl	8005e74 <__retarget_lock_release_recursive>
 8005c20:	bd10      	pop	{r4, pc}
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	2000081d 	.word	0x2000081d

08005c28 <__sinit>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	0004      	movs	r4, r0
 8005c2c:	f7ff ffec 	bl	8005c08 <__sfp_lock_acquire>
 8005c30:	6a23      	ldr	r3, [r4, #32]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <__sinit+0x14>
 8005c36:	f7ff ffef 	bl	8005c18 <__sfp_lock_release>
 8005c3a:	bd10      	pop	{r4, pc}
 8005c3c:	4b04      	ldr	r3, [pc, #16]	@ (8005c50 <__sinit+0x28>)
 8005c3e:	6223      	str	r3, [r4, #32]
 8005c40:	4b04      	ldr	r3, [pc, #16]	@ (8005c54 <__sinit+0x2c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f6      	bne.n	8005c36 <__sinit+0xe>
 8005c48:	f7ff ffc0 	bl	8005bcc <global_stdio_init.part.0>
 8005c4c:	e7f3      	b.n	8005c36 <__sinit+0xe>
 8005c4e:	46c0      	nop			@ (mov r8, r8)
 8005c50:	08005b91 	.word	0x08005b91
 8005c54:	20000814 	.word	0x20000814

08005c58 <_fwalk_sglue>:
 8005c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c5a:	0014      	movs	r4, r2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	9000      	str	r0, [sp, #0]
 8005c60:	9101      	str	r1, [sp, #4]
 8005c62:	68a5      	ldr	r5, [r4, #8]
 8005c64:	6867      	ldr	r7, [r4, #4]
 8005c66:	3f01      	subs	r7, #1
 8005c68:	d504      	bpl.n	8005c74 <_fwalk_sglue+0x1c>
 8005c6a:	6824      	ldr	r4, [r4, #0]
 8005c6c:	2c00      	cmp	r4, #0
 8005c6e:	d1f8      	bne.n	8005c62 <_fwalk_sglue+0xa>
 8005c70:	0030      	movs	r0, r6
 8005c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c74:	89ab      	ldrh	r3, [r5, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d908      	bls.n	8005c8c <_fwalk_sglue+0x34>
 8005c7a:	220e      	movs	r2, #14
 8005c7c:	5eab      	ldrsh	r3, [r5, r2]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	d004      	beq.n	8005c8c <_fwalk_sglue+0x34>
 8005c82:	0029      	movs	r1, r5
 8005c84:	9800      	ldr	r0, [sp, #0]
 8005c86:	9b01      	ldr	r3, [sp, #4]
 8005c88:	4798      	blx	r3
 8005c8a:	4306      	orrs	r6, r0
 8005c8c:	3568      	adds	r5, #104	@ 0x68
 8005c8e:	e7ea      	b.n	8005c66 <_fwalk_sglue+0xe>

08005c90 <siprintf>:
 8005c90:	b40e      	push	{r1, r2, r3}
 8005c92:	b500      	push	{lr}
 8005c94:	490b      	ldr	r1, [pc, #44]	@ (8005cc4 <siprintf+0x34>)
 8005c96:	b09c      	sub	sp, #112	@ 0x70
 8005c98:	ab1d      	add	r3, sp, #116	@ 0x74
 8005c9a:	9002      	str	r0, [sp, #8]
 8005c9c:	9006      	str	r0, [sp, #24]
 8005c9e:	9107      	str	r1, [sp, #28]
 8005ca0:	9104      	str	r1, [sp, #16]
 8005ca2:	4809      	ldr	r0, [pc, #36]	@ (8005cc8 <siprintf+0x38>)
 8005ca4:	4909      	ldr	r1, [pc, #36]	@ (8005ccc <siprintf+0x3c>)
 8005ca6:	cb04      	ldmia	r3!, {r2}
 8005ca8:	9105      	str	r1, [sp, #20]
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	a902      	add	r1, sp, #8
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	f001 fc78 	bl	80075a4 <_svfiprintf_r>
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	9b02      	ldr	r3, [sp, #8]
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	b01c      	add	sp, #112	@ 0x70
 8005cbc:	bc08      	pop	{r3}
 8005cbe:	b003      	add	sp, #12
 8005cc0:	4718      	bx	r3
 8005cc2:	46c0      	nop			@ (mov r8, r8)
 8005cc4:	7fffffff 	.word	0x7fffffff
 8005cc8:	2000004c 	.word	0x2000004c
 8005ccc:	ffff0208 	.word	0xffff0208

08005cd0 <__sread>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	000c      	movs	r4, r1
 8005cd4:	250e      	movs	r5, #14
 8005cd6:	5f49      	ldrsh	r1, [r1, r5]
 8005cd8:	f000 f878 	bl	8005dcc <_read_r>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	db03      	blt.n	8005ce8 <__sread+0x18>
 8005ce0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005ce2:	181b      	adds	r3, r3, r0
 8005ce4:	6563      	str	r3, [r4, #84]	@ 0x54
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	4a02      	ldr	r2, [pc, #8]	@ (8005cf4 <__sread+0x24>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	e7f9      	b.n	8005ce6 <__sread+0x16>
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	ffffefff 	.word	0xffffefff

08005cf8 <__swrite>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	001f      	movs	r7, r3
 8005cfc:	898b      	ldrh	r3, [r1, #12]
 8005cfe:	0005      	movs	r5, r0
 8005d00:	000c      	movs	r4, r1
 8005d02:	0016      	movs	r6, r2
 8005d04:	05db      	lsls	r3, r3, #23
 8005d06:	d505      	bpl.n	8005d14 <__swrite+0x1c>
 8005d08:	230e      	movs	r3, #14
 8005d0a:	5ec9      	ldrsh	r1, [r1, r3]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2302      	movs	r3, #2
 8005d10:	f000 f848 	bl	8005da4 <_lseek_r>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	4a05      	ldr	r2, [pc, #20]	@ (8005d2c <__swrite+0x34>)
 8005d18:	0028      	movs	r0, r5
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	0032      	movs	r2, r6
 8005d20:	230e      	movs	r3, #14
 8005d22:	5ee1      	ldrsh	r1, [r4, r3]
 8005d24:	003b      	movs	r3, r7
 8005d26:	f000 f865 	bl	8005df4 <_write_r>
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	ffffefff 	.word	0xffffefff

08005d30 <__sseek>:
 8005d30:	b570      	push	{r4, r5, r6, lr}
 8005d32:	000c      	movs	r4, r1
 8005d34:	250e      	movs	r5, #14
 8005d36:	5f49      	ldrsh	r1, [r1, r5]
 8005d38:	f000 f834 	bl	8005da4 <_lseek_r>
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	1c42      	adds	r2, r0, #1
 8005d40:	d103      	bne.n	8005d4a <__sseek+0x1a>
 8005d42:	4a05      	ldr	r2, [pc, #20]	@ (8005d58 <__sseek+0x28>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	81a3      	strh	r3, [r4, #12]
 8005d48:	bd70      	pop	{r4, r5, r6, pc}
 8005d4a:	2280      	movs	r2, #128	@ 0x80
 8005d4c:	0152      	lsls	r2, r2, #5
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d54:	e7f8      	b.n	8005d48 <__sseek+0x18>
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	ffffefff 	.word	0xffffefff

08005d5c <__sclose>:
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	230e      	movs	r3, #14
 8005d60:	5ec9      	ldrsh	r1, [r1, r3]
 8005d62:	f000 f80d 	bl	8005d80 <_close_r>
 8005d66:	bd10      	pop	{r4, pc}

08005d68 <memset>:
 8005d68:	0003      	movs	r3, r0
 8005d6a:	1882      	adds	r2, r0, r2
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d100      	bne.n	8005d72 <memset+0xa>
 8005d70:	4770      	bx	lr
 8005d72:	7019      	strb	r1, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	e7f9      	b.n	8005d6c <memset+0x4>

08005d78 <_localeconv_r>:
 8005d78:	4800      	ldr	r0, [pc, #0]	@ (8005d7c <_localeconv_r+0x4>)
 8005d7a:	4770      	bx	lr
 8005d7c:	2000018c 	.word	0x2000018c

08005d80 <_close_r>:
 8005d80:	2300      	movs	r3, #0
 8005d82:	b570      	push	{r4, r5, r6, lr}
 8005d84:	4d06      	ldr	r5, [pc, #24]	@ (8005da0 <_close_r+0x20>)
 8005d86:	0004      	movs	r4, r0
 8005d88:	0008      	movs	r0, r1
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	f7fd fc7b 	bl	8003686 <_close>
 8005d90:	1c43      	adds	r3, r0, #1
 8005d92:	d103      	bne.n	8005d9c <_close_r+0x1c>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d000      	beq.n	8005d9c <_close_r+0x1c>
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	46c0      	nop			@ (mov r8, r8)
 8005da0:	20000818 	.word	0x20000818

08005da4 <_lseek_r>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	0004      	movs	r4, r0
 8005da8:	0008      	movs	r0, r1
 8005daa:	0011      	movs	r1, r2
 8005dac:	001a      	movs	r2, r3
 8005dae:	2300      	movs	r3, #0
 8005db0:	4d05      	ldr	r5, [pc, #20]	@ (8005dc8 <_lseek_r+0x24>)
 8005db2:	602b      	str	r3, [r5, #0]
 8005db4:	f7fd fc88 	bl	80036c8 <_lseek>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	d103      	bne.n	8005dc4 <_lseek_r+0x20>
 8005dbc:	682b      	ldr	r3, [r5, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d000      	beq.n	8005dc4 <_lseek_r+0x20>
 8005dc2:	6023      	str	r3, [r4, #0]
 8005dc4:	bd70      	pop	{r4, r5, r6, pc}
 8005dc6:	46c0      	nop			@ (mov r8, r8)
 8005dc8:	20000818 	.word	0x20000818

08005dcc <_read_r>:
 8005dcc:	b570      	push	{r4, r5, r6, lr}
 8005dce:	0004      	movs	r4, r0
 8005dd0:	0008      	movs	r0, r1
 8005dd2:	0011      	movs	r1, r2
 8005dd4:	001a      	movs	r2, r3
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	4d05      	ldr	r5, [pc, #20]	@ (8005df0 <_read_r+0x24>)
 8005dda:	602b      	str	r3, [r5, #0]
 8005ddc:	f7fd fc1a 	bl	8003614 <_read>
 8005de0:	1c43      	adds	r3, r0, #1
 8005de2:	d103      	bne.n	8005dec <_read_r+0x20>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d000      	beq.n	8005dec <_read_r+0x20>
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	20000818 	.word	0x20000818

08005df4 <_write_r>:
 8005df4:	b570      	push	{r4, r5, r6, lr}
 8005df6:	0004      	movs	r4, r0
 8005df8:	0008      	movs	r0, r1
 8005dfa:	0011      	movs	r1, r2
 8005dfc:	001a      	movs	r2, r3
 8005dfe:	2300      	movs	r3, #0
 8005e00:	4d05      	ldr	r5, [pc, #20]	@ (8005e18 <_write_r+0x24>)
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fd fc23 	bl	800364e <_write>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_write_r+0x20>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d000      	beq.n	8005e14 <_write_r+0x20>
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	bd70      	pop	{r4, r5, r6, pc}
 8005e16:	46c0      	nop			@ (mov r8, r8)
 8005e18:	20000818 	.word	0x20000818

08005e1c <__errno>:
 8005e1c:	4b01      	ldr	r3, [pc, #4]	@ (8005e24 <__errno+0x8>)
 8005e1e:	6818      	ldr	r0, [r3, #0]
 8005e20:	4770      	bx	lr
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	2000004c 	.word	0x2000004c

08005e28 <__libc_init_array>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	2600      	movs	r6, #0
 8005e2c:	4c0c      	ldr	r4, [pc, #48]	@ (8005e60 <__libc_init_array+0x38>)
 8005e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8005e64 <__libc_init_array+0x3c>)
 8005e30:	1b64      	subs	r4, r4, r5
 8005e32:	10a4      	asrs	r4, r4, #2
 8005e34:	42a6      	cmp	r6, r4
 8005e36:	d109      	bne.n	8005e4c <__libc_init_array+0x24>
 8005e38:	2600      	movs	r6, #0
 8005e3a:	f002 f907 	bl	800804c <_init>
 8005e3e:	4c0a      	ldr	r4, [pc, #40]	@ (8005e68 <__libc_init_array+0x40>)
 8005e40:	4d0a      	ldr	r5, [pc, #40]	@ (8005e6c <__libc_init_array+0x44>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	42a6      	cmp	r6, r4
 8005e48:	d105      	bne.n	8005e56 <__libc_init_array+0x2e>
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}
 8005e4c:	00b3      	lsls	r3, r6, #2
 8005e4e:	58eb      	ldr	r3, [r5, r3]
 8005e50:	4798      	blx	r3
 8005e52:	3601      	adds	r6, #1
 8005e54:	e7ee      	b.n	8005e34 <__libc_init_array+0xc>
 8005e56:	00b3      	lsls	r3, r6, #2
 8005e58:	58eb      	ldr	r3, [r5, r3]
 8005e5a:	4798      	blx	r3
 8005e5c:	3601      	adds	r6, #1
 8005e5e:	e7f2      	b.n	8005e46 <__libc_init_array+0x1e>
 8005e60:	08009948 	.word	0x08009948
 8005e64:	08009948 	.word	0x08009948
 8005e68:	0800994c 	.word	0x0800994c
 8005e6c:	08009948 	.word	0x08009948

08005e70 <__retarget_lock_init_recursive>:
 8005e70:	4770      	bx	lr

08005e72 <__retarget_lock_acquire_recursive>:
 8005e72:	4770      	bx	lr

08005e74 <__retarget_lock_release_recursive>:
 8005e74:	4770      	bx	lr

08005e76 <memchr>:
 8005e76:	b2c9      	uxtb	r1, r1
 8005e78:	1882      	adds	r2, r0, r2
 8005e7a:	4290      	cmp	r0, r2
 8005e7c:	d101      	bne.n	8005e82 <memchr+0xc>
 8005e7e:	2000      	movs	r0, #0
 8005e80:	4770      	bx	lr
 8005e82:	7803      	ldrb	r3, [r0, #0]
 8005e84:	428b      	cmp	r3, r1
 8005e86:	d0fb      	beq.n	8005e80 <memchr+0xa>
 8005e88:	3001      	adds	r0, #1
 8005e8a:	e7f6      	b.n	8005e7a <memchr+0x4>

08005e8c <quorem>:
 8005e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e8e:	6902      	ldr	r2, [r0, #16]
 8005e90:	690f      	ldr	r7, [r1, #16]
 8005e92:	b087      	sub	sp, #28
 8005e94:	0006      	movs	r6, r0
 8005e96:	000b      	movs	r3, r1
 8005e98:	2000      	movs	r0, #0
 8005e9a:	9102      	str	r1, [sp, #8]
 8005e9c:	42ba      	cmp	r2, r7
 8005e9e:	db6d      	blt.n	8005f7c <quorem+0xf0>
 8005ea0:	3f01      	subs	r7, #1
 8005ea2:	00bc      	lsls	r4, r7, #2
 8005ea4:	3314      	adds	r3, #20
 8005ea6:	9305      	str	r3, [sp, #20]
 8005ea8:	191b      	adds	r3, r3, r4
 8005eaa:	9303      	str	r3, [sp, #12]
 8005eac:	0033      	movs	r3, r6
 8005eae:	3314      	adds	r3, #20
 8005eb0:	191c      	adds	r4, r3, r4
 8005eb2:	9301      	str	r3, [sp, #4]
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	9b03      	ldr	r3, [sp, #12]
 8005eba:	9804      	ldr	r0, [sp, #16]
 8005ebc:	681d      	ldr	r5, [r3, #0]
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	0029      	movs	r1, r5
 8005ec2:	f7fa f93d 	bl	8000140 <__udivsi3>
 8005ec6:	9b04      	ldr	r3, [sp, #16]
 8005ec8:	9000      	str	r0, [sp, #0]
 8005eca:	42ab      	cmp	r3, r5
 8005ecc:	d32b      	bcc.n	8005f26 <quorem+0x9a>
 8005ece:	9b05      	ldr	r3, [sp, #20]
 8005ed0:	9d01      	ldr	r5, [sp, #4]
 8005ed2:	469c      	mov	ip, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	4662      	mov	r2, ip
 8005edc:	ca08      	ldmia	r2!, {r3}
 8005ede:	6828      	ldr	r0, [r5, #0]
 8005ee0:	4694      	mov	ip, r2
 8005ee2:	9a00      	ldr	r2, [sp, #0]
 8005ee4:	b299      	uxth	r1, r3
 8005ee6:	4351      	muls	r1, r2
 8005ee8:	9a05      	ldr	r2, [sp, #20]
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	1889      	adds	r1, r1, r2
 8005eee:	9a00      	ldr	r2, [sp, #0]
 8005ef0:	4353      	muls	r3, r2
 8005ef2:	0c0a      	lsrs	r2, r1, #16
 8005ef4:	189b      	adds	r3, r3, r2
 8005ef6:	0c1a      	lsrs	r2, r3, #16
 8005ef8:	b289      	uxth	r1, r1
 8005efa:	9205      	str	r2, [sp, #20]
 8005efc:	b282      	uxth	r2, r0
 8005efe:	1a52      	subs	r2, r2, r1
 8005f00:	9904      	ldr	r1, [sp, #16]
 8005f02:	0c00      	lsrs	r0, r0, #16
 8005f04:	1852      	adds	r2, r2, r1
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	1411      	asrs	r1, r2, #16
 8005f0a:	1ac3      	subs	r3, r0, r3
 8005f0c:	185b      	adds	r3, r3, r1
 8005f0e:	1419      	asrs	r1, r3, #16
 8005f10:	b292      	uxth	r2, r2
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	431a      	orrs	r2, r3
 8005f16:	9b03      	ldr	r3, [sp, #12]
 8005f18:	9104      	str	r1, [sp, #16]
 8005f1a:	c504      	stmia	r5!, {r2}
 8005f1c:	4563      	cmp	r3, ip
 8005f1e:	d2dc      	bcs.n	8005eda <quorem+0x4e>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d030      	beq.n	8005f88 <quorem+0xfc>
 8005f26:	0030      	movs	r0, r6
 8005f28:	9902      	ldr	r1, [sp, #8]
 8005f2a:	f001 f9c5 	bl	80072b8 <__mcmp>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	db23      	blt.n	8005f7a <quorem+0xee>
 8005f32:	0034      	movs	r4, r6
 8005f34:	2500      	movs	r5, #0
 8005f36:	9902      	ldr	r1, [sp, #8]
 8005f38:	3414      	adds	r4, #20
 8005f3a:	3114      	adds	r1, #20
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	c901      	ldmia	r1!, {r0}
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	466b      	mov	r3, sp
 8005f44:	891b      	ldrh	r3, [r3, #8]
 8005f46:	b282      	uxth	r2, r0
 8005f48:	1a9a      	subs	r2, r3, r2
 8005f4a:	9b02      	ldr	r3, [sp, #8]
 8005f4c:	1952      	adds	r2, r2, r5
 8005f4e:	0c00      	lsrs	r0, r0, #16
 8005f50:	0c1b      	lsrs	r3, r3, #16
 8005f52:	1a1b      	subs	r3, r3, r0
 8005f54:	1410      	asrs	r0, r2, #16
 8005f56:	181b      	adds	r3, r3, r0
 8005f58:	141d      	asrs	r5, r3, #16
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	041b      	lsls	r3, r3, #16
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	c404      	stmia	r4!, {r2}
 8005f64:	428b      	cmp	r3, r1
 8005f66:	d2e9      	bcs.n	8005f3c <quorem+0xb0>
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	00bb      	lsls	r3, r7, #2
 8005f6c:	18d3      	adds	r3, r2, r3
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	2a00      	cmp	r2, #0
 8005f72:	d013      	beq.n	8005f9c <quorem+0x110>
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	9800      	ldr	r0, [sp, #0]
 8005f7c:	b007      	add	sp, #28
 8005f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d104      	bne.n	8005f90 <quorem+0x104>
 8005f86:	3f01      	subs	r7, #1
 8005f88:	9b01      	ldr	r3, [sp, #4]
 8005f8a:	3c04      	subs	r4, #4
 8005f8c:	42a3      	cmp	r3, r4
 8005f8e:	d3f7      	bcc.n	8005f80 <quorem+0xf4>
 8005f90:	6137      	str	r7, [r6, #16]
 8005f92:	e7c8      	b.n	8005f26 <quorem+0x9a>
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	d104      	bne.n	8005fa4 <quorem+0x118>
 8005f9a:	3f01      	subs	r7, #1
 8005f9c:	9a01      	ldr	r2, [sp, #4]
 8005f9e:	3b04      	subs	r3, #4
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d3f7      	bcc.n	8005f94 <quorem+0x108>
 8005fa4:	6137      	str	r7, [r6, #16]
 8005fa6:	e7e5      	b.n	8005f74 <quorem+0xe8>

08005fa8 <_dtoa_r>:
 8005fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005faa:	0014      	movs	r4, r2
 8005fac:	001d      	movs	r5, r3
 8005fae:	69c6      	ldr	r6, [r0, #28]
 8005fb0:	b09d      	sub	sp, #116	@ 0x74
 8005fb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005fb4:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005fb6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8005fb8:	9003      	str	r0, [sp, #12]
 8005fba:	2e00      	cmp	r6, #0
 8005fbc:	d10f      	bne.n	8005fde <_dtoa_r+0x36>
 8005fbe:	2010      	movs	r0, #16
 8005fc0:	f000 fe30 	bl	8006c24 <malloc>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	1e02      	subs	r2, r0, #0
 8005fc8:	61d8      	str	r0, [r3, #28]
 8005fca:	d104      	bne.n	8005fd6 <_dtoa_r+0x2e>
 8005fcc:	21ef      	movs	r1, #239	@ 0xef
 8005fce:	4bc7      	ldr	r3, [pc, #796]	@ (80062ec <_dtoa_r+0x344>)
 8005fd0:	48c7      	ldr	r0, [pc, #796]	@ (80062f0 <_dtoa_r+0x348>)
 8005fd2:	f001 fcc5 	bl	8007960 <__assert_func>
 8005fd6:	6046      	str	r6, [r0, #4]
 8005fd8:	6086      	str	r6, [r0, #8]
 8005fda:	6006      	str	r6, [r0, #0]
 8005fdc:	60c6      	str	r6, [r0, #12]
 8005fde:	9b03      	ldr	r3, [sp, #12]
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	6819      	ldr	r1, [r3, #0]
 8005fe4:	2900      	cmp	r1, #0
 8005fe6:	d00b      	beq.n	8006000 <_dtoa_r+0x58>
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	2301      	movs	r3, #1
 8005fec:	4093      	lsls	r3, r2
 8005fee:	604a      	str	r2, [r1, #4]
 8005ff0:	608b      	str	r3, [r1, #8]
 8005ff2:	9803      	ldr	r0, [sp, #12]
 8005ff4:	f000 ff16 	bl	8006e24 <_Bfree>
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	2d00      	cmp	r5, #0
 8006002:	da1e      	bge.n	8006042 <_dtoa_r+0x9a>
 8006004:	2301      	movs	r3, #1
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	006b      	lsls	r3, r5, #1
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800600e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006010:	4bb8      	ldr	r3, [pc, #736]	@ (80062f4 <_dtoa_r+0x34c>)
 8006012:	4ab8      	ldr	r2, [pc, #736]	@ (80062f4 <_dtoa_r+0x34c>)
 8006014:	403b      	ands	r3, r7
 8006016:	4293      	cmp	r3, r2
 8006018:	d116      	bne.n	8006048 <_dtoa_r+0xa0>
 800601a:	4bb7      	ldr	r3, [pc, #732]	@ (80062f8 <_dtoa_r+0x350>)
 800601c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	033b      	lsls	r3, r7, #12
 8006022:	0b1b      	lsrs	r3, r3, #12
 8006024:	4323      	orrs	r3, r4
 8006026:	d101      	bne.n	800602c <_dtoa_r+0x84>
 8006028:	f000 fd83 	bl	8006b32 <_dtoa_r+0xb8a>
 800602c:	4bb3      	ldr	r3, [pc, #716]	@ (80062fc <_dtoa_r+0x354>)
 800602e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	2a00      	cmp	r2, #0
 8006034:	d002      	beq.n	800603c <_dtoa_r+0x94>
 8006036:	4bb2      	ldr	r3, [pc, #712]	@ (8006300 <_dtoa_r+0x358>)
 8006038:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	9808      	ldr	r0, [sp, #32]
 800603e:	b01d      	add	sp, #116	@ 0x74
 8006040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006042:	2300      	movs	r3, #0
 8006044:	603b      	str	r3, [r7, #0]
 8006046:	e7e2      	b.n	800600e <_dtoa_r+0x66>
 8006048:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800604a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800604c:	9212      	str	r2, [sp, #72]	@ 0x48
 800604e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006050:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006052:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006054:	2200      	movs	r2, #0
 8006056:	2300      	movs	r3, #0
 8006058:	f7fa f9f8 	bl	800044c <__aeabi_dcmpeq>
 800605c:	1e06      	subs	r6, r0, #0
 800605e:	d00b      	beq.n	8006078 <_dtoa_r+0xd0>
 8006060:	2301      	movs	r3, #1
 8006062:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <_dtoa_r+0xca>
 800606c:	4ba5      	ldr	r3, [pc, #660]	@ (8006304 <_dtoa_r+0x35c>)
 800606e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	4ba5      	ldr	r3, [pc, #660]	@ (8006308 <_dtoa_r+0x360>)
 8006074:	9308      	str	r3, [sp, #32]
 8006076:	e7e1      	b.n	800603c <_dtoa_r+0x94>
 8006078:	ab1a      	add	r3, sp, #104	@ 0x68
 800607a:	9301      	str	r3, [sp, #4]
 800607c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	9803      	ldr	r0, [sp, #12]
 8006082:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006084:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006086:	f001 f9cd 	bl	8007424 <__d2b>
 800608a:	007a      	lsls	r2, r7, #1
 800608c:	9005      	str	r0, [sp, #20]
 800608e:	0d52      	lsrs	r2, r2, #21
 8006090:	d100      	bne.n	8006094 <_dtoa_r+0xec>
 8006092:	e07b      	b.n	800618c <_dtoa_r+0x1e4>
 8006094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006096:	9618      	str	r6, [sp, #96]	@ 0x60
 8006098:	0319      	lsls	r1, r3, #12
 800609a:	4b9c      	ldr	r3, [pc, #624]	@ (800630c <_dtoa_r+0x364>)
 800609c:	0b09      	lsrs	r1, r1, #12
 800609e:	430b      	orrs	r3, r1
 80060a0:	499b      	ldr	r1, [pc, #620]	@ (8006310 <_dtoa_r+0x368>)
 80060a2:	1857      	adds	r7, r2, r1
 80060a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80060a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80060a8:	0019      	movs	r1, r3
 80060aa:	2200      	movs	r2, #0
 80060ac:	4b99      	ldr	r3, [pc, #612]	@ (8006314 <_dtoa_r+0x36c>)
 80060ae:	f7fb fe37 	bl	8001d20 <__aeabi_dsub>
 80060b2:	4a99      	ldr	r2, [pc, #612]	@ (8006318 <_dtoa_r+0x370>)
 80060b4:	4b99      	ldr	r3, [pc, #612]	@ (800631c <_dtoa_r+0x374>)
 80060b6:	f7fb fb6b 	bl	8001790 <__aeabi_dmul>
 80060ba:	4a99      	ldr	r2, [pc, #612]	@ (8006320 <_dtoa_r+0x378>)
 80060bc:	4b99      	ldr	r3, [pc, #612]	@ (8006324 <_dtoa_r+0x37c>)
 80060be:	f7fa fbbf 	bl	8000840 <__aeabi_dadd>
 80060c2:	0004      	movs	r4, r0
 80060c4:	0038      	movs	r0, r7
 80060c6:	000d      	movs	r5, r1
 80060c8:	f7fc fa24 	bl	8002514 <__aeabi_i2d>
 80060cc:	4a96      	ldr	r2, [pc, #600]	@ (8006328 <_dtoa_r+0x380>)
 80060ce:	4b97      	ldr	r3, [pc, #604]	@ (800632c <_dtoa_r+0x384>)
 80060d0:	f7fb fb5e 	bl	8001790 <__aeabi_dmul>
 80060d4:	0002      	movs	r2, r0
 80060d6:	000b      	movs	r3, r1
 80060d8:	0020      	movs	r0, r4
 80060da:	0029      	movs	r1, r5
 80060dc:	f7fa fbb0 	bl	8000840 <__aeabi_dadd>
 80060e0:	0004      	movs	r4, r0
 80060e2:	000d      	movs	r5, r1
 80060e4:	f7fc f9da 	bl	800249c <__aeabi_d2iz>
 80060e8:	2200      	movs	r2, #0
 80060ea:	9004      	str	r0, [sp, #16]
 80060ec:	2300      	movs	r3, #0
 80060ee:	0020      	movs	r0, r4
 80060f0:	0029      	movs	r1, r5
 80060f2:	f7fa f9b1 	bl	8000458 <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	d00b      	beq.n	8006112 <_dtoa_r+0x16a>
 80060fa:	9804      	ldr	r0, [sp, #16]
 80060fc:	f7fc fa0a 	bl	8002514 <__aeabi_i2d>
 8006100:	002b      	movs	r3, r5
 8006102:	0022      	movs	r2, r4
 8006104:	f7fa f9a2 	bl	800044c <__aeabi_dcmpeq>
 8006108:	4243      	negs	r3, r0
 800610a:	4158      	adcs	r0, r3
 800610c:	9b04      	ldr	r3, [sp, #16]
 800610e:	1a1b      	subs	r3, r3, r0
 8006110:	9304      	str	r3, [sp, #16]
 8006112:	2301      	movs	r3, #1
 8006114:	9315      	str	r3, [sp, #84]	@ 0x54
 8006116:	9b04      	ldr	r3, [sp, #16]
 8006118:	2b16      	cmp	r3, #22
 800611a:	d810      	bhi.n	800613e <_dtoa_r+0x196>
 800611c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800611e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006120:	9a04      	ldr	r2, [sp, #16]
 8006122:	4b83      	ldr	r3, [pc, #524]	@ (8006330 <_dtoa_r+0x388>)
 8006124:	00d2      	lsls	r2, r2, #3
 8006126:	189b      	adds	r3, r3, r2
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f7fa f994 	bl	8000458 <__aeabi_dcmplt>
 8006130:	2800      	cmp	r0, #0
 8006132:	d047      	beq.n	80061c4 <_dtoa_r+0x21c>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	3b01      	subs	r3, #1
 8006138:	9304      	str	r3, [sp, #16]
 800613a:	2300      	movs	r3, #0
 800613c:	9315      	str	r3, [sp, #84]	@ 0x54
 800613e:	2200      	movs	r2, #0
 8006140:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006142:	9206      	str	r2, [sp, #24]
 8006144:	1bdb      	subs	r3, r3, r7
 8006146:	1e5a      	subs	r2, r3, #1
 8006148:	d53e      	bpl.n	80061c8 <_dtoa_r+0x220>
 800614a:	2201      	movs	r2, #1
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	9306      	str	r3, [sp, #24]
 8006150:	2300      	movs	r3, #0
 8006152:	930d      	str	r3, [sp, #52]	@ 0x34
 8006154:	9b04      	ldr	r3, [sp, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	db38      	blt.n	80061cc <_dtoa_r+0x224>
 800615a:	9a04      	ldr	r2, [sp, #16]
 800615c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800615e:	4694      	mov	ip, r2
 8006160:	4463      	add	r3, ip
 8006162:	930d      	str	r3, [sp, #52]	@ 0x34
 8006164:	2300      	movs	r3, #0
 8006166:	9214      	str	r2, [sp, #80]	@ 0x50
 8006168:	930f      	str	r3, [sp, #60]	@ 0x3c
 800616a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800616c:	2401      	movs	r4, #1
 800616e:	2b09      	cmp	r3, #9
 8006170:	d867      	bhi.n	8006242 <_dtoa_r+0x29a>
 8006172:	2b05      	cmp	r3, #5
 8006174:	dd02      	ble.n	800617c <_dtoa_r+0x1d4>
 8006176:	2400      	movs	r4, #0
 8006178:	3b04      	subs	r3, #4
 800617a:	9322      	str	r3, [sp, #136]	@ 0x88
 800617c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800617e:	1e98      	subs	r0, r3, #2
 8006180:	2803      	cmp	r0, #3
 8006182:	d867      	bhi.n	8006254 <_dtoa_r+0x2ac>
 8006184:	f7f9 ffc8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006188:	5b383a2b 	.word	0x5b383a2b
 800618c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800618e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006190:	18f6      	adds	r6, r6, r3
 8006192:	4b68      	ldr	r3, [pc, #416]	@ (8006334 <_dtoa_r+0x38c>)
 8006194:	18f2      	adds	r2, r6, r3
 8006196:	2a20      	cmp	r2, #32
 8006198:	dd0f      	ble.n	80061ba <_dtoa_r+0x212>
 800619a:	2340      	movs	r3, #64	@ 0x40
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	409f      	lsls	r7, r3
 80061a0:	4b65      	ldr	r3, [pc, #404]	@ (8006338 <_dtoa_r+0x390>)
 80061a2:	0038      	movs	r0, r7
 80061a4:	18f3      	adds	r3, r6, r3
 80061a6:	40dc      	lsrs	r4, r3
 80061a8:	4320      	orrs	r0, r4
 80061aa:	f7fc f9e1 	bl	8002570 <__aeabi_ui2d>
 80061ae:	2201      	movs	r2, #1
 80061b0:	4b62      	ldr	r3, [pc, #392]	@ (800633c <_dtoa_r+0x394>)
 80061b2:	1e77      	subs	r7, r6, #1
 80061b4:	18cb      	adds	r3, r1, r3
 80061b6:	9218      	str	r2, [sp, #96]	@ 0x60
 80061b8:	e776      	b.n	80060a8 <_dtoa_r+0x100>
 80061ba:	2320      	movs	r3, #32
 80061bc:	0020      	movs	r0, r4
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	4098      	lsls	r0, r3
 80061c2:	e7f2      	b.n	80061aa <_dtoa_r+0x202>
 80061c4:	9015      	str	r0, [sp, #84]	@ 0x54
 80061c6:	e7ba      	b.n	800613e <_dtoa_r+0x196>
 80061c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80061ca:	e7c3      	b.n	8006154 <_dtoa_r+0x1ac>
 80061cc:	9b06      	ldr	r3, [sp, #24]
 80061ce:	9a04      	ldr	r2, [sp, #16]
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	9306      	str	r3, [sp, #24]
 80061d4:	4253      	negs	r3, r2
 80061d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061d8:	2300      	movs	r3, #0
 80061da:	9314      	str	r3, [sp, #80]	@ 0x50
 80061dc:	e7c5      	b.n	800616a <_dtoa_r+0x1c2>
 80061de:	2300      	movs	r3, #0
 80061e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80061e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80061e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dc13      	bgt.n	8006214 <_dtoa_r+0x26c>
 80061ec:	2301      	movs	r3, #1
 80061ee:	001a      	movs	r2, r3
 80061f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80061f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061f4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80061f6:	e00d      	b.n	8006214 <_dtoa_r+0x26c>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e7f1      	b.n	80061e0 <_dtoa_r+0x238>
 80061fc:	2300      	movs	r3, #0
 80061fe:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006200:	9310      	str	r3, [sp, #64]	@ 0x40
 8006202:	4694      	mov	ip, r2
 8006204:	9b04      	ldr	r3, [sp, #16]
 8006206:	4463      	add	r3, ip
 8006208:	930e      	str	r3, [sp, #56]	@ 0x38
 800620a:	3301      	adds	r3, #1
 800620c:	9309      	str	r3, [sp, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	dc00      	bgt.n	8006214 <_dtoa_r+0x26c>
 8006212:	2301      	movs	r3, #1
 8006214:	9a03      	ldr	r2, [sp, #12]
 8006216:	2100      	movs	r1, #0
 8006218:	69d0      	ldr	r0, [r2, #28]
 800621a:	2204      	movs	r2, #4
 800621c:	0015      	movs	r5, r2
 800621e:	3514      	adds	r5, #20
 8006220:	429d      	cmp	r5, r3
 8006222:	d91b      	bls.n	800625c <_dtoa_r+0x2b4>
 8006224:	6041      	str	r1, [r0, #4]
 8006226:	9803      	ldr	r0, [sp, #12]
 8006228:	f000 fdb8 	bl	8006d9c <_Balloc>
 800622c:	9008      	str	r0, [sp, #32]
 800622e:	2800      	cmp	r0, #0
 8006230:	d117      	bne.n	8006262 <_dtoa_r+0x2ba>
 8006232:	21b0      	movs	r1, #176	@ 0xb0
 8006234:	4b42      	ldr	r3, [pc, #264]	@ (8006340 <_dtoa_r+0x398>)
 8006236:	482e      	ldr	r0, [pc, #184]	@ (80062f0 <_dtoa_r+0x348>)
 8006238:	9a08      	ldr	r2, [sp, #32]
 800623a:	31ff      	adds	r1, #255	@ 0xff
 800623c:	e6c9      	b.n	8005fd2 <_dtoa_r+0x2a>
 800623e:	2301      	movs	r3, #1
 8006240:	e7dd      	b.n	80061fe <_dtoa_r+0x256>
 8006242:	2300      	movs	r3, #0
 8006244:	9410      	str	r4, [sp, #64]	@ 0x40
 8006246:	9322      	str	r3, [sp, #136]	@ 0x88
 8006248:	3b01      	subs	r3, #1
 800624a:	930e      	str	r3, [sp, #56]	@ 0x38
 800624c:	9309      	str	r3, [sp, #36]	@ 0x24
 800624e:	2200      	movs	r2, #0
 8006250:	3313      	adds	r3, #19
 8006252:	e7cf      	b.n	80061f4 <_dtoa_r+0x24c>
 8006254:	2301      	movs	r3, #1
 8006256:	9310      	str	r3, [sp, #64]	@ 0x40
 8006258:	3b02      	subs	r3, #2
 800625a:	e7f6      	b.n	800624a <_dtoa_r+0x2a2>
 800625c:	3101      	adds	r1, #1
 800625e:	0052      	lsls	r2, r2, #1
 8006260:	e7dc      	b.n	800621c <_dtoa_r+0x274>
 8006262:	9b03      	ldr	r3, [sp, #12]
 8006264:	9a08      	ldr	r2, [sp, #32]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800626c:	2b0e      	cmp	r3, #14
 800626e:	d900      	bls.n	8006272 <_dtoa_r+0x2ca>
 8006270:	e0d9      	b.n	8006426 <_dtoa_r+0x47e>
 8006272:	2c00      	cmp	r4, #0
 8006274:	d100      	bne.n	8006278 <_dtoa_r+0x2d0>
 8006276:	e0d6      	b.n	8006426 <_dtoa_r+0x47e>
 8006278:	9b04      	ldr	r3, [sp, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	dd64      	ble.n	8006348 <_dtoa_r+0x3a0>
 800627e:	210f      	movs	r1, #15
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	4b2b      	ldr	r3, [pc, #172]	@ (8006330 <_dtoa_r+0x388>)
 8006284:	400a      	ands	r2, r1
 8006286:	00d2      	lsls	r2, r2, #3
 8006288:	189b      	adds	r3, r3, r2
 800628a:	681e      	ldr	r6, [r3, #0]
 800628c:	685f      	ldr	r7, [r3, #4]
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	2402      	movs	r4, #2
 8006292:	111d      	asrs	r5, r3, #4
 8006294:	05db      	lsls	r3, r3, #23
 8006296:	d50a      	bpl.n	80062ae <_dtoa_r+0x306>
 8006298:	4b2a      	ldr	r3, [pc, #168]	@ (8006344 <_dtoa_r+0x39c>)
 800629a:	400d      	ands	r5, r1
 800629c:	6a1a      	ldr	r2, [r3, #32]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80062a2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80062a4:	f7fa fe30 	bl	8000f08 <__aeabi_ddiv>
 80062a8:	900a      	str	r0, [sp, #40]	@ 0x28
 80062aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 80062ac:	3401      	adds	r4, #1
 80062ae:	4b25      	ldr	r3, [pc, #148]	@ (8006344 <_dtoa_r+0x39c>)
 80062b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80062b2:	2d00      	cmp	r5, #0
 80062b4:	d108      	bne.n	80062c8 <_dtoa_r+0x320>
 80062b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80062b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062ba:	0032      	movs	r2, r6
 80062bc:	003b      	movs	r3, r7
 80062be:	f7fa fe23 	bl	8000f08 <__aeabi_ddiv>
 80062c2:	900a      	str	r0, [sp, #40]	@ 0x28
 80062c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80062c6:	e05a      	b.n	800637e <_dtoa_r+0x3d6>
 80062c8:	2301      	movs	r3, #1
 80062ca:	421d      	tst	r5, r3
 80062cc:	d009      	beq.n	80062e2 <_dtoa_r+0x33a>
 80062ce:	18e4      	adds	r4, r4, r3
 80062d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062d2:	0030      	movs	r0, r6
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	0039      	movs	r1, r7
 80062da:	f7fb fa59 	bl	8001790 <__aeabi_dmul>
 80062de:	0006      	movs	r6, r0
 80062e0:	000f      	movs	r7, r1
 80062e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062e4:	106d      	asrs	r5, r5, #1
 80062e6:	3308      	adds	r3, #8
 80062e8:	e7e2      	b.n	80062b0 <_dtoa_r+0x308>
 80062ea:	46c0      	nop			@ (mov r8, r8)
 80062ec:	08009619 	.word	0x08009619
 80062f0:	08009630 	.word	0x08009630
 80062f4:	7ff00000 	.word	0x7ff00000
 80062f8:	0000270f 	.word	0x0000270f
 80062fc:	08009615 	.word	0x08009615
 8006300:	08009618 	.word	0x08009618
 8006304:	080095e9 	.word	0x080095e9
 8006308:	080095e8 	.word	0x080095e8
 800630c:	3ff00000 	.word	0x3ff00000
 8006310:	fffffc01 	.word	0xfffffc01
 8006314:	3ff80000 	.word	0x3ff80000
 8006318:	636f4361 	.word	0x636f4361
 800631c:	3fd287a7 	.word	0x3fd287a7
 8006320:	8b60c8b3 	.word	0x8b60c8b3
 8006324:	3fc68a28 	.word	0x3fc68a28
 8006328:	509f79fb 	.word	0x509f79fb
 800632c:	3fd34413 	.word	0x3fd34413
 8006330:	08009728 	.word	0x08009728
 8006334:	00000432 	.word	0x00000432
 8006338:	00000412 	.word	0x00000412
 800633c:	fe100000 	.word	0xfe100000
 8006340:	08009688 	.word	0x08009688
 8006344:	08009700 	.word	0x08009700
 8006348:	9b04      	ldr	r3, [sp, #16]
 800634a:	2402      	movs	r4, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d016      	beq.n	800637e <_dtoa_r+0x3d6>
 8006350:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006352:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006354:	220f      	movs	r2, #15
 8006356:	425d      	negs	r5, r3
 8006358:	402a      	ands	r2, r5
 800635a:	4bd7      	ldr	r3, [pc, #860]	@ (80066b8 <_dtoa_r+0x710>)
 800635c:	00d2      	lsls	r2, r2, #3
 800635e:	189b      	adds	r3, r3, r2
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f7fb fa14 	bl	8001790 <__aeabi_dmul>
 8006368:	2701      	movs	r7, #1
 800636a:	2300      	movs	r3, #0
 800636c:	900a      	str	r0, [sp, #40]	@ 0x28
 800636e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006370:	4ed2      	ldr	r6, [pc, #840]	@ (80066bc <_dtoa_r+0x714>)
 8006372:	112d      	asrs	r5, r5, #4
 8006374:	2d00      	cmp	r5, #0
 8006376:	d000      	beq.n	800637a <_dtoa_r+0x3d2>
 8006378:	e0ba      	b.n	80064f0 <_dtoa_r+0x548>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1a1      	bne.n	80062c2 <_dtoa_r+0x31a>
 800637e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006380:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006382:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006384:	2b00      	cmp	r3, #0
 8006386:	d100      	bne.n	800638a <_dtoa_r+0x3e2>
 8006388:	e0bd      	b.n	8006506 <_dtoa_r+0x55e>
 800638a:	2200      	movs	r2, #0
 800638c:	0030      	movs	r0, r6
 800638e:	0039      	movs	r1, r7
 8006390:	4bcb      	ldr	r3, [pc, #812]	@ (80066c0 <_dtoa_r+0x718>)
 8006392:	f7fa f861 	bl	8000458 <__aeabi_dcmplt>
 8006396:	2800      	cmp	r0, #0
 8006398:	d100      	bne.n	800639c <_dtoa_r+0x3f4>
 800639a:	e0b4      	b.n	8006506 <_dtoa_r+0x55e>
 800639c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d100      	bne.n	80063a4 <_dtoa_r+0x3fc>
 80063a2:	e0b0      	b.n	8006506 <_dtoa_r+0x55e>
 80063a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	dd39      	ble.n	800641e <_dtoa_r+0x476>
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	2200      	movs	r2, #0
 80063ae:	3b01      	subs	r3, #1
 80063b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80063b2:	0030      	movs	r0, r6
 80063b4:	4bc3      	ldr	r3, [pc, #780]	@ (80066c4 <_dtoa_r+0x71c>)
 80063b6:	0039      	movs	r1, r7
 80063b8:	f7fb f9ea 	bl	8001790 <__aeabi_dmul>
 80063bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80063be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063c2:	3401      	adds	r4, #1
 80063c4:	0020      	movs	r0, r4
 80063c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80063c8:	f7fc f8a4 	bl	8002514 <__aeabi_i2d>
 80063cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063d0:	f7fb f9de 	bl	8001790 <__aeabi_dmul>
 80063d4:	4bbc      	ldr	r3, [pc, #752]	@ (80066c8 <_dtoa_r+0x720>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	f7fa fa32 	bl	8000840 <__aeabi_dadd>
 80063dc:	4bbb      	ldr	r3, [pc, #748]	@ (80066cc <_dtoa_r+0x724>)
 80063de:	0006      	movs	r6, r0
 80063e0:	18cf      	adds	r7, r1, r3
 80063e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d000      	beq.n	80063ea <_dtoa_r+0x442>
 80063e8:	e091      	b.n	800650e <_dtoa_r+0x566>
 80063ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80063ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063ee:	2200      	movs	r2, #0
 80063f0:	4bb7      	ldr	r3, [pc, #732]	@ (80066d0 <_dtoa_r+0x728>)
 80063f2:	f7fb fc95 	bl	8001d20 <__aeabi_dsub>
 80063f6:	0032      	movs	r2, r6
 80063f8:	003b      	movs	r3, r7
 80063fa:	0004      	movs	r4, r0
 80063fc:	000d      	movs	r5, r1
 80063fe:	f7fa f83f 	bl	8000480 <__aeabi_dcmpgt>
 8006402:	2800      	cmp	r0, #0
 8006404:	d000      	beq.n	8006408 <_dtoa_r+0x460>
 8006406:	e29d      	b.n	8006944 <_dtoa_r+0x99c>
 8006408:	2180      	movs	r1, #128	@ 0x80
 800640a:	0609      	lsls	r1, r1, #24
 800640c:	187b      	adds	r3, r7, r1
 800640e:	0032      	movs	r2, r6
 8006410:	0020      	movs	r0, r4
 8006412:	0029      	movs	r1, r5
 8006414:	f7fa f820 	bl	8000458 <__aeabi_dcmplt>
 8006418:	2800      	cmp	r0, #0
 800641a:	d000      	beq.n	800641e <_dtoa_r+0x476>
 800641c:	e130      	b.n	8006680 <_dtoa_r+0x6d8>
 800641e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006420:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006422:	930a      	str	r3, [sp, #40]	@ 0x28
 8006424:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006426:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006428:	2b00      	cmp	r3, #0
 800642a:	da00      	bge.n	800642e <_dtoa_r+0x486>
 800642c:	e177      	b.n	800671e <_dtoa_r+0x776>
 800642e:	9a04      	ldr	r2, [sp, #16]
 8006430:	2a0e      	cmp	r2, #14
 8006432:	dd00      	ble.n	8006436 <_dtoa_r+0x48e>
 8006434:	e173      	b.n	800671e <_dtoa_r+0x776>
 8006436:	4ba0      	ldr	r3, [pc, #640]	@ (80066b8 <_dtoa_r+0x710>)
 8006438:	00d2      	lsls	r2, r2, #3
 800643a:	189b      	adds	r3, r3, r2
 800643c:	685c      	ldr	r4, [r3, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	9306      	str	r3, [sp, #24]
 8006442:	9407      	str	r4, [sp, #28]
 8006444:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006446:	2b00      	cmp	r3, #0
 8006448:	da03      	bge.n	8006452 <_dtoa_r+0x4aa>
 800644a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	dc00      	bgt.n	8006452 <_dtoa_r+0x4aa>
 8006450:	e106      	b.n	8006660 <_dtoa_r+0x6b8>
 8006452:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006454:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006458:	9d08      	ldr	r5, [sp, #32]
 800645a:	3b01      	subs	r3, #1
 800645c:	195b      	adds	r3, r3, r5
 800645e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006460:	9a06      	ldr	r2, [sp, #24]
 8006462:	9b07      	ldr	r3, [sp, #28]
 8006464:	0030      	movs	r0, r6
 8006466:	0039      	movs	r1, r7
 8006468:	f7fa fd4e 	bl	8000f08 <__aeabi_ddiv>
 800646c:	f7fc f816 	bl	800249c <__aeabi_d2iz>
 8006470:	9009      	str	r0, [sp, #36]	@ 0x24
 8006472:	f7fc f84f 	bl	8002514 <__aeabi_i2d>
 8006476:	9a06      	ldr	r2, [sp, #24]
 8006478:	9b07      	ldr	r3, [sp, #28]
 800647a:	f7fb f989 	bl	8001790 <__aeabi_dmul>
 800647e:	0002      	movs	r2, r0
 8006480:	000b      	movs	r3, r1
 8006482:	0030      	movs	r0, r6
 8006484:	0039      	movs	r1, r7
 8006486:	f7fb fc4b 	bl	8001d20 <__aeabi_dsub>
 800648a:	002b      	movs	r3, r5
 800648c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800648e:	3501      	adds	r5, #1
 8006490:	3230      	adds	r2, #48	@ 0x30
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006496:	002c      	movs	r4, r5
 8006498:	429a      	cmp	r2, r3
 800649a:	d000      	beq.n	800649e <_dtoa_r+0x4f6>
 800649c:	e131      	b.n	8006702 <_dtoa_r+0x75a>
 800649e:	0002      	movs	r2, r0
 80064a0:	000b      	movs	r3, r1
 80064a2:	f7fa f9cd 	bl	8000840 <__aeabi_dadd>
 80064a6:	9a06      	ldr	r2, [sp, #24]
 80064a8:	9b07      	ldr	r3, [sp, #28]
 80064aa:	0006      	movs	r6, r0
 80064ac:	000f      	movs	r7, r1
 80064ae:	f7f9 ffe7 	bl	8000480 <__aeabi_dcmpgt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d000      	beq.n	80064b8 <_dtoa_r+0x510>
 80064b6:	e10f      	b.n	80066d8 <_dtoa_r+0x730>
 80064b8:	9a06      	ldr	r2, [sp, #24]
 80064ba:	9b07      	ldr	r3, [sp, #28]
 80064bc:	0030      	movs	r0, r6
 80064be:	0039      	movs	r1, r7
 80064c0:	f7f9 ffc4 	bl	800044c <__aeabi_dcmpeq>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	d003      	beq.n	80064d0 <_dtoa_r+0x528>
 80064c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ca:	07dd      	lsls	r5, r3, #31
 80064cc:	d500      	bpl.n	80064d0 <_dtoa_r+0x528>
 80064ce:	e103      	b.n	80066d8 <_dtoa_r+0x730>
 80064d0:	9905      	ldr	r1, [sp, #20]
 80064d2:	9803      	ldr	r0, [sp, #12]
 80064d4:	f000 fca6 	bl	8006e24 <_Bfree>
 80064d8:	2300      	movs	r3, #0
 80064da:	7023      	strb	r3, [r4, #0]
 80064dc:	9b04      	ldr	r3, [sp, #16]
 80064de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80064e0:	3301      	adds	r3, #1
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d100      	bne.n	80064ec <_dtoa_r+0x544>
 80064ea:	e5a7      	b.n	800603c <_dtoa_r+0x94>
 80064ec:	601c      	str	r4, [r3, #0]
 80064ee:	e5a5      	b.n	800603c <_dtoa_r+0x94>
 80064f0:	423d      	tst	r5, r7
 80064f2:	d005      	beq.n	8006500 <_dtoa_r+0x558>
 80064f4:	6832      	ldr	r2, [r6, #0]
 80064f6:	6873      	ldr	r3, [r6, #4]
 80064f8:	f7fb f94a 	bl	8001790 <__aeabi_dmul>
 80064fc:	003b      	movs	r3, r7
 80064fe:	3401      	adds	r4, #1
 8006500:	106d      	asrs	r5, r5, #1
 8006502:	3608      	adds	r6, #8
 8006504:	e736      	b.n	8006374 <_dtoa_r+0x3cc>
 8006506:	9b04      	ldr	r3, [sp, #16]
 8006508:	930c      	str	r3, [sp, #48]	@ 0x30
 800650a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650c:	e75a      	b.n	80063c4 <_dtoa_r+0x41c>
 800650e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006510:	4b69      	ldr	r3, [pc, #420]	@ (80066b8 <_dtoa_r+0x710>)
 8006512:	3a01      	subs	r2, #1
 8006514:	00d2      	lsls	r2, r2, #3
 8006516:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006518:	189b      	adds	r3, r3, r2
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2900      	cmp	r1, #0
 8006520:	d04c      	beq.n	80065bc <_dtoa_r+0x614>
 8006522:	2000      	movs	r0, #0
 8006524:	496b      	ldr	r1, [pc, #428]	@ (80066d4 <_dtoa_r+0x72c>)
 8006526:	f7fa fcef 	bl	8000f08 <__aeabi_ddiv>
 800652a:	0032      	movs	r2, r6
 800652c:	003b      	movs	r3, r7
 800652e:	f7fb fbf7 	bl	8001d20 <__aeabi_dsub>
 8006532:	9a08      	ldr	r2, [sp, #32]
 8006534:	0006      	movs	r6, r0
 8006536:	4694      	mov	ip, r2
 8006538:	000f      	movs	r7, r1
 800653a:	9b08      	ldr	r3, [sp, #32]
 800653c:	9316      	str	r3, [sp, #88]	@ 0x58
 800653e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006540:	4463      	add	r3, ip
 8006542:	9311      	str	r3, [sp, #68]	@ 0x44
 8006544:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006546:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006548:	f7fb ffa8 	bl	800249c <__aeabi_d2iz>
 800654c:	0005      	movs	r5, r0
 800654e:	f7fb ffe1 	bl	8002514 <__aeabi_i2d>
 8006552:	0002      	movs	r2, r0
 8006554:	000b      	movs	r3, r1
 8006556:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800655a:	f7fb fbe1 	bl	8001d20 <__aeabi_dsub>
 800655e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006560:	3530      	adds	r5, #48	@ 0x30
 8006562:	1c5c      	adds	r4, r3, #1
 8006564:	701d      	strb	r5, [r3, #0]
 8006566:	0032      	movs	r2, r6
 8006568:	003b      	movs	r3, r7
 800656a:	900a      	str	r0, [sp, #40]	@ 0x28
 800656c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800656e:	f7f9 ff73 	bl	8000458 <__aeabi_dcmplt>
 8006572:	2800      	cmp	r0, #0
 8006574:	d16a      	bne.n	800664c <_dtoa_r+0x6a4>
 8006576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006578:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800657a:	2000      	movs	r0, #0
 800657c:	4950      	ldr	r1, [pc, #320]	@ (80066c0 <_dtoa_r+0x718>)
 800657e:	f7fb fbcf 	bl	8001d20 <__aeabi_dsub>
 8006582:	0032      	movs	r2, r6
 8006584:	003b      	movs	r3, r7
 8006586:	f7f9 ff67 	bl	8000458 <__aeabi_dcmplt>
 800658a:	2800      	cmp	r0, #0
 800658c:	d000      	beq.n	8006590 <_dtoa_r+0x5e8>
 800658e:	e0a5      	b.n	80066dc <_dtoa_r+0x734>
 8006590:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006592:	42a3      	cmp	r3, r4
 8006594:	d100      	bne.n	8006598 <_dtoa_r+0x5f0>
 8006596:	e742      	b.n	800641e <_dtoa_r+0x476>
 8006598:	2200      	movs	r2, #0
 800659a:	0030      	movs	r0, r6
 800659c:	0039      	movs	r1, r7
 800659e:	4b49      	ldr	r3, [pc, #292]	@ (80066c4 <_dtoa_r+0x71c>)
 80065a0:	f7fb f8f6 	bl	8001790 <__aeabi_dmul>
 80065a4:	2200      	movs	r2, #0
 80065a6:	0006      	movs	r6, r0
 80065a8:	000f      	movs	r7, r1
 80065aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065ae:	4b45      	ldr	r3, [pc, #276]	@ (80066c4 <_dtoa_r+0x71c>)
 80065b0:	f7fb f8ee 	bl	8001790 <__aeabi_dmul>
 80065b4:	9416      	str	r4, [sp, #88]	@ 0x58
 80065b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80065b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80065ba:	e7c3      	b.n	8006544 <_dtoa_r+0x59c>
 80065bc:	0030      	movs	r0, r6
 80065be:	0039      	movs	r1, r7
 80065c0:	f7fb f8e6 	bl	8001790 <__aeabi_dmul>
 80065c4:	9d08      	ldr	r5, [sp, #32]
 80065c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065c8:	002b      	movs	r3, r5
 80065ca:	4694      	mov	ip, r2
 80065cc:	9016      	str	r0, [sp, #88]	@ 0x58
 80065ce:	9117      	str	r1, [sp, #92]	@ 0x5c
 80065d0:	4463      	add	r3, ip
 80065d2:	9319      	str	r3, [sp, #100]	@ 0x64
 80065d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065d6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065d8:	f7fb ff60 	bl	800249c <__aeabi_d2iz>
 80065dc:	0004      	movs	r4, r0
 80065de:	f7fb ff99 	bl	8002514 <__aeabi_i2d>
 80065e2:	000b      	movs	r3, r1
 80065e4:	0002      	movs	r2, r0
 80065e6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80065e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065ea:	f7fb fb99 	bl	8001d20 <__aeabi_dsub>
 80065ee:	3430      	adds	r4, #48	@ 0x30
 80065f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065f2:	702c      	strb	r4, [r5, #0]
 80065f4:	3501      	adds	r5, #1
 80065f6:	0006      	movs	r6, r0
 80065f8:	000f      	movs	r7, r1
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	d129      	bne.n	8006652 <_dtoa_r+0x6aa>
 80065fe:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006600:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006602:	9b08      	ldr	r3, [sp, #32]
 8006604:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006606:	469c      	mov	ip, r3
 8006608:	2200      	movs	r2, #0
 800660a:	4b32      	ldr	r3, [pc, #200]	@ (80066d4 <_dtoa_r+0x72c>)
 800660c:	4464      	add	r4, ip
 800660e:	f7fa f917 	bl	8000840 <__aeabi_dadd>
 8006612:	0002      	movs	r2, r0
 8006614:	000b      	movs	r3, r1
 8006616:	0030      	movs	r0, r6
 8006618:	0039      	movs	r1, r7
 800661a:	f7f9 ff31 	bl	8000480 <__aeabi_dcmpgt>
 800661e:	2800      	cmp	r0, #0
 8006620:	d15c      	bne.n	80066dc <_dtoa_r+0x734>
 8006622:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006624:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006626:	2000      	movs	r0, #0
 8006628:	492a      	ldr	r1, [pc, #168]	@ (80066d4 <_dtoa_r+0x72c>)
 800662a:	f7fb fb79 	bl	8001d20 <__aeabi_dsub>
 800662e:	0002      	movs	r2, r0
 8006630:	000b      	movs	r3, r1
 8006632:	0030      	movs	r0, r6
 8006634:	0039      	movs	r1, r7
 8006636:	f7f9 ff0f 	bl	8000458 <__aeabi_dcmplt>
 800663a:	2800      	cmp	r0, #0
 800663c:	d100      	bne.n	8006640 <_dtoa_r+0x698>
 800663e:	e6ee      	b.n	800641e <_dtoa_r+0x476>
 8006640:	0023      	movs	r3, r4
 8006642:	3c01      	subs	r4, #1
 8006644:	7822      	ldrb	r2, [r4, #0]
 8006646:	2a30      	cmp	r2, #48	@ 0x30
 8006648:	d0fa      	beq.n	8006640 <_dtoa_r+0x698>
 800664a:	001c      	movs	r4, r3
 800664c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	e73e      	b.n	80064d0 <_dtoa_r+0x528>
 8006652:	2200      	movs	r2, #0
 8006654:	4b1b      	ldr	r3, [pc, #108]	@ (80066c4 <_dtoa_r+0x71c>)
 8006656:	f7fb f89b 	bl	8001790 <__aeabi_dmul>
 800665a:	900a      	str	r0, [sp, #40]	@ 0x28
 800665c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800665e:	e7b9      	b.n	80065d4 <_dtoa_r+0x62c>
 8006660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10c      	bne.n	8006680 <_dtoa_r+0x6d8>
 8006666:	9806      	ldr	r0, [sp, #24]
 8006668:	9907      	ldr	r1, [sp, #28]
 800666a:	2200      	movs	r2, #0
 800666c:	4b18      	ldr	r3, [pc, #96]	@ (80066d0 <_dtoa_r+0x728>)
 800666e:	f7fb f88f 	bl	8001790 <__aeabi_dmul>
 8006672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006676:	f7f9 ff0d 	bl	8000494 <__aeabi_dcmpge>
 800667a:	2800      	cmp	r0, #0
 800667c:	d100      	bne.n	8006680 <_dtoa_r+0x6d8>
 800667e:	e164      	b.n	800694a <_dtoa_r+0x9a2>
 8006680:	2600      	movs	r6, #0
 8006682:	0037      	movs	r7, r6
 8006684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006686:	9c08      	ldr	r4, [sp, #32]
 8006688:	43db      	mvns	r3, r3
 800668a:	930c      	str	r3, [sp, #48]	@ 0x30
 800668c:	2300      	movs	r3, #0
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	0031      	movs	r1, r6
 8006692:	9803      	ldr	r0, [sp, #12]
 8006694:	f000 fbc6 	bl	8006e24 <_Bfree>
 8006698:	2f00      	cmp	r7, #0
 800669a:	d0d7      	beq.n	800664c <_dtoa_r+0x6a4>
 800669c:	9b04      	ldr	r3, [sp, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <_dtoa_r+0x706>
 80066a2:	42bb      	cmp	r3, r7
 80066a4:	d003      	beq.n	80066ae <_dtoa_r+0x706>
 80066a6:	0019      	movs	r1, r3
 80066a8:	9803      	ldr	r0, [sp, #12]
 80066aa:	f000 fbbb 	bl	8006e24 <_Bfree>
 80066ae:	0039      	movs	r1, r7
 80066b0:	9803      	ldr	r0, [sp, #12]
 80066b2:	f000 fbb7 	bl	8006e24 <_Bfree>
 80066b6:	e7c9      	b.n	800664c <_dtoa_r+0x6a4>
 80066b8:	08009728 	.word	0x08009728
 80066bc:	08009700 	.word	0x08009700
 80066c0:	3ff00000 	.word	0x3ff00000
 80066c4:	40240000 	.word	0x40240000
 80066c8:	401c0000 	.word	0x401c0000
 80066cc:	fcc00000 	.word	0xfcc00000
 80066d0:	40140000 	.word	0x40140000
 80066d4:	3fe00000 	.word	0x3fe00000
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	930c      	str	r3, [sp, #48]	@ 0x30
 80066dc:	0023      	movs	r3, r4
 80066de:	001c      	movs	r4, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	781a      	ldrb	r2, [r3, #0]
 80066e4:	2a39      	cmp	r2, #57	@ 0x39
 80066e6:	d108      	bne.n	80066fa <_dtoa_r+0x752>
 80066e8:	9a08      	ldr	r2, [sp, #32]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d1f7      	bne.n	80066de <_dtoa_r+0x736>
 80066ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066f0:	9908      	ldr	r1, [sp, #32]
 80066f2:	3201      	adds	r2, #1
 80066f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80066f6:	2230      	movs	r2, #48	@ 0x30
 80066f8:	700a      	strb	r2, [r1, #0]
 80066fa:	781a      	ldrb	r2, [r3, #0]
 80066fc:	3201      	adds	r2, #1
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	e7a4      	b.n	800664c <_dtoa_r+0x6a4>
 8006702:	2200      	movs	r2, #0
 8006704:	4bc6      	ldr	r3, [pc, #792]	@ (8006a20 <_dtoa_r+0xa78>)
 8006706:	f7fb f843 	bl	8001790 <__aeabi_dmul>
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	0006      	movs	r6, r0
 8006710:	000f      	movs	r7, r1
 8006712:	f7f9 fe9b 	bl	800044c <__aeabi_dcmpeq>
 8006716:	2800      	cmp	r0, #0
 8006718:	d100      	bne.n	800671c <_dtoa_r+0x774>
 800671a:	e6a1      	b.n	8006460 <_dtoa_r+0x4b8>
 800671c:	e6d8      	b.n	80064d0 <_dtoa_r+0x528>
 800671e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006720:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006722:	9c06      	ldr	r4, [sp, #24]
 8006724:	2f00      	cmp	r7, #0
 8006726:	d014      	beq.n	8006752 <_dtoa_r+0x7aa>
 8006728:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800672a:	2a01      	cmp	r2, #1
 800672c:	dd00      	ble.n	8006730 <_dtoa_r+0x788>
 800672e:	e0c8      	b.n	80068c2 <_dtoa_r+0x91a>
 8006730:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8006732:	2a00      	cmp	r2, #0
 8006734:	d100      	bne.n	8006738 <_dtoa_r+0x790>
 8006736:	e0be      	b.n	80068b6 <_dtoa_r+0x90e>
 8006738:	4aba      	ldr	r2, [pc, #744]	@ (8006a24 <_dtoa_r+0xa7c>)
 800673a:	189b      	adds	r3, r3, r2
 800673c:	9a06      	ldr	r2, [sp, #24]
 800673e:	2101      	movs	r1, #1
 8006740:	18d2      	adds	r2, r2, r3
 8006742:	9206      	str	r2, [sp, #24]
 8006744:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006746:	9803      	ldr	r0, [sp, #12]
 8006748:	18d3      	adds	r3, r2, r3
 800674a:	930d      	str	r3, [sp, #52]	@ 0x34
 800674c:	f000 fc22 	bl	8006f94 <__i2b>
 8006750:	0007      	movs	r7, r0
 8006752:	2c00      	cmp	r4, #0
 8006754:	d00e      	beq.n	8006774 <_dtoa_r+0x7cc>
 8006756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006758:	2b00      	cmp	r3, #0
 800675a:	dd0b      	ble.n	8006774 <_dtoa_r+0x7cc>
 800675c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800675e:	0023      	movs	r3, r4
 8006760:	4294      	cmp	r4, r2
 8006762:	dd00      	ble.n	8006766 <_dtoa_r+0x7be>
 8006764:	0013      	movs	r3, r2
 8006766:	9a06      	ldr	r2, [sp, #24]
 8006768:	1ae4      	subs	r4, r4, r3
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	9206      	str	r2, [sp, #24]
 800676e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	930d      	str	r3, [sp, #52]	@ 0x34
 8006774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006776:	2b00      	cmp	r3, #0
 8006778:	d01f      	beq.n	80067ba <_dtoa_r+0x812>
 800677a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d100      	bne.n	8006782 <_dtoa_r+0x7da>
 8006780:	e0b5      	b.n	80068ee <_dtoa_r+0x946>
 8006782:	2d00      	cmp	r5, #0
 8006784:	d010      	beq.n	80067a8 <_dtoa_r+0x800>
 8006786:	0039      	movs	r1, r7
 8006788:	002a      	movs	r2, r5
 800678a:	9803      	ldr	r0, [sp, #12]
 800678c:	f000 fccc 	bl	8007128 <__pow5mult>
 8006790:	9a05      	ldr	r2, [sp, #20]
 8006792:	0001      	movs	r1, r0
 8006794:	0007      	movs	r7, r0
 8006796:	9803      	ldr	r0, [sp, #12]
 8006798:	f000 fc14 	bl	8006fc4 <__multiply>
 800679c:	0006      	movs	r6, r0
 800679e:	9905      	ldr	r1, [sp, #20]
 80067a0:	9803      	ldr	r0, [sp, #12]
 80067a2:	f000 fb3f 	bl	8006e24 <_Bfree>
 80067a6:	9605      	str	r6, [sp, #20]
 80067a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067aa:	1b5a      	subs	r2, r3, r5
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	d004      	beq.n	80067ba <_dtoa_r+0x812>
 80067b0:	9905      	ldr	r1, [sp, #20]
 80067b2:	9803      	ldr	r0, [sp, #12]
 80067b4:	f000 fcb8 	bl	8007128 <__pow5mult>
 80067b8:	9005      	str	r0, [sp, #20]
 80067ba:	2101      	movs	r1, #1
 80067bc:	9803      	ldr	r0, [sp, #12]
 80067be:	f000 fbe9 	bl	8006f94 <__i2b>
 80067c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80067c4:	0006      	movs	r6, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d100      	bne.n	80067cc <_dtoa_r+0x824>
 80067ca:	e1bc      	b.n	8006b46 <_dtoa_r+0xb9e>
 80067cc:	001a      	movs	r2, r3
 80067ce:	0001      	movs	r1, r0
 80067d0:	9803      	ldr	r0, [sp, #12]
 80067d2:	f000 fca9 	bl	8007128 <__pow5mult>
 80067d6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80067d8:	0006      	movs	r6, r0
 80067da:	2500      	movs	r5, #0
 80067dc:	2b01      	cmp	r3, #1
 80067de:	dc16      	bgt.n	800680e <_dtoa_r+0x866>
 80067e0:	2500      	movs	r5, #0
 80067e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	d10e      	bne.n	8006806 <_dtoa_r+0x85e>
 80067e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ea:	031b      	lsls	r3, r3, #12
 80067ec:	42ab      	cmp	r3, r5
 80067ee:	d10a      	bne.n	8006806 <_dtoa_r+0x85e>
 80067f0:	4b8d      	ldr	r3, [pc, #564]	@ (8006a28 <_dtoa_r+0xa80>)
 80067f2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80067f4:	4213      	tst	r3, r2
 80067f6:	d006      	beq.n	8006806 <_dtoa_r+0x85e>
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	3501      	adds	r5, #1
 80067fc:	3301      	adds	r3, #1
 80067fe:	9306      	str	r3, [sp, #24]
 8006800:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006802:	3301      	adds	r3, #1
 8006804:	930d      	str	r3, [sp, #52]	@ 0x34
 8006806:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006808:	2001      	movs	r0, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d008      	beq.n	8006820 <_dtoa_r+0x878>
 800680e:	6933      	ldr	r3, [r6, #16]
 8006810:	3303      	adds	r3, #3
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	18f3      	adds	r3, r6, r3
 8006816:	6858      	ldr	r0, [r3, #4]
 8006818:	f000 fb6c 	bl	8006ef4 <__hi0bits>
 800681c:	2320      	movs	r3, #32
 800681e:	1a18      	subs	r0, r3, r0
 8006820:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006822:	1818      	adds	r0, r3, r0
 8006824:	0002      	movs	r2, r0
 8006826:	231f      	movs	r3, #31
 8006828:	401a      	ands	r2, r3
 800682a:	4218      	tst	r0, r3
 800682c:	d065      	beq.n	80068fa <_dtoa_r+0x952>
 800682e:	3301      	adds	r3, #1
 8006830:	1a9b      	subs	r3, r3, r2
 8006832:	2b04      	cmp	r3, #4
 8006834:	dd5d      	ble.n	80068f2 <_dtoa_r+0x94a>
 8006836:	231c      	movs	r3, #28
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	9a06      	ldr	r2, [sp, #24]
 800683c:	18e4      	adds	r4, r4, r3
 800683e:	18d2      	adds	r2, r2, r3
 8006840:	9206      	str	r2, [sp, #24]
 8006842:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	930d      	str	r3, [sp, #52]	@ 0x34
 8006848:	9b06      	ldr	r3, [sp, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	dd05      	ble.n	800685a <_dtoa_r+0x8b2>
 800684e:	001a      	movs	r2, r3
 8006850:	9905      	ldr	r1, [sp, #20]
 8006852:	9803      	ldr	r0, [sp, #12]
 8006854:	f000 fcc4 	bl	80071e0 <__lshift>
 8006858:	9005      	str	r0, [sp, #20]
 800685a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd05      	ble.n	800686c <_dtoa_r+0x8c4>
 8006860:	0031      	movs	r1, r6
 8006862:	001a      	movs	r2, r3
 8006864:	9803      	ldr	r0, [sp, #12]
 8006866:	f000 fcbb 	bl	80071e0 <__lshift>
 800686a:	0006      	movs	r6, r0
 800686c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800686e:	2b00      	cmp	r3, #0
 8006870:	d045      	beq.n	80068fe <_dtoa_r+0x956>
 8006872:	0031      	movs	r1, r6
 8006874:	9805      	ldr	r0, [sp, #20]
 8006876:	f000 fd1f 	bl	80072b8 <__mcmp>
 800687a:	2800      	cmp	r0, #0
 800687c:	da3f      	bge.n	80068fe <_dtoa_r+0x956>
 800687e:	9b04      	ldr	r3, [sp, #16]
 8006880:	220a      	movs	r2, #10
 8006882:	3b01      	subs	r3, #1
 8006884:	930c      	str	r3, [sp, #48]	@ 0x30
 8006886:	9905      	ldr	r1, [sp, #20]
 8006888:	2300      	movs	r3, #0
 800688a:	9803      	ldr	r0, [sp, #12]
 800688c:	f000 faee 	bl	8006e6c <__multadd>
 8006890:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006892:	9005      	str	r0, [sp, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d100      	bne.n	800689a <_dtoa_r+0x8f2>
 8006898:	e15c      	b.n	8006b54 <_dtoa_r+0xbac>
 800689a:	2300      	movs	r3, #0
 800689c:	0039      	movs	r1, r7
 800689e:	220a      	movs	r2, #10
 80068a0:	9803      	ldr	r0, [sp, #12]
 80068a2:	f000 fae3 	bl	8006e6c <__multadd>
 80068a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068a8:	0007      	movs	r7, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dc55      	bgt.n	800695a <_dtoa_r+0x9b2>
 80068ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	dc2d      	bgt.n	8006910 <_dtoa_r+0x968>
 80068b4:	e051      	b.n	800695a <_dtoa_r+0x9b2>
 80068b6:	2336      	movs	r3, #54	@ 0x36
 80068b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80068ba:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80068bc:	9c06      	ldr	r4, [sp, #24]
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	e73c      	b.n	800673c <_dtoa_r+0x794>
 80068c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c4:	1e5d      	subs	r5, r3, #1
 80068c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	db08      	blt.n	80068de <_dtoa_r+0x936>
 80068cc:	1b5d      	subs	r5, r3, r5
 80068ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068d0:	9c06      	ldr	r4, [sp, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	db00      	blt.n	80068d8 <_dtoa_r+0x930>
 80068d6:	e731      	b.n	800673c <_dtoa_r+0x794>
 80068d8:	1ae4      	subs	r4, r4, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	e72e      	b.n	800673c <_dtoa_r+0x794>
 80068de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068e0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068e2:	1aeb      	subs	r3, r5, r3
 80068e4:	18d3      	adds	r3, r2, r3
 80068e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80068e8:	9314      	str	r3, [sp, #80]	@ 0x50
 80068ea:	2500      	movs	r5, #0
 80068ec:	e7ef      	b.n	80068ce <_dtoa_r+0x926>
 80068ee:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80068f0:	e75e      	b.n	80067b0 <_dtoa_r+0x808>
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d0a8      	beq.n	8006848 <_dtoa_r+0x8a0>
 80068f6:	331c      	adds	r3, #28
 80068f8:	e79f      	b.n	800683a <_dtoa_r+0x892>
 80068fa:	0013      	movs	r3, r2
 80068fc:	e7fb      	b.n	80068f6 <_dtoa_r+0x94e>
 80068fe:	9b04      	ldr	r3, [sp, #16]
 8006900:	930c      	str	r3, [sp, #48]	@ 0x30
 8006902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006904:	930e      	str	r3, [sp, #56]	@ 0x38
 8006906:	2b00      	cmp	r3, #0
 8006908:	dc23      	bgt.n	8006952 <_dtoa_r+0x9aa>
 800690a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800690c:	2b02      	cmp	r3, #2
 800690e:	dd20      	ble.n	8006952 <_dtoa_r+0x9aa>
 8006910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006912:	2b00      	cmp	r3, #0
 8006914:	d000      	beq.n	8006918 <_dtoa_r+0x970>
 8006916:	e6b5      	b.n	8006684 <_dtoa_r+0x6dc>
 8006918:	0031      	movs	r1, r6
 800691a:	2205      	movs	r2, #5
 800691c:	9803      	ldr	r0, [sp, #12]
 800691e:	f000 faa5 	bl	8006e6c <__multadd>
 8006922:	0006      	movs	r6, r0
 8006924:	0001      	movs	r1, r0
 8006926:	9805      	ldr	r0, [sp, #20]
 8006928:	f000 fcc6 	bl	80072b8 <__mcmp>
 800692c:	2800      	cmp	r0, #0
 800692e:	dc00      	bgt.n	8006932 <_dtoa_r+0x98a>
 8006930:	e6a8      	b.n	8006684 <_dtoa_r+0x6dc>
 8006932:	9b08      	ldr	r3, [sp, #32]
 8006934:	9a08      	ldr	r2, [sp, #32]
 8006936:	1c5c      	adds	r4, r3, #1
 8006938:	2331      	movs	r3, #49	@ 0x31
 800693a:	7013      	strb	r3, [r2, #0]
 800693c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800693e:	3301      	adds	r3, #1
 8006940:	930c      	str	r3, [sp, #48]	@ 0x30
 8006942:	e6a3      	b.n	800668c <_dtoa_r+0x6e4>
 8006944:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8006946:	0037      	movs	r7, r6
 8006948:	e7f3      	b.n	8006932 <_dtoa_r+0x98a>
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800694e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006950:	e7f9      	b.n	8006946 <_dtoa_r+0x99e>
 8006952:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d100      	bne.n	800695a <_dtoa_r+0x9b2>
 8006958:	e100      	b.n	8006b5c <_dtoa_r+0xbb4>
 800695a:	2c00      	cmp	r4, #0
 800695c:	dd05      	ble.n	800696a <_dtoa_r+0x9c2>
 800695e:	0039      	movs	r1, r7
 8006960:	0022      	movs	r2, r4
 8006962:	9803      	ldr	r0, [sp, #12]
 8006964:	f000 fc3c 	bl	80071e0 <__lshift>
 8006968:	0007      	movs	r7, r0
 800696a:	0038      	movs	r0, r7
 800696c:	2d00      	cmp	r5, #0
 800696e:	d018      	beq.n	80069a2 <_dtoa_r+0x9fa>
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	9803      	ldr	r0, [sp, #12]
 8006974:	f000 fa12 	bl	8006d9c <_Balloc>
 8006978:	1e04      	subs	r4, r0, #0
 800697a:	d105      	bne.n	8006988 <_dtoa_r+0x9e0>
 800697c:	0022      	movs	r2, r4
 800697e:	4b2b      	ldr	r3, [pc, #172]	@ (8006a2c <_dtoa_r+0xa84>)
 8006980:	482b      	ldr	r0, [pc, #172]	@ (8006a30 <_dtoa_r+0xa88>)
 8006982:	492c      	ldr	r1, [pc, #176]	@ (8006a34 <_dtoa_r+0xa8c>)
 8006984:	f7ff fb25 	bl	8005fd2 <_dtoa_r+0x2a>
 8006988:	0039      	movs	r1, r7
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	310c      	adds	r1, #12
 800698e:	3202      	adds	r2, #2
 8006990:	0092      	lsls	r2, r2, #2
 8006992:	300c      	adds	r0, #12
 8006994:	f000 ffda 	bl	800794c <memcpy>
 8006998:	2201      	movs	r2, #1
 800699a:	0021      	movs	r1, r4
 800699c:	9803      	ldr	r0, [sp, #12]
 800699e:	f000 fc1f 	bl	80071e0 <__lshift>
 80069a2:	9b08      	ldr	r3, [sp, #32]
 80069a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069a6:	9306      	str	r3, [sp, #24]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	189b      	adds	r3, r3, r2
 80069ac:	2201      	movs	r2, #1
 80069ae:	9704      	str	r7, [sp, #16]
 80069b0:	0007      	movs	r7, r0
 80069b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b6:	4013      	ands	r3, r2
 80069b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80069ba:	0031      	movs	r1, r6
 80069bc:	9805      	ldr	r0, [sp, #20]
 80069be:	f7ff fa65 	bl	8005e8c <quorem>
 80069c2:	9904      	ldr	r1, [sp, #16]
 80069c4:	0005      	movs	r5, r0
 80069c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80069c8:	9805      	ldr	r0, [sp, #20]
 80069ca:	f000 fc75 	bl	80072b8 <__mcmp>
 80069ce:	003a      	movs	r2, r7
 80069d0:	900d      	str	r0, [sp, #52]	@ 0x34
 80069d2:	0031      	movs	r1, r6
 80069d4:	9803      	ldr	r0, [sp, #12]
 80069d6:	f000 fc8b 	bl	80072f0 <__mdiff>
 80069da:	2201      	movs	r2, #1
 80069dc:	68c3      	ldr	r3, [r0, #12]
 80069de:	0004      	movs	r4, r0
 80069e0:	3530      	adds	r5, #48	@ 0x30
 80069e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d104      	bne.n	80069f2 <_dtoa_r+0xa4a>
 80069e8:	0001      	movs	r1, r0
 80069ea:	9805      	ldr	r0, [sp, #20]
 80069ec:	f000 fc64 	bl	80072b8 <__mcmp>
 80069f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80069f2:	0021      	movs	r1, r4
 80069f4:	9803      	ldr	r0, [sp, #12]
 80069f6:	f000 fa15 	bl	8006e24 <_Bfree>
 80069fa:	9b06      	ldr	r3, [sp, #24]
 80069fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069fe:	1c5c      	adds	r4, r3, #1
 8006a00:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a02:	4313      	orrs	r3, r2
 8006a04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a06:	4313      	orrs	r3, r2
 8006a08:	d116      	bne.n	8006a38 <_dtoa_r+0xa90>
 8006a0a:	2d39      	cmp	r5, #57	@ 0x39
 8006a0c:	d02f      	beq.n	8006a6e <_dtoa_r+0xac6>
 8006a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd01      	ble.n	8006a18 <_dtoa_r+0xa70>
 8006a14:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8006a16:	3531      	adds	r5, #49	@ 0x31
 8006a18:	9b06      	ldr	r3, [sp, #24]
 8006a1a:	701d      	strb	r5, [r3, #0]
 8006a1c:	e638      	b.n	8006690 <_dtoa_r+0x6e8>
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	40240000 	.word	0x40240000
 8006a24:	00000433 	.word	0x00000433
 8006a28:	7ff00000 	.word	0x7ff00000
 8006a2c:	08009688 	.word	0x08009688
 8006a30:	08009630 	.word	0x08009630
 8006a34:	000002ef 	.word	0x000002ef
 8006a38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	db04      	blt.n	8006a48 <_dtoa_r+0xaa0>
 8006a3e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006a40:	4313      	orrs	r3, r2
 8006a42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a44:	4313      	orrs	r3, r2
 8006a46:	d11e      	bne.n	8006a86 <_dtoa_r+0xade>
 8006a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	dde4      	ble.n	8006a18 <_dtoa_r+0xa70>
 8006a4e:	9905      	ldr	r1, [sp, #20]
 8006a50:	2201      	movs	r2, #1
 8006a52:	9803      	ldr	r0, [sp, #12]
 8006a54:	f000 fbc4 	bl	80071e0 <__lshift>
 8006a58:	0031      	movs	r1, r6
 8006a5a:	9005      	str	r0, [sp, #20]
 8006a5c:	f000 fc2c 	bl	80072b8 <__mcmp>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	dc02      	bgt.n	8006a6a <_dtoa_r+0xac2>
 8006a64:	d1d8      	bne.n	8006a18 <_dtoa_r+0xa70>
 8006a66:	07eb      	lsls	r3, r5, #31
 8006a68:	d5d6      	bpl.n	8006a18 <_dtoa_r+0xa70>
 8006a6a:	2d39      	cmp	r5, #57	@ 0x39
 8006a6c:	d1d2      	bne.n	8006a14 <_dtoa_r+0xa6c>
 8006a6e:	2339      	movs	r3, #57	@ 0x39
 8006a70:	9a06      	ldr	r2, [sp, #24]
 8006a72:	7013      	strb	r3, [r2, #0]
 8006a74:	0023      	movs	r3, r4
 8006a76:	001c      	movs	r4, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	2a39      	cmp	r2, #57	@ 0x39
 8006a7e:	d04f      	beq.n	8006b20 <_dtoa_r+0xb78>
 8006a80:	3201      	adds	r2, #1
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e604      	b.n	8006690 <_dtoa_r+0x6e8>
 8006a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dd03      	ble.n	8006a94 <_dtoa_r+0xaec>
 8006a8c:	2d39      	cmp	r5, #57	@ 0x39
 8006a8e:	d0ee      	beq.n	8006a6e <_dtoa_r+0xac6>
 8006a90:	3501      	adds	r5, #1
 8006a92:	e7c1      	b.n	8006a18 <_dtoa_r+0xa70>
 8006a94:	9b06      	ldr	r3, [sp, #24]
 8006a96:	9a06      	ldr	r2, [sp, #24]
 8006a98:	701d      	strb	r5, [r3, #0]
 8006a9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d02a      	beq.n	8006af6 <_dtoa_r+0xb4e>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	220a      	movs	r2, #10
 8006aa4:	9905      	ldr	r1, [sp, #20]
 8006aa6:	9803      	ldr	r0, [sp, #12]
 8006aa8:	f000 f9e0 	bl	8006e6c <__multadd>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	9005      	str	r0, [sp, #20]
 8006ab0:	42bb      	cmp	r3, r7
 8006ab2:	d109      	bne.n	8006ac8 <_dtoa_r+0xb20>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	220a      	movs	r2, #10
 8006ab8:	9904      	ldr	r1, [sp, #16]
 8006aba:	9803      	ldr	r0, [sp, #12]
 8006abc:	f000 f9d6 	bl	8006e6c <__multadd>
 8006ac0:	9004      	str	r0, [sp, #16]
 8006ac2:	0007      	movs	r7, r0
 8006ac4:	9406      	str	r4, [sp, #24]
 8006ac6:	e778      	b.n	80069ba <_dtoa_r+0xa12>
 8006ac8:	9904      	ldr	r1, [sp, #16]
 8006aca:	2300      	movs	r3, #0
 8006acc:	220a      	movs	r2, #10
 8006ace:	9803      	ldr	r0, [sp, #12]
 8006ad0:	f000 f9cc 	bl	8006e6c <__multadd>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9004      	str	r0, [sp, #16]
 8006ad8:	220a      	movs	r2, #10
 8006ada:	0039      	movs	r1, r7
 8006adc:	9803      	ldr	r0, [sp, #12]
 8006ade:	f000 f9c5 	bl	8006e6c <__multadd>
 8006ae2:	e7ee      	b.n	8006ac2 <_dtoa_r+0xb1a>
 8006ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ae6:	2401      	movs	r4, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dd00      	ble.n	8006aee <_dtoa_r+0xb46>
 8006aec:	001c      	movs	r4, r3
 8006aee:	9b08      	ldr	r3, [sp, #32]
 8006af0:	191c      	adds	r4, r3, r4
 8006af2:	2300      	movs	r3, #0
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	9905      	ldr	r1, [sp, #20]
 8006af8:	2201      	movs	r2, #1
 8006afa:	9803      	ldr	r0, [sp, #12]
 8006afc:	f000 fb70 	bl	80071e0 <__lshift>
 8006b00:	0031      	movs	r1, r6
 8006b02:	9005      	str	r0, [sp, #20]
 8006b04:	f000 fbd8 	bl	80072b8 <__mcmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	dcb3      	bgt.n	8006a74 <_dtoa_r+0xacc>
 8006b0c:	d101      	bne.n	8006b12 <_dtoa_r+0xb6a>
 8006b0e:	07ed      	lsls	r5, r5, #31
 8006b10:	d4b0      	bmi.n	8006a74 <_dtoa_r+0xacc>
 8006b12:	0023      	movs	r3, r4
 8006b14:	001c      	movs	r4, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	781a      	ldrb	r2, [r3, #0]
 8006b1a:	2a30      	cmp	r2, #48	@ 0x30
 8006b1c:	d0fa      	beq.n	8006b14 <_dtoa_r+0xb6c>
 8006b1e:	e5b7      	b.n	8006690 <_dtoa_r+0x6e8>
 8006b20:	9a08      	ldr	r2, [sp, #32]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d1a7      	bne.n	8006a76 <_dtoa_r+0xace>
 8006b26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b28:	3301      	adds	r3, #1
 8006b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b2c:	2331      	movs	r3, #49	@ 0x31
 8006b2e:	7013      	strb	r3, [r2, #0]
 8006b30:	e5ae      	b.n	8006690 <_dtoa_r+0x6e8>
 8006b32:	4b15      	ldr	r3, [pc, #84]	@ (8006b88 <_dtoa_r+0xbe0>)
 8006b34:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006b36:	9308      	str	r3, [sp, #32]
 8006b38:	4b14      	ldr	r3, [pc, #80]	@ (8006b8c <_dtoa_r+0xbe4>)
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d001      	beq.n	8006b42 <_dtoa_r+0xb9a>
 8006b3e:	f7ff fa7b 	bl	8006038 <_dtoa_r+0x90>
 8006b42:	f7ff fa7b 	bl	800603c <_dtoa_r+0x94>
 8006b46:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	dc00      	bgt.n	8006b4e <_dtoa_r+0xba6>
 8006b4c:	e648      	b.n	80067e0 <_dtoa_r+0x838>
 8006b4e:	2001      	movs	r0, #1
 8006b50:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006b52:	e665      	b.n	8006820 <_dtoa_r+0x878>
 8006b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	dc00      	bgt.n	8006b5c <_dtoa_r+0xbb4>
 8006b5a:	e6d6      	b.n	800690a <_dtoa_r+0x962>
 8006b5c:	2400      	movs	r4, #0
 8006b5e:	0031      	movs	r1, r6
 8006b60:	9805      	ldr	r0, [sp, #20]
 8006b62:	f7ff f993 	bl	8005e8c <quorem>
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	3030      	adds	r0, #48	@ 0x30
 8006b6a:	5518      	strb	r0, [r3, r4]
 8006b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b6e:	3401      	adds	r4, #1
 8006b70:	0005      	movs	r5, r0
 8006b72:	429c      	cmp	r4, r3
 8006b74:	dab6      	bge.n	8006ae4 <_dtoa_r+0xb3c>
 8006b76:	2300      	movs	r3, #0
 8006b78:	220a      	movs	r2, #10
 8006b7a:	9905      	ldr	r1, [sp, #20]
 8006b7c:	9803      	ldr	r0, [sp, #12]
 8006b7e:	f000 f975 	bl	8006e6c <__multadd>
 8006b82:	9005      	str	r0, [sp, #20]
 8006b84:	e7eb      	b.n	8006b5e <_dtoa_r+0xbb6>
 8006b86:	46c0      	nop			@ (mov r8, r8)
 8006b88:	0800960c 	.word	0x0800960c
 8006b8c:	08009614 	.word	0x08009614

08006b90 <_free_r>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	0005      	movs	r5, r0
 8006b94:	1e0c      	subs	r4, r1, #0
 8006b96:	d010      	beq.n	8006bba <_free_r+0x2a>
 8006b98:	3c04      	subs	r4, #4
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da00      	bge.n	8006ba2 <_free_r+0x12>
 8006ba0:	18e4      	adds	r4, r4, r3
 8006ba2:	0028      	movs	r0, r5
 8006ba4:	f000 f8ea 	bl	8006d7c <__malloc_lock>
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <_free_r+0x90>)
 8006baa:	6813      	ldr	r3, [r2, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d105      	bne.n	8006bbc <_free_r+0x2c>
 8006bb0:	6063      	str	r3, [r4, #4]
 8006bb2:	6014      	str	r4, [r2, #0]
 8006bb4:	0028      	movs	r0, r5
 8006bb6:	f000 f8e9 	bl	8006d8c <__malloc_unlock>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	d908      	bls.n	8006bd2 <_free_r+0x42>
 8006bc0:	6820      	ldr	r0, [r4, #0]
 8006bc2:	1821      	adds	r1, r4, r0
 8006bc4:	428b      	cmp	r3, r1
 8006bc6:	d1f3      	bne.n	8006bb0 <_free_r+0x20>
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	1809      	adds	r1, r1, r0
 8006bce:	6021      	str	r1, [r4, #0]
 8006bd0:	e7ee      	b.n	8006bb0 <_free_r+0x20>
 8006bd2:	001a      	movs	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <_free_r+0x4e>
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	d9f9      	bls.n	8006bd2 <_free_r+0x42>
 8006bde:	6811      	ldr	r1, [r2, #0]
 8006be0:	1850      	adds	r0, r2, r1
 8006be2:	42a0      	cmp	r0, r4
 8006be4:	d10b      	bne.n	8006bfe <_free_r+0x6e>
 8006be6:	6820      	ldr	r0, [r4, #0]
 8006be8:	1809      	adds	r1, r1, r0
 8006bea:	1850      	adds	r0, r2, r1
 8006bec:	6011      	str	r1, [r2, #0]
 8006bee:	4283      	cmp	r3, r0
 8006bf0:	d1e0      	bne.n	8006bb4 <_free_r+0x24>
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	1841      	adds	r1, r0, r1
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	6053      	str	r3, [r2, #4]
 8006bfc:	e7da      	b.n	8006bb4 <_free_r+0x24>
 8006bfe:	42a0      	cmp	r0, r4
 8006c00:	d902      	bls.n	8006c08 <_free_r+0x78>
 8006c02:	230c      	movs	r3, #12
 8006c04:	602b      	str	r3, [r5, #0]
 8006c06:	e7d5      	b.n	8006bb4 <_free_r+0x24>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	1821      	adds	r1, r4, r0
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	d103      	bne.n	8006c18 <_free_r+0x88>
 8006c10:	6819      	ldr	r1, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	1809      	adds	r1, r1, r0
 8006c16:	6021      	str	r1, [r4, #0]
 8006c18:	6063      	str	r3, [r4, #4]
 8006c1a:	6054      	str	r4, [r2, #4]
 8006c1c:	e7ca      	b.n	8006bb4 <_free_r+0x24>
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	20000824 	.word	0x20000824

08006c24 <malloc>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	4b03      	ldr	r3, [pc, #12]	@ (8006c34 <malloc+0x10>)
 8006c28:	0001      	movs	r1, r0
 8006c2a:	6818      	ldr	r0, [r3, #0]
 8006c2c:	f000 f826 	bl	8006c7c <_malloc_r>
 8006c30:	bd10      	pop	{r4, pc}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	2000004c 	.word	0x2000004c

08006c38 <sbrk_aligned>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4e0f      	ldr	r6, [pc, #60]	@ (8006c78 <sbrk_aligned+0x40>)
 8006c3c:	000d      	movs	r5, r1
 8006c3e:	6831      	ldr	r1, [r6, #0]
 8006c40:	0004      	movs	r4, r0
 8006c42:	2900      	cmp	r1, #0
 8006c44:	d102      	bne.n	8006c4c <sbrk_aligned+0x14>
 8006c46:	f000 fe6f 	bl	8007928 <_sbrk_r>
 8006c4a:	6030      	str	r0, [r6, #0]
 8006c4c:	0029      	movs	r1, r5
 8006c4e:	0020      	movs	r0, r4
 8006c50:	f000 fe6a 	bl	8007928 <_sbrk_r>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d103      	bne.n	8006c60 <sbrk_aligned+0x28>
 8006c58:	2501      	movs	r5, #1
 8006c5a:	426d      	negs	r5, r5
 8006c5c:	0028      	movs	r0, r5
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	2303      	movs	r3, #3
 8006c62:	1cc5      	adds	r5, r0, #3
 8006c64:	439d      	bics	r5, r3
 8006c66:	42a8      	cmp	r0, r5
 8006c68:	d0f8      	beq.n	8006c5c <sbrk_aligned+0x24>
 8006c6a:	1a29      	subs	r1, r5, r0
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	f000 fe5b 	bl	8007928 <_sbrk_r>
 8006c72:	3001      	adds	r0, #1
 8006c74:	d1f2      	bne.n	8006c5c <sbrk_aligned+0x24>
 8006c76:	e7ef      	b.n	8006c58 <sbrk_aligned+0x20>
 8006c78:	20000820 	.word	0x20000820

08006c7c <_malloc_r>:
 8006c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c7e:	2203      	movs	r2, #3
 8006c80:	1ccb      	adds	r3, r1, #3
 8006c82:	4393      	bics	r3, r2
 8006c84:	3308      	adds	r3, #8
 8006c86:	0005      	movs	r5, r0
 8006c88:	001f      	movs	r7, r3
 8006c8a:	2b0c      	cmp	r3, #12
 8006c8c:	d234      	bcs.n	8006cf8 <_malloc_r+0x7c>
 8006c8e:	270c      	movs	r7, #12
 8006c90:	42b9      	cmp	r1, r7
 8006c92:	d833      	bhi.n	8006cfc <_malloc_r+0x80>
 8006c94:	0028      	movs	r0, r5
 8006c96:	f000 f871 	bl	8006d7c <__malloc_lock>
 8006c9a:	4e37      	ldr	r6, [pc, #220]	@ (8006d78 <_malloc_r+0xfc>)
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	001c      	movs	r4, r3
 8006ca0:	2c00      	cmp	r4, #0
 8006ca2:	d12f      	bne.n	8006d04 <_malloc_r+0x88>
 8006ca4:	0039      	movs	r1, r7
 8006ca6:	0028      	movs	r0, r5
 8006ca8:	f7ff ffc6 	bl	8006c38 <sbrk_aligned>
 8006cac:	0004      	movs	r4, r0
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	d15f      	bne.n	8006d72 <_malloc_r+0xf6>
 8006cb2:	6834      	ldr	r4, [r6, #0]
 8006cb4:	9400      	str	r4, [sp, #0]
 8006cb6:	9b00      	ldr	r3, [sp, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d14a      	bne.n	8006d52 <_malloc_r+0xd6>
 8006cbc:	2c00      	cmp	r4, #0
 8006cbe:	d052      	beq.n	8006d66 <_malloc_r+0xea>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	0028      	movs	r0, r5
 8006cc4:	18e3      	adds	r3, r4, r3
 8006cc6:	9900      	ldr	r1, [sp, #0]
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	f000 fe2d 	bl	8007928 <_sbrk_r>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	4283      	cmp	r3, r0
 8006cd2:	d148      	bne.n	8006d66 <_malloc_r+0xea>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	0028      	movs	r0, r5
 8006cd8:	1aff      	subs	r7, r7, r3
 8006cda:	0039      	movs	r1, r7
 8006cdc:	f7ff ffac 	bl	8006c38 <sbrk_aligned>
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d040      	beq.n	8006d66 <_malloc_r+0xea>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	19db      	adds	r3, r3, r7
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	6833      	ldr	r3, [r6, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	d133      	bne.n	8006d5a <_malloc_r+0xde>
 8006cf2:	9b00      	ldr	r3, [sp, #0]
 8006cf4:	6033      	str	r3, [r6, #0]
 8006cf6:	e019      	b.n	8006d2c <_malloc_r+0xb0>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	dac9      	bge.n	8006c90 <_malloc_r+0x14>
 8006cfc:	230c      	movs	r3, #12
 8006cfe:	602b      	str	r3, [r5, #0]
 8006d00:	2000      	movs	r0, #0
 8006d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d04:	6821      	ldr	r1, [r4, #0]
 8006d06:	1bc9      	subs	r1, r1, r7
 8006d08:	d420      	bmi.n	8006d4c <_malloc_r+0xd0>
 8006d0a:	290b      	cmp	r1, #11
 8006d0c:	d90a      	bls.n	8006d24 <_malloc_r+0xa8>
 8006d0e:	19e2      	adds	r2, r4, r7
 8006d10:	6027      	str	r7, [r4, #0]
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	d104      	bne.n	8006d20 <_malloc_r+0xa4>
 8006d16:	6032      	str	r2, [r6, #0]
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	6011      	str	r1, [r2, #0]
 8006d1c:	6053      	str	r3, [r2, #4]
 8006d1e:	e005      	b.n	8006d2c <_malloc_r+0xb0>
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	e7f9      	b.n	8006d18 <_malloc_r+0x9c>
 8006d24:	6862      	ldr	r2, [r4, #4]
 8006d26:	42a3      	cmp	r3, r4
 8006d28:	d10e      	bne.n	8006d48 <_malloc_r+0xcc>
 8006d2a:	6032      	str	r2, [r6, #0]
 8006d2c:	0028      	movs	r0, r5
 8006d2e:	f000 f82d 	bl	8006d8c <__malloc_unlock>
 8006d32:	0020      	movs	r0, r4
 8006d34:	2207      	movs	r2, #7
 8006d36:	300b      	adds	r0, #11
 8006d38:	1d23      	adds	r3, r4, #4
 8006d3a:	4390      	bics	r0, r2
 8006d3c:	1ac2      	subs	r2, r0, r3
 8006d3e:	4298      	cmp	r0, r3
 8006d40:	d0df      	beq.n	8006d02 <_malloc_r+0x86>
 8006d42:	1a1b      	subs	r3, r3, r0
 8006d44:	50a3      	str	r3, [r4, r2]
 8006d46:	e7dc      	b.n	8006d02 <_malloc_r+0x86>
 8006d48:	605a      	str	r2, [r3, #4]
 8006d4a:	e7ef      	b.n	8006d2c <_malloc_r+0xb0>
 8006d4c:	0023      	movs	r3, r4
 8006d4e:	6864      	ldr	r4, [r4, #4]
 8006d50:	e7a6      	b.n	8006ca0 <_malloc_r+0x24>
 8006d52:	9c00      	ldr	r4, [sp, #0]
 8006d54:	6863      	ldr	r3, [r4, #4]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	e7ad      	b.n	8006cb6 <_malloc_r+0x3a>
 8006d5a:	001a      	movs	r2, r3
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	42a3      	cmp	r3, r4
 8006d60:	d1fb      	bne.n	8006d5a <_malloc_r+0xde>
 8006d62:	2300      	movs	r3, #0
 8006d64:	e7da      	b.n	8006d1c <_malloc_r+0xa0>
 8006d66:	230c      	movs	r3, #12
 8006d68:	0028      	movs	r0, r5
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f000 f80e 	bl	8006d8c <__malloc_unlock>
 8006d70:	e7c6      	b.n	8006d00 <_malloc_r+0x84>
 8006d72:	6007      	str	r7, [r0, #0]
 8006d74:	e7da      	b.n	8006d2c <_malloc_r+0xb0>
 8006d76:	46c0      	nop			@ (mov r8, r8)
 8006d78:	20000824 	.word	0x20000824

08006d7c <__malloc_lock>:
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	4802      	ldr	r0, [pc, #8]	@ (8006d88 <__malloc_lock+0xc>)
 8006d80:	f7ff f877 	bl	8005e72 <__retarget_lock_acquire_recursive>
 8006d84:	bd10      	pop	{r4, pc}
 8006d86:	46c0      	nop			@ (mov r8, r8)
 8006d88:	2000081c 	.word	0x2000081c

08006d8c <__malloc_unlock>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	4802      	ldr	r0, [pc, #8]	@ (8006d98 <__malloc_unlock+0xc>)
 8006d90:	f7ff f870 	bl	8005e74 <__retarget_lock_release_recursive>
 8006d94:	bd10      	pop	{r4, pc}
 8006d96:	46c0      	nop			@ (mov r8, r8)
 8006d98:	2000081c 	.word	0x2000081c

08006d9c <_Balloc>:
 8006d9c:	b570      	push	{r4, r5, r6, lr}
 8006d9e:	69c5      	ldr	r5, [r0, #28]
 8006da0:	0006      	movs	r6, r0
 8006da2:	000c      	movs	r4, r1
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	d10e      	bne.n	8006dc6 <_Balloc+0x2a>
 8006da8:	2010      	movs	r0, #16
 8006daa:	f7ff ff3b 	bl	8006c24 <malloc>
 8006dae:	1e02      	subs	r2, r0, #0
 8006db0:	61f0      	str	r0, [r6, #28]
 8006db2:	d104      	bne.n	8006dbe <_Balloc+0x22>
 8006db4:	216b      	movs	r1, #107	@ 0x6b
 8006db6:	4b19      	ldr	r3, [pc, #100]	@ (8006e1c <_Balloc+0x80>)
 8006db8:	4819      	ldr	r0, [pc, #100]	@ (8006e20 <_Balloc+0x84>)
 8006dba:	f000 fdd1 	bl	8007960 <__assert_func>
 8006dbe:	6045      	str	r5, [r0, #4]
 8006dc0:	6085      	str	r5, [r0, #8]
 8006dc2:	6005      	str	r5, [r0, #0]
 8006dc4:	60c5      	str	r5, [r0, #12]
 8006dc6:	69f5      	ldr	r5, [r6, #28]
 8006dc8:	68eb      	ldr	r3, [r5, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d013      	beq.n	8006df6 <_Balloc+0x5a>
 8006dce:	69f3      	ldr	r3, [r6, #28]
 8006dd0:	00a2      	lsls	r2, r4, #2
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	189b      	adds	r3, r3, r2
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d118      	bne.n	8006e0e <_Balloc+0x72>
 8006ddc:	2101      	movs	r1, #1
 8006dde:	000d      	movs	r5, r1
 8006de0:	40a5      	lsls	r5, r4
 8006de2:	1d6a      	adds	r2, r5, #5
 8006de4:	0030      	movs	r0, r6
 8006de6:	0092      	lsls	r2, r2, #2
 8006de8:	f000 fdd8 	bl	800799c <_calloc_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d00c      	beq.n	8006e0a <_Balloc+0x6e>
 8006df0:	6044      	str	r4, [r0, #4]
 8006df2:	6085      	str	r5, [r0, #8]
 8006df4:	e00d      	b.n	8006e12 <_Balloc+0x76>
 8006df6:	2221      	movs	r2, #33	@ 0x21
 8006df8:	2104      	movs	r1, #4
 8006dfa:	0030      	movs	r0, r6
 8006dfc:	f000 fdce 	bl	800799c <_calloc_r>
 8006e00:	69f3      	ldr	r3, [r6, #28]
 8006e02:	60e8      	str	r0, [r5, #12]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e1      	bne.n	8006dce <_Balloc+0x32>
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	6802      	ldr	r2, [r0, #0]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	6103      	str	r3, [r0, #16]
 8006e16:	60c3      	str	r3, [r0, #12]
 8006e18:	e7f8      	b.n	8006e0c <_Balloc+0x70>
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	08009619 	.word	0x08009619
 8006e20:	08009699 	.word	0x08009699

08006e24 <_Bfree>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	69c6      	ldr	r6, [r0, #28]
 8006e28:	0005      	movs	r5, r0
 8006e2a:	000c      	movs	r4, r1
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	d10e      	bne.n	8006e4e <_Bfree+0x2a>
 8006e30:	2010      	movs	r0, #16
 8006e32:	f7ff fef7 	bl	8006c24 <malloc>
 8006e36:	1e02      	subs	r2, r0, #0
 8006e38:	61e8      	str	r0, [r5, #28]
 8006e3a:	d104      	bne.n	8006e46 <_Bfree+0x22>
 8006e3c:	218f      	movs	r1, #143	@ 0x8f
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <_Bfree+0x40>)
 8006e40:	4809      	ldr	r0, [pc, #36]	@ (8006e68 <_Bfree+0x44>)
 8006e42:	f000 fd8d 	bl	8007960 <__assert_func>
 8006e46:	6046      	str	r6, [r0, #4]
 8006e48:	6086      	str	r6, [r0, #8]
 8006e4a:	6006      	str	r6, [r0, #0]
 8006e4c:	60c6      	str	r6, [r0, #12]
 8006e4e:	2c00      	cmp	r4, #0
 8006e50:	d007      	beq.n	8006e62 <_Bfree+0x3e>
 8006e52:	69eb      	ldr	r3, [r5, #28]
 8006e54:	6862      	ldr	r2, [r4, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	0092      	lsls	r2, r2, #2
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	601c      	str	r4, [r3, #0]
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	08009619 	.word	0x08009619
 8006e68:	08009699 	.word	0x08009699

08006e6c <__multadd>:
 8006e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e6e:	000f      	movs	r7, r1
 8006e70:	9001      	str	r0, [sp, #4]
 8006e72:	000c      	movs	r4, r1
 8006e74:	001e      	movs	r6, r3
 8006e76:	2000      	movs	r0, #0
 8006e78:	690d      	ldr	r5, [r1, #16]
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	3001      	adds	r0, #1
 8006e80:	b299      	uxth	r1, r3
 8006e82:	4351      	muls	r1, r2
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	4353      	muls	r3, r2
 8006e88:	1989      	adds	r1, r1, r6
 8006e8a:	0c0e      	lsrs	r6, r1, #16
 8006e8c:	199b      	adds	r3, r3, r6
 8006e8e:	0c1e      	lsrs	r6, r3, #16
 8006e90:	b289      	uxth	r1, r1
 8006e92:	041b      	lsls	r3, r3, #16
 8006e94:	185b      	adds	r3, r3, r1
 8006e96:	c708      	stmia	r7!, {r3}
 8006e98:	4285      	cmp	r5, r0
 8006e9a:	dcef      	bgt.n	8006e7c <__multadd+0x10>
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	d022      	beq.n	8006ee6 <__multadd+0x7a>
 8006ea0:	68a3      	ldr	r3, [r4, #8]
 8006ea2:	42ab      	cmp	r3, r5
 8006ea4:	dc19      	bgt.n	8006eda <__multadd+0x6e>
 8006ea6:	6861      	ldr	r1, [r4, #4]
 8006ea8:	9801      	ldr	r0, [sp, #4]
 8006eaa:	3101      	adds	r1, #1
 8006eac:	f7ff ff76 	bl	8006d9c <_Balloc>
 8006eb0:	1e07      	subs	r7, r0, #0
 8006eb2:	d105      	bne.n	8006ec0 <__multadd+0x54>
 8006eb4:	003a      	movs	r2, r7
 8006eb6:	21ba      	movs	r1, #186	@ 0xba
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <__multadd+0x80>)
 8006eba:	480d      	ldr	r0, [pc, #52]	@ (8006ef0 <__multadd+0x84>)
 8006ebc:	f000 fd50 	bl	8007960 <__assert_func>
 8006ec0:	0021      	movs	r1, r4
 8006ec2:	6922      	ldr	r2, [r4, #16]
 8006ec4:	310c      	adds	r1, #12
 8006ec6:	3202      	adds	r2, #2
 8006ec8:	0092      	lsls	r2, r2, #2
 8006eca:	300c      	adds	r0, #12
 8006ecc:	f000 fd3e 	bl	800794c <memcpy>
 8006ed0:	0021      	movs	r1, r4
 8006ed2:	9801      	ldr	r0, [sp, #4]
 8006ed4:	f7ff ffa6 	bl	8006e24 <_Bfree>
 8006ed8:	003c      	movs	r4, r7
 8006eda:	1d2b      	adds	r3, r5, #4
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	18e3      	adds	r3, r4, r3
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	605e      	str	r6, [r3, #4]
 8006ee4:	6125      	str	r5, [r4, #16]
 8006ee6:	0020      	movs	r0, r4
 8006ee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006eea:	46c0      	nop			@ (mov r8, r8)
 8006eec:	08009688 	.word	0x08009688
 8006ef0:	08009699 	.word	0x08009699

08006ef4 <__hi0bits>:
 8006ef4:	2280      	movs	r2, #128	@ 0x80
 8006ef6:	0003      	movs	r3, r0
 8006ef8:	0252      	lsls	r2, r2, #9
 8006efa:	2000      	movs	r0, #0
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d201      	bcs.n	8006f04 <__hi0bits+0x10>
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	3010      	adds	r0, #16
 8006f04:	2280      	movs	r2, #128	@ 0x80
 8006f06:	0452      	lsls	r2, r2, #17
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d201      	bcs.n	8006f10 <__hi0bits+0x1c>
 8006f0c:	3008      	adds	r0, #8
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	2280      	movs	r2, #128	@ 0x80
 8006f12:	0552      	lsls	r2, r2, #21
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d201      	bcs.n	8006f1c <__hi0bits+0x28>
 8006f18:	3004      	adds	r0, #4
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	2280      	movs	r2, #128	@ 0x80
 8006f1e:	05d2      	lsls	r2, r2, #23
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d201      	bcs.n	8006f28 <__hi0bits+0x34>
 8006f24:	3002      	adds	r0, #2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db03      	blt.n	8006f34 <__hi0bits+0x40>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	4213      	tst	r3, r2
 8006f30:	d100      	bne.n	8006f34 <__hi0bits+0x40>
 8006f32:	2020      	movs	r0, #32
 8006f34:	4770      	bx	lr

08006f36 <__lo0bits>:
 8006f36:	6803      	ldr	r3, [r0, #0]
 8006f38:	0001      	movs	r1, r0
 8006f3a:	2207      	movs	r2, #7
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	4010      	ands	r0, r2
 8006f40:	4213      	tst	r3, r2
 8006f42:	d00d      	beq.n	8006f60 <__lo0bits+0x2a>
 8006f44:	3a06      	subs	r2, #6
 8006f46:	2000      	movs	r0, #0
 8006f48:	4213      	tst	r3, r2
 8006f4a:	d105      	bne.n	8006f58 <__lo0bits+0x22>
 8006f4c:	3002      	adds	r0, #2
 8006f4e:	4203      	tst	r3, r0
 8006f50:	d003      	beq.n	8006f5a <__lo0bits+0x24>
 8006f52:	40d3      	lsrs	r3, r2
 8006f54:	0010      	movs	r0, r2
 8006f56:	600b      	str	r3, [r1, #0]
 8006f58:	4770      	bx	lr
 8006f5a:	089b      	lsrs	r3, r3, #2
 8006f5c:	600b      	str	r3, [r1, #0]
 8006f5e:	e7fb      	b.n	8006f58 <__lo0bits+0x22>
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	d101      	bne.n	8006f6a <__lo0bits+0x34>
 8006f66:	2010      	movs	r0, #16
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	d101      	bne.n	8006f74 <__lo0bits+0x3e>
 8006f70:	3008      	adds	r0, #8
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	071a      	lsls	r2, r3, #28
 8006f76:	d101      	bne.n	8006f7c <__lo0bits+0x46>
 8006f78:	3004      	adds	r0, #4
 8006f7a:	091b      	lsrs	r3, r3, #4
 8006f7c:	079a      	lsls	r2, r3, #30
 8006f7e:	d101      	bne.n	8006f84 <__lo0bits+0x4e>
 8006f80:	3002      	adds	r0, #2
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	07da      	lsls	r2, r3, #31
 8006f86:	d4e9      	bmi.n	8006f5c <__lo0bits+0x26>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	d1e6      	bne.n	8006f5c <__lo0bits+0x26>
 8006f8e:	2020      	movs	r0, #32
 8006f90:	e7e2      	b.n	8006f58 <__lo0bits+0x22>
	...

08006f94 <__i2b>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	000c      	movs	r4, r1
 8006f98:	2101      	movs	r1, #1
 8006f9a:	f7ff feff 	bl	8006d9c <_Balloc>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d107      	bne.n	8006fb2 <__i2b+0x1e>
 8006fa2:	2146      	movs	r1, #70	@ 0x46
 8006fa4:	4c05      	ldr	r4, [pc, #20]	@ (8006fbc <__i2b+0x28>)
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <__i2b+0x2c>)
 8006faa:	0020      	movs	r0, r4
 8006fac:	31ff      	adds	r1, #255	@ 0xff
 8006fae:	f000 fcd7 	bl	8007960 <__assert_func>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	6144      	str	r4, [r0, #20]
 8006fb6:	6103      	str	r3, [r0, #16]
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	46c0      	nop			@ (mov r8, r8)
 8006fbc:	08009699 	.word	0x08009699
 8006fc0:	08009688 	.word	0x08009688

08006fc4 <__multiply>:
 8006fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc6:	0014      	movs	r4, r2
 8006fc8:	690a      	ldr	r2, [r1, #16]
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	000d      	movs	r5, r1
 8006fce:	b08b      	sub	sp, #44	@ 0x2c
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	db02      	blt.n	8006fda <__multiply+0x16>
 8006fd4:	0023      	movs	r3, r4
 8006fd6:	000c      	movs	r4, r1
 8006fd8:	001d      	movs	r5, r3
 8006fda:	6927      	ldr	r7, [r4, #16]
 8006fdc:	692e      	ldr	r6, [r5, #16]
 8006fde:	6861      	ldr	r1, [r4, #4]
 8006fe0:	19bb      	adds	r3, r7, r6
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	68a3      	ldr	r3, [r4, #8]
 8006fe6:	19ba      	adds	r2, r7, r6
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	da00      	bge.n	8006fee <__multiply+0x2a>
 8006fec:	3101      	adds	r1, #1
 8006fee:	f7ff fed5 	bl	8006d9c <_Balloc>
 8006ff2:	9002      	str	r0, [sp, #8]
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	d106      	bne.n	8007006 <__multiply+0x42>
 8006ff8:	21b1      	movs	r1, #177	@ 0xb1
 8006ffa:	4b49      	ldr	r3, [pc, #292]	@ (8007120 <__multiply+0x15c>)
 8006ffc:	4849      	ldr	r0, [pc, #292]	@ (8007124 <__multiply+0x160>)
 8006ffe:	9a02      	ldr	r2, [sp, #8]
 8007000:	0049      	lsls	r1, r1, #1
 8007002:	f000 fcad 	bl	8007960 <__assert_func>
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	3314      	adds	r3, #20
 800700c:	469c      	mov	ip, r3
 800700e:	19bb      	adds	r3, r7, r6
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4463      	add	r3, ip
 8007014:	9304      	str	r3, [sp, #16]
 8007016:	4663      	mov	r3, ip
 8007018:	9904      	ldr	r1, [sp, #16]
 800701a:	428b      	cmp	r3, r1
 800701c:	d32a      	bcc.n	8007074 <__multiply+0xb0>
 800701e:	0023      	movs	r3, r4
 8007020:	00bf      	lsls	r7, r7, #2
 8007022:	3314      	adds	r3, #20
 8007024:	3514      	adds	r5, #20
 8007026:	9308      	str	r3, [sp, #32]
 8007028:	00b6      	lsls	r6, r6, #2
 800702a:	19db      	adds	r3, r3, r7
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	19ab      	adds	r3, r5, r6
 8007030:	9309      	str	r3, [sp, #36]	@ 0x24
 8007032:	2304      	movs	r3, #4
 8007034:	9306      	str	r3, [sp, #24]
 8007036:	0023      	movs	r3, r4
 8007038:	9a05      	ldr	r2, [sp, #20]
 800703a:	3315      	adds	r3, #21
 800703c:	9501      	str	r5, [sp, #4]
 800703e:	429a      	cmp	r2, r3
 8007040:	d305      	bcc.n	800704e <__multiply+0x8a>
 8007042:	1b13      	subs	r3, r2, r4
 8007044:	3b15      	subs	r3, #21
 8007046:	089b      	lsrs	r3, r3, #2
 8007048:	3301      	adds	r3, #1
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	9306      	str	r3, [sp, #24]
 800704e:	9b01      	ldr	r3, [sp, #4]
 8007050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007052:	4293      	cmp	r3, r2
 8007054:	d310      	bcc.n	8007078 <__multiply+0xb4>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	dd05      	ble.n	8007068 <__multiply+0xa4>
 800705c:	9b04      	ldr	r3, [sp, #16]
 800705e:	3b04      	subs	r3, #4
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d056      	beq.n	8007116 <__multiply+0x152>
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	9a03      	ldr	r2, [sp, #12]
 800706c:	0018      	movs	r0, r3
 800706e:	611a      	str	r2, [r3, #16]
 8007070:	b00b      	add	sp, #44	@ 0x2c
 8007072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007074:	c304      	stmia	r3!, {r2}
 8007076:	e7cf      	b.n	8007018 <__multiply+0x54>
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	6818      	ldr	r0, [r3, #0]
 800707c:	b280      	uxth	r0, r0
 800707e:	2800      	cmp	r0, #0
 8007080:	d01e      	beq.n	80070c0 <__multiply+0xfc>
 8007082:	4667      	mov	r7, ip
 8007084:	2500      	movs	r5, #0
 8007086:	9e08      	ldr	r6, [sp, #32]
 8007088:	ce02      	ldmia	r6!, {r1}
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	9307      	str	r3, [sp, #28]
 800708e:	b28b      	uxth	r3, r1
 8007090:	4343      	muls	r3, r0
 8007092:	001a      	movs	r2, r3
 8007094:	466b      	mov	r3, sp
 8007096:	0c09      	lsrs	r1, r1, #16
 8007098:	8b9b      	ldrh	r3, [r3, #28]
 800709a:	4341      	muls	r1, r0
 800709c:	18d3      	adds	r3, r2, r3
 800709e:	9a07      	ldr	r2, [sp, #28]
 80070a0:	195b      	adds	r3, r3, r5
 80070a2:	0c12      	lsrs	r2, r2, #16
 80070a4:	1889      	adds	r1, r1, r2
 80070a6:	0c1a      	lsrs	r2, r3, #16
 80070a8:	188a      	adds	r2, r1, r2
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	0c15      	lsrs	r5, r2, #16
 80070ae:	0412      	lsls	r2, r2, #16
 80070b0:	431a      	orrs	r2, r3
 80070b2:	9b05      	ldr	r3, [sp, #20]
 80070b4:	c704      	stmia	r7!, {r2}
 80070b6:	42b3      	cmp	r3, r6
 80070b8:	d8e6      	bhi.n	8007088 <__multiply+0xc4>
 80070ba:	4663      	mov	r3, ip
 80070bc:	9a06      	ldr	r2, [sp, #24]
 80070be:	509d      	str	r5, [r3, r2]
 80070c0:	9b01      	ldr	r3, [sp, #4]
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	0c00      	lsrs	r0, r0, #16
 80070c6:	d020      	beq.n	800710a <__multiply+0x146>
 80070c8:	4663      	mov	r3, ip
 80070ca:	0025      	movs	r5, r4
 80070cc:	4661      	mov	r1, ip
 80070ce:	2700      	movs	r7, #0
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3514      	adds	r5, #20
 80070d4:	682a      	ldr	r2, [r5, #0]
 80070d6:	680e      	ldr	r6, [r1, #0]
 80070d8:	b292      	uxth	r2, r2
 80070da:	4342      	muls	r2, r0
 80070dc:	0c36      	lsrs	r6, r6, #16
 80070de:	1992      	adds	r2, r2, r6
 80070e0:	19d2      	adds	r2, r2, r7
 80070e2:	0416      	lsls	r6, r2, #16
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	431e      	orrs	r6, r3
 80070e8:	600e      	str	r6, [r1, #0]
 80070ea:	cd40      	ldmia	r5!, {r6}
 80070ec:	684b      	ldr	r3, [r1, #4]
 80070ee:	0c36      	lsrs	r6, r6, #16
 80070f0:	4346      	muls	r6, r0
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	0c12      	lsrs	r2, r2, #16
 80070f6:	18f3      	adds	r3, r6, r3
 80070f8:	189b      	adds	r3, r3, r2
 80070fa:	9a05      	ldr	r2, [sp, #20]
 80070fc:	0c1f      	lsrs	r7, r3, #16
 80070fe:	3104      	adds	r1, #4
 8007100:	42aa      	cmp	r2, r5
 8007102:	d8e7      	bhi.n	80070d4 <__multiply+0x110>
 8007104:	4662      	mov	r2, ip
 8007106:	9906      	ldr	r1, [sp, #24]
 8007108:	5053      	str	r3, [r2, r1]
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	3304      	adds	r3, #4
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	2304      	movs	r3, #4
 8007112:	449c      	add	ip, r3
 8007114:	e79b      	b.n	800704e <__multiply+0x8a>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	3b01      	subs	r3, #1
 800711a:	9303      	str	r3, [sp, #12]
 800711c:	e79b      	b.n	8007056 <__multiply+0x92>
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	08009688 	.word	0x08009688
 8007124:	08009699 	.word	0x08009699

08007128 <__pow5mult>:
 8007128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712a:	2303      	movs	r3, #3
 800712c:	0015      	movs	r5, r2
 800712e:	0007      	movs	r7, r0
 8007130:	000e      	movs	r6, r1
 8007132:	401a      	ands	r2, r3
 8007134:	421d      	tst	r5, r3
 8007136:	d008      	beq.n	800714a <__pow5mult+0x22>
 8007138:	4925      	ldr	r1, [pc, #148]	@ (80071d0 <__pow5mult+0xa8>)
 800713a:	3a01      	subs	r2, #1
 800713c:	0092      	lsls	r2, r2, #2
 800713e:	5852      	ldr	r2, [r2, r1]
 8007140:	2300      	movs	r3, #0
 8007142:	0031      	movs	r1, r6
 8007144:	f7ff fe92 	bl	8006e6c <__multadd>
 8007148:	0006      	movs	r6, r0
 800714a:	10ad      	asrs	r5, r5, #2
 800714c:	d03d      	beq.n	80071ca <__pow5mult+0xa2>
 800714e:	69fc      	ldr	r4, [r7, #28]
 8007150:	2c00      	cmp	r4, #0
 8007152:	d10f      	bne.n	8007174 <__pow5mult+0x4c>
 8007154:	2010      	movs	r0, #16
 8007156:	f7ff fd65 	bl	8006c24 <malloc>
 800715a:	1e02      	subs	r2, r0, #0
 800715c:	61f8      	str	r0, [r7, #28]
 800715e:	d105      	bne.n	800716c <__pow5mult+0x44>
 8007160:	21b4      	movs	r1, #180	@ 0xb4
 8007162:	4b1c      	ldr	r3, [pc, #112]	@ (80071d4 <__pow5mult+0xac>)
 8007164:	481c      	ldr	r0, [pc, #112]	@ (80071d8 <__pow5mult+0xb0>)
 8007166:	31ff      	adds	r1, #255	@ 0xff
 8007168:	f000 fbfa 	bl	8007960 <__assert_func>
 800716c:	6044      	str	r4, [r0, #4]
 800716e:	6084      	str	r4, [r0, #8]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	689c      	ldr	r4, [r3, #8]
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	2c00      	cmp	r4, #0
 800717c:	d108      	bne.n	8007190 <__pow5mult+0x68>
 800717e:	0038      	movs	r0, r7
 8007180:	4916      	ldr	r1, [pc, #88]	@ (80071dc <__pow5mult+0xb4>)
 8007182:	f7ff ff07 	bl	8006f94 <__i2b>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	0004      	movs	r4, r0
 800718a:	6098      	str	r0, [r3, #8]
 800718c:	2300      	movs	r3, #0
 800718e:	6003      	str	r3, [r0, #0]
 8007190:	2301      	movs	r3, #1
 8007192:	421d      	tst	r5, r3
 8007194:	d00a      	beq.n	80071ac <__pow5mult+0x84>
 8007196:	0031      	movs	r1, r6
 8007198:	0022      	movs	r2, r4
 800719a:	0038      	movs	r0, r7
 800719c:	f7ff ff12 	bl	8006fc4 <__multiply>
 80071a0:	0031      	movs	r1, r6
 80071a2:	9001      	str	r0, [sp, #4]
 80071a4:	0038      	movs	r0, r7
 80071a6:	f7ff fe3d 	bl	8006e24 <_Bfree>
 80071aa:	9e01      	ldr	r6, [sp, #4]
 80071ac:	106d      	asrs	r5, r5, #1
 80071ae:	d00c      	beq.n	80071ca <__pow5mult+0xa2>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d107      	bne.n	80071c6 <__pow5mult+0x9e>
 80071b6:	0022      	movs	r2, r4
 80071b8:	0021      	movs	r1, r4
 80071ba:	0038      	movs	r0, r7
 80071bc:	f7ff ff02 	bl	8006fc4 <__multiply>
 80071c0:	2300      	movs	r3, #0
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	0004      	movs	r4, r0
 80071c8:	e7e2      	b.n	8007190 <__pow5mult+0x68>
 80071ca:	0030      	movs	r0, r6
 80071cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071ce:	46c0      	nop			@ (mov r8, r8)
 80071d0:	080096f4 	.word	0x080096f4
 80071d4:	08009619 	.word	0x08009619
 80071d8:	08009699 	.word	0x08009699
 80071dc:	00000271 	.word	0x00000271

080071e0 <__lshift>:
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	000c      	movs	r4, r1
 80071e4:	0016      	movs	r6, r2
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	1157      	asrs	r7, r2, #5
 80071ea:	b085      	sub	sp, #20
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	3301      	adds	r3, #1
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	6849      	ldr	r1, [r1, #4]
 80071f6:	68a3      	ldr	r3, [r4, #8]
 80071f8:	9002      	str	r0, [sp, #8]
 80071fa:	9a00      	ldr	r2, [sp, #0]
 80071fc:	4293      	cmp	r3, r2
 80071fe:	db10      	blt.n	8007222 <__lshift+0x42>
 8007200:	9802      	ldr	r0, [sp, #8]
 8007202:	f7ff fdcb 	bl	8006d9c <_Balloc>
 8007206:	2300      	movs	r3, #0
 8007208:	0001      	movs	r1, r0
 800720a:	0005      	movs	r5, r0
 800720c:	001a      	movs	r2, r3
 800720e:	3114      	adds	r1, #20
 8007210:	4298      	cmp	r0, r3
 8007212:	d10c      	bne.n	800722e <__lshift+0x4e>
 8007214:	21ef      	movs	r1, #239	@ 0xef
 8007216:	002a      	movs	r2, r5
 8007218:	4b25      	ldr	r3, [pc, #148]	@ (80072b0 <__lshift+0xd0>)
 800721a:	4826      	ldr	r0, [pc, #152]	@ (80072b4 <__lshift+0xd4>)
 800721c:	0049      	lsls	r1, r1, #1
 800721e:	f000 fb9f 	bl	8007960 <__assert_func>
 8007222:	3101      	adds	r1, #1
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	e7e8      	b.n	80071fa <__lshift+0x1a>
 8007228:	0098      	lsls	r0, r3, #2
 800722a:	500a      	str	r2, [r1, r0]
 800722c:	3301      	adds	r3, #1
 800722e:	42bb      	cmp	r3, r7
 8007230:	dbfa      	blt.n	8007228 <__lshift+0x48>
 8007232:	43fb      	mvns	r3, r7
 8007234:	17db      	asrs	r3, r3, #31
 8007236:	401f      	ands	r7, r3
 8007238:	00bf      	lsls	r7, r7, #2
 800723a:	0023      	movs	r3, r4
 800723c:	201f      	movs	r0, #31
 800723e:	19c9      	adds	r1, r1, r7
 8007240:	0037      	movs	r7, r6
 8007242:	6922      	ldr	r2, [r4, #16]
 8007244:	3314      	adds	r3, #20
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	189a      	adds	r2, r3, r2
 800724a:	4007      	ands	r7, r0
 800724c:	4206      	tst	r6, r0
 800724e:	d029      	beq.n	80072a4 <__lshift+0xc4>
 8007250:	3001      	adds	r0, #1
 8007252:	1bc0      	subs	r0, r0, r7
 8007254:	9003      	str	r0, [sp, #12]
 8007256:	468c      	mov	ip, r1
 8007258:	2000      	movs	r0, #0
 800725a:	681e      	ldr	r6, [r3, #0]
 800725c:	40be      	lsls	r6, r7
 800725e:	4306      	orrs	r6, r0
 8007260:	4660      	mov	r0, ip
 8007262:	c040      	stmia	r0!, {r6}
 8007264:	4684      	mov	ip, r0
 8007266:	9e03      	ldr	r6, [sp, #12]
 8007268:	cb01      	ldmia	r3!, {r0}
 800726a:	40f0      	lsrs	r0, r6
 800726c:	429a      	cmp	r2, r3
 800726e:	d8f4      	bhi.n	800725a <__lshift+0x7a>
 8007270:	0026      	movs	r6, r4
 8007272:	3615      	adds	r6, #21
 8007274:	2304      	movs	r3, #4
 8007276:	42b2      	cmp	r2, r6
 8007278:	d304      	bcc.n	8007284 <__lshift+0xa4>
 800727a:	1b13      	subs	r3, r2, r4
 800727c:	3b15      	subs	r3, #21
 800727e:	089b      	lsrs	r3, r3, #2
 8007280:	3301      	adds	r3, #1
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	50c8      	str	r0, [r1, r3]
 8007286:	2800      	cmp	r0, #0
 8007288:	d002      	beq.n	8007290 <__lshift+0xb0>
 800728a:	9b01      	ldr	r3, [sp, #4]
 800728c:	3302      	adds	r3, #2
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	9b00      	ldr	r3, [sp, #0]
 8007292:	9802      	ldr	r0, [sp, #8]
 8007294:	3b01      	subs	r3, #1
 8007296:	0021      	movs	r1, r4
 8007298:	612b      	str	r3, [r5, #16]
 800729a:	f7ff fdc3 	bl	8006e24 <_Bfree>
 800729e:	0028      	movs	r0, r5
 80072a0:	b005      	add	sp, #20
 80072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072a4:	cb01      	ldmia	r3!, {r0}
 80072a6:	c101      	stmia	r1!, {r0}
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d8fb      	bhi.n	80072a4 <__lshift+0xc4>
 80072ac:	e7f0      	b.n	8007290 <__lshift+0xb0>
 80072ae:	46c0      	nop			@ (mov r8, r8)
 80072b0:	08009688 	.word	0x08009688
 80072b4:	08009699 	.word	0x08009699

080072b8 <__mcmp>:
 80072b8:	b530      	push	{r4, r5, lr}
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	6904      	ldr	r4, [r0, #16]
 80072be:	0002      	movs	r2, r0
 80072c0:	1ae0      	subs	r0, r4, r3
 80072c2:	429c      	cmp	r4, r3
 80072c4:	d10f      	bne.n	80072e6 <__mcmp+0x2e>
 80072c6:	3214      	adds	r2, #20
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	3114      	adds	r1, #20
 80072cc:	0014      	movs	r4, r2
 80072ce:	18c9      	adds	r1, r1, r3
 80072d0:	18d2      	adds	r2, r2, r3
 80072d2:	3a04      	subs	r2, #4
 80072d4:	3904      	subs	r1, #4
 80072d6:	6815      	ldr	r5, [r2, #0]
 80072d8:	680b      	ldr	r3, [r1, #0]
 80072da:	429d      	cmp	r5, r3
 80072dc:	d004      	beq.n	80072e8 <__mcmp+0x30>
 80072de:	2001      	movs	r0, #1
 80072e0:	429d      	cmp	r5, r3
 80072e2:	d200      	bcs.n	80072e6 <__mcmp+0x2e>
 80072e4:	3802      	subs	r0, #2
 80072e6:	bd30      	pop	{r4, r5, pc}
 80072e8:	4294      	cmp	r4, r2
 80072ea:	d3f2      	bcc.n	80072d2 <__mcmp+0x1a>
 80072ec:	e7fb      	b.n	80072e6 <__mcmp+0x2e>
	...

080072f0 <__mdiff>:
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	000c      	movs	r4, r1
 80072f4:	b087      	sub	sp, #28
 80072f6:	9000      	str	r0, [sp, #0]
 80072f8:	0011      	movs	r1, r2
 80072fa:	0020      	movs	r0, r4
 80072fc:	0017      	movs	r7, r2
 80072fe:	f7ff ffdb 	bl	80072b8 <__mcmp>
 8007302:	1e05      	subs	r5, r0, #0
 8007304:	d110      	bne.n	8007328 <__mdiff+0x38>
 8007306:	0001      	movs	r1, r0
 8007308:	9800      	ldr	r0, [sp, #0]
 800730a:	f7ff fd47 	bl	8006d9c <_Balloc>
 800730e:	1e02      	subs	r2, r0, #0
 8007310:	d104      	bne.n	800731c <__mdiff+0x2c>
 8007312:	4b40      	ldr	r3, [pc, #256]	@ (8007414 <__mdiff+0x124>)
 8007314:	4840      	ldr	r0, [pc, #256]	@ (8007418 <__mdiff+0x128>)
 8007316:	4941      	ldr	r1, [pc, #260]	@ (800741c <__mdiff+0x12c>)
 8007318:	f000 fb22 	bl	8007960 <__assert_func>
 800731c:	2301      	movs	r3, #1
 800731e:	6145      	str	r5, [r0, #20]
 8007320:	6103      	str	r3, [r0, #16]
 8007322:	0010      	movs	r0, r2
 8007324:	b007      	add	sp, #28
 8007326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007328:	2600      	movs	r6, #0
 800732a:	42b0      	cmp	r0, r6
 800732c:	da03      	bge.n	8007336 <__mdiff+0x46>
 800732e:	0023      	movs	r3, r4
 8007330:	003c      	movs	r4, r7
 8007332:	001f      	movs	r7, r3
 8007334:	3601      	adds	r6, #1
 8007336:	6861      	ldr	r1, [r4, #4]
 8007338:	9800      	ldr	r0, [sp, #0]
 800733a:	f7ff fd2f 	bl	8006d9c <_Balloc>
 800733e:	1e02      	subs	r2, r0, #0
 8007340:	d103      	bne.n	800734a <__mdiff+0x5a>
 8007342:	4b34      	ldr	r3, [pc, #208]	@ (8007414 <__mdiff+0x124>)
 8007344:	4834      	ldr	r0, [pc, #208]	@ (8007418 <__mdiff+0x128>)
 8007346:	4936      	ldr	r1, [pc, #216]	@ (8007420 <__mdiff+0x130>)
 8007348:	e7e6      	b.n	8007318 <__mdiff+0x28>
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	3414      	adds	r4, #20
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	18e3      	adds	r3, r4, r3
 8007354:	0021      	movs	r1, r4
 8007356:	9401      	str	r4, [sp, #4]
 8007358:	003c      	movs	r4, r7
 800735a:	9302      	str	r3, [sp, #8]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	3414      	adds	r4, #20
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	18e3      	adds	r3, r4, r3
 8007364:	9303      	str	r3, [sp, #12]
 8007366:	0003      	movs	r3, r0
 8007368:	60c6      	str	r6, [r0, #12]
 800736a:	468c      	mov	ip, r1
 800736c:	2000      	movs	r0, #0
 800736e:	3314      	adds	r3, #20
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	4663      	mov	r3, ip
 8007376:	cb20      	ldmia	r3!, {r5}
 8007378:	b2a9      	uxth	r1, r5
 800737a:	000e      	movs	r6, r1
 800737c:	469c      	mov	ip, r3
 800737e:	cc08      	ldmia	r4!, {r3}
 8007380:	0c2d      	lsrs	r5, r5, #16
 8007382:	b299      	uxth	r1, r3
 8007384:	1a71      	subs	r1, r6, r1
 8007386:	1809      	adds	r1, r1, r0
 8007388:	0c1b      	lsrs	r3, r3, #16
 800738a:	1408      	asrs	r0, r1, #16
 800738c:	1aeb      	subs	r3, r5, r3
 800738e:	181b      	adds	r3, r3, r0
 8007390:	1418      	asrs	r0, r3, #16
 8007392:	b289      	uxth	r1, r1
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	4319      	orrs	r1, r3
 8007398:	9b05      	ldr	r3, [sp, #20]
 800739a:	c302      	stmia	r3!, {r1}
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	9b03      	ldr	r3, [sp, #12]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d8e7      	bhi.n	8007374 <__mdiff+0x84>
 80073a4:	0039      	movs	r1, r7
 80073a6:	9c03      	ldr	r4, [sp, #12]
 80073a8:	3115      	adds	r1, #21
 80073aa:	2304      	movs	r3, #4
 80073ac:	428c      	cmp	r4, r1
 80073ae:	d304      	bcc.n	80073ba <__mdiff+0xca>
 80073b0:	1be3      	subs	r3, r4, r7
 80073b2:	3b15      	subs	r3, #21
 80073b4:	089b      	lsrs	r3, r3, #2
 80073b6:	3301      	adds	r3, #1
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	9901      	ldr	r1, [sp, #4]
 80073bc:	18cd      	adds	r5, r1, r3
 80073be:	9904      	ldr	r1, [sp, #16]
 80073c0:	002e      	movs	r6, r5
 80073c2:	18cb      	adds	r3, r1, r3
 80073c4:	001f      	movs	r7, r3
 80073c6:	9902      	ldr	r1, [sp, #8]
 80073c8:	428e      	cmp	r6, r1
 80073ca:	d311      	bcc.n	80073f0 <__mdiff+0x100>
 80073cc:	9c02      	ldr	r4, [sp, #8]
 80073ce:	1ee9      	subs	r1, r5, #3
 80073d0:	2000      	movs	r0, #0
 80073d2:	428c      	cmp	r4, r1
 80073d4:	d304      	bcc.n	80073e0 <__mdiff+0xf0>
 80073d6:	0021      	movs	r1, r4
 80073d8:	3103      	adds	r1, #3
 80073da:	1b49      	subs	r1, r1, r5
 80073dc:	0889      	lsrs	r1, r1, #2
 80073de:	0088      	lsls	r0, r1, #2
 80073e0:	181b      	adds	r3, r3, r0
 80073e2:	3b04      	subs	r3, #4
 80073e4:	6819      	ldr	r1, [r3, #0]
 80073e6:	2900      	cmp	r1, #0
 80073e8:	d010      	beq.n	800740c <__mdiff+0x11c>
 80073ea:	9b00      	ldr	r3, [sp, #0]
 80073ec:	6113      	str	r3, [r2, #16]
 80073ee:	e798      	b.n	8007322 <__mdiff+0x32>
 80073f0:	4684      	mov	ip, r0
 80073f2:	ce02      	ldmia	r6!, {r1}
 80073f4:	b288      	uxth	r0, r1
 80073f6:	4460      	add	r0, ip
 80073f8:	1400      	asrs	r0, r0, #16
 80073fa:	0c0c      	lsrs	r4, r1, #16
 80073fc:	1904      	adds	r4, r0, r4
 80073fe:	4461      	add	r1, ip
 8007400:	1420      	asrs	r0, r4, #16
 8007402:	b289      	uxth	r1, r1
 8007404:	0424      	lsls	r4, r4, #16
 8007406:	4321      	orrs	r1, r4
 8007408:	c702      	stmia	r7!, {r1}
 800740a:	e7dc      	b.n	80073c6 <__mdiff+0xd6>
 800740c:	9900      	ldr	r1, [sp, #0]
 800740e:	3901      	subs	r1, #1
 8007410:	9100      	str	r1, [sp, #0]
 8007412:	e7e6      	b.n	80073e2 <__mdiff+0xf2>
 8007414:	08009688 	.word	0x08009688
 8007418:	08009699 	.word	0x08009699
 800741c:	00000237 	.word	0x00000237
 8007420:	00000245 	.word	0x00000245

08007424 <__d2b>:
 8007424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007426:	2101      	movs	r1, #1
 8007428:	0016      	movs	r6, r2
 800742a:	001f      	movs	r7, r3
 800742c:	f7ff fcb6 	bl	8006d9c <_Balloc>
 8007430:	1e04      	subs	r4, r0, #0
 8007432:	d105      	bne.n	8007440 <__d2b+0x1c>
 8007434:	0022      	movs	r2, r4
 8007436:	4b25      	ldr	r3, [pc, #148]	@ (80074cc <__d2b+0xa8>)
 8007438:	4825      	ldr	r0, [pc, #148]	@ (80074d0 <__d2b+0xac>)
 800743a:	4926      	ldr	r1, [pc, #152]	@ (80074d4 <__d2b+0xb0>)
 800743c:	f000 fa90 	bl	8007960 <__assert_func>
 8007440:	033b      	lsls	r3, r7, #12
 8007442:	007d      	lsls	r5, r7, #1
 8007444:	0b1b      	lsrs	r3, r3, #12
 8007446:	0d6d      	lsrs	r5, r5, #21
 8007448:	d002      	beq.n	8007450 <__d2b+0x2c>
 800744a:	2280      	movs	r2, #128	@ 0x80
 800744c:	0352      	lsls	r2, r2, #13
 800744e:	4313      	orrs	r3, r2
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	2e00      	cmp	r6, #0
 8007454:	d025      	beq.n	80074a2 <__d2b+0x7e>
 8007456:	4668      	mov	r0, sp
 8007458:	9600      	str	r6, [sp, #0]
 800745a:	f7ff fd6c 	bl	8006f36 <__lo0bits>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	9900      	ldr	r1, [sp, #0]
 8007462:	2800      	cmp	r0, #0
 8007464:	d01b      	beq.n	800749e <__d2b+0x7a>
 8007466:	2220      	movs	r2, #32
 8007468:	001e      	movs	r6, r3
 800746a:	1a12      	subs	r2, r2, r0
 800746c:	4096      	lsls	r6, r2
 800746e:	0032      	movs	r2, r6
 8007470:	40c3      	lsrs	r3, r0
 8007472:	430a      	orrs	r2, r1
 8007474:	6162      	str	r2, [r4, #20]
 8007476:	9301      	str	r3, [sp, #4]
 8007478:	9e01      	ldr	r6, [sp, #4]
 800747a:	61a6      	str	r6, [r4, #24]
 800747c:	1e73      	subs	r3, r6, #1
 800747e:	419e      	sbcs	r6, r3
 8007480:	3601      	adds	r6, #1
 8007482:	6126      	str	r6, [r4, #16]
 8007484:	2d00      	cmp	r5, #0
 8007486:	d014      	beq.n	80074b2 <__d2b+0x8e>
 8007488:	2635      	movs	r6, #53	@ 0x35
 800748a:	4b13      	ldr	r3, [pc, #76]	@ (80074d8 <__d2b+0xb4>)
 800748c:	18ed      	adds	r5, r5, r3
 800748e:	9b08      	ldr	r3, [sp, #32]
 8007490:	182d      	adds	r5, r5, r0
 8007492:	601d      	str	r5, [r3, #0]
 8007494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007496:	1a36      	subs	r6, r6, r0
 8007498:	601e      	str	r6, [r3, #0]
 800749a:	0020      	movs	r0, r4
 800749c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800749e:	6161      	str	r1, [r4, #20]
 80074a0:	e7ea      	b.n	8007478 <__d2b+0x54>
 80074a2:	a801      	add	r0, sp, #4
 80074a4:	f7ff fd47 	bl	8006f36 <__lo0bits>
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	2601      	movs	r6, #1
 80074ac:	6163      	str	r3, [r4, #20]
 80074ae:	3020      	adds	r0, #32
 80074b0:	e7e7      	b.n	8007482 <__d2b+0x5e>
 80074b2:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <__d2b+0xb8>)
 80074b4:	18c0      	adds	r0, r0, r3
 80074b6:	9b08      	ldr	r3, [sp, #32]
 80074b8:	6018      	str	r0, [r3, #0]
 80074ba:	4b09      	ldr	r3, [pc, #36]	@ (80074e0 <__d2b+0xbc>)
 80074bc:	18f3      	adds	r3, r6, r3
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	18e3      	adds	r3, r4, r3
 80074c2:	6958      	ldr	r0, [r3, #20]
 80074c4:	f7ff fd16 	bl	8006ef4 <__hi0bits>
 80074c8:	0176      	lsls	r6, r6, #5
 80074ca:	e7e3      	b.n	8007494 <__d2b+0x70>
 80074cc:	08009688 	.word	0x08009688
 80074d0:	08009699 	.word	0x08009699
 80074d4:	0000030f 	.word	0x0000030f
 80074d8:	fffffbcd 	.word	0xfffffbcd
 80074dc:	fffffbce 	.word	0xfffffbce
 80074e0:	3fffffff 	.word	0x3fffffff

080074e4 <__ssputs_r>:
 80074e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074e6:	688e      	ldr	r6, [r1, #8]
 80074e8:	b085      	sub	sp, #20
 80074ea:	001f      	movs	r7, r3
 80074ec:	000c      	movs	r4, r1
 80074ee:	680b      	ldr	r3, [r1, #0]
 80074f0:	9002      	str	r0, [sp, #8]
 80074f2:	9203      	str	r2, [sp, #12]
 80074f4:	42be      	cmp	r6, r7
 80074f6:	d830      	bhi.n	800755a <__ssputs_r+0x76>
 80074f8:	210c      	movs	r1, #12
 80074fa:	5e62      	ldrsh	r2, [r4, r1]
 80074fc:	2190      	movs	r1, #144	@ 0x90
 80074fe:	00c9      	lsls	r1, r1, #3
 8007500:	420a      	tst	r2, r1
 8007502:	d028      	beq.n	8007556 <__ssputs_r+0x72>
 8007504:	2003      	movs	r0, #3
 8007506:	6921      	ldr	r1, [r4, #16]
 8007508:	1a5b      	subs	r3, r3, r1
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	6963      	ldr	r3, [r4, #20]
 800750e:	4343      	muls	r3, r0
 8007510:	9801      	ldr	r0, [sp, #4]
 8007512:	0fdd      	lsrs	r5, r3, #31
 8007514:	18ed      	adds	r5, r5, r3
 8007516:	1c7b      	adds	r3, r7, #1
 8007518:	181b      	adds	r3, r3, r0
 800751a:	106d      	asrs	r5, r5, #1
 800751c:	42ab      	cmp	r3, r5
 800751e:	d900      	bls.n	8007522 <__ssputs_r+0x3e>
 8007520:	001d      	movs	r5, r3
 8007522:	0552      	lsls	r2, r2, #21
 8007524:	d528      	bpl.n	8007578 <__ssputs_r+0x94>
 8007526:	0029      	movs	r1, r5
 8007528:	9802      	ldr	r0, [sp, #8]
 800752a:	f7ff fba7 	bl	8006c7c <_malloc_r>
 800752e:	1e06      	subs	r6, r0, #0
 8007530:	d02c      	beq.n	800758c <__ssputs_r+0xa8>
 8007532:	9a01      	ldr	r2, [sp, #4]
 8007534:	6921      	ldr	r1, [r4, #16]
 8007536:	f000 fa09 	bl	800794c <memcpy>
 800753a:	89a2      	ldrh	r2, [r4, #12]
 800753c:	4b18      	ldr	r3, [pc, #96]	@ (80075a0 <__ssputs_r+0xbc>)
 800753e:	401a      	ands	r2, r3
 8007540:	2380      	movs	r3, #128	@ 0x80
 8007542:	4313      	orrs	r3, r2
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	6126      	str	r6, [r4, #16]
 800754a:	18f6      	adds	r6, r6, r3
 800754c:	6026      	str	r6, [r4, #0]
 800754e:	003e      	movs	r6, r7
 8007550:	6165      	str	r5, [r4, #20]
 8007552:	1aed      	subs	r5, r5, r3
 8007554:	60a5      	str	r5, [r4, #8]
 8007556:	42be      	cmp	r6, r7
 8007558:	d900      	bls.n	800755c <__ssputs_r+0x78>
 800755a:	003e      	movs	r6, r7
 800755c:	0032      	movs	r2, r6
 800755e:	9903      	ldr	r1, [sp, #12]
 8007560:	6820      	ldr	r0, [r4, #0]
 8007562:	f000 f9ce 	bl	8007902 <memmove>
 8007566:	2000      	movs	r0, #0
 8007568:	68a3      	ldr	r3, [r4, #8]
 800756a:	1b9b      	subs	r3, r3, r6
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	199b      	adds	r3, r3, r6
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	b005      	add	sp, #20
 8007576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007578:	002a      	movs	r2, r5
 800757a:	9802      	ldr	r0, [sp, #8]
 800757c:	f000 fa4d 	bl	8007a1a <_realloc_r>
 8007580:	1e06      	subs	r6, r0, #0
 8007582:	d1e0      	bne.n	8007546 <__ssputs_r+0x62>
 8007584:	6921      	ldr	r1, [r4, #16]
 8007586:	9802      	ldr	r0, [sp, #8]
 8007588:	f7ff fb02 	bl	8006b90 <_free_r>
 800758c:	230c      	movs	r3, #12
 800758e:	2001      	movs	r0, #1
 8007590:	9a02      	ldr	r2, [sp, #8]
 8007592:	4240      	negs	r0, r0
 8007594:	6013      	str	r3, [r2, #0]
 8007596:	89a2      	ldrh	r2, [r4, #12]
 8007598:	3334      	adds	r3, #52	@ 0x34
 800759a:	4313      	orrs	r3, r2
 800759c:	81a3      	strh	r3, [r4, #12]
 800759e:	e7e9      	b.n	8007574 <__ssputs_r+0x90>
 80075a0:	fffffb7f 	.word	0xfffffb7f

080075a4 <_svfiprintf_r>:
 80075a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075a6:	b0a1      	sub	sp, #132	@ 0x84
 80075a8:	9003      	str	r0, [sp, #12]
 80075aa:	001d      	movs	r5, r3
 80075ac:	898b      	ldrh	r3, [r1, #12]
 80075ae:	000f      	movs	r7, r1
 80075b0:	0016      	movs	r6, r2
 80075b2:	061b      	lsls	r3, r3, #24
 80075b4:	d511      	bpl.n	80075da <_svfiprintf_r+0x36>
 80075b6:	690b      	ldr	r3, [r1, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10e      	bne.n	80075da <_svfiprintf_r+0x36>
 80075bc:	2140      	movs	r1, #64	@ 0x40
 80075be:	f7ff fb5d 	bl	8006c7c <_malloc_r>
 80075c2:	6038      	str	r0, [r7, #0]
 80075c4:	6138      	str	r0, [r7, #16]
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d105      	bne.n	80075d6 <_svfiprintf_r+0x32>
 80075ca:	230c      	movs	r3, #12
 80075cc:	9a03      	ldr	r2, [sp, #12]
 80075ce:	6013      	str	r3, [r2, #0]
 80075d0:	2001      	movs	r0, #1
 80075d2:	4240      	negs	r0, r0
 80075d4:	e0cf      	b.n	8007776 <_svfiprintf_r+0x1d2>
 80075d6:	2340      	movs	r3, #64	@ 0x40
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	2300      	movs	r3, #0
 80075dc:	ac08      	add	r4, sp, #32
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	3320      	adds	r3, #32
 80075e2:	7663      	strb	r3, [r4, #25]
 80075e4:	3310      	adds	r3, #16
 80075e6:	76a3      	strb	r3, [r4, #26]
 80075e8:	9507      	str	r5, [sp, #28]
 80075ea:	0035      	movs	r5, r6
 80075ec:	782b      	ldrb	r3, [r5, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d001      	beq.n	80075f6 <_svfiprintf_r+0x52>
 80075f2:	2b25      	cmp	r3, #37	@ 0x25
 80075f4:	d148      	bne.n	8007688 <_svfiprintf_r+0xe4>
 80075f6:	1bab      	subs	r3, r5, r6
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	42b5      	cmp	r5, r6
 80075fc:	d00b      	beq.n	8007616 <_svfiprintf_r+0x72>
 80075fe:	0032      	movs	r2, r6
 8007600:	0039      	movs	r1, r7
 8007602:	9803      	ldr	r0, [sp, #12]
 8007604:	f7ff ff6e 	bl	80074e4 <__ssputs_r>
 8007608:	3001      	adds	r0, #1
 800760a:	d100      	bne.n	800760e <_svfiprintf_r+0x6a>
 800760c:	e0ae      	b.n	800776c <_svfiprintf_r+0x1c8>
 800760e:	6963      	ldr	r3, [r4, #20]
 8007610:	9a05      	ldr	r2, [sp, #20]
 8007612:	189b      	adds	r3, r3, r2
 8007614:	6163      	str	r3, [r4, #20]
 8007616:	782b      	ldrb	r3, [r5, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d100      	bne.n	800761e <_svfiprintf_r+0x7a>
 800761c:	e0a6      	b.n	800776c <_svfiprintf_r+0x1c8>
 800761e:	2201      	movs	r2, #1
 8007620:	2300      	movs	r3, #0
 8007622:	4252      	negs	r2, r2
 8007624:	6062      	str	r2, [r4, #4]
 8007626:	a904      	add	r1, sp, #16
 8007628:	3254      	adds	r2, #84	@ 0x54
 800762a:	1852      	adds	r2, r2, r1
 800762c:	1c6e      	adds	r6, r5, #1
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	60e3      	str	r3, [r4, #12]
 8007632:	60a3      	str	r3, [r4, #8]
 8007634:	7013      	strb	r3, [r2, #0]
 8007636:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007638:	4b54      	ldr	r3, [pc, #336]	@ (800778c <_svfiprintf_r+0x1e8>)
 800763a:	2205      	movs	r2, #5
 800763c:	0018      	movs	r0, r3
 800763e:	7831      	ldrb	r1, [r6, #0]
 8007640:	9305      	str	r3, [sp, #20]
 8007642:	f7fe fc18 	bl	8005e76 <memchr>
 8007646:	1c75      	adds	r5, r6, #1
 8007648:	2800      	cmp	r0, #0
 800764a:	d11f      	bne.n	800768c <_svfiprintf_r+0xe8>
 800764c:	6822      	ldr	r2, [r4, #0]
 800764e:	06d3      	lsls	r3, r2, #27
 8007650:	d504      	bpl.n	800765c <_svfiprintf_r+0xb8>
 8007652:	2353      	movs	r3, #83	@ 0x53
 8007654:	a904      	add	r1, sp, #16
 8007656:	185b      	adds	r3, r3, r1
 8007658:	2120      	movs	r1, #32
 800765a:	7019      	strb	r1, [r3, #0]
 800765c:	0713      	lsls	r3, r2, #28
 800765e:	d504      	bpl.n	800766a <_svfiprintf_r+0xc6>
 8007660:	2353      	movs	r3, #83	@ 0x53
 8007662:	a904      	add	r1, sp, #16
 8007664:	185b      	adds	r3, r3, r1
 8007666:	212b      	movs	r1, #43	@ 0x2b
 8007668:	7019      	strb	r1, [r3, #0]
 800766a:	7833      	ldrb	r3, [r6, #0]
 800766c:	2b2a      	cmp	r3, #42	@ 0x2a
 800766e:	d016      	beq.n	800769e <_svfiprintf_r+0xfa>
 8007670:	0035      	movs	r5, r6
 8007672:	2100      	movs	r1, #0
 8007674:	200a      	movs	r0, #10
 8007676:	68e3      	ldr	r3, [r4, #12]
 8007678:	782a      	ldrb	r2, [r5, #0]
 800767a:	1c6e      	adds	r6, r5, #1
 800767c:	3a30      	subs	r2, #48	@ 0x30
 800767e:	2a09      	cmp	r2, #9
 8007680:	d950      	bls.n	8007724 <_svfiprintf_r+0x180>
 8007682:	2900      	cmp	r1, #0
 8007684:	d111      	bne.n	80076aa <_svfiprintf_r+0x106>
 8007686:	e017      	b.n	80076b8 <_svfiprintf_r+0x114>
 8007688:	3501      	adds	r5, #1
 800768a:	e7af      	b.n	80075ec <_svfiprintf_r+0x48>
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	6822      	ldr	r2, [r4, #0]
 8007690:	1ac0      	subs	r0, r0, r3
 8007692:	2301      	movs	r3, #1
 8007694:	4083      	lsls	r3, r0
 8007696:	4313      	orrs	r3, r2
 8007698:	002e      	movs	r6, r5
 800769a:	6023      	str	r3, [r4, #0]
 800769c:	e7cc      	b.n	8007638 <_svfiprintf_r+0x94>
 800769e:	9b07      	ldr	r3, [sp, #28]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	9107      	str	r1, [sp, #28]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	db01      	blt.n	80076ae <_svfiprintf_r+0x10a>
 80076aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ac:	e004      	b.n	80076b8 <_svfiprintf_r+0x114>
 80076ae:	425b      	negs	r3, r3
 80076b0:	60e3      	str	r3, [r4, #12]
 80076b2:	2302      	movs	r3, #2
 80076b4:	4313      	orrs	r3, r2
 80076b6:	6023      	str	r3, [r4, #0]
 80076b8:	782b      	ldrb	r3, [r5, #0]
 80076ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80076bc:	d10c      	bne.n	80076d8 <_svfiprintf_r+0x134>
 80076be:	786b      	ldrb	r3, [r5, #1]
 80076c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c2:	d134      	bne.n	800772e <_svfiprintf_r+0x18a>
 80076c4:	9b07      	ldr	r3, [sp, #28]
 80076c6:	3502      	adds	r5, #2
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	9207      	str	r2, [sp, #28]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da01      	bge.n	80076d6 <_svfiprintf_r+0x132>
 80076d2:	2301      	movs	r3, #1
 80076d4:	425b      	negs	r3, r3
 80076d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d8:	4e2d      	ldr	r6, [pc, #180]	@ (8007790 <_svfiprintf_r+0x1ec>)
 80076da:	2203      	movs	r2, #3
 80076dc:	0030      	movs	r0, r6
 80076de:	7829      	ldrb	r1, [r5, #0]
 80076e0:	f7fe fbc9 	bl	8005e76 <memchr>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d006      	beq.n	80076f6 <_svfiprintf_r+0x152>
 80076e8:	2340      	movs	r3, #64	@ 0x40
 80076ea:	1b80      	subs	r0, r0, r6
 80076ec:	4083      	lsls	r3, r0
 80076ee:	6822      	ldr	r2, [r4, #0]
 80076f0:	3501      	adds	r5, #1
 80076f2:	4313      	orrs	r3, r2
 80076f4:	6023      	str	r3, [r4, #0]
 80076f6:	7829      	ldrb	r1, [r5, #0]
 80076f8:	2206      	movs	r2, #6
 80076fa:	4826      	ldr	r0, [pc, #152]	@ (8007794 <_svfiprintf_r+0x1f0>)
 80076fc:	1c6e      	adds	r6, r5, #1
 80076fe:	7621      	strb	r1, [r4, #24]
 8007700:	f7fe fbb9 	bl	8005e76 <memchr>
 8007704:	2800      	cmp	r0, #0
 8007706:	d038      	beq.n	800777a <_svfiprintf_r+0x1d6>
 8007708:	4b23      	ldr	r3, [pc, #140]	@ (8007798 <_svfiprintf_r+0x1f4>)
 800770a:	2b00      	cmp	r3, #0
 800770c:	d122      	bne.n	8007754 <_svfiprintf_r+0x1b0>
 800770e:	2207      	movs	r2, #7
 8007710:	9b07      	ldr	r3, [sp, #28]
 8007712:	3307      	adds	r3, #7
 8007714:	4393      	bics	r3, r2
 8007716:	3308      	adds	r3, #8
 8007718:	9307      	str	r3, [sp, #28]
 800771a:	6963      	ldr	r3, [r4, #20]
 800771c:	9a04      	ldr	r2, [sp, #16]
 800771e:	189b      	adds	r3, r3, r2
 8007720:	6163      	str	r3, [r4, #20]
 8007722:	e762      	b.n	80075ea <_svfiprintf_r+0x46>
 8007724:	4343      	muls	r3, r0
 8007726:	0035      	movs	r5, r6
 8007728:	2101      	movs	r1, #1
 800772a:	189b      	adds	r3, r3, r2
 800772c:	e7a4      	b.n	8007678 <_svfiprintf_r+0xd4>
 800772e:	2300      	movs	r3, #0
 8007730:	200a      	movs	r0, #10
 8007732:	0019      	movs	r1, r3
 8007734:	3501      	adds	r5, #1
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	782a      	ldrb	r2, [r5, #0]
 800773a:	1c6e      	adds	r6, r5, #1
 800773c:	3a30      	subs	r2, #48	@ 0x30
 800773e:	2a09      	cmp	r2, #9
 8007740:	d903      	bls.n	800774a <_svfiprintf_r+0x1a6>
 8007742:	2b00      	cmp	r3, #0
 8007744:	d0c8      	beq.n	80076d8 <_svfiprintf_r+0x134>
 8007746:	9109      	str	r1, [sp, #36]	@ 0x24
 8007748:	e7c6      	b.n	80076d8 <_svfiprintf_r+0x134>
 800774a:	4341      	muls	r1, r0
 800774c:	0035      	movs	r5, r6
 800774e:	2301      	movs	r3, #1
 8007750:	1889      	adds	r1, r1, r2
 8007752:	e7f1      	b.n	8007738 <_svfiprintf_r+0x194>
 8007754:	aa07      	add	r2, sp, #28
 8007756:	9200      	str	r2, [sp, #0]
 8007758:	0021      	movs	r1, r4
 800775a:	003a      	movs	r2, r7
 800775c:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <_svfiprintf_r+0x1f8>)
 800775e:	9803      	ldr	r0, [sp, #12]
 8007760:	f7fd fe16 	bl	8005390 <_printf_float>
 8007764:	9004      	str	r0, [sp, #16]
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	d1d6      	bne.n	800771a <_svfiprintf_r+0x176>
 800776c:	89bb      	ldrh	r3, [r7, #12]
 800776e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007770:	065b      	lsls	r3, r3, #25
 8007772:	d500      	bpl.n	8007776 <_svfiprintf_r+0x1d2>
 8007774:	e72c      	b.n	80075d0 <_svfiprintf_r+0x2c>
 8007776:	b021      	add	sp, #132	@ 0x84
 8007778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777a:	aa07      	add	r2, sp, #28
 800777c:	9200      	str	r2, [sp, #0]
 800777e:	0021      	movs	r1, r4
 8007780:	003a      	movs	r2, r7
 8007782:	4b06      	ldr	r3, [pc, #24]	@ (800779c <_svfiprintf_r+0x1f8>)
 8007784:	9803      	ldr	r0, [sp, #12]
 8007786:	f7fe f8b1 	bl	80058ec <_printf_i>
 800778a:	e7eb      	b.n	8007764 <_svfiprintf_r+0x1c0>
 800778c:	080097f0 	.word	0x080097f0
 8007790:	080097f6 	.word	0x080097f6
 8007794:	080097fa 	.word	0x080097fa
 8007798:	08005391 	.word	0x08005391
 800779c:	080074e5 	.word	0x080074e5

080077a0 <__sflush_r>:
 80077a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077a2:	220c      	movs	r2, #12
 80077a4:	5e8b      	ldrsh	r3, [r1, r2]
 80077a6:	0005      	movs	r5, r0
 80077a8:	000c      	movs	r4, r1
 80077aa:	071a      	lsls	r2, r3, #28
 80077ac:	d456      	bmi.n	800785c <__sflush_r+0xbc>
 80077ae:	684a      	ldr	r2, [r1, #4]
 80077b0:	2a00      	cmp	r2, #0
 80077b2:	dc02      	bgt.n	80077ba <__sflush_r+0x1a>
 80077b4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	dd4e      	ble.n	8007858 <__sflush_r+0xb8>
 80077ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80077bc:	2f00      	cmp	r7, #0
 80077be:	d04b      	beq.n	8007858 <__sflush_r+0xb8>
 80077c0:	2200      	movs	r2, #0
 80077c2:	2080      	movs	r0, #128	@ 0x80
 80077c4:	682e      	ldr	r6, [r5, #0]
 80077c6:	602a      	str	r2, [r5, #0]
 80077c8:	001a      	movs	r2, r3
 80077ca:	0140      	lsls	r0, r0, #5
 80077cc:	6a21      	ldr	r1, [r4, #32]
 80077ce:	4002      	ands	r2, r0
 80077d0:	4203      	tst	r3, r0
 80077d2:	d033      	beq.n	800783c <__sflush_r+0x9c>
 80077d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	075b      	lsls	r3, r3, #29
 80077da:	d506      	bpl.n	80077ea <__sflush_r+0x4a>
 80077dc:	6863      	ldr	r3, [r4, #4]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <__sflush_r+0x4a>
 80077e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077e8:	1ad2      	subs	r2, r2, r3
 80077ea:	2300      	movs	r3, #0
 80077ec:	0028      	movs	r0, r5
 80077ee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80077f0:	6a21      	ldr	r1, [r4, #32]
 80077f2:	47b8      	blx	r7
 80077f4:	89a2      	ldrh	r2, [r4, #12]
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	d106      	bne.n	8007808 <__sflush_r+0x68>
 80077fa:	6829      	ldr	r1, [r5, #0]
 80077fc:	291d      	cmp	r1, #29
 80077fe:	d846      	bhi.n	800788e <__sflush_r+0xee>
 8007800:	4b29      	ldr	r3, [pc, #164]	@ (80078a8 <__sflush_r+0x108>)
 8007802:	410b      	asrs	r3, r1
 8007804:	07db      	lsls	r3, r3, #31
 8007806:	d442      	bmi.n	800788e <__sflush_r+0xee>
 8007808:	2300      	movs	r3, #0
 800780a:	6063      	str	r3, [r4, #4]
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	04d2      	lsls	r2, r2, #19
 8007812:	d505      	bpl.n	8007820 <__sflush_r+0x80>
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	d102      	bne.n	800781e <__sflush_r+0x7e>
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d100      	bne.n	8007820 <__sflush_r+0x80>
 800781e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007822:	602e      	str	r6, [r5, #0]
 8007824:	2900      	cmp	r1, #0
 8007826:	d017      	beq.n	8007858 <__sflush_r+0xb8>
 8007828:	0023      	movs	r3, r4
 800782a:	3344      	adds	r3, #68	@ 0x44
 800782c:	4299      	cmp	r1, r3
 800782e:	d002      	beq.n	8007836 <__sflush_r+0x96>
 8007830:	0028      	movs	r0, r5
 8007832:	f7ff f9ad 	bl	8006b90 <_free_r>
 8007836:	2300      	movs	r3, #0
 8007838:	6363      	str	r3, [r4, #52]	@ 0x34
 800783a:	e00d      	b.n	8007858 <__sflush_r+0xb8>
 800783c:	2301      	movs	r3, #1
 800783e:	0028      	movs	r0, r5
 8007840:	47b8      	blx	r7
 8007842:	0002      	movs	r2, r0
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d1c6      	bne.n	80077d6 <__sflush_r+0x36>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0c3      	beq.n	80077d6 <__sflush_r+0x36>
 800784e:	2b1d      	cmp	r3, #29
 8007850:	d001      	beq.n	8007856 <__sflush_r+0xb6>
 8007852:	2b16      	cmp	r3, #22
 8007854:	d11a      	bne.n	800788c <__sflush_r+0xec>
 8007856:	602e      	str	r6, [r5, #0]
 8007858:	2000      	movs	r0, #0
 800785a:	e01e      	b.n	800789a <__sflush_r+0xfa>
 800785c:	690e      	ldr	r6, [r1, #16]
 800785e:	2e00      	cmp	r6, #0
 8007860:	d0fa      	beq.n	8007858 <__sflush_r+0xb8>
 8007862:	680f      	ldr	r7, [r1, #0]
 8007864:	600e      	str	r6, [r1, #0]
 8007866:	1bba      	subs	r2, r7, r6
 8007868:	9201      	str	r2, [sp, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	079b      	lsls	r3, r3, #30
 800786e:	d100      	bne.n	8007872 <__sflush_r+0xd2>
 8007870:	694a      	ldr	r2, [r1, #20]
 8007872:	60a2      	str	r2, [r4, #8]
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	ddee      	ble.n	8007858 <__sflush_r+0xb8>
 800787a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800787c:	0032      	movs	r2, r6
 800787e:	001f      	movs	r7, r3
 8007880:	0028      	movs	r0, r5
 8007882:	9b01      	ldr	r3, [sp, #4]
 8007884:	6a21      	ldr	r1, [r4, #32]
 8007886:	47b8      	blx	r7
 8007888:	2800      	cmp	r0, #0
 800788a:	dc07      	bgt.n	800789c <__sflush_r+0xfc>
 800788c:	89a2      	ldrh	r2, [r4, #12]
 800788e:	2340      	movs	r3, #64	@ 0x40
 8007890:	2001      	movs	r0, #1
 8007892:	4313      	orrs	r3, r2
 8007894:	b21b      	sxth	r3, r3
 8007896:	81a3      	strh	r3, [r4, #12]
 8007898:	4240      	negs	r0, r0
 800789a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800789c:	9b01      	ldr	r3, [sp, #4]
 800789e:	1836      	adds	r6, r6, r0
 80078a0:	1a1b      	subs	r3, r3, r0
 80078a2:	9301      	str	r3, [sp, #4]
 80078a4:	e7e6      	b.n	8007874 <__sflush_r+0xd4>
 80078a6:	46c0      	nop			@ (mov r8, r8)
 80078a8:	dfbffffe 	.word	0xdfbffffe

080078ac <_fflush_r>:
 80078ac:	690b      	ldr	r3, [r1, #16]
 80078ae:	b570      	push	{r4, r5, r6, lr}
 80078b0:	0005      	movs	r5, r0
 80078b2:	000c      	movs	r4, r1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <_fflush_r+0x12>
 80078b8:	2500      	movs	r5, #0
 80078ba:	0028      	movs	r0, r5
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	2800      	cmp	r0, #0
 80078c0:	d004      	beq.n	80078cc <_fflush_r+0x20>
 80078c2:	6a03      	ldr	r3, [r0, #32]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <_fflush_r+0x20>
 80078c8:	f7fe f9ae 	bl	8005c28 <__sinit>
 80078cc:	220c      	movs	r2, #12
 80078ce:	5ea3      	ldrsh	r3, [r4, r2]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0f1      	beq.n	80078b8 <_fflush_r+0xc>
 80078d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078d6:	07d2      	lsls	r2, r2, #31
 80078d8:	d404      	bmi.n	80078e4 <_fflush_r+0x38>
 80078da:	059b      	lsls	r3, r3, #22
 80078dc:	d402      	bmi.n	80078e4 <_fflush_r+0x38>
 80078de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e0:	f7fe fac7 	bl	8005e72 <__retarget_lock_acquire_recursive>
 80078e4:	0028      	movs	r0, r5
 80078e6:	0021      	movs	r1, r4
 80078e8:	f7ff ff5a 	bl	80077a0 <__sflush_r>
 80078ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078ee:	0005      	movs	r5, r0
 80078f0:	07db      	lsls	r3, r3, #31
 80078f2:	d4e2      	bmi.n	80078ba <_fflush_r+0xe>
 80078f4:	89a3      	ldrh	r3, [r4, #12]
 80078f6:	059b      	lsls	r3, r3, #22
 80078f8:	d4df      	bmi.n	80078ba <_fflush_r+0xe>
 80078fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fc:	f7fe faba 	bl	8005e74 <__retarget_lock_release_recursive>
 8007900:	e7db      	b.n	80078ba <_fflush_r+0xe>

08007902 <memmove>:
 8007902:	b510      	push	{r4, lr}
 8007904:	4288      	cmp	r0, r1
 8007906:	d806      	bhi.n	8007916 <memmove+0x14>
 8007908:	2300      	movs	r3, #0
 800790a:	429a      	cmp	r2, r3
 800790c:	d008      	beq.n	8007920 <memmove+0x1e>
 800790e:	5ccc      	ldrb	r4, [r1, r3]
 8007910:	54c4      	strb	r4, [r0, r3]
 8007912:	3301      	adds	r3, #1
 8007914:	e7f9      	b.n	800790a <memmove+0x8>
 8007916:	188b      	adds	r3, r1, r2
 8007918:	4298      	cmp	r0, r3
 800791a:	d2f5      	bcs.n	8007908 <memmove+0x6>
 800791c:	3a01      	subs	r2, #1
 800791e:	d200      	bcs.n	8007922 <memmove+0x20>
 8007920:	bd10      	pop	{r4, pc}
 8007922:	5c8b      	ldrb	r3, [r1, r2]
 8007924:	5483      	strb	r3, [r0, r2]
 8007926:	e7f9      	b.n	800791c <memmove+0x1a>

08007928 <_sbrk_r>:
 8007928:	2300      	movs	r3, #0
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	4d06      	ldr	r5, [pc, #24]	@ (8007948 <_sbrk_r+0x20>)
 800792e:	0004      	movs	r4, r0
 8007930:	0008      	movs	r0, r1
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	f7fb fed4 	bl	80036e0 <_sbrk>
 8007938:	1c43      	adds	r3, r0, #1
 800793a:	d103      	bne.n	8007944 <_sbrk_r+0x1c>
 800793c:	682b      	ldr	r3, [r5, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d000      	beq.n	8007944 <_sbrk_r+0x1c>
 8007942:	6023      	str	r3, [r4, #0]
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	20000818 	.word	0x20000818

0800794c <memcpy>:
 800794c:	2300      	movs	r3, #0
 800794e:	b510      	push	{r4, lr}
 8007950:	429a      	cmp	r2, r3
 8007952:	d100      	bne.n	8007956 <memcpy+0xa>
 8007954:	bd10      	pop	{r4, pc}
 8007956:	5ccc      	ldrb	r4, [r1, r3]
 8007958:	54c4      	strb	r4, [r0, r3]
 800795a:	3301      	adds	r3, #1
 800795c:	e7f8      	b.n	8007950 <memcpy+0x4>
	...

08007960 <__assert_func>:
 8007960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8007962:	0014      	movs	r4, r2
 8007964:	001a      	movs	r2, r3
 8007966:	4b09      	ldr	r3, [pc, #36]	@ (800798c <__assert_func+0x2c>)
 8007968:	0005      	movs	r5, r0
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	000e      	movs	r6, r1
 800796e:	68d8      	ldr	r0, [r3, #12]
 8007970:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <__assert_func+0x30>)
 8007972:	2c00      	cmp	r4, #0
 8007974:	d101      	bne.n	800797a <__assert_func+0x1a>
 8007976:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <__assert_func+0x34>)
 8007978:	001c      	movs	r4, r3
 800797a:	4907      	ldr	r1, [pc, #28]	@ (8007998 <__assert_func+0x38>)
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	9402      	str	r4, [sp, #8]
 8007980:	002b      	movs	r3, r5
 8007982:	9600      	str	r6, [sp, #0]
 8007984:	f000 f886 	bl	8007a94 <fiprintf>
 8007988:	f000 f894 	bl	8007ab4 <abort>
 800798c:	2000004c 	.word	0x2000004c
 8007990:	0800980b 	.word	0x0800980b
 8007994:	08009846 	.word	0x08009846
 8007998:	08009818 	.word	0x08009818

0800799c <_calloc_r>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	0c0b      	lsrs	r3, r1, #16
 80079a0:	0c15      	lsrs	r5, r2, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d11e      	bne.n	80079e4 <_calloc_r+0x48>
 80079a6:	2d00      	cmp	r5, #0
 80079a8:	d10c      	bne.n	80079c4 <_calloc_r+0x28>
 80079aa:	b289      	uxth	r1, r1
 80079ac:	b294      	uxth	r4, r2
 80079ae:	434c      	muls	r4, r1
 80079b0:	0021      	movs	r1, r4
 80079b2:	f7ff f963 	bl	8006c7c <_malloc_r>
 80079b6:	1e05      	subs	r5, r0, #0
 80079b8:	d01a      	beq.n	80079f0 <_calloc_r+0x54>
 80079ba:	0022      	movs	r2, r4
 80079bc:	2100      	movs	r1, #0
 80079be:	f7fe f9d3 	bl	8005d68 <memset>
 80079c2:	e016      	b.n	80079f2 <_calloc_r+0x56>
 80079c4:	1c2b      	adds	r3, r5, #0
 80079c6:	1c0c      	adds	r4, r1, #0
 80079c8:	b289      	uxth	r1, r1
 80079ca:	b292      	uxth	r2, r2
 80079cc:	434a      	muls	r2, r1
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	b2a1      	uxth	r1, r4
 80079d2:	4359      	muls	r1, r3
 80079d4:	0c14      	lsrs	r4, r2, #16
 80079d6:	190c      	adds	r4, r1, r4
 80079d8:	0c23      	lsrs	r3, r4, #16
 80079da:	d107      	bne.n	80079ec <_calloc_r+0x50>
 80079dc:	0424      	lsls	r4, r4, #16
 80079de:	b292      	uxth	r2, r2
 80079e0:	4314      	orrs	r4, r2
 80079e2:	e7e5      	b.n	80079b0 <_calloc_r+0x14>
 80079e4:	2d00      	cmp	r5, #0
 80079e6:	d101      	bne.n	80079ec <_calloc_r+0x50>
 80079e8:	1c14      	adds	r4, r2, #0
 80079ea:	e7ed      	b.n	80079c8 <_calloc_r+0x2c>
 80079ec:	230c      	movs	r3, #12
 80079ee:	6003      	str	r3, [r0, #0]
 80079f0:	2500      	movs	r5, #0
 80079f2:	0028      	movs	r0, r5
 80079f4:	bd70      	pop	{r4, r5, r6, pc}

080079f6 <__ascii_mbtowc>:
 80079f6:	b082      	sub	sp, #8
 80079f8:	2900      	cmp	r1, #0
 80079fa:	d100      	bne.n	80079fe <__ascii_mbtowc+0x8>
 80079fc:	a901      	add	r1, sp, #4
 80079fe:	1e10      	subs	r0, r2, #0
 8007a00:	d006      	beq.n	8007a10 <__ascii_mbtowc+0x1a>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d006      	beq.n	8007a14 <__ascii_mbtowc+0x1e>
 8007a06:	7813      	ldrb	r3, [r2, #0]
 8007a08:	600b      	str	r3, [r1, #0]
 8007a0a:	7810      	ldrb	r0, [r2, #0]
 8007a0c:	1e43      	subs	r3, r0, #1
 8007a0e:	4198      	sbcs	r0, r3
 8007a10:	b002      	add	sp, #8
 8007a12:	4770      	bx	lr
 8007a14:	2002      	movs	r0, #2
 8007a16:	4240      	negs	r0, r0
 8007a18:	e7fa      	b.n	8007a10 <__ascii_mbtowc+0x1a>

08007a1a <_realloc_r>:
 8007a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a1c:	0006      	movs	r6, r0
 8007a1e:	000c      	movs	r4, r1
 8007a20:	0015      	movs	r5, r2
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d105      	bne.n	8007a32 <_realloc_r+0x18>
 8007a26:	0011      	movs	r1, r2
 8007a28:	f7ff f928 	bl	8006c7c <_malloc_r>
 8007a2c:	0004      	movs	r4, r0
 8007a2e:	0020      	movs	r0, r4
 8007a30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d103      	bne.n	8007a3e <_realloc_r+0x24>
 8007a36:	f7ff f8ab 	bl	8006b90 <_free_r>
 8007a3a:	2400      	movs	r4, #0
 8007a3c:	e7f7      	b.n	8007a2e <_realloc_r+0x14>
 8007a3e:	f000 f840 	bl	8007ac2 <_malloc_usable_size_r>
 8007a42:	0007      	movs	r7, r0
 8007a44:	4285      	cmp	r5, r0
 8007a46:	d802      	bhi.n	8007a4e <_realloc_r+0x34>
 8007a48:	0843      	lsrs	r3, r0, #1
 8007a4a:	42ab      	cmp	r3, r5
 8007a4c:	d3ef      	bcc.n	8007a2e <_realloc_r+0x14>
 8007a4e:	0029      	movs	r1, r5
 8007a50:	0030      	movs	r0, r6
 8007a52:	f7ff f913 	bl	8006c7c <_malloc_r>
 8007a56:	9001      	str	r0, [sp, #4]
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0ee      	beq.n	8007a3a <_realloc_r+0x20>
 8007a5c:	002a      	movs	r2, r5
 8007a5e:	42bd      	cmp	r5, r7
 8007a60:	d900      	bls.n	8007a64 <_realloc_r+0x4a>
 8007a62:	003a      	movs	r2, r7
 8007a64:	0021      	movs	r1, r4
 8007a66:	9801      	ldr	r0, [sp, #4]
 8007a68:	f7ff ff70 	bl	800794c <memcpy>
 8007a6c:	0021      	movs	r1, r4
 8007a6e:	0030      	movs	r0, r6
 8007a70:	f7ff f88e 	bl	8006b90 <_free_r>
 8007a74:	9c01      	ldr	r4, [sp, #4]
 8007a76:	e7da      	b.n	8007a2e <_realloc_r+0x14>

08007a78 <__ascii_wctomb>:
 8007a78:	0003      	movs	r3, r0
 8007a7a:	1e08      	subs	r0, r1, #0
 8007a7c:	d005      	beq.n	8007a8a <__ascii_wctomb+0x12>
 8007a7e:	2aff      	cmp	r2, #255	@ 0xff
 8007a80:	d904      	bls.n	8007a8c <__ascii_wctomb+0x14>
 8007a82:	228a      	movs	r2, #138	@ 0x8a
 8007a84:	2001      	movs	r0, #1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	4240      	negs	r0, r0
 8007a8a:	4770      	bx	lr
 8007a8c:	2001      	movs	r0, #1
 8007a8e:	700a      	strb	r2, [r1, #0]
 8007a90:	e7fb      	b.n	8007a8a <__ascii_wctomb+0x12>
	...

08007a94 <fiprintf>:
 8007a94:	b40e      	push	{r1, r2, r3}
 8007a96:	b517      	push	{r0, r1, r2, r4, lr}
 8007a98:	4c05      	ldr	r4, [pc, #20]	@ (8007ab0 <fiprintf+0x1c>)
 8007a9a:	ab05      	add	r3, sp, #20
 8007a9c:	cb04      	ldmia	r3!, {r2}
 8007a9e:	0001      	movs	r1, r0
 8007aa0:	6820      	ldr	r0, [r4, #0]
 8007aa2:	9301      	str	r3, [sp, #4]
 8007aa4:	f000 f83c 	bl	8007b20 <_vfiprintf_r>
 8007aa8:	bc1e      	pop	{r1, r2, r3, r4}
 8007aaa:	bc08      	pop	{r3}
 8007aac:	b003      	add	sp, #12
 8007aae:	4718      	bx	r3
 8007ab0:	2000004c 	.word	0x2000004c

08007ab4 <abort>:
 8007ab4:	2006      	movs	r0, #6
 8007ab6:	b510      	push	{r4, lr}
 8007ab8:	f000 fa18 	bl	8007eec <raise>
 8007abc:	2001      	movs	r0, #1
 8007abe:	f7fb fd9c 	bl	80035fa <_exit>

08007ac2 <_malloc_usable_size_r>:
 8007ac2:	1f0b      	subs	r3, r1, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	1f18      	subs	r0, r3, #4
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da01      	bge.n	8007ad0 <_malloc_usable_size_r+0xe>
 8007acc:	580b      	ldr	r3, [r1, r0]
 8007ace:	18c0      	adds	r0, r0, r3
 8007ad0:	4770      	bx	lr

08007ad2 <__sfputc_r>:
 8007ad2:	6893      	ldr	r3, [r2, #8]
 8007ad4:	b510      	push	{r4, lr}
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	6093      	str	r3, [r2, #8]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da04      	bge.n	8007ae8 <__sfputc_r+0x16>
 8007ade:	6994      	ldr	r4, [r2, #24]
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	db07      	blt.n	8007af4 <__sfputc_r+0x22>
 8007ae4:	290a      	cmp	r1, #10
 8007ae6:	d005      	beq.n	8007af4 <__sfputc_r+0x22>
 8007ae8:	6813      	ldr	r3, [r2, #0]
 8007aea:	1c58      	adds	r0, r3, #1
 8007aec:	6010      	str	r0, [r2, #0]
 8007aee:	7019      	strb	r1, [r3, #0]
 8007af0:	0008      	movs	r0, r1
 8007af2:	bd10      	pop	{r4, pc}
 8007af4:	f000 f930 	bl	8007d58 <__swbuf_r>
 8007af8:	0001      	movs	r1, r0
 8007afa:	e7f9      	b.n	8007af0 <__sfputc_r+0x1e>

08007afc <__sfputs_r>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	0006      	movs	r6, r0
 8007b00:	000f      	movs	r7, r1
 8007b02:	0014      	movs	r4, r2
 8007b04:	18d5      	adds	r5, r2, r3
 8007b06:	42ac      	cmp	r4, r5
 8007b08:	d101      	bne.n	8007b0e <__sfputs_r+0x12>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e007      	b.n	8007b1e <__sfputs_r+0x22>
 8007b0e:	7821      	ldrb	r1, [r4, #0]
 8007b10:	003a      	movs	r2, r7
 8007b12:	0030      	movs	r0, r6
 8007b14:	f7ff ffdd 	bl	8007ad2 <__sfputc_r>
 8007b18:	3401      	adds	r4, #1
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d1f3      	bne.n	8007b06 <__sfputs_r+0xa>
 8007b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b20 <_vfiprintf_r>:
 8007b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b22:	b0a1      	sub	sp, #132	@ 0x84
 8007b24:	000f      	movs	r7, r1
 8007b26:	0015      	movs	r5, r2
 8007b28:	001e      	movs	r6, r3
 8007b2a:	9003      	str	r0, [sp, #12]
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d004      	beq.n	8007b3a <_vfiprintf_r+0x1a>
 8007b30:	6a03      	ldr	r3, [r0, #32]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <_vfiprintf_r+0x1a>
 8007b36:	f7fe f877 	bl	8005c28 <__sinit>
 8007b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b3c:	07db      	lsls	r3, r3, #31
 8007b3e:	d405      	bmi.n	8007b4c <_vfiprintf_r+0x2c>
 8007b40:	89bb      	ldrh	r3, [r7, #12]
 8007b42:	059b      	lsls	r3, r3, #22
 8007b44:	d402      	bmi.n	8007b4c <_vfiprintf_r+0x2c>
 8007b46:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007b48:	f7fe f993 	bl	8005e72 <__retarget_lock_acquire_recursive>
 8007b4c:	89bb      	ldrh	r3, [r7, #12]
 8007b4e:	071b      	lsls	r3, r3, #28
 8007b50:	d502      	bpl.n	8007b58 <_vfiprintf_r+0x38>
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d113      	bne.n	8007b80 <_vfiprintf_r+0x60>
 8007b58:	0039      	movs	r1, r7
 8007b5a:	9803      	ldr	r0, [sp, #12]
 8007b5c:	f000 f93e 	bl	8007ddc <__swsetup_r>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	d00d      	beq.n	8007b80 <_vfiprintf_r+0x60>
 8007b64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b66:	07db      	lsls	r3, r3, #31
 8007b68:	d503      	bpl.n	8007b72 <_vfiprintf_r+0x52>
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	4240      	negs	r0, r0
 8007b6e:	b021      	add	sp, #132	@ 0x84
 8007b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b72:	89bb      	ldrh	r3, [r7, #12]
 8007b74:	059b      	lsls	r3, r3, #22
 8007b76:	d4f8      	bmi.n	8007b6a <_vfiprintf_r+0x4a>
 8007b78:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007b7a:	f7fe f97b 	bl	8005e74 <__retarget_lock_release_recursive>
 8007b7e:	e7f4      	b.n	8007b6a <_vfiprintf_r+0x4a>
 8007b80:	2300      	movs	r3, #0
 8007b82:	ac08      	add	r4, sp, #32
 8007b84:	6163      	str	r3, [r4, #20]
 8007b86:	3320      	adds	r3, #32
 8007b88:	7663      	strb	r3, [r4, #25]
 8007b8a:	3310      	adds	r3, #16
 8007b8c:	76a3      	strb	r3, [r4, #26]
 8007b8e:	9607      	str	r6, [sp, #28]
 8007b90:	002e      	movs	r6, r5
 8007b92:	7833      	ldrb	r3, [r6, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <_vfiprintf_r+0x7c>
 8007b98:	2b25      	cmp	r3, #37	@ 0x25
 8007b9a:	d148      	bne.n	8007c2e <_vfiprintf_r+0x10e>
 8007b9c:	1b73      	subs	r3, r6, r5
 8007b9e:	9305      	str	r3, [sp, #20]
 8007ba0:	42ae      	cmp	r6, r5
 8007ba2:	d00b      	beq.n	8007bbc <_vfiprintf_r+0x9c>
 8007ba4:	002a      	movs	r2, r5
 8007ba6:	0039      	movs	r1, r7
 8007ba8:	9803      	ldr	r0, [sp, #12]
 8007baa:	f7ff ffa7 	bl	8007afc <__sfputs_r>
 8007bae:	3001      	adds	r0, #1
 8007bb0:	d100      	bne.n	8007bb4 <_vfiprintf_r+0x94>
 8007bb2:	e0ae      	b.n	8007d12 <_vfiprintf_r+0x1f2>
 8007bb4:	6963      	ldr	r3, [r4, #20]
 8007bb6:	9a05      	ldr	r2, [sp, #20]
 8007bb8:	189b      	adds	r3, r3, r2
 8007bba:	6163      	str	r3, [r4, #20]
 8007bbc:	7833      	ldrb	r3, [r6, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d100      	bne.n	8007bc4 <_vfiprintf_r+0xa4>
 8007bc2:	e0a6      	b.n	8007d12 <_vfiprintf_r+0x1f2>
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	4252      	negs	r2, r2
 8007bca:	6062      	str	r2, [r4, #4]
 8007bcc:	a904      	add	r1, sp, #16
 8007bce:	3254      	adds	r2, #84	@ 0x54
 8007bd0:	1852      	adds	r2, r2, r1
 8007bd2:	1c75      	adds	r5, r6, #1
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	60e3      	str	r3, [r4, #12]
 8007bd8:	60a3      	str	r3, [r4, #8]
 8007bda:	7013      	strb	r3, [r2, #0]
 8007bdc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007bde:	4b59      	ldr	r3, [pc, #356]	@ (8007d44 <_vfiprintf_r+0x224>)
 8007be0:	2205      	movs	r2, #5
 8007be2:	0018      	movs	r0, r3
 8007be4:	7829      	ldrb	r1, [r5, #0]
 8007be6:	9305      	str	r3, [sp, #20]
 8007be8:	f7fe f945 	bl	8005e76 <memchr>
 8007bec:	1c6e      	adds	r6, r5, #1
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	d11f      	bne.n	8007c32 <_vfiprintf_r+0x112>
 8007bf2:	6822      	ldr	r2, [r4, #0]
 8007bf4:	06d3      	lsls	r3, r2, #27
 8007bf6:	d504      	bpl.n	8007c02 <_vfiprintf_r+0xe2>
 8007bf8:	2353      	movs	r3, #83	@ 0x53
 8007bfa:	a904      	add	r1, sp, #16
 8007bfc:	185b      	adds	r3, r3, r1
 8007bfe:	2120      	movs	r1, #32
 8007c00:	7019      	strb	r1, [r3, #0]
 8007c02:	0713      	lsls	r3, r2, #28
 8007c04:	d504      	bpl.n	8007c10 <_vfiprintf_r+0xf0>
 8007c06:	2353      	movs	r3, #83	@ 0x53
 8007c08:	a904      	add	r1, sp, #16
 8007c0a:	185b      	adds	r3, r3, r1
 8007c0c:	212b      	movs	r1, #43	@ 0x2b
 8007c0e:	7019      	strb	r1, [r3, #0]
 8007c10:	782b      	ldrb	r3, [r5, #0]
 8007c12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c14:	d016      	beq.n	8007c44 <_vfiprintf_r+0x124>
 8007c16:	002e      	movs	r6, r5
 8007c18:	2100      	movs	r1, #0
 8007c1a:	200a      	movs	r0, #10
 8007c1c:	68e3      	ldr	r3, [r4, #12]
 8007c1e:	7832      	ldrb	r2, [r6, #0]
 8007c20:	1c75      	adds	r5, r6, #1
 8007c22:	3a30      	subs	r2, #48	@ 0x30
 8007c24:	2a09      	cmp	r2, #9
 8007c26:	d950      	bls.n	8007cca <_vfiprintf_r+0x1aa>
 8007c28:	2900      	cmp	r1, #0
 8007c2a:	d111      	bne.n	8007c50 <_vfiprintf_r+0x130>
 8007c2c:	e017      	b.n	8007c5e <_vfiprintf_r+0x13e>
 8007c2e:	3601      	adds	r6, #1
 8007c30:	e7af      	b.n	8007b92 <_vfiprintf_r+0x72>
 8007c32:	9b05      	ldr	r3, [sp, #20]
 8007c34:	6822      	ldr	r2, [r4, #0]
 8007c36:	1ac0      	subs	r0, r0, r3
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4083      	lsls	r3, r0
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	0035      	movs	r5, r6
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	e7cc      	b.n	8007bde <_vfiprintf_r+0xbe>
 8007c44:	9b07      	ldr	r3, [sp, #28]
 8007c46:	1d19      	adds	r1, r3, #4
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	9107      	str	r1, [sp, #28]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db01      	blt.n	8007c54 <_vfiprintf_r+0x134>
 8007c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c52:	e004      	b.n	8007c5e <_vfiprintf_r+0x13e>
 8007c54:	425b      	negs	r3, r3
 8007c56:	60e3      	str	r3, [r4, #12]
 8007c58:	2302      	movs	r3, #2
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	7833      	ldrb	r3, [r6, #0]
 8007c60:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c62:	d10c      	bne.n	8007c7e <_vfiprintf_r+0x15e>
 8007c64:	7873      	ldrb	r3, [r6, #1]
 8007c66:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c68:	d134      	bne.n	8007cd4 <_vfiprintf_r+0x1b4>
 8007c6a:	9b07      	ldr	r3, [sp, #28]
 8007c6c:	3602      	adds	r6, #2
 8007c6e:	1d1a      	adds	r2, r3, #4
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	9207      	str	r2, [sp, #28]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da01      	bge.n	8007c7c <_vfiprintf_r+0x15c>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	425b      	negs	r3, r3
 8007c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7e:	4d32      	ldr	r5, [pc, #200]	@ (8007d48 <_vfiprintf_r+0x228>)
 8007c80:	2203      	movs	r2, #3
 8007c82:	0028      	movs	r0, r5
 8007c84:	7831      	ldrb	r1, [r6, #0]
 8007c86:	f7fe f8f6 	bl	8005e76 <memchr>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d006      	beq.n	8007c9c <_vfiprintf_r+0x17c>
 8007c8e:	2340      	movs	r3, #64	@ 0x40
 8007c90:	1b40      	subs	r0, r0, r5
 8007c92:	4083      	lsls	r3, r0
 8007c94:	6822      	ldr	r2, [r4, #0]
 8007c96:	3601      	adds	r6, #1
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	7831      	ldrb	r1, [r6, #0]
 8007c9e:	2206      	movs	r2, #6
 8007ca0:	482a      	ldr	r0, [pc, #168]	@ (8007d4c <_vfiprintf_r+0x22c>)
 8007ca2:	1c75      	adds	r5, r6, #1
 8007ca4:	7621      	strb	r1, [r4, #24]
 8007ca6:	f7fe f8e6 	bl	8005e76 <memchr>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d040      	beq.n	8007d30 <_vfiprintf_r+0x210>
 8007cae:	4b28      	ldr	r3, [pc, #160]	@ (8007d50 <_vfiprintf_r+0x230>)
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d122      	bne.n	8007cfa <_vfiprintf_r+0x1da>
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	9b07      	ldr	r3, [sp, #28]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	4393      	bics	r3, r2
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	6963      	ldr	r3, [r4, #20]
 8007cc2:	9a04      	ldr	r2, [sp, #16]
 8007cc4:	189b      	adds	r3, r3, r2
 8007cc6:	6163      	str	r3, [r4, #20]
 8007cc8:	e762      	b.n	8007b90 <_vfiprintf_r+0x70>
 8007cca:	4343      	muls	r3, r0
 8007ccc:	002e      	movs	r6, r5
 8007cce:	2101      	movs	r1, #1
 8007cd0:	189b      	adds	r3, r3, r2
 8007cd2:	e7a4      	b.n	8007c1e <_vfiprintf_r+0xfe>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	200a      	movs	r0, #10
 8007cd8:	0019      	movs	r1, r3
 8007cda:	3601      	adds	r6, #1
 8007cdc:	6063      	str	r3, [r4, #4]
 8007cde:	7832      	ldrb	r2, [r6, #0]
 8007ce0:	1c75      	adds	r5, r6, #1
 8007ce2:	3a30      	subs	r2, #48	@ 0x30
 8007ce4:	2a09      	cmp	r2, #9
 8007ce6:	d903      	bls.n	8007cf0 <_vfiprintf_r+0x1d0>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0c8      	beq.n	8007c7e <_vfiprintf_r+0x15e>
 8007cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cee:	e7c6      	b.n	8007c7e <_vfiprintf_r+0x15e>
 8007cf0:	4341      	muls	r1, r0
 8007cf2:	002e      	movs	r6, r5
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	1889      	adds	r1, r1, r2
 8007cf8:	e7f1      	b.n	8007cde <_vfiprintf_r+0x1be>
 8007cfa:	aa07      	add	r2, sp, #28
 8007cfc:	9200      	str	r2, [sp, #0]
 8007cfe:	0021      	movs	r1, r4
 8007d00:	003a      	movs	r2, r7
 8007d02:	4b14      	ldr	r3, [pc, #80]	@ (8007d54 <_vfiprintf_r+0x234>)
 8007d04:	9803      	ldr	r0, [sp, #12]
 8007d06:	f7fd fb43 	bl	8005390 <_printf_float>
 8007d0a:	9004      	str	r0, [sp, #16]
 8007d0c:	9b04      	ldr	r3, [sp, #16]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	d1d6      	bne.n	8007cc0 <_vfiprintf_r+0x1a0>
 8007d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d14:	07db      	lsls	r3, r3, #31
 8007d16:	d405      	bmi.n	8007d24 <_vfiprintf_r+0x204>
 8007d18:	89bb      	ldrh	r3, [r7, #12]
 8007d1a:	059b      	lsls	r3, r3, #22
 8007d1c:	d402      	bmi.n	8007d24 <_vfiprintf_r+0x204>
 8007d1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007d20:	f7fe f8a8 	bl	8005e74 <__retarget_lock_release_recursive>
 8007d24:	89bb      	ldrh	r3, [r7, #12]
 8007d26:	065b      	lsls	r3, r3, #25
 8007d28:	d500      	bpl.n	8007d2c <_vfiprintf_r+0x20c>
 8007d2a:	e71e      	b.n	8007b6a <_vfiprintf_r+0x4a>
 8007d2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007d2e:	e71e      	b.n	8007b6e <_vfiprintf_r+0x4e>
 8007d30:	aa07      	add	r2, sp, #28
 8007d32:	9200      	str	r2, [sp, #0]
 8007d34:	0021      	movs	r1, r4
 8007d36:	003a      	movs	r2, r7
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <_vfiprintf_r+0x234>)
 8007d3a:	9803      	ldr	r0, [sp, #12]
 8007d3c:	f7fd fdd6 	bl	80058ec <_printf_i>
 8007d40:	e7e3      	b.n	8007d0a <_vfiprintf_r+0x1ea>
 8007d42:	46c0      	nop			@ (mov r8, r8)
 8007d44:	080097f0 	.word	0x080097f0
 8007d48:	080097f6 	.word	0x080097f6
 8007d4c:	080097fa 	.word	0x080097fa
 8007d50:	08005391 	.word	0x08005391
 8007d54:	08007afd 	.word	0x08007afd

08007d58 <__swbuf_r>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	0006      	movs	r6, r0
 8007d5c:	000d      	movs	r5, r1
 8007d5e:	0014      	movs	r4, r2
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d004      	beq.n	8007d6e <__swbuf_r+0x16>
 8007d64:	6a03      	ldr	r3, [r0, #32]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <__swbuf_r+0x16>
 8007d6a:	f7fd ff5d 	bl	8005c28 <__sinit>
 8007d6e:	69a3      	ldr	r3, [r4, #24]
 8007d70:	60a3      	str	r3, [r4, #8]
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	071b      	lsls	r3, r3, #28
 8007d76:	d502      	bpl.n	8007d7e <__swbuf_r+0x26>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <__swbuf_r+0x3a>
 8007d7e:	0021      	movs	r1, r4
 8007d80:	0030      	movs	r0, r6
 8007d82:	f000 f82b 	bl	8007ddc <__swsetup_r>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d003      	beq.n	8007d92 <__swbuf_r+0x3a>
 8007d8a:	2501      	movs	r5, #1
 8007d8c:	426d      	negs	r5, r5
 8007d8e:	0028      	movs	r0, r5
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	b2ef      	uxtb	r7, r5
 8007d98:	1ac0      	subs	r0, r0, r3
 8007d9a:	6963      	ldr	r3, [r4, #20]
 8007d9c:	b2ed      	uxtb	r5, r5
 8007d9e:	4283      	cmp	r3, r0
 8007da0:	dc05      	bgt.n	8007dae <__swbuf_r+0x56>
 8007da2:	0021      	movs	r1, r4
 8007da4:	0030      	movs	r0, r6
 8007da6:	f7ff fd81 	bl	80078ac <_fflush_r>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1ed      	bne.n	8007d8a <__swbuf_r+0x32>
 8007dae:	68a3      	ldr	r3, [r4, #8]
 8007db0:	3001      	adds	r0, #1
 8007db2:	3b01      	subs	r3, #1
 8007db4:	60a3      	str	r3, [r4, #8]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	6022      	str	r2, [r4, #0]
 8007dbc:	701f      	strb	r7, [r3, #0]
 8007dbe:	6963      	ldr	r3, [r4, #20]
 8007dc0:	4283      	cmp	r3, r0
 8007dc2:	d004      	beq.n	8007dce <__swbuf_r+0x76>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	07db      	lsls	r3, r3, #31
 8007dc8:	d5e1      	bpl.n	8007d8e <__swbuf_r+0x36>
 8007dca:	2d0a      	cmp	r5, #10
 8007dcc:	d1df      	bne.n	8007d8e <__swbuf_r+0x36>
 8007dce:	0021      	movs	r1, r4
 8007dd0:	0030      	movs	r0, r6
 8007dd2:	f7ff fd6b 	bl	80078ac <_fflush_r>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d0d9      	beq.n	8007d8e <__swbuf_r+0x36>
 8007dda:	e7d6      	b.n	8007d8a <__swbuf_r+0x32>

08007ddc <__swsetup_r>:
 8007ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8007e94 <__swsetup_r+0xb8>)
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	0005      	movs	r5, r0
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	000c      	movs	r4, r1
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d004      	beq.n	8007df4 <__swsetup_r+0x18>
 8007dea:	6a03      	ldr	r3, [r0, #32]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <__swsetup_r+0x18>
 8007df0:	f7fd ff1a 	bl	8005c28 <__sinit>
 8007df4:	230c      	movs	r3, #12
 8007df6:	5ee2      	ldrsh	r2, [r4, r3]
 8007df8:	0713      	lsls	r3, r2, #28
 8007dfa:	d423      	bmi.n	8007e44 <__swsetup_r+0x68>
 8007dfc:	06d3      	lsls	r3, r2, #27
 8007dfe:	d407      	bmi.n	8007e10 <__swsetup_r+0x34>
 8007e00:	2309      	movs	r3, #9
 8007e02:	602b      	str	r3, [r5, #0]
 8007e04:	2340      	movs	r3, #64	@ 0x40
 8007e06:	2001      	movs	r0, #1
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	81a3      	strh	r3, [r4, #12]
 8007e0c:	4240      	negs	r0, r0
 8007e0e:	e03a      	b.n	8007e86 <__swsetup_r+0xaa>
 8007e10:	0752      	lsls	r2, r2, #29
 8007e12:	d513      	bpl.n	8007e3c <__swsetup_r+0x60>
 8007e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d008      	beq.n	8007e2c <__swsetup_r+0x50>
 8007e1a:	0023      	movs	r3, r4
 8007e1c:	3344      	adds	r3, #68	@ 0x44
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d002      	beq.n	8007e28 <__swsetup_r+0x4c>
 8007e22:	0028      	movs	r0, r5
 8007e24:	f7fe feb4 	bl	8006b90 <_free_r>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e2c:	2224      	movs	r2, #36	@ 0x24
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	4393      	bics	r3, r2
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	2300      	movs	r3, #0
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	6923      	ldr	r3, [r4, #16]
 8007e3a:	6023      	str	r3, [r4, #0]
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	89a2      	ldrh	r2, [r4, #12]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	81a3      	strh	r3, [r4, #12]
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <__swsetup_r+0x86>
 8007e4a:	21a0      	movs	r1, #160	@ 0xa0
 8007e4c:	2280      	movs	r2, #128	@ 0x80
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	0089      	lsls	r1, r1, #2
 8007e52:	0092      	lsls	r2, r2, #2
 8007e54:	400b      	ands	r3, r1
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <__swsetup_r+0x86>
 8007e5a:	0021      	movs	r1, r4
 8007e5c:	0028      	movs	r0, r5
 8007e5e:	f000 f88f 	bl	8007f80 <__smakebuf_r>
 8007e62:	230c      	movs	r3, #12
 8007e64:	5ee2      	ldrsh	r2, [r4, r3]
 8007e66:	2101      	movs	r1, #1
 8007e68:	0013      	movs	r3, r2
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	420a      	tst	r2, r1
 8007e6e:	d00b      	beq.n	8007e88 <__swsetup_r+0xac>
 8007e70:	2300      	movs	r3, #0
 8007e72:	60a3      	str	r3, [r4, #8]
 8007e74:	6963      	ldr	r3, [r4, #20]
 8007e76:	425b      	negs	r3, r3
 8007e78:	61a3      	str	r3, [r4, #24]
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	6923      	ldr	r3, [r4, #16]
 8007e7e:	4283      	cmp	r3, r0
 8007e80:	d101      	bne.n	8007e86 <__swsetup_r+0xaa>
 8007e82:	0613      	lsls	r3, r2, #24
 8007e84:	d4be      	bmi.n	8007e04 <__swsetup_r+0x28>
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	0791      	lsls	r1, r2, #30
 8007e8a:	d400      	bmi.n	8007e8e <__swsetup_r+0xb2>
 8007e8c:	6963      	ldr	r3, [r4, #20]
 8007e8e:	60a3      	str	r3, [r4, #8]
 8007e90:	e7f3      	b.n	8007e7a <__swsetup_r+0x9e>
 8007e92:	46c0      	nop			@ (mov r8, r8)
 8007e94:	2000004c 	.word	0x2000004c

08007e98 <_raise_r>:
 8007e98:	b570      	push	{r4, r5, r6, lr}
 8007e9a:	0004      	movs	r4, r0
 8007e9c:	000d      	movs	r5, r1
 8007e9e:	291f      	cmp	r1, #31
 8007ea0:	d904      	bls.n	8007eac <_raise_r+0x14>
 8007ea2:	2316      	movs	r3, #22
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	2001      	movs	r0, #1
 8007ea8:	4240      	negs	r0, r0
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d004      	beq.n	8007ebc <_raise_r+0x24>
 8007eb2:	008a      	lsls	r2, r1, #2
 8007eb4:	189b      	adds	r3, r3, r2
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	2a00      	cmp	r2, #0
 8007eba:	d108      	bne.n	8007ece <_raise_r+0x36>
 8007ebc:	0020      	movs	r0, r4
 8007ebe:	f000 f831 	bl	8007f24 <_getpid_r>
 8007ec2:	002a      	movs	r2, r5
 8007ec4:	0001      	movs	r1, r0
 8007ec6:	0020      	movs	r0, r4
 8007ec8:	f000 f81a 	bl	8007f00 <_kill_r>
 8007ecc:	e7ed      	b.n	8007eaa <_raise_r+0x12>
 8007ece:	2a01      	cmp	r2, #1
 8007ed0:	d009      	beq.n	8007ee6 <_raise_r+0x4e>
 8007ed2:	1c51      	adds	r1, r2, #1
 8007ed4:	d103      	bne.n	8007ede <_raise_r+0x46>
 8007ed6:	2316      	movs	r3, #22
 8007ed8:	6003      	str	r3, [r0, #0]
 8007eda:	2001      	movs	r0, #1
 8007edc:	e7e5      	b.n	8007eaa <_raise_r+0x12>
 8007ede:	2100      	movs	r1, #0
 8007ee0:	0028      	movs	r0, r5
 8007ee2:	6019      	str	r1, [r3, #0]
 8007ee4:	4790      	blx	r2
 8007ee6:	2000      	movs	r0, #0
 8007ee8:	e7df      	b.n	8007eaa <_raise_r+0x12>
	...

08007eec <raise>:
 8007eec:	b510      	push	{r4, lr}
 8007eee:	4b03      	ldr	r3, [pc, #12]	@ (8007efc <raise+0x10>)
 8007ef0:	0001      	movs	r1, r0
 8007ef2:	6818      	ldr	r0, [r3, #0]
 8007ef4:	f7ff ffd0 	bl	8007e98 <_raise_r>
 8007ef8:	bd10      	pop	{r4, pc}
 8007efa:	46c0      	nop			@ (mov r8, r8)
 8007efc:	2000004c 	.word	0x2000004c

08007f00 <_kill_r>:
 8007f00:	2300      	movs	r3, #0
 8007f02:	b570      	push	{r4, r5, r6, lr}
 8007f04:	4d06      	ldr	r5, [pc, #24]	@ (8007f20 <_kill_r+0x20>)
 8007f06:	0004      	movs	r4, r0
 8007f08:	0008      	movs	r0, r1
 8007f0a:	0011      	movs	r1, r2
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	f7fb fb64 	bl	80035da <_kill>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	d103      	bne.n	8007f1e <_kill_r+0x1e>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d000      	beq.n	8007f1e <_kill_r+0x1e>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd70      	pop	{r4, r5, r6, pc}
 8007f20:	20000818 	.word	0x20000818

08007f24 <_getpid_r>:
 8007f24:	b510      	push	{r4, lr}
 8007f26:	f7fb fb52 	bl	80035ce <_getpid>
 8007f2a:	bd10      	pop	{r4, pc}

08007f2c <__swhatbuf_r>:
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	000e      	movs	r6, r1
 8007f30:	001d      	movs	r5, r3
 8007f32:	230e      	movs	r3, #14
 8007f34:	5ec9      	ldrsh	r1, [r1, r3]
 8007f36:	0014      	movs	r4, r2
 8007f38:	b096      	sub	sp, #88	@ 0x58
 8007f3a:	2900      	cmp	r1, #0
 8007f3c:	da0c      	bge.n	8007f58 <__swhatbuf_r+0x2c>
 8007f3e:	89b2      	ldrh	r2, [r6, #12]
 8007f40:	2380      	movs	r3, #128	@ 0x80
 8007f42:	0011      	movs	r1, r2
 8007f44:	4019      	ands	r1, r3
 8007f46:	421a      	tst	r2, r3
 8007f48:	d114      	bne.n	8007f74 <__swhatbuf_r+0x48>
 8007f4a:	2380      	movs	r3, #128	@ 0x80
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	2000      	movs	r0, #0
 8007f50:	6029      	str	r1, [r5, #0]
 8007f52:	6023      	str	r3, [r4, #0]
 8007f54:	b016      	add	sp, #88	@ 0x58
 8007f56:	bd70      	pop	{r4, r5, r6, pc}
 8007f58:	466a      	mov	r2, sp
 8007f5a:	f000 f853 	bl	8008004 <_fstat_r>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	dbed      	blt.n	8007f3e <__swhatbuf_r+0x12>
 8007f62:	23f0      	movs	r3, #240	@ 0xf0
 8007f64:	9901      	ldr	r1, [sp, #4]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	4019      	ands	r1, r3
 8007f6a:	4b04      	ldr	r3, [pc, #16]	@ (8007f7c <__swhatbuf_r+0x50>)
 8007f6c:	18c9      	adds	r1, r1, r3
 8007f6e:	424b      	negs	r3, r1
 8007f70:	4159      	adcs	r1, r3
 8007f72:	e7ea      	b.n	8007f4a <__swhatbuf_r+0x1e>
 8007f74:	2100      	movs	r1, #0
 8007f76:	2340      	movs	r3, #64	@ 0x40
 8007f78:	e7e9      	b.n	8007f4e <__swhatbuf_r+0x22>
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	ffffe000 	.word	0xffffe000

08007f80 <__smakebuf_r>:
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f82:	2602      	movs	r6, #2
 8007f84:	898b      	ldrh	r3, [r1, #12]
 8007f86:	0005      	movs	r5, r0
 8007f88:	000c      	movs	r4, r1
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	4233      	tst	r3, r6
 8007f8e:	d007      	beq.n	8007fa0 <__smakebuf_r+0x20>
 8007f90:	0023      	movs	r3, r4
 8007f92:	3347      	adds	r3, #71	@ 0x47
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	6123      	str	r3, [r4, #16]
 8007f98:	2301      	movs	r3, #1
 8007f9a:	6163      	str	r3, [r4, #20]
 8007f9c:	b005      	add	sp, #20
 8007f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fa0:	ab03      	add	r3, sp, #12
 8007fa2:	aa02      	add	r2, sp, #8
 8007fa4:	f7ff ffc2 	bl	8007f2c <__swhatbuf_r>
 8007fa8:	9f02      	ldr	r7, [sp, #8]
 8007faa:	9001      	str	r0, [sp, #4]
 8007fac:	0039      	movs	r1, r7
 8007fae:	0028      	movs	r0, r5
 8007fb0:	f7fe fe64 	bl	8006c7c <_malloc_r>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d108      	bne.n	8007fca <__smakebuf_r+0x4a>
 8007fb8:	220c      	movs	r2, #12
 8007fba:	5ea3      	ldrsh	r3, [r4, r2]
 8007fbc:	059a      	lsls	r2, r3, #22
 8007fbe:	d4ed      	bmi.n	8007f9c <__smakebuf_r+0x1c>
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	4393      	bics	r3, r2
 8007fc4:	431e      	orrs	r6, r3
 8007fc6:	81a6      	strh	r6, [r4, #12]
 8007fc8:	e7e2      	b.n	8007f90 <__smakebuf_r+0x10>
 8007fca:	2380      	movs	r3, #128	@ 0x80
 8007fcc:	89a2      	ldrh	r2, [r4, #12]
 8007fce:	6020      	str	r0, [r4, #0]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	81a3      	strh	r3, [r4, #12]
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	6120      	str	r0, [r4, #16]
 8007fd8:	6167      	str	r7, [r4, #20]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00c      	beq.n	8007ff8 <__smakebuf_r+0x78>
 8007fde:	0028      	movs	r0, r5
 8007fe0:	230e      	movs	r3, #14
 8007fe2:	5ee1      	ldrsh	r1, [r4, r3]
 8007fe4:	f000 f820 	bl	8008028 <_isatty_r>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d005      	beq.n	8007ff8 <__smakebuf_r+0x78>
 8007fec:	2303      	movs	r3, #3
 8007fee:	89a2      	ldrh	r2, [r4, #12]
 8007ff0:	439a      	bics	r2, r3
 8007ff2:	3b02      	subs	r3, #2
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	9a01      	ldr	r2, [sp, #4]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	81a3      	strh	r3, [r4, #12]
 8008000:	e7cc      	b.n	8007f9c <__smakebuf_r+0x1c>
	...

08008004 <_fstat_r>:
 8008004:	2300      	movs	r3, #0
 8008006:	b570      	push	{r4, r5, r6, lr}
 8008008:	4d06      	ldr	r5, [pc, #24]	@ (8008024 <_fstat_r+0x20>)
 800800a:	0004      	movs	r4, r0
 800800c:	0008      	movs	r0, r1
 800800e:	0011      	movs	r1, r2
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f7fb fb42 	bl	800369a <_fstat>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d103      	bne.n	8008022 <_fstat_r+0x1e>
 800801a:	682b      	ldr	r3, [r5, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d000      	beq.n	8008022 <_fstat_r+0x1e>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	20000818 	.word	0x20000818

08008028 <_isatty_r>:
 8008028:	2300      	movs	r3, #0
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	4d06      	ldr	r5, [pc, #24]	@ (8008048 <_isatty_r+0x20>)
 800802e:	0004      	movs	r4, r0
 8008030:	0008      	movs	r0, r1
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7fb fb3f 	bl	80036b6 <_isatty>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d103      	bne.n	8008044 <_isatty_r+0x1c>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d000      	beq.n	8008044 <_isatty_r+0x1c>
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	bd70      	pop	{r4, r5, r6, pc}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	20000818 	.word	0x20000818

0800804c <_init>:
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008052:	bc08      	pop	{r3}
 8008054:	469e      	mov	lr, r3
 8008056:	4770      	bx	lr

08008058 <_fini>:
 8008058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805e:	bc08      	pop	{r3}
 8008060:	469e      	mov	lr, r3
 8008062:	4770      	bx	lr
